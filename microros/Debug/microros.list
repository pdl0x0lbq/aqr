
microros.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014224  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c0c  080143b8  080143b8  000243b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08014fc4  08014fc4  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  08014fc4  08014fc4  00024fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08014fcc  08014fcc  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08014fcc  08014fcc  00024fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08014fd4  08014fd4  00024fd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  08014fd8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030110  2**0
                  CONTENTS
 10 .bss          00015aa4  20000110  20000110  00030110  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  20015bb4  20015bb4  00030110  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 13 .comment      00000076  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY
 14 .debug_info   00020a9c  00000000  00000000  000301b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000528e  00000000  00000000  00050c52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001b68  00000000  00000000  00055ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001509  00000000  00000000  00057a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029bd6  00000000  00000000  00058f51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00023876  00000000  00000000  00082b27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000eec78  00000000  00000000  000a639d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00007f34  00000000  00000000  00195018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004e  00000000  00000000  0019cf4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801439c 	.word	0x0801439c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	0801439c 	.word	0x0801439c

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_ldivmod>:
 80002a0:	b97b      	cbnz	r3, 80002c2 <__aeabi_ldivmod+0x22>
 80002a2:	b972      	cbnz	r2, 80002c2 <__aeabi_ldivmod+0x22>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bfbe      	ittt	lt
 80002a8:	2000      	movlt	r0, #0
 80002aa:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 80002ae:	e006      	blt.n	80002be <__aeabi_ldivmod+0x1e>
 80002b0:	bf08      	it	eq
 80002b2:	2800      	cmpeq	r0, #0
 80002b4:	bf1c      	itt	ne
 80002b6:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 80002ba:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002be:	f000 b9bb 	b.w	8000638 <__aeabi_idiv0>
 80002c2:	f1ad 0c08 	sub.w	ip, sp, #8
 80002c6:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002ca:	2900      	cmp	r1, #0
 80002cc:	db09      	blt.n	80002e2 <__aeabi_ldivmod+0x42>
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	db1a      	blt.n	8000308 <__aeabi_ldivmod+0x68>
 80002d2:	f000 f84d 	bl	8000370 <__udivmoddi4>
 80002d6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002de:	b004      	add	sp, #16
 80002e0:	4770      	bx	lr
 80002e2:	4240      	negs	r0, r0
 80002e4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	db1b      	blt.n	8000324 <__aeabi_ldivmod+0x84>
 80002ec:	f000 f840 	bl	8000370 <__udivmoddi4>
 80002f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002f8:	b004      	add	sp, #16
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	4252      	negs	r2, r2
 8000302:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000306:	4770      	bx	lr
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	f000 f82f 	bl	8000370 <__udivmoddi4>
 8000312:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000316:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031a:	b004      	add	sp, #16
 800031c:	4240      	negs	r0, r0
 800031e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000322:	4770      	bx	lr
 8000324:	4252      	negs	r2, r2
 8000326:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800032a:	f000 f821 	bl	8000370 <__udivmoddi4>
 800032e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000332:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000336:	b004      	add	sp, #16
 8000338:	4252      	negs	r2, r2
 800033a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800033e:	4770      	bx	lr

08000340 <__aeabi_uldivmod>:
 8000340:	b953      	cbnz	r3, 8000358 <__aeabi_uldivmod+0x18>
 8000342:	b94a      	cbnz	r2, 8000358 <__aeabi_uldivmod+0x18>
 8000344:	2900      	cmp	r1, #0
 8000346:	bf08      	it	eq
 8000348:	2800      	cmpeq	r0, #0
 800034a:	bf1c      	itt	ne
 800034c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000350:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000354:	f000 b970 	b.w	8000638 <__aeabi_idiv0>
 8000358:	f1ad 0c08 	sub.w	ip, sp, #8
 800035c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000360:	f000 f806 	bl	8000370 <__udivmoddi4>
 8000364:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000368:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800036c:	b004      	add	sp, #16
 800036e:	4770      	bx	lr

08000370 <__udivmoddi4>:
 8000370:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000374:	9e08      	ldr	r6, [sp, #32]
 8000376:	460d      	mov	r5, r1
 8000378:	4604      	mov	r4, r0
 800037a:	460f      	mov	r7, r1
 800037c:	2b00      	cmp	r3, #0
 800037e:	d14a      	bne.n	8000416 <__udivmoddi4+0xa6>
 8000380:	428a      	cmp	r2, r1
 8000382:	4694      	mov	ip, r2
 8000384:	d965      	bls.n	8000452 <__udivmoddi4+0xe2>
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	b143      	cbz	r3, 800039e <__udivmoddi4+0x2e>
 800038c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000390:	f1c3 0220 	rsb	r2, r3, #32
 8000394:	409f      	lsls	r7, r3
 8000396:	fa20 f202 	lsr.w	r2, r0, r2
 800039a:	4317      	orrs	r7, r2
 800039c:	409c      	lsls	r4, r3
 800039e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003a2:	fa1f f58c 	uxth.w	r5, ip
 80003a6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003aa:	0c22      	lsrs	r2, r4, #16
 80003ac:	fb0e 7711 	mls	r7, lr, r1, r7
 80003b0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80003b4:	fb01 f005 	mul.w	r0, r1, r5
 80003b8:	4290      	cmp	r0, r2
 80003ba:	d90a      	bls.n	80003d2 <__udivmoddi4+0x62>
 80003bc:	eb1c 0202 	adds.w	r2, ip, r2
 80003c0:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 80003c4:	f080 811c 	bcs.w	8000600 <__udivmoddi4+0x290>
 80003c8:	4290      	cmp	r0, r2
 80003ca:	f240 8119 	bls.w	8000600 <__udivmoddi4+0x290>
 80003ce:	3902      	subs	r1, #2
 80003d0:	4462      	add	r2, ip
 80003d2:	1a12      	subs	r2, r2, r0
 80003d4:	b2a4      	uxth	r4, r4
 80003d6:	fbb2 f0fe 	udiv	r0, r2, lr
 80003da:	fb0e 2210 	mls	r2, lr, r0, r2
 80003de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e2:	fb00 f505 	mul.w	r5, r0, r5
 80003e6:	42a5      	cmp	r5, r4
 80003e8:	d90a      	bls.n	8000400 <__udivmoddi4+0x90>
 80003ea:	eb1c 0404 	adds.w	r4, ip, r4
 80003ee:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80003f2:	f080 8107 	bcs.w	8000604 <__udivmoddi4+0x294>
 80003f6:	42a5      	cmp	r5, r4
 80003f8:	f240 8104 	bls.w	8000604 <__udivmoddi4+0x294>
 80003fc:	4464      	add	r4, ip
 80003fe:	3802      	subs	r0, #2
 8000400:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000404:	1b64      	subs	r4, r4, r5
 8000406:	2100      	movs	r1, #0
 8000408:	b11e      	cbz	r6, 8000412 <__udivmoddi4+0xa2>
 800040a:	40dc      	lsrs	r4, r3
 800040c:	2300      	movs	r3, #0
 800040e:	e9c6 4300 	strd	r4, r3, [r6]
 8000412:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000416:	428b      	cmp	r3, r1
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0xbc>
 800041a:	2e00      	cmp	r6, #0
 800041c:	f000 80ed 	beq.w	80005fa <__udivmoddi4+0x28a>
 8000420:	2100      	movs	r1, #0
 8000422:	e9c6 0500 	strd	r0, r5, [r6]
 8000426:	4608      	mov	r0, r1
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	fab3 f183 	clz	r1, r3
 8000430:	2900      	cmp	r1, #0
 8000432:	d149      	bne.n	80004c8 <__udivmoddi4+0x158>
 8000434:	42ab      	cmp	r3, r5
 8000436:	d302      	bcc.n	800043e <__udivmoddi4+0xce>
 8000438:	4282      	cmp	r2, r0
 800043a:	f200 80f8 	bhi.w	800062e <__udivmoddi4+0x2be>
 800043e:	1a84      	subs	r4, r0, r2
 8000440:	eb65 0203 	sbc.w	r2, r5, r3
 8000444:	2001      	movs	r0, #1
 8000446:	4617      	mov	r7, r2
 8000448:	2e00      	cmp	r6, #0
 800044a:	d0e2      	beq.n	8000412 <__udivmoddi4+0xa2>
 800044c:	e9c6 4700 	strd	r4, r7, [r6]
 8000450:	e7df      	b.n	8000412 <__udivmoddi4+0xa2>
 8000452:	b902      	cbnz	r2, 8000456 <__udivmoddi4+0xe6>
 8000454:	deff      	udf	#255	; 0xff
 8000456:	fab2 f382 	clz	r3, r2
 800045a:	2b00      	cmp	r3, #0
 800045c:	f040 8090 	bne.w	8000580 <__udivmoddi4+0x210>
 8000460:	1a8a      	subs	r2, r1, r2
 8000462:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000466:	fa1f fe8c 	uxth.w	lr, ip
 800046a:	2101      	movs	r1, #1
 800046c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000470:	fb07 2015 	mls	r0, r7, r5, r2
 8000474:	0c22      	lsrs	r2, r4, #16
 8000476:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800047a:	fb0e f005 	mul.w	r0, lr, r5
 800047e:	4290      	cmp	r0, r2
 8000480:	d908      	bls.n	8000494 <__udivmoddi4+0x124>
 8000482:	eb1c 0202 	adds.w	r2, ip, r2
 8000486:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800048a:	d202      	bcs.n	8000492 <__udivmoddi4+0x122>
 800048c:	4290      	cmp	r0, r2
 800048e:	f200 80cb 	bhi.w	8000628 <__udivmoddi4+0x2b8>
 8000492:	4645      	mov	r5, r8
 8000494:	1a12      	subs	r2, r2, r0
 8000496:	b2a4      	uxth	r4, r4
 8000498:	fbb2 f0f7 	udiv	r0, r2, r7
 800049c:	fb07 2210 	mls	r2, r7, r0, r2
 80004a0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004a4:	fb0e fe00 	mul.w	lr, lr, r0
 80004a8:	45a6      	cmp	lr, r4
 80004aa:	d908      	bls.n	80004be <__udivmoddi4+0x14e>
 80004ac:	eb1c 0404 	adds.w	r4, ip, r4
 80004b0:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 80004b4:	d202      	bcs.n	80004bc <__udivmoddi4+0x14c>
 80004b6:	45a6      	cmp	lr, r4
 80004b8:	f200 80bb 	bhi.w	8000632 <__udivmoddi4+0x2c2>
 80004bc:	4610      	mov	r0, r2
 80004be:	eba4 040e 	sub.w	r4, r4, lr
 80004c2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80004c6:	e79f      	b.n	8000408 <__udivmoddi4+0x98>
 80004c8:	f1c1 0720 	rsb	r7, r1, #32
 80004cc:	408b      	lsls	r3, r1
 80004ce:	fa22 fc07 	lsr.w	ip, r2, r7
 80004d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80004d6:	fa05 f401 	lsl.w	r4, r5, r1
 80004da:	fa20 f307 	lsr.w	r3, r0, r7
 80004de:	40fd      	lsrs	r5, r7
 80004e0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80004e4:	4323      	orrs	r3, r4
 80004e6:	fbb5 f8f9 	udiv	r8, r5, r9
 80004ea:	fa1f fe8c 	uxth.w	lr, ip
 80004ee:	fb09 5518 	mls	r5, r9, r8, r5
 80004f2:	0c1c      	lsrs	r4, r3, #16
 80004f4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004f8:	fb08 f50e 	mul.w	r5, r8, lr
 80004fc:	42a5      	cmp	r5, r4
 80004fe:	fa02 f201 	lsl.w	r2, r2, r1
 8000502:	fa00 f001 	lsl.w	r0, r0, r1
 8000506:	d90b      	bls.n	8000520 <__udivmoddi4+0x1b0>
 8000508:	eb1c 0404 	adds.w	r4, ip, r4
 800050c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000510:	f080 8088 	bcs.w	8000624 <__udivmoddi4+0x2b4>
 8000514:	42a5      	cmp	r5, r4
 8000516:	f240 8085 	bls.w	8000624 <__udivmoddi4+0x2b4>
 800051a:	f1a8 0802 	sub.w	r8, r8, #2
 800051e:	4464      	add	r4, ip
 8000520:	1b64      	subs	r4, r4, r5
 8000522:	b29d      	uxth	r5, r3
 8000524:	fbb4 f3f9 	udiv	r3, r4, r9
 8000528:	fb09 4413 	mls	r4, r9, r3, r4
 800052c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000530:	fb03 fe0e 	mul.w	lr, r3, lr
 8000534:	45a6      	cmp	lr, r4
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x1da>
 8000538:	eb1c 0404 	adds.w	r4, ip, r4
 800053c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000540:	d26c      	bcs.n	800061c <__udivmoddi4+0x2ac>
 8000542:	45a6      	cmp	lr, r4
 8000544:	d96a      	bls.n	800061c <__udivmoddi4+0x2ac>
 8000546:	3b02      	subs	r3, #2
 8000548:	4464      	add	r4, ip
 800054a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800054e:	fba3 9502 	umull	r9, r5, r3, r2
 8000552:	eba4 040e 	sub.w	r4, r4, lr
 8000556:	42ac      	cmp	r4, r5
 8000558:	46c8      	mov	r8, r9
 800055a:	46ae      	mov	lr, r5
 800055c:	d356      	bcc.n	800060c <__udivmoddi4+0x29c>
 800055e:	d053      	beq.n	8000608 <__udivmoddi4+0x298>
 8000560:	b156      	cbz	r6, 8000578 <__udivmoddi4+0x208>
 8000562:	ebb0 0208 	subs.w	r2, r0, r8
 8000566:	eb64 040e 	sbc.w	r4, r4, lr
 800056a:	fa04 f707 	lsl.w	r7, r4, r7
 800056e:	40ca      	lsrs	r2, r1
 8000570:	40cc      	lsrs	r4, r1
 8000572:	4317      	orrs	r7, r2
 8000574:	e9c6 7400 	strd	r7, r4, [r6]
 8000578:	4618      	mov	r0, r3
 800057a:	2100      	movs	r1, #0
 800057c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000580:	f1c3 0120 	rsb	r1, r3, #32
 8000584:	fa02 fc03 	lsl.w	ip, r2, r3
 8000588:	fa20 f201 	lsr.w	r2, r0, r1
 800058c:	fa25 f101 	lsr.w	r1, r5, r1
 8000590:	409d      	lsls	r5, r3
 8000592:	432a      	orrs	r2, r5
 8000594:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000598:	fa1f fe8c 	uxth.w	lr, ip
 800059c:	fbb1 f0f7 	udiv	r0, r1, r7
 80005a0:	fb07 1510 	mls	r5, r7, r0, r1
 80005a4:	0c11      	lsrs	r1, r2, #16
 80005a6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005aa:	fb00 f50e 	mul.w	r5, r0, lr
 80005ae:	428d      	cmp	r5, r1
 80005b0:	fa04 f403 	lsl.w	r4, r4, r3
 80005b4:	d908      	bls.n	80005c8 <__udivmoddi4+0x258>
 80005b6:	eb1c 0101 	adds.w	r1, ip, r1
 80005ba:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80005be:	d22f      	bcs.n	8000620 <__udivmoddi4+0x2b0>
 80005c0:	428d      	cmp	r5, r1
 80005c2:	d92d      	bls.n	8000620 <__udivmoddi4+0x2b0>
 80005c4:	3802      	subs	r0, #2
 80005c6:	4461      	add	r1, ip
 80005c8:	1b49      	subs	r1, r1, r5
 80005ca:	b292      	uxth	r2, r2
 80005cc:	fbb1 f5f7 	udiv	r5, r1, r7
 80005d0:	fb07 1115 	mls	r1, r7, r5, r1
 80005d4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005d8:	fb05 f10e 	mul.w	r1, r5, lr
 80005dc:	4291      	cmp	r1, r2
 80005de:	d908      	bls.n	80005f2 <__udivmoddi4+0x282>
 80005e0:	eb1c 0202 	adds.w	r2, ip, r2
 80005e4:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80005e8:	d216      	bcs.n	8000618 <__udivmoddi4+0x2a8>
 80005ea:	4291      	cmp	r1, r2
 80005ec:	d914      	bls.n	8000618 <__udivmoddi4+0x2a8>
 80005ee:	3d02      	subs	r5, #2
 80005f0:	4462      	add	r2, ip
 80005f2:	1a52      	subs	r2, r2, r1
 80005f4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005f8:	e738      	b.n	800046c <__udivmoddi4+0xfc>
 80005fa:	4631      	mov	r1, r6
 80005fc:	4630      	mov	r0, r6
 80005fe:	e708      	b.n	8000412 <__udivmoddi4+0xa2>
 8000600:	4639      	mov	r1, r7
 8000602:	e6e6      	b.n	80003d2 <__udivmoddi4+0x62>
 8000604:	4610      	mov	r0, r2
 8000606:	e6fb      	b.n	8000400 <__udivmoddi4+0x90>
 8000608:	4548      	cmp	r0, r9
 800060a:	d2a9      	bcs.n	8000560 <__udivmoddi4+0x1f0>
 800060c:	ebb9 0802 	subs.w	r8, r9, r2
 8000610:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000614:	3b01      	subs	r3, #1
 8000616:	e7a3      	b.n	8000560 <__udivmoddi4+0x1f0>
 8000618:	4645      	mov	r5, r8
 800061a:	e7ea      	b.n	80005f2 <__udivmoddi4+0x282>
 800061c:	462b      	mov	r3, r5
 800061e:	e794      	b.n	800054a <__udivmoddi4+0x1da>
 8000620:	4640      	mov	r0, r8
 8000622:	e7d1      	b.n	80005c8 <__udivmoddi4+0x258>
 8000624:	46d0      	mov	r8, sl
 8000626:	e77b      	b.n	8000520 <__udivmoddi4+0x1b0>
 8000628:	3d02      	subs	r5, #2
 800062a:	4462      	add	r2, ip
 800062c:	e732      	b.n	8000494 <__udivmoddi4+0x124>
 800062e:	4608      	mov	r0, r1
 8000630:	e70a      	b.n	8000448 <__udivmoddi4+0xd8>
 8000632:	4464      	add	r4, ip
 8000634:	3802      	subs	r0, #2
 8000636:	e742      	b.n	80004be <__udivmoddi4+0x14e>

08000638 <__aeabi_idiv0>:
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop

0800063c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b084      	sub	sp, #16
 8000640:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000642:	463b      	mov	r3, r7
 8000644:	2200      	movs	r2, #0
 8000646:	601a      	str	r2, [r3, #0]
 8000648:	605a      	str	r2, [r3, #4]
 800064a:	609a      	str	r2, [r3, #8]
 800064c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800064e:	4b21      	ldr	r3, [pc, #132]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000650:	4a21      	ldr	r2, [pc, #132]	; (80006d8 <MX_ADC1_Init+0x9c>)
 8000652:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000654:	4b1f      	ldr	r3, [pc, #124]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000656:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800065a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800065c:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000662:	4b1c      	ldr	r3, [pc, #112]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000668:	4b1a      	ldr	r3, [pc, #104]	; (80006d4 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800066e:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000676:	4b17      	ldr	r3, [pc, #92]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <MX_ADC1_Init+0x98>)
 800067e:	4a17      	ldr	r2, [pc, #92]	; (80006dc <MX_ADC1_Init+0xa0>)
 8000680:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000682:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000688:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <MX_ADC1_Init+0x98>)
 800068a:	2201      	movs	r2, #1
 800068c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800068e:	4b11      	ldr	r3, [pc, #68]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000690:	2200      	movs	r2, #0
 8000692:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000696:	4b0f      	ldr	r3, [pc, #60]	; (80006d4 <MX_ADC1_Init+0x98>)
 8000698:	2201      	movs	r2, #1
 800069a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800069c:	480d      	ldr	r0, [pc, #52]	; (80006d4 <MX_ADC1_Init+0x98>)
 800069e:	f001 fd67 	bl	8002170 <HAL_ADC_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80006a8:	f000 fb40 	bl	8000d2c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80006ac:	230a      	movs	r3, #10
 80006ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80006b0:	2301      	movs	r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006b4:	2300      	movs	r3, #0
 80006b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b8:	463b      	mov	r3, r7
 80006ba:	4619      	mov	r1, r3
 80006bc:	4805      	ldr	r0, [pc, #20]	; (80006d4 <MX_ADC1_Init+0x98>)
 80006be:	f001 fd9b 	bl	80021f8 <HAL_ADC_ConfigChannel>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d001      	beq.n	80006cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80006c8:	f000 fb30 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	2000012c 	.word	0x2000012c
 80006d8:	40012000 	.word	0x40012000
 80006dc:	0f000001 	.word	0x0f000001

080006e0 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b08a      	sub	sp, #40	; 0x28
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e8:	f107 0314 	add.w	r3, r7, #20
 80006ec:	2200      	movs	r2, #0
 80006ee:	601a      	str	r2, [r3, #0]
 80006f0:	605a      	str	r2, [r3, #4]
 80006f2:	609a      	str	r2, [r3, #8]
 80006f4:	60da      	str	r2, [r3, #12]
 80006f6:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a17      	ldr	r2, [pc, #92]	; (800075c <HAL_ADC_MspInit+0x7c>)
 80006fe:	4293      	cmp	r3, r2
 8000700:	d127      	bne.n	8000752 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
 8000706:	4b16      	ldr	r3, [pc, #88]	; (8000760 <HAL_ADC_MspInit+0x80>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a15      	ldr	r2, [pc, #84]	; (8000760 <HAL_ADC_MspInit+0x80>)
 800070c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <HAL_ADC_MspInit+0x80>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800071a:	613b      	str	r3, [r7, #16]
 800071c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	60fb      	str	r3, [r7, #12]
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <HAL_ADC_MspInit+0x80>)
 8000724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000726:	4a0e      	ldr	r2, [pc, #56]	; (8000760 <HAL_ADC_MspInit+0x80>)
 8000728:	f043 0304 	orr.w	r3, r3, #4
 800072c:	6313      	str	r3, [r2, #48]	; 0x30
 800072e:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <HAL_ADC_MspInit+0x80>)
 8000730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000732:	f003 0304 	and.w	r3, r3, #4
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800073a:	2303      	movs	r3, #3
 800073c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800073e:	2303      	movs	r3, #3
 8000740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000746:	f107 0314 	add.w	r3, r7, #20
 800074a:	4619      	mov	r1, r3
 800074c:	4805      	ldr	r0, [pc, #20]	; (8000764 <HAL_ADC_MspInit+0x84>)
 800074e:	f003 fdc3 	bl	80042d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000752:	bf00      	nop
 8000754:	3728      	adds	r7, #40	; 0x28
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40012000 	.word	0x40012000
 8000760:	40023800 	.word	0x40023800
 8000764:	40020800 	.word	0x40020800

08000768 <crc8>:
// Created by sw on 24-1-15.
//
#include "ddsm115.h"
#include "cmsis_os.h"
#include "usart.h"
unsigned char crc8(unsigned char *data, int len) {
 8000768:	b480      	push	{r7}
 800076a:	b087      	sub	sp, #28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	6039      	str	r1, [r7, #0]
    unsigned char crc = 0x00;
 8000772:	2300      	movs	r3, #0
 8000774:	75fb      	strb	r3, [r7, #23]
    for (int i = 0; i < len; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	e022      	b.n	80007c2 <crc8+0x5a>
        crc ^= data[i];
 800077c:	693b      	ldr	r3, [r7, #16]
 800077e:	687a      	ldr	r2, [r7, #4]
 8000780:	4413      	add	r3, r2
 8000782:	781a      	ldrb	r2, [r3, #0]
 8000784:	7dfb      	ldrb	r3, [r7, #23]
 8000786:	4053      	eors	r3, r2
 8000788:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; j++) {
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	e012      	b.n	80007b6 <crc8+0x4e>
            if (crc & 0x01) {
 8000790:	7dfb      	ldrb	r3, [r7, #23]
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	2b00      	cmp	r3, #0
 8000798:	d007      	beq.n	80007aa <crc8+0x42>
                crc = (crc >> 1) ^ 0x8C;
 800079a:	7dfb      	ldrb	r3, [r7, #23]
 800079c:	085b      	lsrs	r3, r3, #1
 800079e:	b2db      	uxtb	r3, r3
 80007a0:	f083 0373 	eor.w	r3, r3, #115	; 0x73
 80007a4:	43db      	mvns	r3, r3
 80007a6:	75fb      	strb	r3, [r7, #23]
 80007a8:	e002      	b.n	80007b0 <crc8+0x48>
            } else {
                crc >>= 1;
 80007aa:	7dfb      	ldrb	r3, [r7, #23]
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	75fb      	strb	r3, [r7, #23]
        for (int j = 0; j < 8; j++) {
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	3301      	adds	r3, #1
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
 80007b8:	2b07      	cmp	r3, #7
 80007ba:	dde9      	ble.n	8000790 <crc8+0x28>
    for (int i = 0; i < len; i++) {
 80007bc:	693b      	ldr	r3, [r7, #16]
 80007be:	3301      	adds	r3, #1
 80007c0:	613b      	str	r3, [r7, #16]
 80007c2:	693a      	ldr	r2, [r7, #16]
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	429a      	cmp	r2, r3
 80007c8:	dbd8      	blt.n	800077c <crc8+0x14>
            }
        }
    }
    return crc;
 80007ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80007cc:	4618      	mov	r0, r3
 80007ce:	371c      	adds	r7, #28
 80007d0:	46bd      	mov	sp, r7
 80007d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d6:	4770      	bx	lr

080007d8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b14      	ldr	r3, [pc, #80]	; (8000834 <MX_DMA_Init+0x5c>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e6:	4a13      	ldr	r2, [pc, #76]	; (8000834 <MX_DMA_Init+0x5c>)
 80007e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80007ec:	6313      	str	r3, [r2, #48]	; 0x30
 80007ee:	4b11      	ldr	r3, [pc, #68]	; (8000834 <MX_DMA_Init+0x5c>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80007fa:	2200      	movs	r2, #0
 80007fc:	2105      	movs	r1, #5
 80007fe:	200d      	movs	r0, #13
 8000800:	f001 ffd0 	bl	80027a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000804:	200d      	movs	r0, #13
 8000806:	f001 ffe9 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800080a:	2200      	movs	r2, #0
 800080c:	2105      	movs	r1, #5
 800080e:	2010      	movs	r0, #16
 8000810:	f001 ffc8 	bl	80027a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000814:	2010      	movs	r0, #16
 8000816:	f001 ffe1 	bl	80027dc <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800081a:	2200      	movs	r2, #0
 800081c:	2105      	movs	r1, #5
 800081e:	2011      	movs	r0, #17
 8000820:	f001 ffc0 	bl	80027a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000824:	2011      	movs	r0, #17
 8000826:	f001 ffd9 	bl	80027dc <HAL_NVIC_EnableIRQ>

}
 800082a:	bf00      	nop
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800

08000838 <RS485>:

void * microros_allocate(size_t size, void * state);
void microros_deallocate(void * pointer, void * state);
void * microros_reallocate(void * pointer, size_t size, void * state);
void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state);
void RS485(void *argument){
 8000838:	b580      	push	{r7, lr}
 800083a:	b08a      	sub	sp, #40	; 0x28
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
    ddsm115.wheelspeed=-50;
 8000840:	4b23      	ldr	r3, [pc, #140]	; (80008d0 <RS485+0x98>)
 8000842:	f64f 72ce 	movw	r2, #65486	; 0xffce
 8000846:	801a      	strh	r2, [r3, #0]
    int8_t Data[] = {0x01, 0x64, serialData.speedHighByte, serialData.speedLowByte, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000848:	2301      	movs	r3, #1
 800084a:	763b      	strb	r3, [r7, #24]
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	767b      	strb	r3, [r7, #25]
 8000850:	4b20      	ldr	r3, [pc, #128]	; (80008d4 <RS485+0x9c>)
 8000852:	791b      	ldrb	r3, [r3, #4]
 8000854:	b2db      	uxtb	r3, r3
 8000856:	b25b      	sxtb	r3, r3
 8000858:	76bb      	strb	r3, [r7, #26]
 800085a:	4b1e      	ldr	r3, [pc, #120]	; (80008d4 <RS485+0x9c>)
 800085c:	795b      	ldrb	r3, [r3, #5]
 800085e:	b2db      	uxtb	r3, r3
 8000860:	b25b      	sxtb	r3, r3
 8000862:	76fb      	strb	r3, [r7, #27]
 8000864:	2300      	movs	r3, #0
 8000866:	773b      	strb	r3, [r7, #28]
 8000868:	2300      	movs	r3, #0
 800086a:	777b      	strb	r3, [r7, #29]
 800086c:	2300      	movs	r3, #0
 800086e:	77bb      	strb	r3, [r7, #30]
 8000870:	2300      	movs	r3, #0
 8000872:	77fb      	strb	r3, [r7, #31]
 8000874:	2300      	movs	r3, #0
 8000876:	f887 3020 	strb.w	r3, [r7, #32]
    size_t data_size=sizeof(Data) / sizeof(Data[0]);
 800087a:	2309      	movs	r3, #9
 800087c:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t crc_result = crc8(Data, data_size);
 800087e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000880:	f107 0318 	add.w	r3, r7, #24
 8000884:	4611      	mov	r1, r2
 8000886:	4618      	mov	r0, r3
 8000888:	f7ff ff6e 	bl	8000768 <crc8>
 800088c:	4603      	mov	r3, r0
 800088e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    int8_t sendData[] = {0x01, 0x64, serialData.speedHighByte, serialData.speedLowByte,0x00, 0x00, 0x00, 0x00, 0x00, crc_result};
 8000892:	2301      	movs	r3, #1
 8000894:	733b      	strb	r3, [r7, #12]
 8000896:	2364      	movs	r3, #100	; 0x64
 8000898:	737b      	strb	r3, [r7, #13]
 800089a:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <RS485+0x9c>)
 800089c:	791b      	ldrb	r3, [r3, #4]
 800089e:	b2db      	uxtb	r3, r3
 80008a0:	b25b      	sxtb	r3, r3
 80008a2:	73bb      	strb	r3, [r7, #14]
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <RS485+0x9c>)
 80008a6:	795b      	ldrb	r3, [r3, #5]
 80008a8:	b2db      	uxtb	r3, r3
 80008aa:	b25b      	sxtb	r3, r3
 80008ac:	73fb      	strb	r3, [r7, #15]
 80008ae:	2300      	movs	r3, #0
 80008b0:	743b      	strb	r3, [r7, #16]
 80008b2:	2300      	movs	r3, #0
 80008b4:	747b      	strb	r3, [r7, #17]
 80008b6:	2300      	movs	r3, #0
 80008b8:	74bb      	strb	r3, [r7, #18]
 80008ba:	2300      	movs	r3, #0
 80008bc:	74fb      	strb	r3, [r7, #19]
 80008be:	2300      	movs	r3, #0
 80008c0:	753b      	strb	r3, [r7, #20]
 80008c2:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80008c6:	757b      	strb	r3, [r7, #21]
    while (1){

       //HAL_UART_Transmit(&huart4, sendData, sizeof(sendData), HAL_MAX_DELAY);
        osDelay(10);
 80008c8:	200a      	movs	r0, #10
 80008ca:	f006 fef1 	bl	80076b0 <osDelay>
 80008ce:	e7fb      	b.n	80008c8 <RS485+0x90>
 80008d0:	200001e0 	.word	0x200001e0
 80008d4:	20000174 	.word	0x20000174

080008d8 <Enable_Uart>:
{
    HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_5);
}
//使能DMA
void Enable_Uart(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b084      	sub	sp, #16
 80008dc:	af02      	add	r7, sp, #8
    uint32_t u32wk0;

    SET_BIT(huart4.Instance->CR3,USART_CR3_DMAR);
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <Enable_Uart+0x48>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	695a      	ldr	r2, [r3, #20]
 80008e4:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <Enable_Uart+0x48>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80008ec:	615a      	str	r2, [r3, #20]
    HAL_DMAEx_MultiBufferStart_IT(&hdma_usart4_rx,
                                  (uint32_t)(&huart4.Instance->DR),
 80008ee:	4b0c      	ldr	r3, [pc, #48]	; (8000920 <Enable_Uart+0x48>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	3304      	adds	r3, #4
    HAL_DMAEx_MultiBufferStart_IT(&hdma_usart4_rx,
 80008f4:	4618      	mov	r0, r3
 80008f6:	4a0b      	ldr	r2, [pc, #44]	; (8000924 <Enable_Uart+0x4c>)
 80008f8:	490b      	ldr	r1, [pc, #44]	; (8000928 <Enable_Uart+0x50>)
 80008fa:	230a      	movs	r3, #10
 80008fc:	9300      	str	r3, [sp, #0]
 80008fe:	460b      	mov	r3, r1
 8000900:	4601      	mov	r1, r0
 8000902:	480a      	ldr	r0, [pc, #40]	; (800092c <Enable_Uart+0x54>)
 8000904:	f002 fb7a 	bl	8002ffc <HAL_DMAEx_MultiBufferStart_IT>
                                  (uint32_t)&uart_buf[0].data[0],
                                  (uint32_t)&uart_buf[1].data[0],
                                  UART_BUFF_SIZE);

    //这里是解决DMA在启动时，如果接收到大量数据会出现死机的问题
    u32wk0 = huart4.Instance->SR;
 8000908:	4b05      	ldr	r3, [pc, #20]	; (8000920 <Enable_Uart+0x48>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	607b      	str	r3, [r7, #4]
    u32wk0 = huart4.Instance->DR;
 8000910:	4b03      	ldr	r3, [pc, #12]	; (8000920 <Enable_Uart+0x48>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	607b      	str	r3, [r7, #4]
    UNUSED(u32wk0);
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20000254 	.word	0x20000254
 8000924:	200001ea 	.word	0x200001ea
 8000928:	200001f6 	.word	0x200001f6
 800092c:	20000180 	.word	0x20000180

08000930 <ddsm115_task>:
void ddsm115_task(void *argument)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b084      	sub	sp, #16
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]

    BaseType_t ret = pdFALSE;
 8000938:	2300      	movs	r3, #0
 800093a:	60fb      	str	r3, [r7, #12]
    /* Infinite loop */
    while(1)
    {
        ret = xQueueReceive(queue_mes,&ddsm115_dma_buffer,portMAX_DELAY);
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <ddsm115_task+0x34>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000944:	4908      	ldr	r1, [pc, #32]	; (8000968 <ddsm115_task+0x38>)
 8000946:	4618      	mov	r0, r3
 8000948:	f007 fa8e 	bl	8007e68 <xQueueReceive>
 800094c:	60f8      	str	r0, [r7, #12]
        if(ret == pdTRUE)
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d1f3      	bne.n	800093c <ddsm115_task+0xc>
        {
            HAL_UART_Transmit(&huart4,ddsm115_dma_buffer,10,100);
 8000954:	2364      	movs	r3, #100	; 0x64
 8000956:	220a      	movs	r2, #10
 8000958:	4903      	ldr	r1, [pc, #12]	; (8000968 <ddsm115_task+0x38>)
 800095a:	4804      	ldr	r0, [pc, #16]	; (800096c <ddsm115_task+0x3c>)
 800095c:	f004 ff6d 	bl	800583a <HAL_UART_Transmit>
        ret = xQueueReceive(queue_mes,&ddsm115_dma_buffer,portMAX_DELAY);
 8000960:	e7ec      	b.n	800093c <ddsm115_task+0xc>
 8000962:	bf00      	nop
 8000964:	200001e4 	.word	0x200001e4
 8000968:	200089f4 	.word	0x200089f4
 800096c:	20000254 	.word	0x20000254

08000970 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN Init */
    queue_mes = xQueueCreate(10,sizeof(s_usart_data));
 8000976:	2200      	movs	r2, #0
 8000978:	210c      	movs	r1, #12
 800097a:	200a      	movs	r0, #10
 800097c:	f007 f87c 	bl	8007a78 <xQueueGenericCreate>
 8000980:	4603      	mov	r3, r0
 8000982:	4a12      	ldr	r2, [pc, #72]	; (80009cc <MX_FREERTOS_Init+0x5c>)
 8000984:	6013      	str	r3, [r2, #0]
    Enable_Uart();
 8000986:	f7ff ffa7 	bl	80008d8 <Enable_Uart>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800098a:	4a11      	ldr	r2, [pc, #68]	; (80009d0 <MX_FREERTOS_Init+0x60>)
 800098c:	2100      	movs	r1, #0
 800098e:	4811      	ldr	r0, [pc, #68]	; (80009d4 <MX_FREERTOS_Init+0x64>)
 8000990:	f006 fdfc 	bl	800758c <osThreadNew>
 8000994:	4603      	mov	r3, r0
 8000996:	4a10      	ldr	r2, [pc, #64]	; (80009d8 <MX_FREERTOS_Init+0x68>)
 8000998:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  xTaskCreate(ddsm115_task, "Task1", 4*configMINIMAL_STACK_SIZE, NULL, osPriorityNormal, NULL);
 800099a:	2300      	movs	r3, #0
 800099c:	9301      	str	r3, [sp, #4]
 800099e:	2318      	movs	r3, #24
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	2300      	movs	r3, #0
 80009a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009a8:	490c      	ldr	r1, [pc, #48]	; (80009dc <MX_FREERTOS_Init+0x6c>)
 80009aa:	480d      	ldr	r0, [pc, #52]	; (80009e0 <MX_FREERTOS_Init+0x70>)
 80009ac:	f007 fd07 	bl	80083be <xTaskCreate>
  xTaskCreate(RS485,"rs485",128*4,NULL,osPriorityNormal,NULL);
 80009b0:	2300      	movs	r3, #0
 80009b2:	9301      	str	r3, [sp, #4]
 80009b4:	2318      	movs	r3, #24
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2300      	movs	r3, #0
 80009ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80009be:	4909      	ldr	r1, [pc, #36]	; (80009e4 <MX_FREERTOS_Init+0x74>)
 80009c0:	4809      	ldr	r0, [pc, #36]	; (80009e8 <MX_FREERTOS_Init+0x78>)
 80009c2:	f007 fcfc 	bl	80083be <xTaskCreate>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	200001e4 	.word	0x200001e4
 80009d0:	0801446c 	.word	0x0801446c
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	20000200 	.word	0x20000200
 80009dc:	080143d0 	.word	0x080143d0
 80009e0:	08000931 	.word	0x08000931
 80009e4:	080143d8 	.word	0x080143d8
 80009e8:	08000839 	.word	0x08000839

080009ec <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80009ec:	b5b0      	push	{r4, r5, r7, lr}
 80009ee:	b0a6      	sub	sp, #152	; 0x98
 80009f0:	af02      	add	r7, sp, #8
 80009f2:	61f8      	str	r0, [r7, #28]
  /* USER CODE BEGIN StartDefaultTask */
	// micro-ROS configuration

	      rmw_uros_set_custom_transport(
 80009f4:	4b34      	ldr	r3, [pc, #208]	; (8000ac8 <StartDefaultTask+0xdc>)
 80009f6:	9301      	str	r3, [sp, #4]
 80009f8:	4b34      	ldr	r3, [pc, #208]	; (8000acc <StartDefaultTask+0xe0>)
 80009fa:	9300      	str	r3, [sp, #0]
 80009fc:	4b34      	ldr	r3, [pc, #208]	; (8000ad0 <StartDefaultTask+0xe4>)
 80009fe:	4a35      	ldr	r2, [pc, #212]	; (8000ad4 <StartDefaultTask+0xe8>)
 8000a00:	4935      	ldr	r1, [pc, #212]	; (8000ad8 <StartDefaultTask+0xec>)
 8000a02:	2001      	movs	r0, #1
 8000a04:	f009 fd58 	bl	800a4b8 <rmw_uros_set_custom_transport>
	        cubemx_transport_open,
	        cubemx_transport_close,
	        cubemx_transport_write,
	        cubemx_transport_read);

	      rcl_allocator_t freeRTOS_allocator = rcutils_get_zero_initialized_allocator();
 8000a08:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f009 fcd5 	bl	800a3bc <rcutils_get_zero_initialized_allocator>
	      freeRTOS_allocator.allocate = microros_allocate;
 8000a12:	4b32      	ldr	r3, [pc, #200]	; (8000adc <StartDefaultTask+0xf0>)
 8000a14:	67bb      	str	r3, [r7, #120]	; 0x78
	      freeRTOS_allocator.deallocate = microros_deallocate;
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <StartDefaultTask+0xf4>)
 8000a18:	67fb      	str	r3, [r7, #124]	; 0x7c
	      freeRTOS_allocator.reallocate = microros_reallocate;
 8000a1a:	4b32      	ldr	r3, [pc, #200]	; (8000ae4 <StartDefaultTask+0xf8>)
 8000a1c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	      freeRTOS_allocator.zero_allocate =  microros_zero_allocate;
 8000a20:	4b31      	ldr	r3, [pc, #196]	; (8000ae8 <StartDefaultTask+0xfc>)
 8000a22:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

	      if (!rcutils_set_default_allocator(&freeRTOS_allocator)) {
 8000a26:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f009 fcd4 	bl	800a3d8 <rcutils_set_default_allocator>
 8000a30:	4603      	mov	r3, r0
 8000a32:	f083 0301 	eor.w	r3, r3, #1
 8000a36:	b2db      	uxtb	r3, r3
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d004      	beq.n	8000a46 <StartDefaultTask+0x5a>
	          printf("Error on default allocators (line %d)\n", __LINE__);
 8000a3c:	f44f 718f 	mov.w	r1, #286	; 0x11e
 8000a40:	482a      	ldr	r0, [pc, #168]	; (8000aec <StartDefaultTask+0x100>)
 8000a42:	f012 fc29 	bl	8013298 <iprintf>
	      std_msgs__msg__Int32 msg;
	      rclc_support_t support;
	      rcl_allocator_t allocator;
	      rcl_node_t node;

	      allocator = rcl_get_default_allocator();
 8000a46:	463b      	mov	r3, r7
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f009 fce3 	bl	800a414 <rcutils_get_default_allocator>
 8000a4e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 8000a52:	463d      	mov	r5, r7
 8000a54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a58:	682b      	ldr	r3, [r5, #0]
 8000a5a:	6023      	str	r3, [r4, #0]

	      //create init_options
	      rclc_support_init(&support, 0, NULL, &allocator);
 8000a5c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a60:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8000a64:	2200      	movs	r2, #0
 8000a66:	2100      	movs	r1, #0
 8000a68:	f009 fbe6 	bl	800a238 <rclc_support_init>

	      // create node
	      rclc_node_init_default(&node, "cubemx_node", "", &support);
 8000a6c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000a70:	f107 0020 	add.w	r0, r7, #32
 8000a74:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <StartDefaultTask+0x104>)
 8000a76:	491f      	ldr	r1, [pc, #124]	; (8000af4 <StartDefaultTask+0x108>)
 8000a78:	f009 fc28 	bl	800a2cc <rclc_node_init_default>

	      // create publisher
	      rclc_publisher_init_default(
 8000a7c:	f00a f9a2 	bl	800adc4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>
 8000a80:	4602      	mov	r2, r0
 8000a82:	f107 0120 	add.w	r1, r7, #32
 8000a86:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8000a8a:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <StartDefaultTask+0x10c>)
 8000a8c:	f009 fc5a 	bl	800a344 <rclc_publisher_init_default>
	        &publisher,
	        &node,
	        ROSIDL_GET_MSG_TYPE_SUPPORT(std_msgs, msg, Int32),
	        "cubemx_publisher");

	      msg.data = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	673b      	str	r3, [r7, #112]	; 0x70

	      for(;;)
	      {
	        rcl_ret_t ret = rcl_publish(&publisher, &msg, NULL);
 8000a94:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8000a98:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f009 fba6 	bl	800a1f0 <rcl_publish>
 8000aa4:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
	        if (ret != RCL_RET_OK)
 8000aa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8000aac:	2b00      	cmp	r3, #0
 8000aae:	d004      	beq.n	8000aba <StartDefaultTask+0xce>
	        {
	          printf("Error publishing (line %d)\n", __LINE__);
 8000ab0:	f240 113f 	movw	r1, #319	; 0x13f
 8000ab4:	4811      	ldr	r0, [pc, #68]	; (8000afc <StartDefaultTask+0x110>)
 8000ab6:	f012 fbef 	bl	8013298 <iprintf>
	        }

	        msg.data++;
 8000aba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8000abc:	3301      	adds	r3, #1
 8000abe:	673b      	str	r3, [r7, #112]	; 0x70
	        osDelay(10);
 8000ac0:	200a      	movs	r0, #10
 8000ac2:	f006 fdf5 	bl	80076b0 <osDelay>
	      {
 8000ac6:	e7e5      	b.n	8000a94 <StartDefaultTask+0xa8>
 8000ac8:	08001fb5 	.word	0x08001fb5
 8000acc:	08001f4d 	.word	0x08001f4d
 8000ad0:	08001f2d 	.word	0x08001f2d
 8000ad4:	08001f01 	.word	0x08001f01
 8000ad8:	20000320 	.word	0x20000320
 8000adc:	08001c39 	.word	0x08001c39
 8000ae0:	08001c7d 	.word	0x08001c7d
 8000ae4:	08001cb5 	.word	0x08001cb5
 8000ae8:	08001d21 	.word	0x08001d21
 8000aec:	080143e0 	.word	0x080143e0
 8000af0:	08014408 	.word	0x08014408
 8000af4:	0801440c 	.word	0x0801440c
 8000af8:	08014418 	.word	0x08014418
 8000afc:	0801442c 	.word	0x0801442c

08000b00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08c      	sub	sp, #48	; 0x30
 8000b04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b06:	f107 031c 	add.w	r3, r7, #28
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
 8000b0e:	605a      	str	r2, [r3, #4]
 8000b10:	609a      	str	r2, [r3, #8]
 8000b12:	60da      	str	r2, [r3, #12]
 8000b14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a33      	ldr	r2, [pc, #204]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	617b      	str	r3, [r7, #20]
 8000b36:	4b2d      	ldr	r3, [pc, #180]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3a:	4a2c      	ldr	r2, [pc, #176]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b40:	6313      	str	r3, [r2, #48]	; 0x30
 8000b42:	4b2a      	ldr	r3, [pc, #168]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000b4a:	617b      	str	r3, [r7, #20]
 8000b4c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b4e:	2300      	movs	r3, #0
 8000b50:	613b      	str	r3, [r7, #16]
 8000b52:	4b26      	ldr	r3, [pc, #152]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b56:	4a25      	ldr	r2, [pc, #148]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b58:	f043 0304 	orr.w	r3, r3, #4
 8000b5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b5e:	4b23      	ldr	r3, [pc, #140]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b62:	f003 0304 	and.w	r3, r3, #4
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
 8000b6e:	4b1f      	ldr	r3, [pc, #124]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b72:	4a1e      	ldr	r2, [pc, #120]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b74:	f043 0301 	orr.w	r3, r3, #1
 8000b78:	6313      	str	r3, [r2, #48]	; 0x30
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	f003 0301 	and.w	r3, r3, #1
 8000b82:	60fb      	str	r3, [r7, #12]
 8000b84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	60bb      	str	r3, [r7, #8]
 8000b8a:	4b18      	ldr	r3, [pc, #96]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8e:	4a17      	ldr	r2, [pc, #92]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b90:	f043 0302 	orr.w	r3, r3, #2
 8000b94:	6313      	str	r3, [r2, #48]	; 0x30
 8000b96:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_GPIO_Init+0xec>)
 8000b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9a:	f003 0302 	and.w	r3, r3, #2
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]
 8000ba6:	4b11      	ldr	r3, [pc, #68]	; (8000bec <MX_GPIO_Init+0xec>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a10      	ldr	r2, [pc, #64]	; (8000bec <MX_GPIO_Init+0xec>)
 8000bac:	f043 0308 	orr.w	r3, r3, #8
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b0e      	ldr	r3, [pc, #56]	; (8000bec <MX_GPIO_Init+0xec>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0308 	and.w	r3, r3, #8
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_5|GPIO_PIN_6, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2160      	movs	r1, #96	; 0x60
 8000bc2:	480b      	ldr	r0, [pc, #44]	; (8000bf0 <MX_GPIO_Init+0xf0>)
 8000bc4:	f003 fd24 	bl	8004610 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8000bc8:	2360      	movs	r3, #96	; 0x60
 8000bca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bd8:	f107 031c 	add.w	r3, r7, #28
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4804      	ldr	r0, [pc, #16]	; (8000bf0 <MX_GPIO_Init+0xf0>)
 8000be0:	f003 fb7a 	bl	80042d8 <HAL_GPIO_Init>

}
 8000be4:	bf00      	nop
 8000be6:	3730      	adds	r7, #48	; 0x30
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000bf8:	f001 fa54 	bl	80020a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000bfc:	f000 f81a 	bl	8000c34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c00:	f7ff ff7e 	bl	8000b00 <MX_GPIO_Init>
  MX_DMA_Init();
 8000c04:	f7ff fde8 	bl	80007d8 <MX_DMA_Init>
  MX_USART1_UART_Init();
 8000c08:	f000 fabc 	bl	8001184 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000c0c:	f000 fae4 	bl	80011d8 <MX_USART2_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000c10:	f000 fd24 	bl	800165c <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000c14:	f7ff fd12 	bl	800063c <MX_ADC1_Init>
  MX_UART4_Init();
 8000c18:	f000 fa60 	bl	80010dc <MX_UART4_Init>
  MX_UART5_Init();
 8000c1c:	f000 fa88 	bl	8001130 <MX_UART5_Init>
  MX_USART3_UART_Init();
 8000c20:	f000 fb04 	bl	800122c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000c24:	f006 fc68 	bl	80074f8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000c28:	f7ff fea2 	bl	8000970 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000c2c:	f006 fc88 	bl	8007540 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000c30:	e7fe      	b.n	8000c30 <main+0x3c>
	...

08000c34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b094      	sub	sp, #80	; 0x50
 8000c38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	2230      	movs	r2, #48	; 0x30
 8000c40:	2100      	movs	r1, #0
 8000c42:	4618      	mov	r0, r3
 8000c44:	f012 fbea 	bl	801341c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c48:	f107 030c 	add.w	r3, r7, #12
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c58:	2300      	movs	r3, #0
 8000c5a:	60bb      	str	r3, [r7, #8]
 8000c5c:	4b28      	ldr	r3, [pc, #160]	; (8000d00 <SystemClock_Config+0xcc>)
 8000c5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c60:	4a27      	ldr	r2, [pc, #156]	; (8000d00 <SystemClock_Config+0xcc>)
 8000c62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c66:	6413      	str	r3, [r2, #64]	; 0x40
 8000c68:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <SystemClock_Config+0xcc>)
 8000c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c70:	60bb      	str	r3, [r7, #8]
 8000c72:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c74:	2300      	movs	r3, #0
 8000c76:	607b      	str	r3, [r7, #4]
 8000c78:	4b22      	ldr	r3, [pc, #136]	; (8000d04 <SystemClock_Config+0xd0>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a21      	ldr	r2, [pc, #132]	; (8000d04 <SystemClock_Config+0xd0>)
 8000c7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	4b1f      	ldr	r3, [pc, #124]	; (8000d04 <SystemClock_Config+0xd0>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c8c:	607b      	str	r3, [r7, #4]
 8000c8e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c90:	2301      	movs	r3, #1
 8000c92:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c94:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ca2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000ca8:	23a8      	movs	r3, #168	; 0xa8
 8000caa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000cac:	2302      	movs	r3, #2
 8000cae:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	4618      	mov	r0, r3
 8000cba:	f003 fdf9 	bl	80048b0 <HAL_RCC_OscConfig>
 8000cbe:	4603      	mov	r3, r0
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d001      	beq.n	8000cc8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000cc4:	f000 f832 	bl	8000d2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000cc8:	230f      	movs	r3, #15
 8000cca:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cd4:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cd8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cde:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000ce0:	f107 030c 	add.w	r3, r7, #12
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	f004 f85a 	bl	8004da0 <HAL_RCC_ClockConfig>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d001      	beq.n	8000cf6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000cf2:	f000 f81b 	bl	8000d2c <Error_Handler>
  }
}
 8000cf6:	bf00      	nop
 8000cf8:	3750      	adds	r7, #80	; 0x50
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40007000 	.word	0x40007000

08000d08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM14) {
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d101      	bne.n	8000d1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d1a:	f001 f9e5 	bl	80020e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40002000 	.word	0x40002000

08000d2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d30:	b672      	cpsid	i
}
 8000d32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d34:	e7fe      	b.n	8000d34 <Error_Handler+0x8>
	...

08000d38 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	607b      	str	r3, [r7, #4]
 8000d42:	4b12      	ldr	r3, [pc, #72]	; (8000d8c <HAL_MspInit+0x54>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a11      	ldr	r2, [pc, #68]	; (8000d8c <HAL_MspInit+0x54>)
 8000d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b0f      	ldr	r3, [pc, #60]	; (8000d8c <HAL_MspInit+0x54>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d56:	607b      	str	r3, [r7, #4]
 8000d58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	603b      	str	r3, [r7, #0]
 8000d5e:	4b0b      	ldr	r3, [pc, #44]	; (8000d8c <HAL_MspInit+0x54>)
 8000d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <HAL_MspInit+0x54>)
 8000d64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d68:	6413      	str	r3, [r2, #64]	; 0x40
 8000d6a:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <HAL_MspInit+0x54>)
 8000d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d72:	603b      	str	r3, [r7, #0]
 8000d74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d76:	2200      	movs	r2, #0
 8000d78:	210f      	movs	r1, #15
 8000d7a:	f06f 0001 	mvn.w	r0, #1
 8000d7e:	f001 fd11 	bl	80027a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40023800 	.word	0x40023800

08000d90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	; 0x38
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM14 clock */
  __HAL_RCC_TIM14_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b33      	ldr	r3, [pc, #204]	; (8000e74 <HAL_InitTick+0xe4>)
 8000da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da8:	4a32      	ldr	r2, [pc, #200]	; (8000e74 <HAL_InitTick+0xe4>)
 8000daa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dae:	6413      	str	r3, [r2, #64]	; 0x40
 8000db0:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <HAL_InitTick+0xe4>)
 8000db2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dbc:	f107 0210 	add.w	r2, r7, #16
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4611      	mov	r1, r2
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f004 fa0a 	bl	80051e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dcc:	6a3b      	ldr	r3, [r7, #32]
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM14 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d103      	bne.n	8000dde <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000dd6:	f004 f9db 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 8000dda:	6378      	str	r0, [r7, #52]	; 0x34
 8000ddc:	e004      	b.n	8000de8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000dde:	f004 f9d7 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 8000de2:	4603      	mov	r3, r0
 8000de4:	005b      	lsls	r3, r3, #1
 8000de6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM14 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dea:	4a23      	ldr	r2, [pc, #140]	; (8000e78 <HAL_InitTick+0xe8>)
 8000dec:	fba2 2303 	umull	r2, r3, r2, r3
 8000df0:	0c9b      	lsrs	r3, r3, #18
 8000df2:	3b01      	subs	r3, #1
 8000df4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM14 */
  htim14.Instance = TIM14;
 8000df6:	4b21      	ldr	r3, [pc, #132]	; (8000e7c <HAL_InitTick+0xec>)
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <HAL_InitTick+0xf0>)
 8000dfa:	601a      	str	r2, [r3, #0]
  + Period = [(TIM14CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim14.Init.Period = (1000000U / 1000U) - 1U;
 8000dfc:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <HAL_InitTick+0xec>)
 8000dfe:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e02:	60da      	str	r2, [r3, #12]
  htim14.Init.Prescaler = uwPrescalerValue;
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <HAL_InitTick+0xec>)
 8000e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e08:	6053      	str	r3, [r2, #4]
  htim14.Init.ClockDivision = 0;
 8000e0a:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <HAL_InitTick+0xec>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	611a      	str	r2, [r3, #16]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e10:	4b1a      	ldr	r3, [pc, #104]	; (8000e7c <HAL_InitTick+0xec>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e16:	4b19      	ldr	r3, [pc, #100]	; (8000e7c <HAL_InitTick+0xec>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim14);
 8000e1c:	4817      	ldr	r0, [pc, #92]	; (8000e7c <HAL_InitTick+0xec>)
 8000e1e:	f004 fa11 	bl	8005244 <HAL_TIM_Base_Init>
 8000e22:	4603      	mov	r3, r0
 8000e24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000e28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d11b      	bne.n	8000e68 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim14);
 8000e30:	4812      	ldr	r0, [pc, #72]	; (8000e7c <HAL_InitTick+0xec>)
 8000e32:	f004 fa61 	bl	80052f8 <HAL_TIM_Base_Start_IT>
 8000e36:	4603      	mov	r3, r0
 8000e38:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d111      	bne.n	8000e68 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM14 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8000e44:	202d      	movs	r0, #45	; 0x2d
 8000e46:	f001 fcc9 	bl	80027dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	2b0f      	cmp	r3, #15
 8000e4e:	d808      	bhi.n	8000e62 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, TickPriority, 0U);
 8000e50:	2200      	movs	r2, #0
 8000e52:	6879      	ldr	r1, [r7, #4]
 8000e54:	202d      	movs	r0, #45	; 0x2d
 8000e56:	f001 fca5 	bl	80027a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e5a:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_InitTick+0xf4>)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	e002      	b.n	8000e68 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000e62:	2301      	movs	r3, #1
 8000e64:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e68:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	3738      	adds	r7, #56	; 0x38
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	431bde83 	.word	0x431bde83
 8000e7c:	20000204 	.word	0x20000204
 8000e80:	40002000 	.word	0x40002000
 8000e84:	20000008 	.word	0x20000008

08000e88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e8c:	e7fe      	b.n	8000e8c <NMI_Handler+0x4>

08000e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e8e:	b480      	push	{r7}
 8000e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e92:	e7fe      	b.n	8000e92 <HardFault_Handler+0x4>

08000e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e98:	e7fe      	b.n	8000e98 <MemManage_Handler+0x4>

08000e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <BusFault_Handler+0x4>

08000ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <UsageFault_Handler+0x4>

08000ea6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr

08000eb4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000eb8:	4802      	ldr	r0, [pc, #8]	; (8000ec4 <DMA1_Stream2_IRQHandler+0x10>)
 8000eba:	f001 fe35 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	200003a8 	.word	0x200003a8

08000ec8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <DMA1_Stream5_IRQHandler+0x10>)
 8000ece:	f001 fe2b 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000408 	.word	0x20000408

08000edc <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000ee0:	4802      	ldr	r0, [pc, #8]	; (8000eec <DMA1_Stream6_IRQHandler+0x10>)
 8000ee2:	f001 fe21 	bl	8002b28 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	20000468 	.word	0x20000468

08000ef0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	; (8000f00 <USART2_IRQHandler+0x10>)
 8000ef6:	f004 fe61 	bl	8005bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000320 	.word	0x20000320

08000f04 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000f08:	4802      	ldr	r0, [pc, #8]	; (8000f14 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8000f0a:	f004 fa65 	bl	80053d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	20000204 	.word	0x20000204

08000f18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000f1c:	4802      	ldr	r0, [pc, #8]	; (8000f28 <UART4_IRQHandler+0x10>)
 8000f1e:	f004 fe4d 	bl	8005bbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000f22:	bf00      	nop
 8000f24:	bd80      	pop	{r7, pc}
 8000f26:	bf00      	nop
 8000f28:	20000254 	.word	0x20000254

08000f2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	af00      	add	r7, sp, #0
  return 1;
 8000f30:	2301      	movs	r3, #1
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	46bd      	mov	sp, r7
 8000f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3a:	4770      	bx	lr

08000f3c <_kill>:

int _kill(int pid, int sig)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000f46:	f012 fafd 	bl	8013544 <__errno>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2216      	movs	r2, #22
 8000f4e:	601a      	str	r2, [r3, #0]
  return -1;
 8000f50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3708      	adds	r7, #8
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_exit>:

void _exit (int status)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000f64:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffe7 	bl	8000f3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000f6e:	e7fe      	b.n	8000f6e <_exit+0x12>

08000f70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	e00a      	b.n	8000f98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000f82:	f3af 8000 	nop.w
 8000f86:	4601      	mov	r1, r0
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	1c5a      	adds	r2, r3, #1
 8000f8c:	60ba      	str	r2, [r7, #8]
 8000f8e:	b2ca      	uxtb	r2, r1
 8000f90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	3301      	adds	r3, #1
 8000f96:	617b      	str	r3, [r7, #20]
 8000f98:	697a      	ldr	r2, [r7, #20]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	dbf0      	blt.n	8000f82 <_read+0x12>
  }

  return len;
 8000fa0:	687b      	ldr	r3, [r7, #4]
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3718      	adds	r7, #24
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}

08000faa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000faa:	b580      	push	{r7, lr}
 8000fac:	b086      	sub	sp, #24
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
 8000fba:	e009      	b.n	8000fd0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	1c5a      	adds	r2, r3, #1
 8000fc0:	60ba      	str	r2, [r7, #8]
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fca:	697b      	ldr	r3, [r7, #20]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	617b      	str	r3, [r7, #20]
 8000fd0:	697a      	ldr	r2, [r7, #20]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	dbf1      	blt.n	8000fbc <_write+0x12>
  }
  return len;
 8000fd8:	687b      	ldr	r3, [r7, #4]
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}

08000fe2 <_close>:

int _close(int file)
{
 8000fe2:	b480      	push	{r7}
 8000fe4:	b083      	sub	sp, #12
 8000fe6:	af00      	add	r7, sp, #0
 8000fe8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000fea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffa:	b480      	push	{r7}
 8000ffc:	b083      	sub	sp, #12
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
 8001002:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100a:	605a      	str	r2, [r3, #4]
  return 0;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr

0800101a <_isatty>:

int _isatty(int file)
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001022:	2301      	movs	r3, #1
}
 8001024:	4618      	mov	r0, r3
 8001026:	370c      	adds	r7, #12
 8001028:	46bd      	mov	sp, r7
 800102a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102e:	4770      	bx	lr

08001030 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001030:	b480      	push	{r7}
 8001032:	b085      	sub	sp, #20
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	3714      	adds	r7, #20
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b086      	sub	sp, #24
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001054:	4a14      	ldr	r2, [pc, #80]	; (80010a8 <_sbrk+0x5c>)
 8001056:	4b15      	ldr	r3, [pc, #84]	; (80010ac <_sbrk+0x60>)
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800105c:	697b      	ldr	r3, [r7, #20]
 800105e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001060:	4b13      	ldr	r3, [pc, #76]	; (80010b0 <_sbrk+0x64>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001068:	4b11      	ldr	r3, [pc, #68]	; (80010b0 <_sbrk+0x64>)
 800106a:	4a12      	ldr	r2, [pc, #72]	; (80010b4 <_sbrk+0x68>)
 800106c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800106e:	4b10      	ldr	r3, [pc, #64]	; (80010b0 <_sbrk+0x64>)
 8001070:	681a      	ldr	r2, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4413      	add	r3, r2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	429a      	cmp	r2, r3
 800107a:	d207      	bcs.n	800108c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800107c:	f012 fa62 	bl	8013544 <__errno>
 8001080:	4603      	mov	r3, r0
 8001082:	220c      	movs	r2, #12
 8001084:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001086:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108a:	e009      	b.n	80010a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800108c:	4b08      	ldr	r3, [pc, #32]	; (80010b0 <_sbrk+0x64>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001092:	4b07      	ldr	r3, [pc, #28]	; (80010b0 <_sbrk+0x64>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a05      	ldr	r2, [pc, #20]	; (80010b0 <_sbrk+0x64>)
 800109c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20020000 	.word	0x20020000
 80010ac:	00000400 	.word	0x00000400
 80010b0:	20000250 	.word	0x20000250
 80010b4:	20015bb8 	.word	0x20015bb8

080010b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b8:	b480      	push	{r7}
 80010ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010bc:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <SystemInit+0x20>)
 80010be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c2:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <SystemInit+0x20>)
 80010c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart2_rx;
DMA_HandleTypeDef hdma_usart2_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80010e0:	4b11      	ldr	r3, [pc, #68]	; (8001128 <MX_UART4_Init+0x4c>)
 80010e2:	4a12      	ldr	r2, [pc, #72]	; (800112c <MX_UART4_Init+0x50>)
 80010e4:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <MX_UART4_Init+0x4c>)
 80010e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010ec:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80010ee:	4b0e      	ldr	r3, [pc, #56]	; (8001128 <MX_UART4_Init+0x4c>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80010f4:	4b0c      	ldr	r3, [pc, #48]	; (8001128 <MX_UART4_Init+0x4c>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <MX_UART4_Init+0x4c>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <MX_UART4_Init+0x4c>)
 8001102:	220c      	movs	r2, #12
 8001104:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001106:	4b08      	ldr	r3, [pc, #32]	; (8001128 <MX_UART4_Init+0x4c>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800110c:	4b06      	ldr	r3, [pc, #24]	; (8001128 <MX_UART4_Init+0x4c>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001112:	4805      	ldr	r0, [pc, #20]	; (8001128 <MX_UART4_Init+0x4c>)
 8001114:	f004 fb44 	bl	80057a0 <HAL_UART_Init>
 8001118:	4603      	mov	r3, r0
 800111a:	2b00      	cmp	r3, #0
 800111c:	d001      	beq.n	8001122 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800111e:	f7ff fe05 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001122:	bf00      	nop
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	20000254 	.word	0x20000254
 800112c:	40004c00 	.word	0x40004c00

08001130 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001134:	4b11      	ldr	r3, [pc, #68]	; (800117c <MX_UART5_Init+0x4c>)
 8001136:	4a12      	ldr	r2, [pc, #72]	; (8001180 <MX_UART5_Init+0x50>)
 8001138:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800113a:	4b10      	ldr	r3, [pc, #64]	; (800117c <MX_UART5_Init+0x4c>)
 800113c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001140:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001142:	4b0e      	ldr	r3, [pc, #56]	; (800117c <MX_UART5_Init+0x4c>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001148:	4b0c      	ldr	r3, [pc, #48]	; (800117c <MX_UART5_Init+0x4c>)
 800114a:	2200      	movs	r2, #0
 800114c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800114e:	4b0b      	ldr	r3, [pc, #44]	; (800117c <MX_UART5_Init+0x4c>)
 8001150:	2200      	movs	r2, #0
 8001152:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001154:	4b09      	ldr	r3, [pc, #36]	; (800117c <MX_UART5_Init+0x4c>)
 8001156:	220c      	movs	r2, #12
 8001158:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800115a:	4b08      	ldr	r3, [pc, #32]	; (800117c <MX_UART5_Init+0x4c>)
 800115c:	2200      	movs	r2, #0
 800115e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <MX_UART5_Init+0x4c>)
 8001162:	2200      	movs	r2, #0
 8001164:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001166:	4805      	ldr	r0, [pc, #20]	; (800117c <MX_UART5_Init+0x4c>)
 8001168:	f004 fb1a 	bl	80057a0 <HAL_UART_Init>
 800116c:	4603      	mov	r3, r0
 800116e:	2b00      	cmp	r3, #0
 8001170:	d001      	beq.n	8001176 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001172:	f7ff fddb 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001176:	bf00      	nop
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	20000298 	.word	0x20000298
 8001180:	40005000 	.word	0x40005000

08001184 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001188:	4b10      	ldr	r3, [pc, #64]	; (80011cc <MX_USART1_UART_Init+0x48>)
 800118a:	4a11      	ldr	r2, [pc, #68]	; (80011d0 <MX_USART1_UART_Init+0x4c>)
 800118c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 912000;
 800118e:	4b0f      	ldr	r3, [pc, #60]	; (80011cc <MX_USART1_UART_Init+0x48>)
 8001190:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <MX_USART1_UART_Init+0x50>)
 8001192:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001194:	4b0d      	ldr	r3, [pc, #52]	; (80011cc <MX_USART1_UART_Init+0x48>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800119a:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <MX_USART1_UART_Init+0x48>)
 800119c:	2200      	movs	r2, #0
 800119e:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80011a0:	4b0a      	ldr	r3, [pc, #40]	; (80011cc <MX_USART1_UART_Init+0x48>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <MX_USART1_UART_Init+0x48>)
 80011a8:	220c      	movs	r2, #12
 80011aa:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011ac:	4b07      	ldr	r3, [pc, #28]	; (80011cc <MX_USART1_UART_Init+0x48>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b2:	4b06      	ldr	r3, [pc, #24]	; (80011cc <MX_USART1_UART_Init+0x48>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80011b8:	4804      	ldr	r0, [pc, #16]	; (80011cc <MX_USART1_UART_Init+0x48>)
 80011ba:	f004 faf1 	bl	80057a0 <HAL_UART_Init>
 80011be:	4603      	mov	r3, r0
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d001      	beq.n	80011c8 <MX_USART1_UART_Init+0x44>
  {
    Error_Handler();
 80011c4:	f7ff fdb2 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	200002dc 	.word	0x200002dc
 80011d0:	40011000 	.word	0x40011000
 80011d4:	000dea80 	.word	0x000dea80

080011d8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80011dc:	4b11      	ldr	r3, [pc, #68]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011de:	4a12      	ldr	r2, [pc, #72]	; (8001228 <MX_USART2_UART_Init+0x50>)
 80011e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80011e2:	4b10      	ldr	r3, [pc, #64]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80011f0:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80011f6:	4b0b      	ldr	r3, [pc, #44]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011fc:	4b09      	ldr	r3, [pc, #36]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 80011fe:	220c      	movs	r2, #12
 8001200:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001202:	4b08      	ldr	r3, [pc, #32]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001204:	2200      	movs	r2, #0
 8001206:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 800120a:	2200      	movs	r2, #0
 800120c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800120e:	4805      	ldr	r0, [pc, #20]	; (8001224 <MX_USART2_UART_Init+0x4c>)
 8001210:	f004 fac6 	bl	80057a0 <HAL_UART_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800121a:	f7ff fd87 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000320 	.word	0x20000320
 8001228:	40004400 	.word	0x40004400

0800122c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001230:	4b11      	ldr	r3, [pc, #68]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001232:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_USART3_UART_Init+0x50>)
 8001234:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001236:	4b10      	ldr	r3, [pc, #64]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001238:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800123c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800123e:	4b0e      	ldr	r3, [pc, #56]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001240:	2200      	movs	r2, #0
 8001242:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001246:	2200      	movs	r2, #0
 8001248:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800124a:	4b0b      	ldr	r3, [pc, #44]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001252:	220c      	movs	r2, #12
 8001254:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001256:	4b08      	ldr	r3, [pc, #32]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001258:	2200      	movs	r2, #0
 800125a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800125c:	4b06      	ldr	r3, [pc, #24]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 800125e:	2200      	movs	r2, #0
 8001260:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_USART3_UART_Init+0x4c>)
 8001264:	f004 fa9c 	bl	80057a0 <HAL_UART_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2b00      	cmp	r3, #0
 800126c:	d001      	beq.n	8001272 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800126e:	f7ff fd5d 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	20000364 	.word	0x20000364
 800127c:	40004800 	.word	0x40004800

08001280 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b092      	sub	sp, #72	; 0x48
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001288:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800128c:	2200      	movs	r2, #0
 800128e:	601a      	str	r2, [r3, #0]
 8001290:	605a      	str	r2, [r3, #4]
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	60da      	str	r2, [r3, #12]
 8001296:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==UART4)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4a75      	ldr	r2, [pc, #468]	; (8001474 <HAL_UART_MspInit+0x1f4>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d163      	bne.n	800136a <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	633b      	str	r3, [r7, #48]	; 0x30
 80012a6:	4b74      	ldr	r3, [pc, #464]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	4a73      	ldr	r2, [pc, #460]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80012ac:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80012b0:	6413      	str	r3, [r2, #64]	; 0x40
 80012b2:	4b71      	ldr	r3, [pc, #452]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80012b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80012ba:	633b      	str	r3, [r7, #48]	; 0x30
 80012bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012c2:	4b6d      	ldr	r3, [pc, #436]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	4a6c      	ldr	r2, [pc, #432]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	6313      	str	r3, [r2, #48]	; 0x30
 80012ce:	4b6a      	ldr	r3, [pc, #424]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80012d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80012da:	2303      	movs	r3, #3
 80012dc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012de:	2302      	movs	r3, #2
 80012e0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	2300      	movs	r3, #0
 80012e4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e6:	2303      	movs	r3, #3
 80012e8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80012ea:	2308      	movs	r3, #8
 80012ec:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80012f2:	4619      	mov	r1, r3
 80012f4:	4861      	ldr	r0, [pc, #388]	; (800147c <HAL_UART_MspInit+0x1fc>)
 80012f6:	f002 ffef 	bl	80042d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80012fa:	4b61      	ldr	r3, [pc, #388]	; (8001480 <HAL_UART_MspInit+0x200>)
 80012fc:	4a61      	ldr	r2, [pc, #388]	; (8001484 <HAL_UART_MspInit+0x204>)
 80012fe:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8001300:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001302:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001306:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001308:	4b5d      	ldr	r3, [pc, #372]	; (8001480 <HAL_UART_MspInit+0x200>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800130e:	4b5c      	ldr	r3, [pc, #368]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001310:	2200      	movs	r2, #0
 8001312:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001314:	4b5a      	ldr	r3, [pc, #360]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001316:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800131a:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800131c:	4b58      	ldr	r3, [pc, #352]	; (8001480 <HAL_UART_MspInit+0x200>)
 800131e:	2200      	movs	r2, #0
 8001320:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001322:	4b57      	ldr	r3, [pc, #348]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001324:	2200      	movs	r2, #0
 8001326:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8001328:	4b55      	ldr	r3, [pc, #340]	; (8001480 <HAL_UART_MspInit+0x200>)
 800132a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800132e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001330:	4b53      	ldr	r3, [pc, #332]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001332:	2200      	movs	r2, #0
 8001334:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001336:	4b52      	ldr	r3, [pc, #328]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001338:	2200      	movs	r2, #0
 800133a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800133c:	4850      	ldr	r0, [pc, #320]	; (8001480 <HAL_UART_MspInit+0x200>)
 800133e:	f001 fa5b 	bl	80027f8 <HAL_DMA_Init>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001348:	f7ff fcf0 	bl	8000d2c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a4c      	ldr	r2, [pc, #304]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001350:	639a      	str	r2, [r3, #56]	; 0x38
 8001352:	4a4b      	ldr	r2, [pc, #300]	; (8001480 <HAL_UART_MspInit+0x200>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 8001358:	2200      	movs	r2, #0
 800135a:	2105      	movs	r1, #5
 800135c:	2034      	movs	r0, #52	; 0x34
 800135e:	f001 fa21 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8001362:	2034      	movs	r0, #52	; 0x34
 8001364:	f001 fa3a 	bl	80027dc <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001368:	e161      	b.n	800162e <HAL_UART_MspInit+0x3ae>
  else if(uartHandle->Instance==UART5)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a46      	ldr	r2, [pc, #280]	; (8001488 <HAL_UART_MspInit+0x208>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d14b      	bne.n	800140c <HAL_UART_MspInit+0x18c>
    __HAL_RCC_UART5_CLK_ENABLE();
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
 8001378:	4b3f      	ldr	r3, [pc, #252]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	4a3e      	ldr	r2, [pc, #248]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 800137e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001382:	6413      	str	r3, [r2, #64]	; 0x40
 8001384:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800138c:	62bb      	str	r3, [r7, #40]	; 0x28
 800138e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001390:	2300      	movs	r3, #0
 8001392:	627b      	str	r3, [r7, #36]	; 0x24
 8001394:	4b38      	ldr	r3, [pc, #224]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	4a37      	ldr	r2, [pc, #220]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 800139a:	f043 0304 	orr.w	r3, r3, #4
 800139e:	6313      	str	r3, [r2, #48]	; 0x30
 80013a0:	4b35      	ldr	r3, [pc, #212]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	f003 0304 	and.w	r3, r3, #4
 80013a8:	627b      	str	r3, [r7, #36]	; 0x24
 80013aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
 80013b0:	4b31      	ldr	r3, [pc, #196]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80013b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b4:	4a30      	ldr	r2, [pc, #192]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80013b6:	f043 0308 	orr.w	r3, r3, #8
 80013ba:	6313      	str	r3, [r2, #48]	; 0x30
 80013bc:	4b2e      	ldr	r3, [pc, #184]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 80013be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c0:	f003 0308 	and.w	r3, r3, #8
 80013c4:	623b      	str	r3, [r7, #32]
 80013c6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80013c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ce:	2302      	movs	r3, #2
 80013d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d2:	2300      	movs	r3, #0
 80013d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d6:	2303      	movs	r3, #3
 80013d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013da:	2308      	movs	r3, #8
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80013e2:	4619      	mov	r1, r3
 80013e4:	4829      	ldr	r0, [pc, #164]	; (800148c <HAL_UART_MspInit+0x20c>)
 80013e6:	f002 ff77 	bl	80042d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80013ea:	2304      	movs	r3, #4
 80013ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80013fa:	2308      	movs	r3, #8
 80013fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001402:	4619      	mov	r1, r3
 8001404:	4822      	ldr	r0, [pc, #136]	; (8001490 <HAL_UART_MspInit+0x210>)
 8001406:	f002 ff67 	bl	80042d8 <HAL_GPIO_Init>
}
 800140a:	e110      	b.n	800162e <HAL_UART_MspInit+0x3ae>
  else if(uartHandle->Instance==USART1)
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4a20      	ldr	r2, [pc, #128]	; (8001494 <HAL_UART_MspInit+0x214>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d140      	bne.n	8001498 <HAL_UART_MspInit+0x218>
    __HAL_RCC_USART1_CLK_ENABLE();
 8001416:	2300      	movs	r3, #0
 8001418:	61fb      	str	r3, [r7, #28]
 800141a:	4b17      	ldr	r3, [pc, #92]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 800141c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800141e:	4a16      	ldr	r2, [pc, #88]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 8001420:	f043 0310 	orr.w	r3, r3, #16
 8001424:	6453      	str	r3, [r2, #68]	; 0x44
 8001426:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142a:	f003 0310 	and.w	r3, r3, #16
 800142e:	61fb      	str	r3, [r7, #28]
 8001430:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	61bb      	str	r3, [r7, #24]
 8001436:	4b10      	ldr	r3, [pc, #64]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	4a0f      	ldr	r2, [pc, #60]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6313      	str	r3, [r2, #48]	; 0x30
 8001442:	4b0d      	ldr	r3, [pc, #52]	; (8001478 <HAL_UART_MspInit+0x1f8>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	61bb      	str	r3, [r7, #24]
 800144c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800144e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001452:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001460:	2307      	movs	r3, #7
 8001462:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001468:	4619      	mov	r1, r3
 800146a:	4804      	ldr	r0, [pc, #16]	; (800147c <HAL_UART_MspInit+0x1fc>)
 800146c:	f002 ff34 	bl	80042d8 <HAL_GPIO_Init>
}
 8001470:	e0dd      	b.n	800162e <HAL_UART_MspInit+0x3ae>
 8001472:	bf00      	nop
 8001474:	40004c00 	.word	0x40004c00
 8001478:	40023800 	.word	0x40023800
 800147c:	40020000 	.word	0x40020000
 8001480:	200003a8 	.word	0x200003a8
 8001484:	40026040 	.word	0x40026040
 8001488:	40005000 	.word	0x40005000
 800148c:	40020800 	.word	0x40020800
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40011000 	.word	0x40011000
  else if(uartHandle->Instance==USART2)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	4a66      	ldr	r2, [pc, #408]	; (8001638 <HAL_UART_MspInit+0x3b8>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	f040 8093 	bne.w	80015ca <HAL_UART_MspInit+0x34a>
    __HAL_RCC_USART2_CLK_ENABLE();
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
 80014a8:	4b64      	ldr	r3, [pc, #400]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80014aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ac:	4a63      	ldr	r2, [pc, #396]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80014ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b2:	6413      	str	r3, [r2, #64]	; 0x40
 80014b4:	4b61      	ldr	r3, [pc, #388]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014bc:	617b      	str	r3, [r7, #20]
 80014be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c0:	2300      	movs	r3, #0
 80014c2:	613b      	str	r3, [r7, #16]
 80014c4:	4b5d      	ldr	r3, [pc, #372]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80014c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c8:	4a5c      	ldr	r2, [pc, #368]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80014ca:	f043 0301 	orr.w	r3, r3, #1
 80014ce:	6313      	str	r3, [r2, #48]	; 0x30
 80014d0:	4b5a      	ldr	r3, [pc, #360]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80014d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d4:	f003 0301 	and.w	r3, r3, #1
 80014d8:	613b      	str	r3, [r7, #16]
 80014da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80014dc:	230c      	movs	r3, #12
 80014de:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e4:	2300      	movs	r3, #0
 80014e6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e8:	2303      	movs	r3, #3
 80014ea:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
 80014ee:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014f4:	4619      	mov	r1, r3
 80014f6:	4852      	ldr	r0, [pc, #328]	; (8001640 <HAL_UART_MspInit+0x3c0>)
 80014f8:	f002 feee 	bl	80042d8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80014fc:	4b51      	ldr	r3, [pc, #324]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 80014fe:	4a52      	ldr	r2, [pc, #328]	; (8001648 <HAL_UART_MspInit+0x3c8>)
 8001500:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001502:	4b50      	ldr	r3, [pc, #320]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001504:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001508:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800150a:	4b4e      	ldr	r3, [pc, #312]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 800150c:	2200      	movs	r2, #0
 800150e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001510:	4b4c      	ldr	r3, [pc, #304]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001512:	2200      	movs	r2, #0
 8001514:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001516:	4b4b      	ldr	r3, [pc, #300]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001518:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800151c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800151e:	4b49      	ldr	r3, [pc, #292]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001520:	2200      	movs	r2, #0
 8001522:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001524:	4b47      	ldr	r3, [pc, #284]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001526:	2200      	movs	r2, #0
 8001528:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800152a:	4b46      	ldr	r3, [pc, #280]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 800152c:	2200      	movs	r2, #0
 800152e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001530:	4b44      	ldr	r3, [pc, #272]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001532:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001536:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001538:	4b42      	ldr	r3, [pc, #264]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 800153a:	2200      	movs	r2, #0
 800153c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800153e:	4841      	ldr	r0, [pc, #260]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001540:	f001 f95a 	bl	80027f8 <HAL_DMA_Init>
 8001544:	4603      	mov	r3, r0
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <HAL_UART_MspInit+0x2ce>
      Error_Handler();
 800154a:	f7ff fbef 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a3c      	ldr	r2, [pc, #240]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001552:	639a      	str	r2, [r3, #56]	; 0x38
 8001554:	4a3b      	ldr	r2, [pc, #236]	; (8001644 <HAL_UART_MspInit+0x3c4>)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800155a:	4b3c      	ldr	r3, [pc, #240]	; (800164c <HAL_UART_MspInit+0x3cc>)
 800155c:	4a3c      	ldr	r2, [pc, #240]	; (8001650 <HAL_UART_MspInit+0x3d0>)
 800155e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001560:	4b3a      	ldr	r3, [pc, #232]	; (800164c <HAL_UART_MspInit+0x3cc>)
 8001562:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001566:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001568:	4b38      	ldr	r3, [pc, #224]	; (800164c <HAL_UART_MspInit+0x3cc>)
 800156a:	2240      	movs	r2, #64	; 0x40
 800156c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800156e:	4b37      	ldr	r3, [pc, #220]	; (800164c <HAL_UART_MspInit+0x3cc>)
 8001570:	2200      	movs	r2, #0
 8001572:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001574:	4b35      	ldr	r3, [pc, #212]	; (800164c <HAL_UART_MspInit+0x3cc>)
 8001576:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800157a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800157c:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_UART_MspInit+0x3cc>)
 800157e:	2200      	movs	r2, #0
 8001580:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_UART_MspInit+0x3cc>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001588:	4b30      	ldr	r3, [pc, #192]	; (800164c <HAL_UART_MspInit+0x3cc>)
 800158a:	2200      	movs	r2, #0
 800158c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800158e:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_UART_MspInit+0x3cc>)
 8001590:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001594:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001596:	4b2d      	ldr	r3, [pc, #180]	; (800164c <HAL_UART_MspInit+0x3cc>)
 8001598:	2200      	movs	r2, #0
 800159a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800159c:	482b      	ldr	r0, [pc, #172]	; (800164c <HAL_UART_MspInit+0x3cc>)
 800159e:	f001 f92b 	bl	80027f8 <HAL_DMA_Init>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d001      	beq.n	80015ac <HAL_UART_MspInit+0x32c>
      Error_Handler();
 80015a8:	f7ff fbc0 	bl	8000d2c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	4a27      	ldr	r2, [pc, #156]	; (800164c <HAL_UART_MspInit+0x3cc>)
 80015b0:	635a      	str	r2, [r3, #52]	; 0x34
 80015b2:	4a26      	ldr	r2, [pc, #152]	; (800164c <HAL_UART_MspInit+0x3cc>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80015b8:	2200      	movs	r2, #0
 80015ba:	2105      	movs	r1, #5
 80015bc:	2026      	movs	r0, #38	; 0x26
 80015be:	f001 f8f1 	bl	80027a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015c2:	2026      	movs	r0, #38	; 0x26
 80015c4:	f001 f90a 	bl	80027dc <HAL_NVIC_EnableIRQ>
}
 80015c8:	e031      	b.n	800162e <HAL_UART_MspInit+0x3ae>
  else if(uartHandle->Instance==USART3)
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a21      	ldr	r2, [pc, #132]	; (8001654 <HAL_UART_MspInit+0x3d4>)
 80015d0:	4293      	cmp	r3, r2
 80015d2:	d12c      	bne.n	800162e <HAL_UART_MspInit+0x3ae>
    __HAL_RCC_USART3_CLK_ENABLE();
 80015d4:	2300      	movs	r3, #0
 80015d6:	60fb      	str	r3, [r7, #12]
 80015d8:	4b18      	ldr	r3, [pc, #96]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80015de:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015e2:	6413      	str	r3, [r2, #64]	; 0x40
 80015e4:	4b15      	ldr	r3, [pc, #84]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80015e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ec:	60fb      	str	r3, [r7, #12]
 80015ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015f0:	2300      	movs	r3, #0
 80015f2:	60bb      	str	r3, [r7, #8]
 80015f4:	4b11      	ldr	r3, [pc, #68]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80015f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f8:	4a10      	ldr	r2, [pc, #64]	; (800163c <HAL_UART_MspInit+0x3bc>)
 80015fa:	f043 0302 	orr.w	r3, r3, #2
 80015fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001600:	4b0e      	ldr	r3, [pc, #56]	; (800163c <HAL_UART_MspInit+0x3bc>)
 8001602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001604:	f003 0302 	and.w	r3, r3, #2
 8001608:	60bb      	str	r3, [r7, #8]
 800160a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800160c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001610:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800161e:	2307      	movs	r3, #7
 8001620:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001622:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001626:	4619      	mov	r1, r3
 8001628:	480b      	ldr	r0, [pc, #44]	; (8001658 <HAL_UART_MspInit+0x3d8>)
 800162a:	f002 fe55 	bl	80042d8 <HAL_GPIO_Init>
}
 800162e:	bf00      	nop
 8001630:	3748      	adds	r7, #72	; 0x48
 8001632:	46bd      	mov	sp, r7
 8001634:	bd80      	pop	{r7, pc}
 8001636:	bf00      	nop
 8001638:	40004400 	.word	0x40004400
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	20000408 	.word	0x20000408
 8001648:	40026088 	.word	0x40026088
 800164c:	20000468 	.word	0x20000468
 8001650:	400260a0 	.word	0x400260a0
 8001654:	40004800 	.word	0x40004800
 8001658:	40020400 	.word	0x40020400

0800165c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001660:	4b14      	ldr	r3, [pc, #80]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001662:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001666:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001668:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800166a:	2204      	movs	r2, #4
 800166c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001670:	2202      	movs	r2, #2
 8001672:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001674:	4b0f      	ldr	r3, [pc, #60]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800167c:	2202      	movs	r2, #2
 800167e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001686:	4b0b      	ldr	r3, [pc, #44]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800168c:	4b09      	ldr	r3, [pc, #36]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8001692:	4b08      	ldr	r3, [pc, #32]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001694:	2200      	movs	r2, #0
 8001696:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169a:	2200      	movs	r2, #0
 800169c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a0:	f002 ffe9 	bl	8004676 <HAL_PCD_Init>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016aa:	f7ff fb3f 	bl	8000d2c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	200004c8 	.word	0x200004c8

080016b8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b08a      	sub	sp, #40	; 0x28
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c0:	f107 0314 	add.w	r3, r7, #20
 80016c4:	2200      	movs	r2, #0
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	605a      	str	r2, [r3, #4]
 80016ca:	609a      	str	r2, [r3, #8]
 80016cc:	60da      	str	r2, [r3, #12]
 80016ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80016d8:	d132      	bne.n	8001740 <HAL_PCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016da:	2300      	movs	r3, #0
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	4b1a      	ldr	r3, [pc, #104]	; (8001748 <HAL_PCD_MspInit+0x90>)
 80016e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e2:	4a19      	ldr	r2, [pc, #100]	; (8001748 <HAL_PCD_MspInit+0x90>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ea:	4b17      	ldr	r3, [pc, #92]	; (8001748 <HAL_PCD_MspInit+0x90>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	613b      	str	r3, [r7, #16]
 80016f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80016f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	2302      	movs	r3, #2
 80016fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	2300      	movs	r3, #0
 8001702:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001704:	2303      	movs	r3, #3
 8001706:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001708:	230a      	movs	r3, #10
 800170a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	4619      	mov	r1, r3
 8001712:	480e      	ldr	r0, [pc, #56]	; (800174c <HAL_PCD_MspInit+0x94>)
 8001714:	f002 fde0 	bl	80042d8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001718:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <HAL_PCD_MspInit+0x90>)
 800171a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800171c:	4a0a      	ldr	r2, [pc, #40]	; (8001748 <HAL_PCD_MspInit+0x90>)
 800171e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001722:	6353      	str	r3, [r2, #52]	; 0x34
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	4b07      	ldr	r3, [pc, #28]	; (8001748 <HAL_PCD_MspInit+0x90>)
 800172a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800172c:	4a06      	ldr	r2, [pc, #24]	; (8001748 <HAL_PCD_MspInit+0x90>)
 800172e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001732:	6453      	str	r3, [r2, #68]	; 0x44
 8001734:	4b04      	ldr	r3, [pc, #16]	; (8001748 <HAL_PCD_MspInit+0x90>)
 8001736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001738:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800173c:	60fb      	str	r3, [r7, #12]
 800173e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001740:	bf00      	nop
 8001742:	3728      	adds	r7, #40	; 0x28
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40023800 	.word	0x40023800
 800174c:	40020000 	.word	0x40020000

08001750 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001750:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001788 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001754:	480d      	ldr	r0, [pc, #52]	; (800178c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001756:	490e      	ldr	r1, [pc, #56]	; (8001790 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001758:	4a0e      	ldr	r2, [pc, #56]	; (8001794 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800175a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800175c:	e002      	b.n	8001764 <LoopCopyDataInit>

0800175e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800175e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001760:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001762:	3304      	adds	r3, #4

08001764 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001764:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001766:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001768:	d3f9      	bcc.n	800175e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800176a:	4a0b      	ldr	r2, [pc, #44]	; (8001798 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800176c:	4c0b      	ldr	r4, [pc, #44]	; (800179c <LoopFillZerobss+0x26>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001770:	e001      	b.n	8001776 <LoopFillZerobss>

08001772 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001772:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001774:	3204      	adds	r2, #4

08001776 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001776:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001778:	d3fb      	bcc.n	8001772 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800177a:	f7ff fc9d 	bl	80010b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800177e:	f011 fee7 	bl	8013550 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001782:	f7ff fa37 	bl	8000bf4 <main>
  bx  lr    
 8001786:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001788:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800178c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001790:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8001794:	08014fd8 	.word	0x08014fd8
  ldr r2, =_sbss
 8001798:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800179c:	20015bb4 	.word	0x20015bb4

080017a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017a0:	e7fe      	b.n	80017a0 <ADC_IRQHandler>
	...

080017a4 <pvPortMallocMicroROS>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMallocMicroROS( size_t xWantedSize )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80017b0:	f006 ffe4 	bl	800877c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80017b4:	4b58      	ldr	r3, [pc, #352]	; (8001918 <pvPortMallocMicroROS+0x174>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <pvPortMallocMicroROS+0x1c>
		{
			prvHeapInit();
 80017bc:	f000 f980 	bl	8001ac0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80017c0:	4b56      	ldr	r3, [pc, #344]	; (800191c <pvPortMallocMicroROS+0x178>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	4013      	ands	r3, r2
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f040 808e 	bne.w	80018ea <pvPortMallocMicroROS+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d01d      	beq.n	8001810 <pvPortMallocMicroROS+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80017d4:	2208      	movs	r2, #8
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	f003 0307 	and.w	r3, r3, #7
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d014      	beq.n	8001810 <pvPortMallocMicroROS+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f023 0307 	bic.w	r3, r3, #7
 80017ec:	3308      	adds	r3, #8
 80017ee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	f003 0307 	and.w	r3, r3, #7
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d00a      	beq.n	8001810 <pvPortMallocMicroROS+0x6c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80017fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017fe:	f383 8811 	msr	BASEPRI, r3
 8001802:	f3bf 8f6f 	isb	sy
 8001806:	f3bf 8f4f 	dsb	sy
 800180a:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800180c:	bf00      	nop
 800180e:	e7fe      	b.n	800180e <pvPortMallocMicroROS+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	2b00      	cmp	r3, #0
 8001814:	d069      	beq.n	80018ea <pvPortMallocMicroROS+0x146>
 8001816:	4b42      	ldr	r3, [pc, #264]	; (8001920 <pvPortMallocMicroROS+0x17c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	687a      	ldr	r2, [r7, #4]
 800181c:	429a      	cmp	r2, r3
 800181e:	d864      	bhi.n	80018ea <pvPortMallocMicroROS+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8001820:	4b40      	ldr	r3, [pc, #256]	; (8001924 <pvPortMallocMicroROS+0x180>)
 8001822:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001824:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <pvPortMallocMicroROS+0x180>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800182a:	e004      	b.n	8001836 <pvPortMallocMicroROS+0x92>
				{
					pxPreviousBlock = pxBlock;
 800182c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182e:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	d903      	bls.n	8001848 <pvPortMallocMicroROS+0xa4>
 8001840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d1f1      	bne.n	800182c <pvPortMallocMicroROS+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <pvPortMallocMicroROS+0x174>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800184e:	429a      	cmp	r2, r3
 8001850:	d04b      	beq.n	80018ea <pvPortMallocMicroROS+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8001852:	6a3b      	ldr	r3, [r7, #32]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2208      	movs	r2, #8
 8001858:	4413      	add	r3, r2
 800185a:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	681a      	ldr	r2, [r3, #0]
 8001860:	6a3b      	ldr	r3, [r7, #32]
 8001862:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8001864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001866:	685a      	ldr	r2, [r3, #4]
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	1ad2      	subs	r2, r2, r3
 800186c:	2308      	movs	r3, #8
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	429a      	cmp	r2, r3
 8001872:	d91f      	bls.n	80018b4 <pvPortMallocMicroROS+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8001874:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4413      	add	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800187c:	69bb      	ldr	r3, [r7, #24]
 800187e:	f003 0307 	and.w	r3, r3, #7
 8001882:	2b00      	cmp	r3, #0
 8001884:	d00a      	beq.n	800189c <pvPortMallocMicroROS+0xf8>
	__asm volatile
 8001886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800188a:	f383 8811 	msr	BASEPRI, r3
 800188e:	f3bf 8f6f 	isb	sy
 8001892:	f3bf 8f4f 	dsb	sy
 8001896:	613b      	str	r3, [r7, #16]
}
 8001898:	bf00      	nop
 800189a:	e7fe      	b.n	800189a <pvPortMallocMicroROS+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800189c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189e:	685a      	ldr	r2, [r3, #4]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	1ad2      	subs	r2, r2, r3
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80018a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80018ae:	69b8      	ldr	r0, [r7, #24]
 80018b0:	f000 f968 	bl	8001b84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80018b4:	4b1a      	ldr	r3, [pc, #104]	; (8001920 <pvPortMallocMicroROS+0x17c>)
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	4a18      	ldr	r2, [pc, #96]	; (8001920 <pvPortMallocMicroROS+0x17c>)
 80018c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80018c2:	4b17      	ldr	r3, [pc, #92]	; (8001920 <pvPortMallocMicroROS+0x17c>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	4b18      	ldr	r3, [pc, #96]	; (8001928 <pvPortMallocMicroROS+0x184>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	429a      	cmp	r2, r3
 80018cc:	d203      	bcs.n	80018d6 <pvPortMallocMicroROS+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80018ce:	4b14      	ldr	r3, [pc, #80]	; (8001920 <pvPortMallocMicroROS+0x17c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a15      	ldr	r2, [pc, #84]	; (8001928 <pvPortMallocMicroROS+0x184>)
 80018d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	685a      	ldr	r2, [r3, #4]
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <pvPortMallocMicroROS+0x178>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	431a      	orrs	r2, r3
 80018e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80018e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018e6:	2200      	movs	r2, #0
 80018e8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80018ea:	f006 ff55 	bl	8008798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f003 0307 	and.w	r3, r3, #7
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d00a      	beq.n	800190e <pvPortMallocMicroROS+0x16a>
	__asm volatile
 80018f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018fc:	f383 8811 	msr	BASEPRI, r3
 8001900:	f3bf 8f6f 	isb	sy
 8001904:	f3bf 8f4f 	dsb	sy
 8001908:	60fb      	str	r3, [r7, #12]
}
 800190a:	bf00      	nop
 800190c:	e7fe      	b.n	800190c <pvPortMallocMicroROS+0x168>
	return pvReturn;
 800190e:	69fb      	ldr	r3, [r7, #28]
}
 8001910:	4618      	mov	r0, r3
 8001912:	3728      	adds	r7, #40	; 0x28
 8001914:	46bd      	mov	sp, r7
 8001916:	bd80      	pop	{r7, pc}
 8001918:	200081dc 	.word	0x200081dc
 800191c:	200081e8 	.word	0x200081e8
 8001920:	200081e0 	.word	0x200081e0
 8001924:	200081d4 	.word	0x200081d4
 8001928:	200081e4 	.word	0x200081e4

0800192c <vPortFreeMicroROS>:
/*-----------------------------------------------------------*/

void vPortFreeMicroROS( void *pv )
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b086      	sub	sp, #24
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d048      	beq.n	80019d0 <vPortFreeMicroROS+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800193e:	2308      	movs	r3, #8
 8001940:	425b      	negs	r3, r3
 8001942:	697a      	ldr	r2, [r7, #20]
 8001944:	4413      	add	r3, r2
 8001946:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <vPortFreeMicroROS+0xac>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10a      	bne.n	8001970 <vPortFreeMicroROS+0x44>
	__asm volatile
 800195a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800195e:	f383 8811 	msr	BASEPRI, r3
 8001962:	f3bf 8f6f 	isb	sy
 8001966:	f3bf 8f4f 	dsb	sy
 800196a:	60fb      	str	r3, [r7, #12]
}
 800196c:	bf00      	nop
 800196e:	e7fe      	b.n	800196e <vPortFreeMicroROS+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8001970:	693b      	ldr	r3, [r7, #16]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <vPortFreeMicroROS+0x62>
	__asm volatile
 8001978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800197c:	f383 8811 	msr	BASEPRI, r3
 8001980:	f3bf 8f6f 	isb	sy
 8001984:	f3bf 8f4f 	dsb	sy
 8001988:	60bb      	str	r3, [r7, #8]
}
 800198a:	bf00      	nop
 800198c:	e7fe      	b.n	800198c <vPortFreeMicroROS+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	685a      	ldr	r2, [r3, #4]
 8001992:	4b11      	ldr	r3, [pc, #68]	; (80019d8 <vPortFreeMicroROS+0xac>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4013      	ands	r3, r2
 8001998:	2b00      	cmp	r3, #0
 800199a:	d019      	beq.n	80019d0 <vPortFreeMicroROS+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d115      	bne.n	80019d0 <vPortFreeMicroROS+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	4b0b      	ldr	r3, [pc, #44]	; (80019d8 <vPortFreeMicroROS+0xac>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80019b4:	f006 fee2 	bl	800877c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	685a      	ldr	r2, [r3, #4]
 80019bc:	4b07      	ldr	r3, [pc, #28]	; (80019dc <vPortFreeMicroROS+0xb0>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4413      	add	r3, r2
 80019c2:	4a06      	ldr	r2, [pc, #24]	; (80019dc <vPortFreeMicroROS+0xb0>)
 80019c4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80019c6:	6938      	ldr	r0, [r7, #16]
 80019c8:	f000 f8dc 	bl	8001b84 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80019cc:	f006 fee4 	bl	8008798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80019d0:	bf00      	nop
 80019d2:	3718      	adds	r7, #24
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	200081e8 	.word	0x200081e8
 80019dc:	200081e0 	.word	0x200081e0

080019e0 <getBlockSize>:
/*-----------------------------------------------------------*/

/*-----------------------------------------------------------*/
size_t getBlockSize( void *pv )
{
 80019e0:	b480      	push	{r7}
 80019e2:	b087      	sub	sp, #28
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]

	uint8_t *puc = ( uint8_t * ) pv;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	617b      	str	r3, [r7, #20]
	BlockLink_t *pxLink;

	puc -= xHeapStructSize;
 80019ec:	2308      	movs	r3, #8
 80019ee:	425b      	negs	r3, r3
 80019f0:	697a      	ldr	r2, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
	pxLink = ( void * ) puc;
 80019f6:	697b      	ldr	r3, [r7, #20]
 80019f8:	613b      	str	r3, [r7, #16]

	size_t count = pxLink->xBlockSize & ~xBlockAllocatedBit;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	4b06      	ldr	r3, [pc, #24]	; (8001a18 <getBlockSize+0x38>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	43db      	mvns	r3, r3
 8001a04:	4013      	ands	r3, r2
 8001a06:	60fb      	str	r3, [r7, #12]

	return count;
 8001a08:	68fb      	ldr	r3, [r7, #12]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	371c      	adds	r7, #28
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200081e8 	.word	0x200081e8

08001a1c <pvPortReallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortReallocMicroROS( void *pv, size_t xWantedSize )
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
 8001a24:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a26:	f006 fea9 	bl	800877c <vTaskSuspendAll>

	void * newmem = pvPortMallocMicroROS(xWantedSize);
 8001a2a:	6838      	ldr	r0, [r7, #0]
 8001a2c:	f7ff feba 	bl	80017a4 <pvPortMallocMicroROS>
 8001a30:	60b8      	str	r0, [r7, #8]
	if (newmem != NULL && pv != NULL)
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d017      	beq.n	8001a68 <pvPortReallocMicroROS+0x4c>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d014      	beq.n	8001a68 <pvPortReallocMicroROS+0x4c>
	{
		size_t count = getBlockSize(pv) - xHeapStructSize;
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffce 	bl	80019e0 <getBlockSize>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2208      	movs	r2, #8
 8001a48:	1a9b      	subs	r3, r3, r2
 8001a4a:	60fb      	str	r3, [r7, #12]
		if (xWantedSize < count)
 8001a4c:	683a      	ldr	r2, [r7, #0]
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d201      	bcs.n	8001a58 <pvPortReallocMicroROS+0x3c>
		{
			count = xWantedSize;
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	60fb      	str	r3, [r7, #12]
		}
		memcpy(newmem, pv, count);
 8001a58:	68fa      	ldr	r2, [r7, #12]
 8001a5a:	6879      	ldr	r1, [r7, #4]
 8001a5c:	68b8      	ldr	r0, [r7, #8]
 8001a5e:	f011 fda5 	bl	80135ac <memcpy>

		vPortFreeMicroROS(pv);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f7ff ff62 	bl	800192c <vPortFreeMicroROS>
	}

	( void ) xTaskResumeAll();
 8001a68:	f006 fe96 	bl	8008798 <xTaskResumeAll>

	return newmem;
 8001a6c:	68bb      	ldr	r3, [r7, #8]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	3710      	adds	r7, #16
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}

08001a76 <pvPortCallocMicroROS>:
/*-----------------------------------------------------------*/

void *pvPortCallocMicroROS( size_t num, size_t xWantedSize )
{
 8001a76:	b580      	push	{r7, lr}
 8001a78:	b086      	sub	sp, #24
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
 8001a7e:	6039      	str	r1, [r7, #0]
	vTaskSuspendAll();
 8001a80:	f006 fe7c 	bl	800877c <vTaskSuspendAll>
	size_t count = xWantedSize*num;
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	fb02 f303 	mul.w	r3, r2, r3
 8001a8c:	617b      	str	r3, [r7, #20]

	void * mem = pvPortMallocMicroROS(count);
 8001a8e:	6978      	ldr	r0, [r7, #20]
 8001a90:	f7ff fe88 	bl	80017a4 <pvPortMallocMicroROS>
 8001a94:	60f8      	str	r0, [r7, #12]
  	char *in_dest = (char*)mem;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	613b      	str	r3, [r7, #16]

  	while(count--)
 8001a9a:	e004      	b.n	8001aa6 <pvPortCallocMicroROS+0x30>
    	*in_dest++ = 0;
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	1c5a      	adds	r2, r3, #1
 8001aa0:	613a      	str	r2, [r7, #16]
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
  	while(count--)
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	1e5a      	subs	r2, r3, #1
 8001aaa:	617a      	str	r2, [r7, #20]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1f5      	bne.n	8001a9c <pvPortCallocMicroROS+0x26>

	( void ) xTaskResumeAll();
 8001ab0:	f006 fe72 	bl	8008798 <xTaskResumeAll>
  	return mem;
 8001ab4:	68fb      	ldr	r3, [r7, #12]
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001ac6:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8001aca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <prvHeapInit+0xac>)
 8001ace:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00c      	beq.n	8001af4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	3307      	adds	r3, #7
 8001ade:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	f023 0307 	bic.w	r3, r3, #7
 8001ae6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001ae8:	68ba      	ldr	r2, [r7, #8]
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <prvHeapInit+0xac>)
 8001af0:	4413      	add	r3, r2
 8001af2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001af8:	4a1d      	ldr	r2, [pc, #116]	; (8001b70 <prvHeapInit+0xb0>)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001afe:	4b1c      	ldr	r3, [pc, #112]	; (8001b70 <prvHeapInit+0xb0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	68ba      	ldr	r2, [r7, #8]
 8001b08:	4413      	add	r3, r2
 8001b0a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001b0c:	2208      	movs	r2, #8
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	1a9b      	subs	r3, r3, r2
 8001b12:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f023 0307 	bic.w	r3, r3, #7
 8001b1a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4a15      	ldr	r2, [pc, #84]	; (8001b74 <prvHeapInit+0xb4>)
 8001b20:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001b22:	4b14      	ldr	r3, [pc, #80]	; (8001b74 <prvHeapInit+0xb4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	2200      	movs	r2, #0
 8001b28:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001b2a:	4b12      	ldr	r3, [pc, #72]	; (8001b74 <prvHeapInit+0xb4>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	1ad2      	subs	r2, r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001b40:	4b0c      	ldr	r3, [pc, #48]	; (8001b74 <prvHeapInit+0xb4>)
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <prvHeapInit+0xb8>)
 8001b4e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	4a09      	ldr	r2, [pc, #36]	; (8001b7c <prvHeapInit+0xbc>)
 8001b56:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001b58:	4b09      	ldr	r3, [pc, #36]	; (8001b80 <prvHeapInit+0xc0>)
 8001b5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001b5e:	601a      	str	r2, [r3, #0]
}
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6a:	4770      	bx	lr
 8001b6c:	200009d4 	.word	0x200009d4
 8001b70:	200081d4 	.word	0x200081d4
 8001b74:	200081dc 	.word	0x200081dc
 8001b78:	200081e4 	.word	0x200081e4
 8001b7c:	200081e0 	.word	0x200081e0
 8001b80:	200081e8 	.word	0x200081e8

08001b84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b8c:	4b28      	ldr	r3, [pc, #160]	; (8001c30 <prvInsertBlockIntoFreeList+0xac>)
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	e002      	b.n	8001b98 <prvInsertBlockIntoFreeList+0x14>
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	60fb      	str	r3, [r7, #12]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d8f7      	bhi.n	8001b92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	68ba      	ldr	r2, [r7, #8]
 8001bac:	4413      	add	r3, r2
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d108      	bne.n	8001bc6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	685a      	ldr	r2, [r3, #4]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	441a      	add	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	68ba      	ldr	r2, [r7, #8]
 8001bd0:	441a      	add	r2, r3
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d118      	bne.n	8001c0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	4b15      	ldr	r3, [pc, #84]	; (8001c34 <prvInsertBlockIntoFreeList+0xb0>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d00d      	beq.n	8001c02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	441a      	add	r2, r3
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	601a      	str	r2, [r3, #0]
 8001c00:	e008      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001c02:	4b0c      	ldr	r3, [pc, #48]	; (8001c34 <prvInsertBlockIntoFreeList+0xb0>)
 8001c04:	681a      	ldr	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	e003      	b.n	8001c14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001c14:	68fa      	ldr	r2, [r7, #12]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	d002      	beq.n	8001c22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	687a      	ldr	r2, [r7, #4]
 8001c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	200081d4 	.word	0x200081d4
 8001c34:	200081dc 	.word	0x200081dc

08001c38 <microros_allocate>:
void vPortFreeMicroROS( void *pv );
void *pvPortReallocMicroROS( void *pv, size_t xWantedSize );
size_t getBlockSize( void *pv );
void *pvPortCallocMicroROS( size_t num, size_t xWantedSize );

void * microros_allocate(size_t size, void * state){
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
 8001c40:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Alloc %d (prev: %d B)\n",size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <microros_allocate+0x3c>)
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	461a      	mov	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	4b09      	ldr	r3, [pc, #36]	; (8001c74 <microros_allocate+0x3c>)
 8001c50:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001c52:	4b09      	ldr	r3, [pc, #36]	; (8001c78 <microros_allocate+0x40>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	461a      	mov	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	4413      	add	r3, r2
 8001c5c:	461a      	mov	r2, r3
 8001c5e:	4b06      	ldr	r3, [pc, #24]	; (8001c78 <microros_allocate+0x40>)
 8001c60:	601a      	str	r2, [r3, #0]
  return pvPortMallocMicroROS(size);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fd9e 	bl	80017a4 <pvPortMallocMicroROS>
 8001c68:	4603      	mov	r3, r0
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	3708      	adds	r7, #8
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	200081ec 	.word	0x200081ec
 8001c78:	200081f0 	.word	0x200081f0

08001c7c <microros_deallocate>:

void microros_deallocate(void * pointer, void * state){
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void) state;
  // printf("-- Free %d (prev: %d B)\n",getBlockSize(pointer), xPortGetFreeHeapSize());
  if (NULL != pointer){
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d00c      	beq.n	8001ca6 <microros_deallocate+0x2a>
    usedMemory -= getBlockSize(pointer);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fea7 	bl	80019e0 <getBlockSize>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4a06      	ldr	r2, [pc, #24]	; (8001cb0 <microros_deallocate+0x34>)
 8001c96:	6812      	ldr	r2, [r2, #0]
 8001c98:	1ad3      	subs	r3, r2, r3
 8001c9a:	461a      	mov	r2, r3
 8001c9c:	4b04      	ldr	r3, [pc, #16]	; (8001cb0 <microros_deallocate+0x34>)
 8001c9e:	601a      	str	r2, [r3, #0]
    vPortFreeMicroROS(pointer);
 8001ca0:	6878      	ldr	r0, [r7, #4]
 8001ca2:	f7ff fe43 	bl	800192c <vPortFreeMicroROS>
  }
}
 8001ca6:	bf00      	nop
 8001ca8:	3708      	adds	r7, #8
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	200081f0 	.word	0x200081f0

08001cb4 <microros_reallocate>:

void * microros_reallocate(void * pointer, size_t size, void * state){
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b084      	sub	sp, #16
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	60f8      	str	r0, [r7, #12]
 8001cbc:	60b9      	str	r1, [r7, #8]
 8001cbe:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Realloc %d -> %d (prev: %d B)\n",getBlockSize(pointer),size, xPortGetFreeHeapSize());
  absoluteUsedMemory += size;
 8001cc0:	4b15      	ldr	r3, [pc, #84]	; (8001d18 <microros_reallocate+0x64>)
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4413      	add	r3, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <microros_reallocate+0x64>)
 8001cce:	601a      	str	r2, [r3, #0]
  usedMemory += size;
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <microros_reallocate+0x68>)
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	461a      	mov	r2, r3
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	4413      	add	r3, r2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	4b0f      	ldr	r3, [pc, #60]	; (8001d1c <microros_reallocate+0x68>)
 8001cde:	601a      	str	r2, [r3, #0]
  if (NULL == pointer){
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d104      	bne.n	8001cf0 <microros_reallocate+0x3c>
    return pvPortMallocMicroROS(size);
 8001ce6:	68b8      	ldr	r0, [r7, #8]
 8001ce8:	f7ff fd5c 	bl	80017a4 <pvPortMallocMicroROS>
 8001cec:	4603      	mov	r3, r0
 8001cee:	e00e      	b.n	8001d0e <microros_reallocate+0x5a>
  } else {
    usedMemory -= getBlockSize(pointer);
 8001cf0:	68f8      	ldr	r0, [r7, #12]
 8001cf2:	f7ff fe75 	bl	80019e0 <getBlockSize>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	4a08      	ldr	r2, [pc, #32]	; (8001d1c <microros_reallocate+0x68>)
 8001cfa:	6812      	ldr	r2, [r2, #0]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	461a      	mov	r2, r3
 8001d00:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <microros_reallocate+0x68>)
 8001d02:	601a      	str	r2, [r3, #0]
    return pvPortReallocMicroROS(pointer,size);
 8001d04:	68b9      	ldr	r1, [r7, #8]
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f7ff fe88 	bl	8001a1c <pvPortReallocMicroROS>
 8001d0c:	4603      	mov	r3, r0
  }
}
 8001d0e:	4618      	mov	r0, r3
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	200081ec 	.word	0x200081ec
 8001d1c:	200081f0 	.word	0x200081f0

08001d20 <microros_zero_allocate>:

void * microros_zero_allocate(size_t number_of_elements, size_t size_of_element, void * state){
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b084      	sub	sp, #16
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	60f8      	str	r0, [r7, #12]
 8001d28:	60b9      	str	r1, [r7, #8]
 8001d2a:	607a      	str	r2, [r7, #4]
  (void) state;
  // printf("-- Calloc %d x %d = %d -> (prev: %d B)\n",number_of_elements,size_of_element, number_of_elements*size_of_element, xPortGetFreeHeapSize());
  absoluteUsedMemory += number_of_elements*size_of_element;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	68ba      	ldr	r2, [r7, #8]
 8001d30:	fb02 f303 	mul.w	r3, r2, r3
 8001d34:	4a0c      	ldr	r2, [pc, #48]	; (8001d68 <microros_zero_allocate+0x48>)
 8001d36:	6812      	ldr	r2, [r2, #0]
 8001d38:	4413      	add	r3, r2
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	4b0a      	ldr	r3, [pc, #40]	; (8001d68 <microros_zero_allocate+0x48>)
 8001d3e:	601a      	str	r2, [r3, #0]
  usedMemory += number_of_elements*size_of_element;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	fb02 f303 	mul.w	r3, r2, r3
 8001d48:	4a08      	ldr	r2, [pc, #32]	; (8001d6c <microros_zero_allocate+0x4c>)
 8001d4a:	6812      	ldr	r2, [r2, #0]
 8001d4c:	4413      	add	r3, r2
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b06      	ldr	r3, [pc, #24]	; (8001d6c <microros_zero_allocate+0x4c>)
 8001d52:	601a      	str	r2, [r3, #0]
  return pvPortCallocMicroROS(number_of_elements,size_of_element);
 8001d54:	68b9      	ldr	r1, [r7, #8]
 8001d56:	68f8      	ldr	r0, [r7, #12]
 8001d58:	f7ff fe8d 	bl	8001a76 <pvPortCallocMicroROS>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	200081ec 	.word	0x200081ec
 8001d6c:	200081f0 	.word	0x200081f0

08001d70 <UTILS_NanosecondsToTimespec>:
#define NANOSECONDS_PER_SECOND     ( 1000000000LL )                                /**< Nanoseconds per second. */
#define NANOSECONDS_PER_TICK       ( NANOSECONDS_PER_SECOND / configTICK_RATE_HZ ) /**< Nanoseconds per FreeRTOS tick. */

void UTILS_NanosecondsToTimespec( int64_t llSource,
                                  struct timespec * const pxDestination )
{
 8001d70:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
    long lCarrySec = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	617b      	str	r3, [r7, #20]

    /* Convert to timespec. */
    pxDestination->tv_sec = ( time_t ) ( llSource / NANOSECONDS_PER_SECOND );
 8001d82:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d86:	a320      	add	r3, pc, #128	; (adr r3, 8001e08 <UTILS_NanosecondsToTimespec+0x98>)
 8001d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d8c:	f7fe fa88 	bl	80002a0 <__aeabi_ldivmod>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	e9c1 2300 	strd	r2, r3, [r1]
    pxDestination->tv_nsec = ( long ) ( llSource % NANOSECONDS_PER_SECOND );
 8001d9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001d9e:	a31a      	add	r3, pc, #104	; (adr r3, 8001e08 <UTILS_NanosecondsToTimespec+0x98>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fa7c 	bl	80002a0 <__aeabi_ldivmod>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	609a      	str	r2, [r3, #8]

    /* Subtract from tv_sec if tv_nsec < 0. */
    if( pxDestination->tv_nsec < 0L )
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	da20      	bge.n	8001df6 <UTILS_NanosecondsToTimespec+0x86>
    {
        /* Compute the number of seconds to carry. */
        lCarrySec = ( pxDestination->tv_nsec / ( long ) NANOSECONDS_PER_SECOND ) + 1L;
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	4a11      	ldr	r2, [pc, #68]	; (8001e00 <UTILS_NanosecondsToTimespec+0x90>)
 8001dba:	fb82 1203 	smull	r1, r2, r2, r3
 8001dbe:	1712      	asrs	r2, r2, #28
 8001dc0:	17db      	asrs	r3, r3, #31
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	617b      	str	r3, [r7, #20]

        pxDestination->tv_sec -= ( time_t ) ( lCarrySec );
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dce:	6979      	ldr	r1, [r7, #20]
 8001dd0:	17c8      	asrs	r0, r1, #31
 8001dd2:	460c      	mov	r4, r1
 8001dd4:	4605      	mov	r5, r0
 8001dd6:	ebb2 0804 	subs.w	r8, r2, r4
 8001dda:	eb63 0905 	sbc.w	r9, r3, r5
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	e9c3 8900 	strd	r8, r9, [r3]
        pxDestination->tv_nsec += lCarrySec * ( long ) NANOSECONDS_PER_SECOND;
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689a      	ldr	r2, [r3, #8]
 8001de8:	697b      	ldr	r3, [r7, #20]
 8001dea:	4906      	ldr	r1, [pc, #24]	; (8001e04 <UTILS_NanosecondsToTimespec+0x94>)
 8001dec:	fb01 f303 	mul.w	r3, r1, r3
 8001df0:	441a      	add	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	609a      	str	r2, [r3, #8]
    }
}
 8001df6:	bf00      	nop
 8001df8:	3718      	adds	r7, #24
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e00:	44b82fa1 	.word	0x44b82fa1
 8001e04:	3b9aca00 	.word	0x3b9aca00
 8001e08:	3b9aca00 	.word	0x3b9aca00
 8001e0c:	00000000 	.word	0x00000000

08001e10 <clock_gettime>:

int clock_gettime( int clock_id,
                   struct timespec * tp )
{
 8001e10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e14:	b08e      	sub	sp, #56	; 0x38
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6278      	str	r0, [r7, #36]	; 0x24
 8001e1a:	6239      	str	r1, [r7, #32]
    TimeOut_t xCurrentTime = { 0 };
 8001e1c:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e20:	2300      	movs	r3, #0
 8001e22:	6013      	str	r3, [r2, #0]
 8001e24:	6053      	str	r3, [r2, #4]

    /* Intermediate variable used to convert TimeOut_t to struct timespec.
     * Also used to detect overflow issues. It must be unsigned because the
     * behavior of signed integer overflow is undefined. */
    uint64_t ullTickCount = 0ULL;
 8001e26:	f04f 0200 	mov.w	r2, #0
 8001e2a:	f04f 0300 	mov.w	r3, #0
 8001e2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    /* Silence warnings about unused parameters. */
    ( void ) clock_id;

    /* Get the current tick count and overflow count. vTaskSetTimeOutState()
     * is used to get these values because they are both static in tasks.c. */
    vTaskSetTimeOutState( &xCurrentTime );
 8001e32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e36:	4618      	mov	r0, r3
 8001e38:	f006 ff28 	bl	8008c8c <vTaskSetTimeOutState>

    /* Adjust the tick count for the number of times a TickType_t has overflowed.
     * portMAX_DELAY should be the maximum value of a TickType_t. */
    ullTickCount = ( uint64_t ) ( xCurrentTime.xOverflowCount ) << ( sizeof( TickType_t ) * 8 );
 8001e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e3e:	17da      	asrs	r2, r3, #31
 8001e40:	61bb      	str	r3, [r7, #24]
 8001e42:	61fa      	str	r2, [r7, #28]
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	69b9      	ldr	r1, [r7, #24]
 8001e4e:	000b      	movs	r3, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    /* Add the current tick count. */
    ullTickCount += xCurrentTime.xTimeOnEntering;
 8001e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e58:	2200      	movs	r2, #0
 8001e5a:	461c      	mov	r4, r3
 8001e5c:	4615      	mov	r5, r2
 8001e5e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001e62:	1911      	adds	r1, r2, r4
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	416b      	adcs	r3, r5
 8001e68:	60fb      	str	r3, [r7, #12]
 8001e6a:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8001e6e:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30

    /* Convert ullTickCount to timespec. */
    UTILS_NanosecondsToTimespec( ( int64_t ) ullTickCount * NANOSECONDS_PER_TICK, tp );
 8001e72:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8001e76:	4602      	mov	r2, r0
 8001e78:	460b      	mov	r3, r1
 8001e7a:	f04f 0400 	mov.w	r4, #0
 8001e7e:	f04f 0500 	mov.w	r5, #0
 8001e82:	015d      	lsls	r5, r3, #5
 8001e84:	ea45 65d2 	orr.w	r5, r5, r2, lsr #27
 8001e88:	0154      	lsls	r4, r2, #5
 8001e8a:	4622      	mov	r2, r4
 8001e8c:	462b      	mov	r3, r5
 8001e8e:	ebb2 0800 	subs.w	r8, r2, r0
 8001e92:	eb63 0901 	sbc.w	r9, r3, r1
 8001e96:	f04f 0200 	mov.w	r2, #0
 8001e9a:	f04f 0300 	mov.w	r3, #0
 8001e9e:	ea4f 2349 	mov.w	r3, r9, lsl #9
 8001ea2:	ea43 53d8 	orr.w	r3, r3, r8, lsr #23
 8001ea6:	ea4f 2248 	mov.w	r2, r8, lsl #9
 8001eaa:	4690      	mov	r8, r2
 8001eac:	4699      	mov	r9, r3
 8001eae:	eb18 0a00 	adds.w	sl, r8, r0
 8001eb2:	eb49 0b01 	adc.w	fp, r9, r1
 8001eb6:	f04f 0200 	mov.w	r2, #0
 8001eba:	f04f 0300 	mov.w	r3, #0
 8001ebe:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ec2:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001ec6:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001eca:	ebb2 040a 	subs.w	r4, r2, sl
 8001ece:	603c      	str	r4, [r7, #0]
 8001ed0:	eb63 030b 	sbc.w	r3, r3, fp
 8001ed4:	607b      	str	r3, [r7, #4]
 8001ed6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001eda:	4623      	mov	r3, r4
 8001edc:	181b      	adds	r3, r3, r0
 8001ede:	613b      	str	r3, [r7, #16]
 8001ee0:	462b      	mov	r3, r5
 8001ee2:	eb41 0303 	adc.w	r3, r1, r3
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	6a3a      	ldr	r2, [r7, #32]
 8001eea:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001eee:	f7ff ff3f 	bl	8001d70 <UTILS_NanosecondsToTimespec>

    return 0;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3738      	adds	r7, #56	; 0x38
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001f00 <cubemx_transport_open>:
TaskHandle_t ddsm115_xTaskHandle;
static uint8_t dma_buffer[UART_DMA_BUFFER_SIZE];
uint8_t ddsm115_dma_buffer[DDSM115_DMA_BUFFER_SIZE];
static size_t dma_head = 0, dma_tail = 0;

bool cubemx_transport_open(struct uxrCustomTransport * transport){
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b084      	sub	sp, #16
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f0e:	60fb      	str	r3, [r7, #12]
    HAL_UART_Receive_DMA(uart, dma_buffer, UART_DMA_BUFFER_SIZE);
 8001f10:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001f14:	4904      	ldr	r1, [pc, #16]	; (8001f28 <cubemx_transport_open+0x28>)
 8001f16:	68f8      	ldr	r0, [r7, #12]
 8001f18:	f003 fda0 	bl	8005a5c <HAL_UART_Receive_DMA>
    return true;
 8001f1c:	2301      	movs	r3, #1
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3710      	adds	r7, #16
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200081f4 	.word	0x200081f4

08001f2c <cubemx_transport_close>:

bool cubemx_transport_close(struct uxrCustomTransport * transport){
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f3a:	60fb      	str	r3, [r7, #12]
    HAL_UART_DMAStop(uart);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f003 fdbd 	bl	8005abc <HAL_UART_DMAStop>
    return true;
 8001f42:	2301      	movs	r3, #1
}
 8001f44:	4618      	mov	r0, r3
 8001f46:	3710      	adds	r7, #16
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bd80      	pop	{r7, pc}

08001f4c <cubemx_transport_write>:

size_t cubemx_transport_write(struct uxrCustomTransport* transport, uint8_t * buf, size_t len, uint8_t * err){
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b086      	sub	sp, #24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	60f8      	str	r0, [r7, #12]
 8001f54:	60b9      	str	r1, [r7, #8]
 8001f56:	607a      	str	r2, [r7, #4]
 8001f58:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001f60:	617b      	str	r3, [r7, #20]

    HAL_StatusTypeDef ret;
    if (uart->gState == HAL_UART_STATE_READY){
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	d11c      	bne.n	8001fa8 <cubemx_transport_write+0x5c>
        ret = HAL_UART_Transmit_DMA(uart, buf, len);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	b29b      	uxth	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	68b9      	ldr	r1, [r7, #8]
 8001f76:	6978      	ldr	r0, [r7, #20]
 8001f78:	f003 fcf2 	bl	8005960 <HAL_UART_Transmit_DMA>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	74fb      	strb	r3, [r7, #19]
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001f80:	e002      	b.n	8001f88 <cubemx_transport_write+0x3c>
            osDelay(1);
 8001f82:	2001      	movs	r0, #1
 8001f84:	f005 fb94 	bl	80076b0 <osDelay>
        while (ret == HAL_OK && uart->gState != HAL_UART_STATE_READY){
 8001f88:	7cfb      	ldrb	r3, [r7, #19]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d105      	bne.n	8001f9a <cubemx_transport_write+0x4e>
 8001f8e:	697b      	ldr	r3, [r7, #20]
 8001f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f94:	b2db      	uxtb	r3, r3
 8001f96:	2b20      	cmp	r3, #32
 8001f98:	d1f3      	bne.n	8001f82 <cubemx_transport_write+0x36>
        }

        return (ret == HAL_OK) ? len : 0;
 8001f9a:	7cfb      	ldrb	r3, [r7, #19]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <cubemx_transport_write+0x58>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	e002      	b.n	8001faa <cubemx_transport_write+0x5e>
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	e000      	b.n	8001faa <cubemx_transport_write+0x5e>
    }else{
        return 0;
 8001fa8:	2300      	movs	r3, #0
    }
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
	...

08001fb4 <cubemx_transport_read>:

size_t cubemx_transport_read(struct uxrCustomTransport* transport, uint8_t* buf, size_t len, int timeout, uint8_t* err){
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b088      	sub	sp, #32
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
 8001fc0:	603b      	str	r3, [r7, #0]
    UART_HandleTypeDef * uart = (UART_HandleTypeDef*) transport->args;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 8001fc8:	617b      	str	r3, [r7, #20]

    int ms_used = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("cpsid i" : : : "memory");
 8001fce:	b672      	cpsid	i
}
 8001fd0:	bf00      	nop
    do
    {
        __disable_irq();
        dma_tail = UART_DMA_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(uart->hdmarx);
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 8001fde:	4a1c      	ldr	r2, [pc, #112]	; (8002050 <cubemx_transport_read+0x9c>)
 8001fe0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8001fe2:	b662      	cpsie	i
}
 8001fe4:	bf00      	nop
        __enable_irq();
        ms_used++;
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	61fb      	str	r3, [r7, #28]
        osDelay(portTICK_RATE_MS);
 8001fec:	2001      	movs	r0, #1
 8001fee:	f005 fb5f 	bl	80076b0 <osDelay>
    } while (dma_head == dma_tail && ms_used < timeout);
 8001ff2:	4b18      	ldr	r3, [pc, #96]	; (8002054 <cubemx_transport_read+0xa0>)
 8001ff4:	681a      	ldr	r2, [r3, #0]
 8001ff6:	4b16      	ldr	r3, [pc, #88]	; (8002050 <cubemx_transport_read+0x9c>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	d103      	bne.n	8002006 <cubemx_transport_read+0x52>
 8001ffe:	69fa      	ldr	r2, [r7, #28]
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	429a      	cmp	r2, r3
 8002004:	dbe3      	blt.n	8001fce <cubemx_transport_read+0x1a>
    
    size_t wrote = 0;
 8002006:	2300      	movs	r3, #0
 8002008:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 800200a:	e011      	b.n	8002030 <cubemx_transport_read+0x7c>
        buf[wrote] = dma_buffer[dma_head];
 800200c:	4b11      	ldr	r3, [pc, #68]	; (8002054 <cubemx_transport_read+0xa0>)
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	68b9      	ldr	r1, [r7, #8]
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	440b      	add	r3, r1
 8002016:	4910      	ldr	r1, [pc, #64]	; (8002058 <cubemx_transport_read+0xa4>)
 8002018:	5c8a      	ldrb	r2, [r1, r2]
 800201a:	701a      	strb	r2, [r3, #0]
        dma_head = (dma_head + 1) % UART_DMA_BUFFER_SIZE;
 800201c:	4b0d      	ldr	r3, [pc, #52]	; (8002054 <cubemx_transport_read+0xa0>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	3301      	adds	r3, #1
 8002022:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002026:	4a0b      	ldr	r2, [pc, #44]	; (8002054 <cubemx_transport_read+0xa0>)
 8002028:	6013      	str	r3, [r2, #0]
        wrote++;
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	3301      	adds	r3, #1
 800202e:	61bb      	str	r3, [r7, #24]
    while ((dma_head != dma_tail) && (wrote < len)){
 8002030:	4b08      	ldr	r3, [pc, #32]	; (8002054 <cubemx_transport_read+0xa0>)
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	4b06      	ldr	r3, [pc, #24]	; (8002050 <cubemx_transport_read+0x9c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d003      	beq.n	8002044 <cubemx_transport_read+0x90>
 800203c:	69ba      	ldr	r2, [r7, #24]
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	429a      	cmp	r2, r3
 8002042:	d3e3      	bcc.n	800200c <cubemx_transport_read+0x58>
    }
    
    return wrote;
 8002044:	69bb      	ldr	r3, [r7, #24]
}
 8002046:	4618      	mov	r0, r3
 8002048:	3720      	adds	r7, #32
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	20008a04 	.word	0x20008a04
 8002054:	20008a00 	.word	0x20008a00
 8002058:	200081f4 	.word	0x200081f4

0800205c <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
	if(huart==&huart2)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0b      	ldr	r2, [pc, #44]	; (8002094 <HAL_UART_RxCpltCallback+0x38>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d106      	bne.n	800207a <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_DMA(&huart2, dma_buffer, UART_DMA_BUFFER_SIZE);
 800206c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002070:	4909      	ldr	r1, [pc, #36]	; (8002098 <HAL_UART_RxCpltCallback+0x3c>)
 8002072:	4808      	ldr	r0, [pc, #32]	; (8002094 <HAL_UART_RxCpltCallback+0x38>)
 8002074:	f003 fcf2 	bl	8005a5c <HAL_UART_Receive_DMA>
        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
       // vTaskNotifyGiveFromISR(ddsm115_xTaskHandle, pdFALSE);
        //portYIELD_FROM_ISR(pdFALSE);
    }

}
 8002078:	e007      	b.n	800208a <HAL_UART_RxCpltCallback+0x2e>
	} else if (huart==&huart4) {
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	4a07      	ldr	r2, [pc, #28]	; (800209c <HAL_UART_RxCpltCallback+0x40>)
 800207e:	4293      	cmp	r3, r2
 8002080:	d103      	bne.n	800208a <HAL_UART_RxCpltCallback+0x2e>
        HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_6);
 8002082:	2140      	movs	r1, #64	; 0x40
 8002084:	4806      	ldr	r0, [pc, #24]	; (80020a0 <HAL_UART_RxCpltCallback+0x44>)
 8002086:	f002 fadc 	bl	8004642 <HAL_GPIO_TogglePin>
}
 800208a:	bf00      	nop
 800208c:	3708      	adds	r7, #8
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	20000320 	.word	0x20000320
 8002098:	200081f4 	.word	0x200081f4
 800209c:	20000254 	.word	0x20000254
 80020a0:	40021000 	.word	0x40021000

080020a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020a8:	4b0e      	ldr	r3, [pc, #56]	; (80020e4 <HAL_Init+0x40>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a0d      	ldr	r2, [pc, #52]	; (80020e4 <HAL_Init+0x40>)
 80020ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b4:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <HAL_Init+0x40>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a0a      	ldr	r2, [pc, #40]	; (80020e4 <HAL_Init+0x40>)
 80020ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80020be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c0:	4b08      	ldr	r3, [pc, #32]	; (80020e4 <HAL_Init+0x40>)
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	4a07      	ldr	r2, [pc, #28]	; (80020e4 <HAL_Init+0x40>)
 80020c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020cc:	2003      	movs	r0, #3
 80020ce:	f000 fb5e 	bl	800278e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d2:	200f      	movs	r0, #15
 80020d4:	f7fe fe5c 	bl	8000d90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020d8:	f7fe fe2e 	bl	8000d38 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020dc:	2300      	movs	r3, #0
}
 80020de:	4618      	mov	r0, r3
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	40023c00 	.word	0x40023c00

080020e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b06      	ldr	r3, [pc, #24]	; (8002108 <HAL_IncTick+0x20>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b06      	ldr	r3, [pc, #24]	; (800210c <HAL_IncTick+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a04      	ldr	r2, [pc, #16]	; (800210c <HAL_IncTick+0x24>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	2000000c 	.word	0x2000000c
 800210c:	20008a08 	.word	0x20008a08

08002110 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  return uwTick;
 8002114:	4b03      	ldr	r3, [pc, #12]	; (8002124 <HAL_GetTick+0x14>)
 8002116:	681b      	ldr	r3, [r3, #0]
}
 8002118:	4618      	mov	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002120:	4770      	bx	lr
 8002122:	bf00      	nop
 8002124:	20008a08 	.word	0x20008a08

08002128 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b084      	sub	sp, #16
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002130:	f7ff ffee 	bl	8002110 <HAL_GetTick>
 8002134:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002140:	d005      	beq.n	800214e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002142:	4b0a      	ldr	r3, [pc, #40]	; (800216c <HAL_Delay+0x44>)
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	4413      	add	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800214e:	bf00      	nop
 8002150:	f7ff ffde 	bl	8002110 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	68fa      	ldr	r2, [r7, #12]
 800215c:	429a      	cmp	r2, r3
 800215e:	d8f7      	bhi.n	8002150 <HAL_Delay+0x28>
  {
  }
}
 8002160:	bf00      	nop
 8002162:	bf00      	nop
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	2000000c 	.word	0x2000000c

08002170 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002178:	2300      	movs	r3, #0
 800217a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	e033      	b.n	80021ee <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800218e:	6878      	ldr	r0, [r7, #4]
 8002190:	f7fe faa6 	bl	80006e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	2200      	movs	r2, #0
 8002198:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d118      	bne.n	80021e0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80021b6:	f023 0302 	bic.w	r3, r3, #2
 80021ba:	f043 0202 	orr.w	r2, r3, #2
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80021c2:	6878      	ldr	r0, [r7, #4]
 80021c4:	f000 f93a 	bl	800243c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	f043 0201 	orr.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40
 80021de:	e001      	b.n	80021e4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80021e0:	2301      	movs	r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80021f8:	b480      	push	{r7}
 80021fa:	b085      	sub	sp, #20
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002202:	2300      	movs	r3, #0
 8002204:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800220c:	2b01      	cmp	r3, #1
 800220e:	d101      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1c>
 8002210:	2302      	movs	r3, #2
 8002212:	e105      	b.n	8002420 <HAL_ADC_ConfigChannel+0x228>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	2b09      	cmp	r3, #9
 8002222:	d925      	bls.n	8002270 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	68d9      	ldr	r1, [r3, #12]
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	b29b      	uxth	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	4613      	mov	r3, r2
 8002234:	005b      	lsls	r3, r3, #1
 8002236:	4413      	add	r3, r2
 8002238:	3b1e      	subs	r3, #30
 800223a:	2207      	movs	r2, #7
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43da      	mvns	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	400a      	ands	r2, r1
 8002248:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	68d9      	ldr	r1, [r3, #12]
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	689a      	ldr	r2, [r3, #8]
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	b29b      	uxth	r3, r3
 800225a:	4618      	mov	r0, r3
 800225c:	4603      	mov	r3, r0
 800225e:	005b      	lsls	r3, r3, #1
 8002260:	4403      	add	r3, r0
 8002262:	3b1e      	subs	r3, #30
 8002264:	409a      	lsls	r2, r3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	430a      	orrs	r2, r1
 800226c:	60da      	str	r2, [r3, #12]
 800226e:	e022      	b.n	80022b6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6919      	ldr	r1, [r3, #16]
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	b29b      	uxth	r3, r3
 800227c:	461a      	mov	r2, r3
 800227e:	4613      	mov	r3, r2
 8002280:	005b      	lsls	r3, r3, #1
 8002282:	4413      	add	r3, r2
 8002284:	2207      	movs	r2, #7
 8002286:	fa02 f303 	lsl.w	r3, r2, r3
 800228a:	43da      	mvns	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	400a      	ands	r2, r1
 8002292:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6919      	ldr	r1, [r3, #16]
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	689a      	ldr	r2, [r3, #8]
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	4618      	mov	r0, r3
 80022a6:	4603      	mov	r3, r0
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4403      	add	r3, r0
 80022ac:	409a      	lsls	r2, r3
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	430a      	orrs	r2, r1
 80022b4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d824      	bhi.n	8002308 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685a      	ldr	r2, [r3, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	009b      	lsls	r3, r3, #2
 80022cc:	4413      	add	r3, r2
 80022ce:	3b05      	subs	r3, #5
 80022d0:	221f      	movs	r2, #31
 80022d2:	fa02 f303 	lsl.w	r3, r2, r3
 80022d6:	43da      	mvns	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	400a      	ands	r2, r1
 80022de:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	4618      	mov	r0, r3
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	685a      	ldr	r2, [r3, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	009b      	lsls	r3, r3, #2
 80022f6:	4413      	add	r3, r2
 80022f8:	3b05      	subs	r3, #5
 80022fa:	fa00 f203 	lsl.w	r2, r0, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	635a      	str	r2, [r3, #52]	; 0x34
 8002306:	e04c      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b0c      	cmp	r3, #12
 800230e:	d824      	bhi.n	800235a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002316:	683b      	ldr	r3, [r7, #0]
 8002318:	685a      	ldr	r2, [r3, #4]
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	3b23      	subs	r3, #35	; 0x23
 8002322:	221f      	movs	r2, #31
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	43da      	mvns	r2, r3
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	400a      	ands	r2, r1
 8002330:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	b29b      	uxth	r3, r3
 800233e:	4618      	mov	r0, r3
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4613      	mov	r3, r2
 8002346:	009b      	lsls	r3, r3, #2
 8002348:	4413      	add	r3, r2
 800234a:	3b23      	subs	r3, #35	; 0x23
 800234c:	fa00 f203 	lsl.w	r2, r0, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	430a      	orrs	r2, r1
 8002356:	631a      	str	r2, [r3, #48]	; 0x30
 8002358:	e023      	b.n	80023a2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685a      	ldr	r2, [r3, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	3b41      	subs	r3, #65	; 0x41
 800236c:	221f      	movs	r2, #31
 800236e:	fa02 f303 	lsl.w	r3, r2, r3
 8002372:	43da      	mvns	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	400a      	ands	r2, r1
 800237a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b29b      	uxth	r3, r3
 8002388:	4618      	mov	r0, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685a      	ldr	r2, [r3, #4]
 800238e:	4613      	mov	r3, r2
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	4413      	add	r3, r2
 8002394:	3b41      	subs	r3, #65	; 0x41
 8002396:	fa00 f203 	lsl.w	r2, r0, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	430a      	orrs	r2, r1
 80023a0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023a2:	4b22      	ldr	r3, [pc, #136]	; (800242c <HAL_ADC_ConfigChannel+0x234>)
 80023a4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	4a21      	ldr	r2, [pc, #132]	; (8002430 <HAL_ADC_ConfigChannel+0x238>)
 80023ac:	4293      	cmp	r3, r2
 80023ae:	d109      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1cc>
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	2b12      	cmp	r3, #18
 80023b6:	d105      	bne.n	80023c4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a19      	ldr	r2, [pc, #100]	; (8002430 <HAL_ADC_ConfigChannel+0x238>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d123      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x21e>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2b10      	cmp	r3, #16
 80023d4:	d003      	beq.n	80023de <HAL_ADC_ConfigChannel+0x1e6>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2b11      	cmp	r3, #17
 80023dc:	d11b      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b10      	cmp	r3, #16
 80023f0:	d111      	bne.n	8002416 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80023f2:	4b10      	ldr	r3, [pc, #64]	; (8002434 <HAL_ADC_ConfigChannel+0x23c>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	4a10      	ldr	r2, [pc, #64]	; (8002438 <HAL_ADC_ConfigChannel+0x240>)
 80023f8:	fba2 2303 	umull	r2, r3, r2, r3
 80023fc:	0c9a      	lsrs	r2, r3, #18
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002408:	e002      	b.n	8002410 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800240a:	68bb      	ldr	r3, [r7, #8]
 800240c:	3b01      	subs	r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d1f9      	bne.n	800240a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	3714      	adds	r7, #20
 8002424:	46bd      	mov	sp, r7
 8002426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242a:	4770      	bx	lr
 800242c:	40012300 	.word	0x40012300
 8002430:	40012000 	.word	0x40012000
 8002434:	20000004 	.word	0x20000004
 8002438:	431bde83 	.word	0x431bde83

0800243c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002444:	4b79      	ldr	r3, [pc, #484]	; (800262c <ADC_Init+0x1f0>)
 8002446:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	685a      	ldr	r2, [r3, #4]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	431a      	orrs	r2, r3
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685a      	ldr	r2, [r3, #4]
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002470:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	6859      	ldr	r1, [r3, #4]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	691b      	ldr	r3, [r3, #16]
 800247c:	021a      	lsls	r2, r3, #8
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	430a      	orrs	r2, r1
 8002484:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002494:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	6859      	ldr	r1, [r3, #4]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	430a      	orrs	r2, r1
 80024a6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	689a      	ldr	r2, [r3, #8]
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80024b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68da      	ldr	r2, [r3, #12]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	430a      	orrs	r2, r1
 80024c8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ce:	4a58      	ldr	r2, [pc, #352]	; (8002630 <ADC_Init+0x1f4>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d022      	beq.n	800251a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80024e2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	6899      	ldr	r1, [r3, #8]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	430a      	orrs	r2, r1
 80024f4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689a      	ldr	r2, [r3, #8]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002504:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	6899      	ldr	r1, [r3, #8]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	430a      	orrs	r2, r1
 8002516:	609a      	str	r2, [r3, #8]
 8002518:	e00f      	b.n	800253a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	689a      	ldr	r2, [r3, #8]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002528:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	689a      	ldr	r2, [r3, #8]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002538:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f022 0202 	bic.w	r2, r2, #2
 8002548:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	6899      	ldr	r1, [r3, #8]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	7e1b      	ldrb	r3, [r3, #24]
 8002554:	005a      	lsls	r2, r3, #1
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	430a      	orrs	r2, r1
 800255c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d01b      	beq.n	80025a0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	685a      	ldr	r2, [r3, #4]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002576:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	685a      	ldr	r2, [r3, #4]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002586:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6859      	ldr	r1, [r3, #4]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002592:	3b01      	subs	r3, #1
 8002594:	035a      	lsls	r2, r3, #13
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	430a      	orrs	r2, r1
 800259c:	605a      	str	r2, [r3, #4]
 800259e:	e007      	b.n	80025b0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	685a      	ldr	r2, [r3, #4]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025ae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80025be:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69db      	ldr	r3, [r3, #28]
 80025ca:	3b01      	subs	r3, #1
 80025cc:	051a      	lsls	r2, r3, #20
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	430a      	orrs	r2, r1
 80025d4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80025e4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	6899      	ldr	r1, [r3, #8]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80025f2:	025a      	lsls	r2, r3, #9
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	430a      	orrs	r2, r1
 80025fa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	689a      	ldr	r2, [r3, #8]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800260a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	6899      	ldr	r1, [r3, #8]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	695b      	ldr	r3, [r3, #20]
 8002616:	029a      	lsls	r2, r3, #10
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	430a      	orrs	r2, r1
 800261e:	609a      	str	r2, [r3, #8]
}
 8002620:	bf00      	nop
 8002622:	3714      	adds	r7, #20
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr
 800262c:	40012300 	.word	0x40012300
 8002630:	0f000001 	.word	0x0f000001

08002634 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002644:	4b0c      	ldr	r3, [pc, #48]	; (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800264a:	68ba      	ldr	r2, [r7, #8]
 800264c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002650:	4013      	ands	r3, r2
 8002652:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002658:	68bb      	ldr	r3, [r7, #8]
 800265a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800265c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002664:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002666:	4a04      	ldr	r2, [pc, #16]	; (8002678 <__NVIC_SetPriorityGrouping+0x44>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	60d3      	str	r3, [r2, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	e000ed00 	.word	0xe000ed00

0800267c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002680:	4b04      	ldr	r3, [pc, #16]	; (8002694 <__NVIC_GetPriorityGrouping+0x18>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	0a1b      	lsrs	r3, r3, #8
 8002686:	f003 0307 	and.w	r3, r3, #7
}
 800268a:	4618      	mov	r0, r3
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	db0b      	blt.n	80026c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026aa:	79fb      	ldrb	r3, [r7, #7]
 80026ac:	f003 021f 	and.w	r2, r3, #31
 80026b0:	4907      	ldr	r1, [pc, #28]	; (80026d0 <__NVIC_EnableIRQ+0x38>)
 80026b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026b6:	095b      	lsrs	r3, r3, #5
 80026b8:	2001      	movs	r0, #1
 80026ba:	fa00 f202 	lsl.w	r2, r0, r2
 80026be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	e000e100 	.word	0xe000e100

080026d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	db0a      	blt.n	80026fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	b2da      	uxtb	r2, r3
 80026ec:	490c      	ldr	r1, [pc, #48]	; (8002720 <__NVIC_SetPriority+0x4c>)
 80026ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f2:	0112      	lsls	r2, r2, #4
 80026f4:	b2d2      	uxtb	r2, r2
 80026f6:	440b      	add	r3, r1
 80026f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80026fc:	e00a      	b.n	8002714 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	b2da      	uxtb	r2, r3
 8002702:	4908      	ldr	r1, [pc, #32]	; (8002724 <__NVIC_SetPriority+0x50>)
 8002704:	79fb      	ldrb	r3, [r7, #7]
 8002706:	f003 030f 	and.w	r3, r3, #15
 800270a:	3b04      	subs	r3, #4
 800270c:	0112      	lsls	r2, r2, #4
 800270e:	b2d2      	uxtb	r2, r2
 8002710:	440b      	add	r3, r1
 8002712:	761a      	strb	r2, [r3, #24]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	e000e100 	.word	0xe000e100
 8002724:	e000ed00 	.word	0xe000ed00

08002728 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002728:	b480      	push	{r7}
 800272a:	b089      	sub	sp, #36	; 0x24
 800272c:	af00      	add	r7, sp, #0
 800272e:	60f8      	str	r0, [r7, #12]
 8002730:	60b9      	str	r1, [r7, #8]
 8002732:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800273c:	69fb      	ldr	r3, [r7, #28]
 800273e:	f1c3 0307 	rsb	r3, r3, #7
 8002742:	2b04      	cmp	r3, #4
 8002744:	bf28      	it	cs
 8002746:	2304      	movcs	r3, #4
 8002748:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	3304      	adds	r3, #4
 800274e:	2b06      	cmp	r3, #6
 8002750:	d902      	bls.n	8002758 <NVIC_EncodePriority+0x30>
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	3b03      	subs	r3, #3
 8002756:	e000      	b.n	800275a <NVIC_EncodePriority+0x32>
 8002758:	2300      	movs	r3, #0
 800275a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800275c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	fa02 f303 	lsl.w	r3, r2, r3
 8002766:	43da      	mvns	r2, r3
 8002768:	68bb      	ldr	r3, [r7, #8]
 800276a:	401a      	ands	r2, r3
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002770:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	fa01 f303 	lsl.w	r3, r1, r3
 800277a:	43d9      	mvns	r1, r3
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002780:	4313      	orrs	r3, r2
         );
}
 8002782:	4618      	mov	r0, r3
 8002784:	3724      	adds	r7, #36	; 0x24
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b082      	sub	sp, #8
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	f7ff ff4c 	bl	8002634 <__NVIC_SetPriorityGrouping>
}
 800279c:	bf00      	nop
 800279e:	3708      	adds	r7, #8
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b086      	sub	sp, #24
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	4603      	mov	r3, r0
 80027ac:	60b9      	str	r1, [r7, #8]
 80027ae:	607a      	str	r2, [r7, #4]
 80027b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80027b6:	f7ff ff61 	bl	800267c <__NVIC_GetPriorityGrouping>
 80027ba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68b9      	ldr	r1, [r7, #8]
 80027c0:	6978      	ldr	r0, [r7, #20]
 80027c2:	f7ff ffb1 	bl	8002728 <NVIC_EncodePriority>
 80027c6:	4602      	mov	r2, r0
 80027c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027cc:	4611      	mov	r1, r2
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff80 	bl	80026d4 <__NVIC_SetPriority>
}
 80027d4:	bf00      	nop
 80027d6:	3718      	adds	r7, #24
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}

080027dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b082      	sub	sp, #8
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff ff54 	bl	8002698 <__NVIC_EnableIRQ>
}
 80027f0:	bf00      	nop
 80027f2:	3708      	adds	r7, #8
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b086      	sub	sp, #24
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002804:	f7ff fc84 	bl	8002110 <HAL_GetTick>
 8002808:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d101      	bne.n	8002814 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002810:	2301      	movs	r3, #1
 8002812:	e099      	b.n	8002948 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2202      	movs	r2, #2
 8002818:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681a      	ldr	r2, [r3, #0]
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0201 	bic.w	r2, r2, #1
 8002832:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002834:	e00f      	b.n	8002856 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002836:	f7ff fc6b 	bl	8002110 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b05      	cmp	r3, #5
 8002842:	d908      	bls.n	8002856 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2220      	movs	r2, #32
 8002848:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	2203      	movs	r2, #3
 800284e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e078      	b.n	8002948 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0301 	and.w	r3, r3, #1
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1e8      	bne.n	8002836 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	4b38      	ldr	r3, [pc, #224]	; (8002950 <HAL_DMA_Init+0x158>)
 8002870:	4013      	ands	r3, r2
 8002872:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685a      	ldr	r2, [r3, #4]
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002882:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	691b      	ldr	r3, [r3, #16]
 8002888:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800288e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	699b      	ldr	r3, [r3, #24]
 8002894:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800289a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a1b      	ldr	r3, [r3, #32]
 80028a0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80028a2:	697a      	ldr	r2, [r7, #20]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ac:	2b04      	cmp	r3, #4
 80028ae:	d107      	bne.n	80028c0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b8:	4313      	orrs	r3, r2
 80028ba:	697a      	ldr	r2, [r7, #20]
 80028bc:	4313      	orrs	r3, r2
 80028be:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	697a      	ldr	r2, [r7, #20]
 80028c6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	695b      	ldr	r3, [r3, #20]
 80028ce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80028d0:	697b      	ldr	r3, [r7, #20]
 80028d2:	f023 0307 	bic.w	r3, r3, #7
 80028d6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028dc:	697a      	ldr	r2, [r7, #20]
 80028de:	4313      	orrs	r3, r2
 80028e0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d117      	bne.n	800291a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028ee:	697a      	ldr	r2, [r7, #20]
 80028f0:	4313      	orrs	r3, r2
 80028f2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d00e      	beq.n	800291a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fb01 	bl	8002f04 <DMA_CheckFifoParam>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d008      	beq.n	800291a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2240      	movs	r2, #64	; 0x40
 800290c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002916:	2301      	movs	r3, #1
 8002918:	e016      	b.n	8002948 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	697a      	ldr	r2, [r7, #20]
 8002920:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 fab8 	bl	8002e98 <DMA_CalcBaseAndBitshift>
 8002928:	4603      	mov	r3, r0
 800292a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002930:	223f      	movs	r2, #63	; 0x3f
 8002932:	409a      	lsls	r2, r3
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2200      	movs	r2, #0
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2201      	movs	r2, #1
 8002942:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002946:	2300      	movs	r3, #0
}
 8002948:	4618      	mov	r0, r3
 800294a:	3718      	adds	r7, #24
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	f010803f 	.word	0xf010803f

08002954 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	60f8      	str	r0, [r7, #12]
 800295c:	60b9      	str	r1, [r7, #8]
 800295e:	607a      	str	r2, [r7, #4]
 8002960:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002962:	2300      	movs	r3, #0
 8002964:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_DMA_Start_IT+0x26>
 8002976:	2302      	movs	r3, #2
 8002978:	e040      	b.n	80029fc <HAL_DMA_Start_IT+0xa8>
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b01      	cmp	r3, #1
 800298c:	d12f      	bne.n	80029ee <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2202      	movs	r2, #2
 8002992:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	2200      	movs	r2, #0
 800299a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	687a      	ldr	r2, [r7, #4]
 80029a0:	68b9      	ldr	r1, [r7, #8]
 80029a2:	68f8      	ldr	r0, [r7, #12]
 80029a4:	f000 fa4a 	bl	8002e3c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ac:	223f      	movs	r2, #63	; 0x3f
 80029ae:	409a      	lsls	r2, r3
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f042 0216 	orr.w	r2, r2, #22
 80029c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d007      	beq.n	80029dc <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f042 0208 	orr.w	r2, r2, #8
 80029da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	681a      	ldr	r2, [r3, #0]
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f042 0201 	orr.w	r2, r2, #1
 80029ea:	601a      	str	r2, [r3, #0]
 80029ec:	e005      	b.n	80029fa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80029f6:	2302      	movs	r3, #2
 80029f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80029fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3718      	adds	r7, #24
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a10:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002a12:	f7ff fb7d 	bl	8002110 <HAL_GetTick>
 8002a16:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d008      	beq.n	8002a36 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2280      	movs	r2, #128	; 0x80
 8002a28:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e052      	b.n	8002adc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f022 0216 	bic.w	r2, r2, #22
 8002a44:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	695a      	ldr	r2, [r3, #20]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a54:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d103      	bne.n	8002a66 <HAL_DMA_Abort+0x62>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d007      	beq.n	8002a76 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f022 0208 	bic.w	r2, r2, #8
 8002a74:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f022 0201 	bic.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002a86:	e013      	b.n	8002ab0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002a88:	f7ff fb42 	bl	8002110 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b05      	cmp	r3, #5
 8002a94:	d90c      	bls.n	8002ab0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2220      	movs	r2, #32
 8002a9a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2203      	movs	r2, #3
 8002aa0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002aac:	2303      	movs	r3, #3
 8002aae:	e015      	b.n	8002adc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0301 	and.w	r3, r3, #1
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d1e4      	bne.n	8002a88 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ac2:	223f      	movs	r2, #63	; 0x3f
 8002ac4:	409a      	lsls	r2, r3
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002ada:	2300      	movs	r3, #0
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d004      	beq.n	8002b02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e00c      	b.n	8002b1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2205      	movs	r2, #5
 8002b06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	681a      	ldr	r2, [r3, #0]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0201 	bic.w	r2, r2, #1
 8002b18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b1a:	2300      	movs	r3, #0
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	370c      	adds	r7, #12
 8002b20:	46bd      	mov	sp, r7
 8002b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b26:	4770      	bx	lr

08002b28 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002b28:	b580      	push	{r7, lr}
 8002b2a:	b086      	sub	sp, #24
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002b34:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_DMA_IRQHandler+0x248>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a8e      	ldr	r2, [pc, #568]	; (8002d74 <HAL_DMA_IRQHandler+0x24c>)
 8002b3a:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3e:	0a9b      	lsrs	r3, r3, #10
 8002b40:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b52:	2208      	movs	r2, #8
 8002b54:	409a      	lsls	r2, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01a      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0304 	and.w	r3, r3, #4
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d013      	beq.n	8002b94 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f022 0204 	bic.w	r2, r2, #4
 8002b7a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b80:	2208      	movs	r2, #8
 8002b82:	409a      	lsls	r2, r3
 8002b84:	693b      	ldr	r3, [r7, #16]
 8002b86:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002b8c:	f043 0201 	orr.w	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b98:	2201      	movs	r2, #1
 8002b9a:	409a      	lsls	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d012      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	695b      	ldr	r3, [r3, #20]
 8002baa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d00b      	beq.n	8002bca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	409a      	lsls	r2, r3
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bc2:	f043 0202 	orr.w	r2, r3, #2
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bce:	2204      	movs	r2, #4
 8002bd0:	409a      	lsls	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d012      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f003 0302 	and.w	r3, r3, #2
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00b      	beq.n	8002c00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2204      	movs	r2, #4
 8002bee:	409a      	lsls	r2, r3
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bf8:	f043 0204 	orr.w	r2, r3, #4
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c04:	2210      	movs	r2, #16
 8002c06:	409a      	lsls	r2, r3
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d043      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d03c      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c22:	2210      	movs	r2, #16
 8002c24:	409a      	lsls	r2, r3
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d018      	beq.n	8002c6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d024      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	4798      	blx	r3
 8002c56:	e01f      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	4798      	blx	r3
 8002c68:	e016      	b.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d107      	bne.n	8002c88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0208 	bic.w	r2, r2, #8
 8002c86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d003      	beq.n	8002c98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c9c:	2220      	movs	r2, #32
 8002c9e:	409a      	lsls	r2, r3
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	f000 808f 	beq.w	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f003 0310 	and.w	r3, r3, #16
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 8087 	beq.w	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	409a      	lsls	r2, r3
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b05      	cmp	r3, #5
 8002cd0:	d136      	bne.n	8002d40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 0216 	bic.w	r2, r2, #22
 8002ce0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	695a      	ldr	r2, [r3, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002cf0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d103      	bne.n	8002d02 <HAL_DMA_IRQHandler+0x1da>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d007      	beq.n	8002d12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	f022 0208 	bic.w	r2, r2, #8
 8002d10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d16:	223f      	movs	r2, #63	; 0x3f
 8002d18:	409a      	lsls	r2, r3
 8002d1a:	693b      	ldr	r3, [r7, #16]
 8002d1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	2201      	movs	r2, #1
 8002d22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d07e      	beq.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	4798      	blx	r3
        }
        return;
 8002d3e:	e079      	b.n	8002e34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d01d      	beq.n	8002d8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d10d      	bne.n	8002d78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d031      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	6878      	ldr	r0, [r7, #4]
 8002d6a:	4798      	blx	r3
 8002d6c:	e02c      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
 8002d6e:	bf00      	nop
 8002d70:	20000004 	.word	0x20000004
 8002d74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d023      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	4798      	blx	r3
 8002d88:	e01e      	b.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d10f      	bne.n	8002db8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	681a      	ldr	r2, [r3, #0]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f022 0210 	bic.w	r2, r2, #16
 8002da6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d003      	beq.n	8002dc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d032      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d022      	beq.n	8002e22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2205      	movs	r2, #5
 8002de0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f022 0201 	bic.w	r2, r2, #1
 8002df2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002df4:	68bb      	ldr	r3, [r7, #8]
 8002df6:	3301      	adds	r3, #1
 8002df8:	60bb      	str	r3, [r7, #8]
 8002dfa:	697a      	ldr	r2, [r7, #20]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d307      	bcc.n	8002e10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d1f2      	bne.n	8002df4 <HAL_DMA_IRQHandler+0x2cc>
 8002e0e:	e000      	b.n	8002e12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002e10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2200      	movs	r2, #0
 8002e1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d005      	beq.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	4798      	blx	r3
 8002e32:	e000      	b.n	8002e36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002e34:	bf00      	nop
    }
  }
}
 8002e36:	3718      	adds	r7, #24
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}

08002e3c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
 8002e48:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002e58:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	683a      	ldr	r2, [r7, #0]
 8002e60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	2b40      	cmp	r3, #64	; 0x40
 8002e68:	d108      	bne.n	8002e7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68ba      	ldr	r2, [r7, #8]
 8002e78:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002e7a:	e007      	b.n	8002e8c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	60da      	str	r2, [r3, #12]
}
 8002e8c:	bf00      	nop
 8002e8e:	3714      	adds	r7, #20
 8002e90:	46bd      	mov	sp, r7
 8002e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e96:	4770      	bx	lr

08002e98 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	3b10      	subs	r3, #16
 8002ea8:	4a14      	ldr	r2, [pc, #80]	; (8002efc <DMA_CalcBaseAndBitshift+0x64>)
 8002eaa:	fba2 2303 	umull	r2, r3, r2, r3
 8002eae:	091b      	lsrs	r3, r3, #4
 8002eb0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002eb2:	4a13      	ldr	r2, [pc, #76]	; (8002f00 <DMA_CalcBaseAndBitshift+0x68>)
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2b03      	cmp	r3, #3
 8002ec4:	d909      	bls.n	8002eda <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ece:	f023 0303 	bic.w	r3, r3, #3
 8002ed2:	1d1a      	adds	r2, r3, #4
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	659a      	str	r2, [r3, #88]	; 0x58
 8002ed8:	e007      	b.n	8002eea <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002ee2:	f023 0303 	bic.w	r3, r3, #3
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr
 8002efa:	bf00      	nop
 8002efc:	aaaaaaab 	.word	0xaaaaaaab
 8002f00:	080144a8 	.word	0x080144a8

08002f04 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b085      	sub	sp, #20
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f0c:	2300      	movs	r3, #0
 8002f0e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f14:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	699b      	ldr	r3, [r3, #24]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d11f      	bne.n	8002f5e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	2b03      	cmp	r3, #3
 8002f22:	d856      	bhi.n	8002fd2 <DMA_CheckFifoParam+0xce>
 8002f24:	a201      	add	r2, pc, #4	; (adr r2, 8002f2c <DMA_CheckFifoParam+0x28>)
 8002f26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f2a:	bf00      	nop
 8002f2c:	08002f3d 	.word	0x08002f3d
 8002f30:	08002f4f 	.word	0x08002f4f
 8002f34:	08002f3d 	.word	0x08002f3d
 8002f38:	08002fd3 	.word	0x08002fd3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f40:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d046      	beq.n	8002fd6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f4c:	e043      	b.n	8002fd6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f52:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002f56:	d140      	bne.n	8002fda <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002f58:	2301      	movs	r3, #1
 8002f5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f5c:	e03d      	b.n	8002fda <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f66:	d121      	bne.n	8002fac <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2b03      	cmp	r3, #3
 8002f6c:	d837      	bhi.n	8002fde <DMA_CheckFifoParam+0xda>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <DMA_CheckFifoParam+0x70>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002f85 	.word	0x08002f85
 8002f78:	08002f8b 	.word	0x08002f8b
 8002f7c:	08002f85 	.word	0x08002f85
 8002f80:	08002f9d 	.word	0x08002f9d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	73fb      	strb	r3, [r7, #15]
      break;
 8002f88:	e030      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f8e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d025      	beq.n	8002fe2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002f9a:	e022      	b.n	8002fe2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fa0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002fa4:	d11f      	bne.n	8002fe6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002faa:	e01c      	b.n	8002fe6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d903      	bls.n	8002fba <DMA_CheckFifoParam+0xb6>
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d003      	beq.n	8002fc0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002fb8:	e018      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	73fb      	strb	r3, [r7, #15]
      break;
 8002fbe:	e015      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fc4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00e      	beq.n	8002fea <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	73fb      	strb	r3, [r7, #15]
      break;
 8002fd0:	e00b      	b.n	8002fea <DMA_CheckFifoParam+0xe6>
      break;
 8002fd2:	bf00      	nop
 8002fd4:	e00a      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fd6:	bf00      	nop
 8002fd8:	e008      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fda:	bf00      	nop
 8002fdc:	e006      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fde:	bf00      	nop
 8002fe0:	e004      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fe2:	bf00      	nop
 8002fe4:	e002      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;   
 8002fe6:	bf00      	nop
 8002fe8:	e000      	b.n	8002fec <DMA_CheckFifoParam+0xe8>
      break;
 8002fea:	bf00      	nop
    }
  } 
  
  return status; 
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3714      	adds	r7, #20
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop

08002ffc <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b086      	sub	sp, #24
 8003000:	af00      	add	r7, sp, #0
 8003002:	60f8      	str	r0, [r7, #12]
 8003004:	60b9      	str	r1, [r7, #8]
 8003006:	607a      	str	r2, [r7, #4]
 8003008:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800300a:	2300      	movs	r3, #0
 800300c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	2b80      	cmp	r3, #128	; 0x80
 8003014:	d106      	bne.n	8003024 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	f44f 7280 	mov.w	r2, #256	; 0x100
 800301c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	f001 b911 	b.w	8004246 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003030:	2b00      	cmp	r3, #0
 8003032:	d003      	beq.n	800303c <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003038:	2b00      	cmp	r3, #0
 800303a:	d105      	bne.n	8003048 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2240      	movs	r2, #64	; 0x40
 8003040:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	f001 b8ff 	b.w	8004246 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800304e:	2b01      	cmp	r3, #1
 8003050:	d102      	bne.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8003052:	2302      	movs	r3, #2
 8003054:	f001 b8f7 	b.w	8004246 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b01      	cmp	r3, #1
 800306a:	f041 80e5 	bne.w	8004238 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2202      	movs	r2, #2
 8003072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2200      	movs	r2, #0
 800307a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800308a:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	683a      	ldr	r2, [r7, #0]
 8003092:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8003094:	6a3b      	ldr	r3, [r7, #32]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	68f8      	ldr	r0, [r7, #12]
 800309c:	f001 f8f6 	bl	800428c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b8d      	ldr	r3, [pc, #564]	; (80032dc <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d960      	bls.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0x172>
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4a8b      	ldr	r2, [pc, #556]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d057      	beq.n	8003166 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4a8a      	ldr	r2, [pc, #552]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80030bc:	4293      	cmp	r3, r2
 80030be:	d050      	beq.n	8003162 <HAL_DMAEx_MultiBufferStart_IT+0x166>
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	4a88      	ldr	r2, [pc, #544]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d049      	beq.n	800315e <HAL_DMAEx_MultiBufferStart_IT+0x162>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a87      	ldr	r2, [pc, #540]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d042      	beq.n	800315a <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a85      	ldr	r2, [pc, #532]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d03a      	beq.n	8003154 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a84      	ldr	r2, [pc, #528]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d032      	beq.n	800314e <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	4a82      	ldr	r2, [pc, #520]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d02a      	beq.n	8003148 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a81      	ldr	r2, [pc, #516]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d022      	beq.n	8003142 <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a7f      	ldr	r2, [pc, #508]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d01a      	beq.n	800313c <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a7e      	ldr	r2, [pc, #504]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d012      	beq.n	8003136 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a7c      	ldr	r2, [pc, #496]	; (8003308 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d00a      	beq.n	8003130 <HAL_DMAEx_MultiBufferStart_IT+0x134>
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a7b      	ldr	r2, [pc, #492]	; (800330c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d102      	bne.n	800312a <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8003124:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003128:	e01e      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800312a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800312e:	e01b      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003130:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003134:	e018      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003136:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800313a:	e015      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800313c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003140:	e012      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003142:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003146:	e00f      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003148:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800314c:	e00c      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800314e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003152:	e009      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003158:	e006      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800315a:	2320      	movs	r3, #32
 800315c:	e004      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800315e:	2320      	movs	r3, #32
 8003160:	e002      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003162:	2320      	movs	r3, #32
 8003164:	e000      	b.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8003166:	2320      	movs	r3, #32
 8003168:	4a69      	ldr	r2, [pc, #420]	; (8003310 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 800316a:	60d3      	str	r3, [r2, #12]
 800316c:	e14f      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	4b67      	ldr	r3, [pc, #412]	; (8003314 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8003176:	429a      	cmp	r2, r3
 8003178:	d960      	bls.n	800323c <HAL_DMAEx_MultiBufferStart_IT+0x240>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a58      	ldr	r2, [pc, #352]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d057      	beq.n	8003234 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a56      	ldr	r2, [pc, #344]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d050      	beq.n	8003230 <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a55      	ldr	r2, [pc, #340]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d049      	beq.n	800322c <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a53      	ldr	r2, [pc, #332]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d042      	beq.n	8003228 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d03a      	beq.n	8003222 <HAL_DMAEx_MultiBufferStart_IT+0x226>
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a50      	ldr	r2, [pc, #320]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d032      	beq.n	800321c <HAL_DMAEx_MultiBufferStart_IT+0x220>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a4f      	ldr	r2, [pc, #316]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d02a      	beq.n	8003216 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a4d      	ldr	r2, [pc, #308]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d022      	beq.n	8003210 <HAL_DMAEx_MultiBufferStart_IT+0x214>
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a4c      	ldr	r2, [pc, #304]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d01a      	beq.n	800320a <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a4a      	ldr	r2, [pc, #296]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d012      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	4a49      	ldr	r2, [pc, #292]	; (8003308 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d00a      	beq.n	80031fe <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a47      	ldr	r2, [pc, #284]	; (800330c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d102      	bne.n	80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80031f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80031f6:	e01e      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031f8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80031fc:	e01b      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80031fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003202:	e018      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003204:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003208:	e015      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800320a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800320e:	e012      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003210:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003214:	e00f      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003216:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800321a:	e00c      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800321c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003220:	e009      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003222:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003226:	e006      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003228:	2320      	movs	r3, #32
 800322a:	e004      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800322c:	2320      	movs	r3, #32
 800322e:	e002      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003230:	2320      	movs	r3, #32
 8003232:	e000      	b.n	8003236 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8003234:	2320      	movs	r3, #32
 8003236:	4a36      	ldr	r2, [pc, #216]	; (8003310 <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8003238:	6093      	str	r3, [r2, #8]
 800323a:	e0e8      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	461a      	mov	r2, r3
 8003242:	4b35      	ldr	r3, [pc, #212]	; (8003318 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8003244:	429a      	cmp	r2, r3
 8003246:	f240 8082 	bls.w	800334e <HAL_DMAEx_MultiBufferStart_IT+0x352>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a24      	ldr	r2, [pc, #144]	; (80032e0 <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d078      	beq.n	8003346 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a22      	ldr	r2, [pc, #136]	; (80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d071      	beq.n	8003342 <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a21      	ldr	r2, [pc, #132]	; (80032e8 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d06a      	beq.n	800333e <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a1f      	ldr	r2, [pc, #124]	; (80032ec <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d063      	beq.n	800333a <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a1e      	ldr	r2, [pc, #120]	; (80032f0 <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d05b      	beq.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	4a1c      	ldr	r2, [pc, #112]	; (80032f4 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8003282:	4293      	cmp	r3, r2
 8003284:	d053      	beq.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a1b      	ldr	r2, [pc, #108]	; (80032f8 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d04b      	beq.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	4a19      	ldr	r2, [pc, #100]	; (80032fc <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8003296:	4293      	cmp	r3, r2
 8003298:	d043      	beq.n	8003322 <HAL_DMAEx_MultiBufferStart_IT+0x326>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d03b      	beq.n	800331c <HAL_DMAEx_MultiBufferStart_IT+0x320>
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a16      	ldr	r2, [pc, #88]	; (8003304 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d012      	beq.n	80032d4 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4a15      	ldr	r2, [pc, #84]	; (8003308 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	d00a      	beq.n	80032ce <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a13      	ldr	r2, [pc, #76]	; (800330c <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d102      	bne.n	80032c8 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 80032c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032c6:	e03f      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032c8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032cc:	e03c      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032ce:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d2:	e039      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032d4:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80032d8:	e036      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80032da:	bf00      	nop
 80032dc:	40026458 	.word	0x40026458
 80032e0:	40026010 	.word	0x40026010
 80032e4:	40026410 	.word	0x40026410
 80032e8:	40026070 	.word	0x40026070
 80032ec:	40026470 	.word	0x40026470
 80032f0:	40026028 	.word	0x40026028
 80032f4:	40026428 	.word	0x40026428
 80032f8:	40026088 	.word	0x40026088
 80032fc:	40026488 	.word	0x40026488
 8003300:	40026040 	.word	0x40026040
 8003304:	40026440 	.word	0x40026440
 8003308:	400260a0 	.word	0x400260a0
 800330c:	400264a0 	.word	0x400264a0
 8003310:	40026400 	.word	0x40026400
 8003314:	400260b8 	.word	0x400260b8
 8003318:	40026058 	.word	0x40026058
 800331c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003320:	e012      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003322:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003326:	e00f      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003328:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800332c:	e00c      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800332e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003332:	e009      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003334:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003338:	e006      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800333a:	2320      	movs	r3, #32
 800333c:	e004      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800333e:	2320      	movs	r3, #32
 8003340:	e002      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003342:	2320      	movs	r3, #32
 8003344:	e000      	b.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8003346:	2320      	movs	r3, #32
 8003348:	4a8c      	ldr	r2, [pc, #560]	; (800357c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800334a:	60d3      	str	r3, [r2, #12]
 800334c:	e05f      	b.n	800340e <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a8b      	ldr	r2, [pc, #556]	; (8003580 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d057      	beq.n	8003408 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a89      	ldr	r2, [pc, #548]	; (8003584 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d050      	beq.n	8003404 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4a88      	ldr	r2, [pc, #544]	; (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003368:	4293      	cmp	r3, r2
 800336a:	d049      	beq.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0x404>
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a86      	ldr	r2, [pc, #536]	; (800358c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d042      	beq.n	80033fc <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a85      	ldr	r2, [pc, #532]	; (8003590 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d03a      	beq.n	80033f6 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a83      	ldr	r2, [pc, #524]	; (8003594 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d032      	beq.n	80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a82      	ldr	r2, [pc, #520]	; (8003598 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d02a      	beq.n	80033ea <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a80      	ldr	r2, [pc, #512]	; (800359c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d022      	beq.n	80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a7f      	ldr	r2, [pc, #508]	; (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d01a      	beq.n	80033de <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a7d      	ldr	r2, [pc, #500]	; (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d012      	beq.n	80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a7c      	ldr	r2, [pc, #496]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00a      	beq.n	80033d2 <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4a7a      	ldr	r2, [pc, #488]	; (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80033c2:	4293      	cmp	r3, r2
 80033c4:	d102      	bne.n	80033cc <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 80033c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033ca:	e01e      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80033d0:	e01b      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033d2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033d6:	e018      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033dc:	e015      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033de:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80033e2:	e012      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033e8:	e00f      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033ee:	e00c      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033f4:	e009      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80033fa:	e006      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80033fc:	2320      	movs	r3, #32
 80033fe:	e004      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003400:	2320      	movs	r3, #32
 8003402:	e002      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003404:	2320      	movs	r3, #32
 8003406:	e000      	b.n	800340a <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8003408:	2320      	movs	r3, #32
 800340a:	4a5c      	ldr	r2, [pc, #368]	; (800357c <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 800340c:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	461a      	mov	r2, r3
 8003414:	4b66      	ldr	r3, [pc, #408]	; (80035b0 <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8003416:	429a      	cmp	r2, r3
 8003418:	d960      	bls.n	80034dc <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a58      	ldr	r2, [pc, #352]	; (8003580 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8003420:	4293      	cmp	r3, r2
 8003422:	d057      	beq.n	80034d4 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a56      	ldr	r2, [pc, #344]	; (8003584 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d050      	beq.n	80034d0 <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a55      	ldr	r2, [pc, #340]	; (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003434:	4293      	cmp	r3, r2
 8003436:	d049      	beq.n	80034cc <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4a53      	ldr	r2, [pc, #332]	; (800358c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d042      	beq.n	80034c8 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a52      	ldr	r2, [pc, #328]	; (8003590 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d03a      	beq.n	80034c2 <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a50      	ldr	r2, [pc, #320]	; (8003594 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d032      	beq.n	80034bc <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a4f      	ldr	r2, [pc, #316]	; (8003598 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d02a      	beq.n	80034b6 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	4a4d      	ldr	r2, [pc, #308]	; (800359c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d022      	beq.n	80034b0 <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	4a4c      	ldr	r2, [pc, #304]	; (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d01a      	beq.n	80034aa <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a4a      	ldr	r2, [pc, #296]	; (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d012      	beq.n	80034a4 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a49      	ldr	r2, [pc, #292]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d00a      	beq.n	800349e <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a47      	ldr	r2, [pc, #284]	; (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d102      	bne.n	8003498 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8003492:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003496:	e01e      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8003498:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800349c:	e01b      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800349e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034a2:	e018      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034a4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034a8:	e015      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034aa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80034ae:	e012      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034b4:	e00f      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ba:	e00c      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c0:	e009      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034c6:	e006      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034c8:	2310      	movs	r3, #16
 80034ca:	e004      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034cc:	2310      	movs	r3, #16
 80034ce:	e002      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034d0:	2310      	movs	r3, #16
 80034d2:	e000      	b.n	80034d6 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 80034d4:	2310      	movs	r3, #16
 80034d6:	4a37      	ldr	r2, [pc, #220]	; (80035b4 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 80034d8:	60d3      	str	r3, [r2, #12]
 80034da:	e14f      	b.n	800377c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	4b35      	ldr	r3, [pc, #212]	; (80035b8 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80034e4:	429a      	cmp	r2, r3
 80034e6:	f240 8082 	bls.w	80035ee <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	4a24      	ldr	r2, [pc, #144]	; (8003580 <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80034f0:	4293      	cmp	r3, r2
 80034f2:	d078      	beq.n	80035e6 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	4a22      	ldr	r2, [pc, #136]	; (8003584 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d071      	beq.n	80035e2 <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a21      	ldr	r2, [pc, #132]	; (8003588 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d06a      	beq.n	80035de <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a1f      	ldr	r2, [pc, #124]	; (800358c <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d063      	beq.n	80035da <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	4a1e      	ldr	r2, [pc, #120]	; (8003590 <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d05b      	beq.n	80035d4 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a1c      	ldr	r2, [pc, #112]	; (8003594 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8003522:	4293      	cmp	r3, r2
 8003524:	d053      	beq.n	80035ce <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	4a1b      	ldr	r2, [pc, #108]	; (8003598 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d04b      	beq.n	80035c8 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a19      	ldr	r2, [pc, #100]	; (800359c <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d043      	beq.n	80035c2 <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a18      	ldr	r2, [pc, #96]	; (80035a0 <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d03b      	beq.n	80035bc <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d012      	beq.n	8003574 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00a      	beq.n	800356e <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a13      	ldr	r2, [pc, #76]	; (80035ac <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d102      	bne.n	8003568 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8003562:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003566:	e03f      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003568:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800356c:	e03c      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800356e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003572:	e039      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8003574:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003578:	e036      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800357a:	bf00      	nop
 800357c:	40026000 	.word	0x40026000
 8003580:	40026010 	.word	0x40026010
 8003584:	40026410 	.word	0x40026410
 8003588:	40026070 	.word	0x40026070
 800358c:	40026470 	.word	0x40026470
 8003590:	40026028 	.word	0x40026028
 8003594:	40026428 	.word	0x40026428
 8003598:	40026088 	.word	0x40026088
 800359c:	40026488 	.word	0x40026488
 80035a0:	40026040 	.word	0x40026040
 80035a4:	40026440 	.word	0x40026440
 80035a8:	400260a0 	.word	0x400260a0
 80035ac:	400264a0 	.word	0x400264a0
 80035b0:	40026458 	.word	0x40026458
 80035b4:	40026400 	.word	0x40026400
 80035b8:	400260b8 	.word	0x400260b8
 80035bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80035c0:	e012      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035c6:	e00f      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035c8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035cc:	e00c      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d2:	e009      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80035d8:	e006      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035da:	2310      	movs	r3, #16
 80035dc:	e004      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035de:	2310      	movs	r3, #16
 80035e0:	e002      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035e2:	2310      	movs	r3, #16
 80035e4:	e000      	b.n	80035e8 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80035e6:	2310      	movs	r3, #16
 80035e8:	4a8c      	ldr	r2, [pc, #560]	; (800381c <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80035ea:	6093      	str	r3, [r2, #8]
 80035ec:	e0c6      	b.n	800377c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	461a      	mov	r2, r3
 80035f4:	4b8a      	ldr	r3, [pc, #552]	; (8003820 <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80035f6:	429a      	cmp	r2, r3
 80035f8:	d960      	bls.n	80036bc <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a89      	ldr	r2, [pc, #548]	; (8003824 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003600:	4293      	cmp	r3, r2
 8003602:	d057      	beq.n	80036b4 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4a87      	ldr	r2, [pc, #540]	; (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d050      	beq.n	80036b0 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a86      	ldr	r2, [pc, #536]	; (800382c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d049      	beq.n	80036ac <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a84      	ldr	r2, [pc, #528]	; (8003830 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d042      	beq.n	80036a8 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a83      	ldr	r2, [pc, #524]	; (8003834 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d03a      	beq.n	80036a2 <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a81      	ldr	r2, [pc, #516]	; (8003838 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d032      	beq.n	800369c <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a80      	ldr	r2, [pc, #512]	; (800383c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d02a      	beq.n	8003696 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a7e      	ldr	r2, [pc, #504]	; (8003840 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d022      	beq.n	8003690 <HAL_DMAEx_MultiBufferStart_IT+0x694>
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	4a7d      	ldr	r2, [pc, #500]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d01a      	beq.n	800368a <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a7b      	ldr	r2, [pc, #492]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d012      	beq.n	8003684 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	4a7a      	ldr	r2, [pc, #488]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d00a      	beq.n	800367e <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a78      	ldr	r2, [pc, #480]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d102      	bne.n	8003678 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 8003672:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003676:	e01e      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003678:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800367c:	e01b      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800367e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003682:	e018      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003684:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003688:	e015      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800368a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800368e:	e012      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003690:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003694:	e00f      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8003696:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800369a:	e00c      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800369c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a0:	e009      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80036a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036a6:	e006      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80036a8:	2310      	movs	r3, #16
 80036aa:	e004      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80036ac:	2310      	movs	r3, #16
 80036ae:	e002      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80036b0:	2310      	movs	r3, #16
 80036b2:	e000      	b.n	80036b6 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80036b4:	2310      	movs	r3, #16
 80036b6:	4a67      	ldr	r2, [pc, #412]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80036b8:	60d3      	str	r3, [r2, #12]
 80036ba:	e05f      	b.n	800377c <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	4a58      	ldr	r2, [pc, #352]	; (8003824 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d057      	beq.n	8003776 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a57      	ldr	r2, [pc, #348]	; (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d050      	beq.n	8003772 <HAL_DMAEx_MultiBufferStart_IT+0x776>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a55      	ldr	r2, [pc, #340]	; (800382c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80036d6:	4293      	cmp	r3, r2
 80036d8:	d049      	beq.n	800376e <HAL_DMAEx_MultiBufferStart_IT+0x772>
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4a54      	ldr	r2, [pc, #336]	; (8003830 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80036e0:	4293      	cmp	r3, r2
 80036e2:	d042      	beq.n	800376a <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a52      	ldr	r2, [pc, #328]	; (8003834 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d03a      	beq.n	8003764 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a51      	ldr	r2, [pc, #324]	; (8003838 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d032      	beq.n	800375e <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a4f      	ldr	r2, [pc, #316]	; (800383c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d02a      	beq.n	8003758 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a4e      	ldr	r2, [pc, #312]	; (8003840 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8003708:	4293      	cmp	r3, r2
 800370a:	d022      	beq.n	8003752 <HAL_DMAEx_MultiBufferStart_IT+0x756>
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a4c      	ldr	r2, [pc, #304]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d01a      	beq.n	800374c <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a4b      	ldr	r2, [pc, #300]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d012      	beq.n	8003746 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a49      	ldr	r2, [pc, #292]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d00a      	beq.n	8003740 <HAL_DMAEx_MultiBufferStart_IT+0x744>
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a48      	ldr	r2, [pc, #288]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d102      	bne.n	800373a <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8003734:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003738:	e01e      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800373a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800373e:	e01b      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003740:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003744:	e018      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003746:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800374a:	e015      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800374c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003750:	e012      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003752:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003756:	e00f      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003758:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800375c:	e00c      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800375e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003762:	e009      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003764:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003768:	e006      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800376a:	2310      	movs	r3, #16
 800376c:	e004      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800376e:	2310      	movs	r3, #16
 8003770:	e002      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003772:	2310      	movs	r3, #16
 8003774:	e000      	b.n	8003778 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8003776:	2310      	movs	r3, #16
 8003778:	4a36      	ldr	r2, [pc, #216]	; (8003854 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 800377a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	461a      	mov	r2, r3
 8003782:	4b35      	ldr	r3, [pc, #212]	; (8003858 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8003784:	429a      	cmp	r2, r3
 8003786:	f240 8082 	bls.w	800388e <HAL_DMAEx_MultiBufferStart_IT+0x892>
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a25      	ldr	r2, [pc, #148]	; (8003824 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d078      	beq.n	8003886 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a23      	ldr	r2, [pc, #140]	; (8003828 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d071      	beq.n	8003882 <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a22      	ldr	r2, [pc, #136]	; (800382c <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d06a      	beq.n	800387e <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a20      	ldr	r2, [pc, #128]	; (8003830 <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80037ae:	4293      	cmp	r3, r2
 80037b0:	d063      	beq.n	800387a <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1f      	ldr	r2, [pc, #124]	; (8003834 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d05b      	beq.n	8003874 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d053      	beq.n	800386e <HAL_DMAEx_MultiBufferStart_IT+0x872>
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1c      	ldr	r2, [pc, #112]	; (800383c <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d04b      	beq.n	8003868 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a1a      	ldr	r2, [pc, #104]	; (8003840 <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d043      	beq.n	8003862 <HAL_DMAEx_MultiBufferStart_IT+0x866>
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a19      	ldr	r2, [pc, #100]	; (8003844 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d03b      	beq.n	800385c <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a17      	ldr	r2, [pc, #92]	; (8003848 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d012      	beq.n	8003814 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a16      	ldr	r2, [pc, #88]	; (800384c <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d00a      	beq.n	800380e <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4a14      	ldr	r2, [pc, #80]	; (8003850 <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d102      	bne.n	8003808 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 8003802:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003806:	e03f      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003808:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800380c:	e03c      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800380e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003812:	e039      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003814:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003818:	e036      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800381a:	bf00      	nop
 800381c:	40026400 	.word	0x40026400
 8003820:	40026058 	.word	0x40026058
 8003824:	40026010 	.word	0x40026010
 8003828:	40026410 	.word	0x40026410
 800382c:	40026070 	.word	0x40026070
 8003830:	40026470 	.word	0x40026470
 8003834:	40026028 	.word	0x40026028
 8003838:	40026428 	.word	0x40026428
 800383c:	40026088 	.word	0x40026088
 8003840:	40026488 	.word	0x40026488
 8003844:	40026040 	.word	0x40026040
 8003848:	40026440 	.word	0x40026440
 800384c:	400260a0 	.word	0x400260a0
 8003850:	400264a0 	.word	0x400264a0
 8003854:	40026000 	.word	0x40026000
 8003858:	40026458 	.word	0x40026458
 800385c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003860:	e012      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003862:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003866:	e00f      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003868:	f44f 7300 	mov.w	r3, #512	; 0x200
 800386c:	e00c      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800386e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003872:	e009      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003874:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003878:	e006      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800387a:	2308      	movs	r3, #8
 800387c:	e004      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800387e:	2308      	movs	r3, #8
 8003880:	e002      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003882:	2308      	movs	r3, #8
 8003884:	e000      	b.n	8003888 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8003886:	2308      	movs	r3, #8
 8003888:	4a8c      	ldr	r2, [pc, #560]	; (8003abc <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 800388a:	60d3      	str	r3, [r2, #12]
 800388c:	e14e      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	461a      	mov	r2, r3
 8003894:	4b8a      	ldr	r3, [pc, #552]	; (8003ac0 <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8003896:	429a      	cmp	r2, r3
 8003898:	d960      	bls.n	800395c <HAL_DMAEx_MultiBufferStart_IT+0x960>
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	4a89      	ldr	r2, [pc, #548]	; (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80038a0:	4293      	cmp	r3, r2
 80038a2:	d057      	beq.n	8003954 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4a87      	ldr	r2, [pc, #540]	; (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80038aa:	4293      	cmp	r3, r2
 80038ac:	d050      	beq.n	8003950 <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4a86      	ldr	r2, [pc, #536]	; (8003acc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d049      	beq.n	800394c <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	4a84      	ldr	r2, [pc, #528]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d042      	beq.n	8003948 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	4a83      	ldr	r2, [pc, #524]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d03a      	beq.n	8003942 <HAL_DMAEx_MultiBufferStart_IT+0x946>
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a81      	ldr	r2, [pc, #516]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d032      	beq.n	800393c <HAL_DMAEx_MultiBufferStart_IT+0x940>
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4a80      	ldr	r2, [pc, #512]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d02a      	beq.n	8003936 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4a7e      	ldr	r2, [pc, #504]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d022      	beq.n	8003930 <HAL_DMAEx_MultiBufferStart_IT+0x934>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a7d      	ldr	r2, [pc, #500]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d01a      	beq.n	800392a <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a7b      	ldr	r2, [pc, #492]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d012      	beq.n	8003924 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4a7a      	ldr	r2, [pc, #488]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003904:	4293      	cmp	r3, r2
 8003906:	d00a      	beq.n	800391e <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a78      	ldr	r2, [pc, #480]	; (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d102      	bne.n	8003918 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8003912:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003916:	e01e      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003918:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800391c:	e01b      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800391e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003922:	e018      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003924:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003928:	e015      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800392a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800392e:	e012      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003930:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003934:	e00f      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003936:	f44f 7300 	mov.w	r3, #512	; 0x200
 800393a:	e00c      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800393c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003940:	e009      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003942:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003946:	e006      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003948:	2308      	movs	r3, #8
 800394a:	e004      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800394c:	2308      	movs	r3, #8
 800394e:	e002      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003950:	2308      	movs	r3, #8
 8003952:	e000      	b.n	8003956 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8003954:	2308      	movs	r3, #8
 8003956:	4a59      	ldr	r2, [pc, #356]	; (8003abc <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8003958:	6093      	str	r3, [r2, #8]
 800395a:	e0e7      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	461a      	mov	r2, r3
 8003962:	4b64      	ldr	r3, [pc, #400]	; (8003af4 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8003964:	429a      	cmp	r2, r3
 8003966:	d960      	bls.n	8003a2a <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a55      	ldr	r2, [pc, #340]	; (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d057      	beq.n	8003a22 <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4a54      	ldr	r2, [pc, #336]	; (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d050      	beq.n	8003a1e <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a52      	ldr	r2, [pc, #328]	; (8003acc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003982:	4293      	cmp	r3, r2
 8003984:	d049      	beq.n	8003a1a <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	4a51      	ldr	r2, [pc, #324]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d042      	beq.n	8003a16 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	4a4f      	ldr	r2, [pc, #316]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d03a      	beq.n	8003a10 <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4a4e      	ldr	r2, [pc, #312]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80039a0:	4293      	cmp	r3, r2
 80039a2:	d032      	beq.n	8003a0a <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4c      	ldr	r2, [pc, #304]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02a      	beq.n	8003a04 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	4a4b      	ldr	r2, [pc, #300]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80039b4:	4293      	cmp	r3, r2
 80039b6:	d022      	beq.n	80039fe <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	4a49      	ldr	r2, [pc, #292]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d01a      	beq.n	80039f8 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4a48      	ldr	r2, [pc, #288]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d012      	beq.n	80039f2 <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a46      	ldr	r2, [pc, #280]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d00a      	beq.n	80039ec <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4a45      	ldr	r2, [pc, #276]	; (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d102      	bne.n	80039e6 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 80039e0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039e4:	e01e      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039e6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80039ea:	e01b      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f0:	e018      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039f2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039f6:	e015      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039f8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80039fc:	e012      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 80039fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a02:	e00f      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a08:	e00c      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a0a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a0e:	e009      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a10:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a14:	e006      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a16:	2308      	movs	r3, #8
 8003a18:	e004      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a1a:	2308      	movs	r3, #8
 8003a1c:	e002      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a1e:	2308      	movs	r3, #8
 8003a20:	e000      	b.n	8003a24 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8003a22:	2308      	movs	r3, #8
 8003a24:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8003a26:	60d3      	str	r3, [r2, #12]
 8003a28:	e080      	b.n	8003b2c <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a25      	ldr	r2, [pc, #148]	; (8003ac4 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d078      	beq.n	8003b26 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a23      	ldr	r2, [pc, #140]	; (8003ac8 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d071      	beq.n	8003b22 <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a22      	ldr	r2, [pc, #136]	; (8003acc <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d06a      	beq.n	8003b1e <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	4a20      	ldr	r2, [pc, #128]	; (8003ad0 <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	d063      	beq.n	8003b1a <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a1f      	ldr	r2, [pc, #124]	; (8003ad4 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d05b      	beq.n	8003b14 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a1d      	ldr	r2, [pc, #116]	; (8003ad8 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d053      	beq.n	8003b0e <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4a1c      	ldr	r2, [pc, #112]	; (8003adc <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d04b      	beq.n	8003b08 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	4a1a      	ldr	r2, [pc, #104]	; (8003ae0 <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8003a76:	4293      	cmp	r3, r2
 8003a78:	d043      	beq.n	8003b02 <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a19      	ldr	r2, [pc, #100]	; (8003ae4 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d03b      	beq.n	8003afc <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a17      	ldr	r2, [pc, #92]	; (8003ae8 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d012      	beq.n	8003ab4 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a16      	ldr	r2, [pc, #88]	; (8003aec <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d00a      	beq.n	8003aae <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a14      	ldr	r2, [pc, #80]	; (8003af0 <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d102      	bne.n	8003aa8 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8003aa2:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003aa6:	e03f      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003aa8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003aac:	e03c      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003aae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ab2:	e039      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003ab4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003ab8:	e036      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003aba:	bf00      	nop
 8003abc:	40026400 	.word	0x40026400
 8003ac0:	400260b8 	.word	0x400260b8
 8003ac4:	40026010 	.word	0x40026010
 8003ac8:	40026410 	.word	0x40026410
 8003acc:	40026070 	.word	0x40026070
 8003ad0:	40026470 	.word	0x40026470
 8003ad4:	40026028 	.word	0x40026028
 8003ad8:	40026428 	.word	0x40026428
 8003adc:	40026088 	.word	0x40026088
 8003ae0:	40026488 	.word	0x40026488
 8003ae4:	40026040 	.word	0x40026040
 8003ae8:	40026440 	.word	0x40026440
 8003aec:	400260a0 	.word	0x400260a0
 8003af0:	400264a0 	.word	0x400264a0
 8003af4:	40026058 	.word	0x40026058
 8003af8:	40026000 	.word	0x40026000
 8003afc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8003b00:	e012      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b02:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b06:	e00f      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b08:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b0c:	e00c      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b0e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b12:	e009      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b14:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b18:	e006      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b1a:	2308      	movs	r3, #8
 8003b1c:	e004      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b1e:	2308      	movs	r3, #8
 8003b20:	e002      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b22:	2308      	movs	r3, #8
 8003b24:	e000      	b.n	8003b28 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8003b26:	2308      	movs	r3, #8
 8003b28:	4a8a      	ldr	r2, [pc, #552]	; (8003d54 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8003b2a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	461a      	mov	r2, r3
 8003b32:	4b89      	ldr	r3, [pc, #548]	; (8003d58 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d960      	bls.n	8003bfa <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a87      	ldr	r2, [pc, #540]	; (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d057      	beq.n	8003bf2 <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a86      	ldr	r2, [pc, #536]	; (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d050      	beq.n	8003bee <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a84      	ldr	r2, [pc, #528]	; (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d049      	beq.n	8003bea <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a83      	ldr	r2, [pc, #524]	; (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d042      	beq.n	8003be6 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a81      	ldr	r2, [pc, #516]	; (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d03a      	beq.n	8003be0 <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a80      	ldr	r2, [pc, #512]	; (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d032      	beq.n	8003bda <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a7e      	ldr	r2, [pc, #504]	; (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d02a      	beq.n	8003bd4 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a7d      	ldr	r2, [pc, #500]	; (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d022      	beq.n	8003bce <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a7b      	ldr	r2, [pc, #492]	; (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d01a      	beq.n	8003bc8 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a7a      	ldr	r2, [pc, #488]	; (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d012      	beq.n	8003bc2 <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	4a78      	ldr	r2, [pc, #480]	; (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d00a      	beq.n	8003bbc <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4a77      	ldr	r2, [pc, #476]	; (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003bac:	4293      	cmp	r3, r2
 8003bae:	d102      	bne.n	8003bb6 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8003bb0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bb4:	e01e      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003bba:	e01b      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bbc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bc0:	e018      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bc2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bc6:	e015      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bc8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003bcc:	e012      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bce:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd2:	e00f      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bd4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bd8:	e00c      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003bde:	e009      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003be0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003be4:	e006      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003be6:	2304      	movs	r3, #4
 8003be8:	e004      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bea:	2304      	movs	r3, #4
 8003bec:	e002      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bee:	2304      	movs	r3, #4
 8003bf0:	e000      	b.n	8003bf4 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8003bf2:	2304      	movs	r3, #4
 8003bf4:	4a65      	ldr	r2, [pc, #404]	; (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003bf6:	60d3      	str	r3, [r2, #12]
 8003bf8:	e150      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	461a      	mov	r2, r3
 8003c00:	4b63      	ldr	r3, [pc, #396]	; (8003d90 <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d960      	bls.n	8003cc8 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	4a54      	ldr	r2, [pc, #336]	; (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d057      	beq.n	8003cc0 <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a52      	ldr	r2, [pc, #328]	; (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d050      	beq.n	8003cbc <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a51      	ldr	r2, [pc, #324]	; (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d049      	beq.n	8003cb8 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a4f      	ldr	r2, [pc, #316]	; (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d042      	beq.n	8003cb4 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a4e      	ldr	r2, [pc, #312]	; (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d03a      	beq.n	8003cae <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a4c      	ldr	r2, [pc, #304]	; (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d032      	beq.n	8003ca8 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a4b      	ldr	r2, [pc, #300]	; (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d02a      	beq.n	8003ca2 <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	4a49      	ldr	r2, [pc, #292]	; (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d022      	beq.n	8003c9c <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a48      	ldr	r2, [pc, #288]	; (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d01a      	beq.n	8003c96 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	4a46      	ldr	r2, [pc, #280]	; (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d012      	beq.n	8003c90 <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	4a45      	ldr	r2, [pc, #276]	; (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d00a      	beq.n	8003c8a <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4a43      	ldr	r2, [pc, #268]	; (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003c7a:	4293      	cmp	r3, r2
 8003c7c:	d102      	bne.n	8003c84 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8003c7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c82:	e01e      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c84:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003c88:	e01b      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c8a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c8e:	e018      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c90:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c94:	e015      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c96:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003c9a:	e012      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003c9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca0:	e00f      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003ca2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ca6:	e00c      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003ca8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cac:	e009      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003cb2:	e006      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003cb4:	2304      	movs	r3, #4
 8003cb6:	e004      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	e002      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003cbc:	2304      	movs	r3, #4
 8003cbe:	e000      	b.n	8003cc2 <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8003cc0:	2304      	movs	r3, #4
 8003cc2:	4a32      	ldr	r2, [pc, #200]	; (8003d8c <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8003cc4:	6093      	str	r3, [r2, #8]
 8003cc6:	e0e9      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	461a      	mov	r2, r3
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	f240 8083 	bls.w	8003ddc <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d079      	beq.n	8003dd4 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a1e      	ldr	r2, [pc, #120]	; (8003d60 <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d072      	beq.n	8003dd0 <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1d      	ldr	r2, [pc, #116]	; (8003d64 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d06b      	beq.n	8003dcc <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1b      	ldr	r2, [pc, #108]	; (8003d68 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d064      	beq.n	8003dc8 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1a      	ldr	r2, [pc, #104]	; (8003d6c <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d05c      	beq.n	8003dc2 <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a18      	ldr	r2, [pc, #96]	; (8003d70 <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d054      	beq.n	8003dbc <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a17      	ldr	r2, [pc, #92]	; (8003d74 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d04c      	beq.n	8003db6 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a15      	ldr	r2, [pc, #84]	; (8003d78 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d044      	beq.n	8003db0 <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a14      	ldr	r2, [pc, #80]	; (8003d7c <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d03c      	beq.n	8003daa <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a12      	ldr	r2, [pc, #72]	; (8003d80 <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d034      	beq.n	8003da4 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	4a11      	ldr	r2, [pc, #68]	; (8003d84 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d02c      	beq.n	8003d9e <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a0f      	ldr	r2, [pc, #60]	; (8003d88 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d124      	bne.n	8003d98 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8003d4e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003d52:	e040      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d54:	40026000 	.word	0x40026000
 8003d58:	40026458 	.word	0x40026458
 8003d5c:	40026010 	.word	0x40026010
 8003d60:	40026410 	.word	0x40026410
 8003d64:	40026070 	.word	0x40026070
 8003d68:	40026470 	.word	0x40026470
 8003d6c:	40026028 	.word	0x40026028
 8003d70:	40026428 	.word	0x40026428
 8003d74:	40026088 	.word	0x40026088
 8003d78:	40026488 	.word	0x40026488
 8003d7c:	40026040 	.word	0x40026040
 8003d80:	40026440 	.word	0x40026440
 8003d84:	400260a0 	.word	0x400260a0
 8003d88:	400264a0 	.word	0x400264a0
 8003d8c:	40026400 	.word	0x40026400
 8003d90:	400260b8 	.word	0x400260b8
 8003d94:	40026058 	.word	0x40026058
 8003d98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003d9c:	e01b      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003d9e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da2:	e018      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003da4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003da8:	e015      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003daa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003dae:	e012      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003db0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003db4:	e00f      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003db6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dba:	e00c      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003dbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc0:	e009      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003dc2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003dc6:	e006      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003dc8:	2304      	movs	r3, #4
 8003dca:	e004      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003dcc:	2304      	movs	r3, #4
 8003dce:	e002      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003dd0:	2304      	movs	r3, #4
 8003dd2:	e000      	b.n	8003dd6 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8003dd4:	2304      	movs	r3, #4
 8003dd6:	4a8b      	ldr	r2, [pc, #556]	; (8004004 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003dd8:	60d3      	str	r3, [r2, #12]
 8003dda:	e05f      	b.n	8003e9c <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a89      	ldr	r2, [pc, #548]	; (8004008 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003de2:	4293      	cmp	r3, r2
 8003de4:	d057      	beq.n	8003e96 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a88      	ldr	r2, [pc, #544]	; (800400c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d050      	beq.n	8003e92 <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4a86      	ldr	r2, [pc, #536]	; (8004010 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003df6:	4293      	cmp	r3, r2
 8003df8:	d049      	beq.n	8003e8e <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a85      	ldr	r2, [pc, #532]	; (8004014 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d042      	beq.n	8003e8a <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a83      	ldr	r2, [pc, #524]	; (8004018 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d03a      	beq.n	8003e84 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	4a82      	ldr	r2, [pc, #520]	; (800401c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d032      	beq.n	8003e7e <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a80      	ldr	r2, [pc, #512]	; (8004020 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d02a      	beq.n	8003e78 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	4a7f      	ldr	r2, [pc, #508]	; (8004024 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003e28:	4293      	cmp	r3, r2
 8003e2a:	d022      	beq.n	8003e72 <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4a7d      	ldr	r2, [pc, #500]	; (8004028 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d01a      	beq.n	8003e6c <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a7c      	ldr	r2, [pc, #496]	; (800402c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003e3c:	4293      	cmp	r3, r2
 8003e3e:	d012      	beq.n	8003e66 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a7a      	ldr	r2, [pc, #488]	; (8004030 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d00a      	beq.n	8003e60 <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a79      	ldr	r2, [pc, #484]	; (8004034 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d102      	bne.n	8003e5a <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003e54:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e58:	e01e      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e5a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003e5e:	e01b      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e64:	e018      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e6a:	e015      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003e70:	e012      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e76:	e00f      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e7c:	e00c      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e82:	e009      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e84:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003e88:	e006      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e8a:	2304      	movs	r3, #4
 8003e8c:	e004      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e8e:	2304      	movs	r3, #4
 8003e90:	e002      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e92:	2304      	movs	r3, #4
 8003e94:	e000      	b.n	8003e98 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003e96:	2304      	movs	r3, #4
 8003e98:	4a5a      	ldr	r2, [pc, #360]	; (8004004 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003e9a:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	4b65      	ldr	r3, [pc, #404]	; (8004038 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003ea4:	429a      	cmp	r2, r3
 8003ea6:	d95c      	bls.n	8003f62 <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a56      	ldr	r2, [pc, #344]	; (8004008 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d053      	beq.n	8003f5a <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	4a55      	ldr	r2, [pc, #340]	; (800400c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d04c      	beq.n	8003f56 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a53      	ldr	r2, [pc, #332]	; (8004010 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003ec2:	4293      	cmp	r3, r2
 8003ec4:	d045      	beq.n	8003f52 <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4a52      	ldr	r2, [pc, #328]	; (8004014 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003ecc:	4293      	cmp	r3, r2
 8003ece:	d03e      	beq.n	8003f4e <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a50      	ldr	r2, [pc, #320]	; (8004018 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d037      	beq.n	8003f4a <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	4a4f      	ldr	r2, [pc, #316]	; (800401c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003ee0:	4293      	cmp	r3, r2
 8003ee2:	d030      	beq.n	8003f46 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a4d      	ldr	r2, [pc, #308]	; (8004020 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d029      	beq.n	8003f42 <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	4a4c      	ldr	r2, [pc, #304]	; (8004024 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003ef4:	4293      	cmp	r3, r2
 8003ef6:	d022      	beq.n	8003f3e <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	4a4a      	ldr	r2, [pc, #296]	; (8004028 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d01a      	beq.n	8003f38 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	4a49      	ldr	r2, [pc, #292]	; (800402c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d012      	beq.n	8003f32 <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a47      	ldr	r2, [pc, #284]	; (8004030 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d00a      	beq.n	8003f2c <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a46      	ldr	r2, [pc, #280]	; (8004034 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d102      	bne.n	8003f26 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 8003f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f24:	e01a      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f26:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f2a:	e017      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f2c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f30:	e014      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f32:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f36:	e011      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003f3c:	e00e      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f3e:	2340      	movs	r3, #64	; 0x40
 8003f40:	e00c      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f42:	2340      	movs	r3, #64	; 0x40
 8003f44:	e00a      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f46:	2340      	movs	r3, #64	; 0x40
 8003f48:	e008      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f4a:	2340      	movs	r3, #64	; 0x40
 8003f4c:	e006      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e004      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f52:	2301      	movs	r3, #1
 8003f54:	e002      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f56:	2301      	movs	r3, #1
 8003f58:	e000      	b.n	8003f5c <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	4a37      	ldr	r2, [pc, #220]	; (800403c <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 8003f5e:	60d3      	str	r3, [r2, #12]
 8003f60:	e141      	b.n	80041e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	461a      	mov	r2, r3
 8003f68:	4b35      	ldr	r3, [pc, #212]	; (8004040 <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003f6a:	429a      	cmp	r2, r3
 8003f6c:	d97c      	bls.n	8004068 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	4a25      	ldr	r2, [pc, #148]	; (8004008 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d073      	beq.n	8004060 <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a23      	ldr	r2, [pc, #140]	; (800400c <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d06c      	beq.n	800405c <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	4a22      	ldr	r2, [pc, #136]	; (8004010 <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003f88:	4293      	cmp	r3, r2
 8003f8a:	d065      	beq.n	8004058 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	4a20      	ldr	r2, [pc, #128]	; (8004014 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d05e      	beq.n	8004054 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a1f      	ldr	r2, [pc, #124]	; (8004018 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d057      	beq.n	8004050 <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a1d      	ldr	r2, [pc, #116]	; (800401c <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003fa6:	4293      	cmp	r3, r2
 8003fa8:	d050      	beq.n	800404c <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	4a1c      	ldr	r2, [pc, #112]	; (8004020 <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003fb0:	4293      	cmp	r3, r2
 8003fb2:	d049      	beq.n	8004048 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a1a      	ldr	r2, [pc, #104]	; (8004024 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d042      	beq.n	8004044 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a19      	ldr	r2, [pc, #100]	; (8004028 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d01a      	beq.n	8003ffe <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a17      	ldr	r2, [pc, #92]	; (800402c <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003fce:	4293      	cmp	r3, r2
 8003fd0:	d012      	beq.n	8003ff8 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a16      	ldr	r2, [pc, #88]	; (8004030 <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d00a      	beq.n	8003ff2 <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	4a14      	ldr	r2, [pc, #80]	; (8004034 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003fe2:	4293      	cmp	r3, r2
 8003fe4:	d102      	bne.n	8003fec <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003fe6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fea:	e03a      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003fec:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003ff0:	e037      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ff2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ff6:	e034      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ff8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003ffc:	e031      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003ffe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004002:	e02e      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004004:	40026000 	.word	0x40026000
 8004008:	40026010 	.word	0x40026010
 800400c:	40026410 	.word	0x40026410
 8004010:	40026070 	.word	0x40026070
 8004014:	40026470 	.word	0x40026470
 8004018:	40026028 	.word	0x40026028
 800401c:	40026428 	.word	0x40026428
 8004020:	40026088 	.word	0x40026088
 8004024:	40026488 	.word	0x40026488
 8004028:	40026040 	.word	0x40026040
 800402c:	40026440 	.word	0x40026440
 8004030:	400260a0 	.word	0x400260a0
 8004034:	400264a0 	.word	0x400264a0
 8004038:	40026458 	.word	0x40026458
 800403c:	40026400 	.word	0x40026400
 8004040:	400260b8 	.word	0x400260b8
 8004044:	2340      	movs	r3, #64	; 0x40
 8004046:	e00c      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004048:	2340      	movs	r3, #64	; 0x40
 800404a:	e00a      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800404c:	2340      	movs	r3, #64	; 0x40
 800404e:	e008      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004050:	2340      	movs	r3, #64	; 0x40
 8004052:	e006      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004054:	2301      	movs	r3, #1
 8004056:	e004      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004058:	2301      	movs	r3, #1
 800405a:	e002      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800405c:	2301      	movs	r3, #1
 800405e:	e000      	b.n	8004062 <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8004060:	2301      	movs	r3, #1
 8004062:	4a7b      	ldr	r2, [pc, #492]	; (8004250 <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8004064:	6093      	str	r3, [r2, #8]
 8004066:	e0be      	b.n	80041e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	461a      	mov	r2, r3
 800406e:	4b79      	ldr	r3, [pc, #484]	; (8004254 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8004070:	429a      	cmp	r2, r3
 8004072:	d95c      	bls.n	800412e <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a77      	ldr	r2, [pc, #476]	; (8004258 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d053      	beq.n	8004126 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a76      	ldr	r2, [pc, #472]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d04c      	beq.n	8004122 <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a74      	ldr	r2, [pc, #464]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d045      	beq.n	800411e <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a73      	ldr	r2, [pc, #460]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d03e      	beq.n	800411a <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a71      	ldr	r2, [pc, #452]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d037      	beq.n	8004116 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a70      	ldr	r2, [pc, #448]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d030      	beq.n	8004112 <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a6e      	ldr	r2, [pc, #440]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d029      	beq.n	800410e <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a6d      	ldr	r2, [pc, #436]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d022      	beq.n	800410a <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a6b      	ldr	r2, [pc, #428]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d01a      	beq.n	8004104 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a6a      	ldr	r2, [pc, #424]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d012      	beq.n	80040fe <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a68      	ldr	r2, [pc, #416]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d00a      	beq.n	80040f8 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a67      	ldr	r2, [pc, #412]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d102      	bne.n	80040f2 <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80040ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040f0:	e01a      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80040f6:	e017      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80040fc:	e014      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80040fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004102:	e011      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004104:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004108:	e00e      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800410a:	2340      	movs	r3, #64	; 0x40
 800410c:	e00c      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800410e:	2340      	movs	r3, #64	; 0x40
 8004110:	e00a      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004112:	2340      	movs	r3, #64	; 0x40
 8004114:	e008      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004116:	2340      	movs	r3, #64	; 0x40
 8004118:	e006      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800411a:	2301      	movs	r3, #1
 800411c:	e004      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800411e:	2301      	movs	r3, #1
 8004120:	e002      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004122:	2301      	movs	r3, #1
 8004124:	e000      	b.n	8004128 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8004126:	2301      	movs	r3, #1
 8004128:	4a57      	ldr	r2, [pc, #348]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 800412a:	60d3      	str	r3, [r2, #12]
 800412c:	e05b      	b.n	80041e6 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a49      	ldr	r2, [pc, #292]	; (8004258 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	d053      	beq.n	80041e0 <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a47      	ldr	r2, [pc, #284]	; (800425c <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d04c      	beq.n	80041dc <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a46      	ldr	r2, [pc, #280]	; (8004260 <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d045      	beq.n	80041d8 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a44      	ldr	r2, [pc, #272]	; (8004264 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d03e      	beq.n	80041d4 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	4a43      	ldr	r2, [pc, #268]	; (8004268 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800415c:	4293      	cmp	r3, r2
 800415e:	d037      	beq.n	80041d0 <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	4a41      	ldr	r2, [pc, #260]	; (800426c <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d030      	beq.n	80041cc <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a40      	ldr	r2, [pc, #256]	; (8004270 <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d029      	beq.n	80041c8 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a3e      	ldr	r2, [pc, #248]	; (8004274 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d022      	beq.n	80041c4 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4a3d      	ldr	r2, [pc, #244]	; (8004278 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8004184:	4293      	cmp	r3, r2
 8004186:	d01a      	beq.n	80041be <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a3b      	ldr	r2, [pc, #236]	; (800427c <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d012      	beq.n	80041b8 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a3a      	ldr	r2, [pc, #232]	; (8004280 <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d00a      	beq.n	80041b2 <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a38      	ldr	r2, [pc, #224]	; (8004284 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d102      	bne.n	80041ac <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 80041a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041aa:	e01a      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041ac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80041b0:	e017      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041b6:	e014      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041b8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041bc:	e011      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041be:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80041c2:	e00e      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041c4:	2340      	movs	r3, #64	; 0x40
 80041c6:	e00c      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041c8:	2340      	movs	r3, #64	; 0x40
 80041ca:	e00a      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041cc:	2340      	movs	r3, #64	; 0x40
 80041ce:	e008      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041d0:	2340      	movs	r3, #64	; 0x40
 80041d2:	e006      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041d4:	2301      	movs	r3, #1
 80041d6:	e004      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041d8:	2301      	movs	r3, #1
 80041da:	e002      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041dc:	2301      	movs	r3, #1
 80041de:	e000      	b.n	80041e2 <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 80041e0:	2301      	movs	r3, #1
 80041e2:	4a29      	ldr	r2, [pc, #164]	; (8004288 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80041e4:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	f042 0216 	orr.w	r2, r2, #22
 80041f4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	695a      	ldr	r2, [r3, #20]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004204:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	2b00      	cmp	r3, #0
 800420c:	d103      	bne.n	8004216 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004212:	2b00      	cmp	r3, #0
 8004214:	d007      	beq.n	8004226 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f042 0208 	orr.w	r2, r2, #8
 8004224:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f042 0201 	orr.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	e005      	b.n	8004244 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	2200      	movs	r2, #0
 800423c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8004240:	2302      	movs	r3, #2
 8004242:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8004244:	7dfb      	ldrb	r3, [r7, #23]
}
 8004246:	4618      	mov	r0, r3
 8004248:	3718      	adds	r7, #24
 800424a:	46bd      	mov	sp, r7
 800424c:	bd80      	pop	{r7, pc}
 800424e:	bf00      	nop
 8004250:	40026400 	.word	0x40026400
 8004254:	40026058 	.word	0x40026058
 8004258:	40026010 	.word	0x40026010
 800425c:	40026410 	.word	0x40026410
 8004260:	40026070 	.word	0x40026070
 8004264:	40026470 	.word	0x40026470
 8004268:	40026028 	.word	0x40026028
 800426c:	40026428 	.word	0x40026428
 8004270:	40026088 	.word	0x40026088
 8004274:	40026488 	.word	0x40026488
 8004278:	40026040 	.word	0x40026040
 800427c:	40026440 	.word	0x40026440
 8004280:	400260a0 	.word	0x400260a0
 8004284:	400264a0 	.word	0x400264a0
 8004288:	40026000 	.word	0x40026000

0800428c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	689b      	ldr	r3, [r3, #8]
 80042a6:	2b40      	cmp	r3, #64	; 0x40
 80042a8:	d108      	bne.n	80042bc <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042ba:	e007      	b.n	80042cc <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	687a      	ldr	r2, [r7, #4]
 80042ca:	60da      	str	r2, [r3, #12]
}
 80042cc:	bf00      	nop
 80042ce:	3714      	adds	r7, #20
 80042d0:	46bd      	mov	sp, r7
 80042d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d6:	4770      	bx	lr

080042d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042d8:	b480      	push	{r7}
 80042da:	b089      	sub	sp, #36	; 0x24
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
 80042e0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80042e2:	2300      	movs	r3, #0
 80042e4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80042e6:	2300      	movs	r3, #0
 80042e8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80042ea:	2300      	movs	r3, #0
 80042ec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80042ee:	2300      	movs	r3, #0
 80042f0:	61fb      	str	r3, [r7, #28]
 80042f2:	e16b      	b.n	80045cc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80042f4:	2201      	movs	r2, #1
 80042f6:	69fb      	ldr	r3, [r7, #28]
 80042f8:	fa02 f303 	lsl.w	r3, r2, r3
 80042fc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	4013      	ands	r3, r2
 8004306:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	f040 815a 	bne.w	80045c6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	f003 0303 	and.w	r3, r3, #3
 800431a:	2b01      	cmp	r3, #1
 800431c:	d005      	beq.n	800432a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	685b      	ldr	r3, [r3, #4]
 8004322:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004326:	2b02      	cmp	r3, #2
 8004328:	d130      	bne.n	800438c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004330:	69fb      	ldr	r3, [r7, #28]
 8004332:	005b      	lsls	r3, r3, #1
 8004334:	2203      	movs	r2, #3
 8004336:	fa02 f303 	lsl.w	r3, r2, r3
 800433a:	43db      	mvns	r3, r3
 800433c:	69ba      	ldr	r2, [r7, #24]
 800433e:	4013      	ands	r3, r2
 8004340:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	005b      	lsls	r3, r3, #1
 800434a:	fa02 f303 	lsl.w	r3, r2, r3
 800434e:	69ba      	ldr	r2, [r7, #24]
 8004350:	4313      	orrs	r3, r2
 8004352:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004360:	2201      	movs	r2, #1
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	43db      	mvns	r3, r3
 800436a:	69ba      	ldr	r2, [r7, #24]
 800436c:	4013      	ands	r3, r2
 800436e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	091b      	lsrs	r3, r3, #4
 8004376:	f003 0201 	and.w	r2, r3, #1
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	fa02 f303 	lsl.w	r3, r2, r3
 8004380:	69ba      	ldr	r2, [r7, #24]
 8004382:	4313      	orrs	r3, r2
 8004384:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f003 0303 	and.w	r3, r3, #3
 8004394:	2b03      	cmp	r3, #3
 8004396:	d017      	beq.n	80043c8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800439e:	69fb      	ldr	r3, [r7, #28]
 80043a0:	005b      	lsls	r3, r3, #1
 80043a2:	2203      	movs	r2, #3
 80043a4:	fa02 f303 	lsl.w	r3, r2, r3
 80043a8:	43db      	mvns	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	4013      	ands	r3, r2
 80043ae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	689a      	ldr	r2, [r3, #8]
 80043b4:	69fb      	ldr	r3, [r7, #28]
 80043b6:	005b      	lsls	r3, r3, #1
 80043b8:	fa02 f303 	lsl.w	r3, r2, r3
 80043bc:	69ba      	ldr	r2, [r7, #24]
 80043be:	4313      	orrs	r3, r2
 80043c0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	69ba      	ldr	r2, [r7, #24]
 80043c6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	685b      	ldr	r3, [r3, #4]
 80043cc:	f003 0303 	and.w	r3, r3, #3
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d123      	bne.n	800441c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80043d4:	69fb      	ldr	r3, [r7, #28]
 80043d6:	08da      	lsrs	r2, r3, #3
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	3208      	adds	r2, #8
 80043dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	220f      	movs	r2, #15
 80043ec:	fa02 f303 	lsl.w	r3, r2, r3
 80043f0:	43db      	mvns	r3, r3
 80043f2:	69ba      	ldr	r2, [r7, #24]
 80043f4:	4013      	ands	r3, r2
 80043f6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	691a      	ldr	r2, [r3, #16]
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	69ba      	ldr	r2, [r7, #24]
 800440a:	4313      	orrs	r3, r2
 800440c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800440e:	69fb      	ldr	r3, [r7, #28]
 8004410:	08da      	lsrs	r2, r3, #3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	3208      	adds	r2, #8
 8004416:	69b9      	ldr	r1, [r7, #24]
 8004418:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004422:	69fb      	ldr	r3, [r7, #28]
 8004424:	005b      	lsls	r3, r3, #1
 8004426:	2203      	movs	r2, #3
 8004428:	fa02 f303 	lsl.w	r3, r2, r3
 800442c:	43db      	mvns	r3, r3
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4013      	ands	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	f003 0203 	and.w	r2, r3, #3
 800443c:	69fb      	ldr	r3, [r7, #28]
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	fa02 f303 	lsl.w	r3, r2, r3
 8004444:	69ba      	ldr	r2, [r7, #24]
 8004446:	4313      	orrs	r3, r2
 8004448:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69ba      	ldr	r2, [r7, #24]
 800444e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 80b4 	beq.w	80045c6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800445e:	2300      	movs	r3, #0
 8004460:	60fb      	str	r3, [r7, #12]
 8004462:	4b60      	ldr	r3, [pc, #384]	; (80045e4 <HAL_GPIO_Init+0x30c>)
 8004464:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004466:	4a5f      	ldr	r2, [pc, #380]	; (80045e4 <HAL_GPIO_Init+0x30c>)
 8004468:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800446c:	6453      	str	r3, [r2, #68]	; 0x44
 800446e:	4b5d      	ldr	r3, [pc, #372]	; (80045e4 <HAL_GPIO_Init+0x30c>)
 8004470:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004472:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800447a:	4a5b      	ldr	r2, [pc, #364]	; (80045e8 <HAL_GPIO_Init+0x310>)
 800447c:	69fb      	ldr	r3, [r7, #28]
 800447e:	089b      	lsrs	r3, r3, #2
 8004480:	3302      	adds	r3, #2
 8004482:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004486:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	f003 0303 	and.w	r3, r3, #3
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	220f      	movs	r2, #15
 8004492:	fa02 f303 	lsl.w	r3, r2, r3
 8004496:	43db      	mvns	r3, r3
 8004498:	69ba      	ldr	r2, [r7, #24]
 800449a:	4013      	ands	r3, r2
 800449c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a52      	ldr	r2, [pc, #328]	; (80045ec <HAL_GPIO_Init+0x314>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d02b      	beq.n	80044fe <HAL_GPIO_Init+0x226>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a51      	ldr	r2, [pc, #324]	; (80045f0 <HAL_GPIO_Init+0x318>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d025      	beq.n	80044fa <HAL_GPIO_Init+0x222>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a50      	ldr	r2, [pc, #320]	; (80045f4 <HAL_GPIO_Init+0x31c>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d01f      	beq.n	80044f6 <HAL_GPIO_Init+0x21e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a4f      	ldr	r2, [pc, #316]	; (80045f8 <HAL_GPIO_Init+0x320>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d019      	beq.n	80044f2 <HAL_GPIO_Init+0x21a>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a4e      	ldr	r2, [pc, #312]	; (80045fc <HAL_GPIO_Init+0x324>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d013      	beq.n	80044ee <HAL_GPIO_Init+0x216>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a4d      	ldr	r2, [pc, #308]	; (8004600 <HAL_GPIO_Init+0x328>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d00d      	beq.n	80044ea <HAL_GPIO_Init+0x212>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	4a4c      	ldr	r2, [pc, #304]	; (8004604 <HAL_GPIO_Init+0x32c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d007      	beq.n	80044e6 <HAL_GPIO_Init+0x20e>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a4b      	ldr	r2, [pc, #300]	; (8004608 <HAL_GPIO_Init+0x330>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d101      	bne.n	80044e2 <HAL_GPIO_Init+0x20a>
 80044de:	2307      	movs	r3, #7
 80044e0:	e00e      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044e2:	2308      	movs	r3, #8
 80044e4:	e00c      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044e6:	2306      	movs	r3, #6
 80044e8:	e00a      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044ea:	2305      	movs	r3, #5
 80044ec:	e008      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044ee:	2304      	movs	r3, #4
 80044f0:	e006      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044f2:	2303      	movs	r3, #3
 80044f4:	e004      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044f6:	2302      	movs	r3, #2
 80044f8:	e002      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044fa:	2301      	movs	r3, #1
 80044fc:	e000      	b.n	8004500 <HAL_GPIO_Init+0x228>
 80044fe:	2300      	movs	r3, #0
 8004500:	69fa      	ldr	r2, [r7, #28]
 8004502:	f002 0203 	and.w	r2, r2, #3
 8004506:	0092      	lsls	r2, r2, #2
 8004508:	4093      	lsls	r3, r2
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004510:	4935      	ldr	r1, [pc, #212]	; (80045e8 <HAL_GPIO_Init+0x310>)
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	089b      	lsrs	r3, r3, #2
 8004516:	3302      	adds	r3, #2
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800451e:	4b3b      	ldr	r3, [pc, #236]	; (800460c <HAL_GPIO_Init+0x334>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	43db      	mvns	r3, r3
 8004528:	69ba      	ldr	r2, [r7, #24]
 800452a:	4013      	ands	r3, r2
 800452c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800453a:	69ba      	ldr	r2, [r7, #24]
 800453c:	693b      	ldr	r3, [r7, #16]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004542:	4a32      	ldr	r2, [pc, #200]	; (800460c <HAL_GPIO_Init+0x334>)
 8004544:	69bb      	ldr	r3, [r7, #24]
 8004546:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004548:	4b30      	ldr	r3, [pc, #192]	; (800460c <HAL_GPIO_Init+0x334>)
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	43db      	mvns	r3, r3
 8004552:	69ba      	ldr	r2, [r7, #24]
 8004554:	4013      	ands	r3, r2
 8004556:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004560:	2b00      	cmp	r3, #0
 8004562:	d003      	beq.n	800456c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004564:	69ba      	ldr	r2, [r7, #24]
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800456c:	4a27      	ldr	r2, [pc, #156]	; (800460c <HAL_GPIO_Init+0x334>)
 800456e:	69bb      	ldr	r3, [r7, #24]
 8004570:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004572:	4b26      	ldr	r3, [pc, #152]	; (800460c <HAL_GPIO_Init+0x334>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004578:	693b      	ldr	r3, [r7, #16]
 800457a:	43db      	mvns	r3, r3
 800457c:	69ba      	ldr	r2, [r7, #24]
 800457e:	4013      	ands	r3, r2
 8004580:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800458a:	2b00      	cmp	r3, #0
 800458c:	d003      	beq.n	8004596 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	693b      	ldr	r3, [r7, #16]
 8004592:	4313      	orrs	r3, r2
 8004594:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004596:	4a1d      	ldr	r2, [pc, #116]	; (800460c <HAL_GPIO_Init+0x334>)
 8004598:	69bb      	ldr	r3, [r7, #24]
 800459a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_GPIO_Init+0x334>)
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d003      	beq.n	80045c0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80045b8:	69ba      	ldr	r2, [r7, #24]
 80045ba:	693b      	ldr	r3, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80045c0:	4a12      	ldr	r2, [pc, #72]	; (800460c <HAL_GPIO_Init+0x334>)
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	3301      	adds	r3, #1
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	69fb      	ldr	r3, [r7, #28]
 80045ce:	2b0f      	cmp	r3, #15
 80045d0:	f67f ae90 	bls.w	80042f4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80045d4:	bf00      	nop
 80045d6:	bf00      	nop
 80045d8:	3724      	adds	r7, #36	; 0x24
 80045da:	46bd      	mov	sp, r7
 80045dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e0:	4770      	bx	lr
 80045e2:	bf00      	nop
 80045e4:	40023800 	.word	0x40023800
 80045e8:	40013800 	.word	0x40013800
 80045ec:	40020000 	.word	0x40020000
 80045f0:	40020400 	.word	0x40020400
 80045f4:	40020800 	.word	0x40020800
 80045f8:	40020c00 	.word	0x40020c00
 80045fc:	40021000 	.word	0x40021000
 8004600:	40021400 	.word	0x40021400
 8004604:	40021800 	.word	0x40021800
 8004608:	40021c00 	.word	0x40021c00
 800460c:	40013c00 	.word	0x40013c00

08004610 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	807b      	strh	r3, [r7, #2]
 800461c:	4613      	mov	r3, r2
 800461e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004620:	787b      	ldrb	r3, [r7, #1]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d003      	beq.n	800462e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004626:	887a      	ldrh	r2, [r7, #2]
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800462c:	e003      	b.n	8004636 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800462e:	887b      	ldrh	r3, [r7, #2]
 8004630:	041a      	lsls	r2, r3, #16
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	619a      	str	r2, [r3, #24]
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004642:	b480      	push	{r7}
 8004644:	b085      	sub	sp, #20
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
 800464a:	460b      	mov	r3, r1
 800464c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	695b      	ldr	r3, [r3, #20]
 8004652:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004654:	887a      	ldrh	r2, [r7, #2]
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	4013      	ands	r3, r2
 800465a:	041a      	lsls	r2, r3, #16
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	43d9      	mvns	r1, r3
 8004660:	887b      	ldrh	r3, [r7, #2]
 8004662:	400b      	ands	r3, r1
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	619a      	str	r2, [r3, #24]
}
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004676:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004678:	b08f      	sub	sp, #60	; 0x3c
 800467a:	af0a      	add	r7, sp, #40	; 0x28
 800467c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e10f      	b.n	80048a8 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b00      	cmp	r3, #0
 8004698:	d106      	bne.n	80046a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7fd f808 	bl	80016b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2203      	movs	r2, #3
 80046ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d102      	bne.n	80046c2 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2200      	movs	r2, #0
 80046c0:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f002 fc31 	bl	8006f2e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	603b      	str	r3, [r7, #0]
 80046d2:	687e      	ldr	r6, [r7, #4]
 80046d4:	466d      	mov	r5, sp
 80046d6:	f106 0410 	add.w	r4, r6, #16
 80046da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046e2:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046e6:	e885 0003 	stmia.w	r5, {r0, r1}
 80046ea:	1d33      	adds	r3, r6, #4
 80046ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ee:	6838      	ldr	r0, [r7, #0]
 80046f0:	f002 fbbc 	bl	8006e6c <USB_CoreInit>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d005      	beq.n	8004706 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2202      	movs	r2, #2
 80046fe:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004702:	2301      	movs	r3, #1
 8004704:	e0d0      	b.n	80048a8 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	2100      	movs	r1, #0
 800470c:	4618      	mov	r0, r3
 800470e:	f002 fc1f 	bl	8006f50 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004712:	2300      	movs	r3, #0
 8004714:	73fb      	strb	r3, [r7, #15]
 8004716:	e04a      	b.n	80047ae <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004718:	7bfa      	ldrb	r2, [r7, #15]
 800471a:	6879      	ldr	r1, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	00db      	lsls	r3, r3, #3
 8004720:	4413      	add	r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	440b      	add	r3, r1
 8004726:	333d      	adds	r3, #61	; 0x3d
 8004728:	2201      	movs	r2, #1
 800472a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800472c:	7bfa      	ldrb	r2, [r7, #15]
 800472e:	6879      	ldr	r1, [r7, #4]
 8004730:	4613      	mov	r3, r2
 8004732:	00db      	lsls	r3, r3, #3
 8004734:	4413      	add	r3, r2
 8004736:	009b      	lsls	r3, r3, #2
 8004738:	440b      	add	r3, r1
 800473a:	333c      	adds	r3, #60	; 0x3c
 800473c:	7bfa      	ldrb	r2, [r7, #15]
 800473e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	7bfb      	ldrb	r3, [r7, #15]
 8004744:	b298      	uxth	r0, r3
 8004746:	6879      	ldr	r1, [r7, #4]
 8004748:	4613      	mov	r3, r2
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	440b      	add	r3, r1
 8004752:	3344      	adds	r3, #68	; 0x44
 8004754:	4602      	mov	r2, r0
 8004756:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004758:	7bfa      	ldrb	r2, [r7, #15]
 800475a:	6879      	ldr	r1, [r7, #4]
 800475c:	4613      	mov	r3, r2
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4413      	add	r3, r2
 8004762:	009b      	lsls	r3, r3, #2
 8004764:	440b      	add	r3, r1
 8004766:	3340      	adds	r3, #64	; 0x40
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	3348      	adds	r3, #72	; 0x48
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004780:	7bfa      	ldrb	r2, [r7, #15]
 8004782:	6879      	ldr	r1, [r7, #4]
 8004784:	4613      	mov	r3, r2
 8004786:	00db      	lsls	r3, r3, #3
 8004788:	4413      	add	r3, r2
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	440b      	add	r3, r1
 800478e:	334c      	adds	r3, #76	; 0x4c
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004794:	7bfa      	ldrb	r2, [r7, #15]
 8004796:	6879      	ldr	r1, [r7, #4]
 8004798:	4613      	mov	r3, r2
 800479a:	00db      	lsls	r3, r3, #3
 800479c:	4413      	add	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	440b      	add	r3, r1
 80047a2:	3354      	adds	r3, #84	; 0x54
 80047a4:	2200      	movs	r2, #0
 80047a6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
 80047aa:	3301      	adds	r3, #1
 80047ac:	73fb      	strb	r3, [r7, #15]
 80047ae:	7bfa      	ldrb	r2, [r7, #15]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	685b      	ldr	r3, [r3, #4]
 80047b4:	429a      	cmp	r2, r3
 80047b6:	d3af      	bcc.n	8004718 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80047b8:	2300      	movs	r3, #0
 80047ba:	73fb      	strb	r3, [r7, #15]
 80047bc:	e044      	b.n	8004848 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80047be:	7bfa      	ldrb	r2, [r7, #15]
 80047c0:	6879      	ldr	r1, [r7, #4]
 80047c2:	4613      	mov	r3, r2
 80047c4:	00db      	lsls	r3, r3, #3
 80047c6:	4413      	add	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	440b      	add	r3, r1
 80047cc:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047d0:	2200      	movs	r2, #0
 80047d2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047d4:	7bfa      	ldrb	r2, [r7, #15]
 80047d6:	6879      	ldr	r1, [r7, #4]
 80047d8:	4613      	mov	r3, r2
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	440b      	add	r3, r1
 80047e2:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80047e6:	7bfa      	ldrb	r2, [r7, #15]
 80047e8:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047ea:	7bfa      	ldrb	r2, [r7, #15]
 80047ec:	6879      	ldr	r1, [r7, #4]
 80047ee:	4613      	mov	r3, r2
 80047f0:	00db      	lsls	r3, r3, #3
 80047f2:	4413      	add	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	440b      	add	r3, r1
 80047f8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047fc:	2200      	movs	r2, #0
 80047fe:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004800:	7bfa      	ldrb	r2, [r7, #15]
 8004802:	6879      	ldr	r1, [r7, #4]
 8004804:	4613      	mov	r3, r2
 8004806:	00db      	lsls	r3, r3, #3
 8004808:	4413      	add	r3, r2
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	440b      	add	r3, r1
 800480e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004812:	2200      	movs	r2, #0
 8004814:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004816:	7bfa      	ldrb	r2, [r7, #15]
 8004818:	6879      	ldr	r1, [r7, #4]
 800481a:	4613      	mov	r3, r2
 800481c:	00db      	lsls	r3, r3, #3
 800481e:	4413      	add	r3, r2
 8004820:	009b      	lsls	r3, r3, #2
 8004822:	440b      	add	r3, r1
 8004824:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800482c:	7bfa      	ldrb	r2, [r7, #15]
 800482e:	6879      	ldr	r1, [r7, #4]
 8004830:	4613      	mov	r3, r2
 8004832:	00db      	lsls	r3, r3, #3
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	440b      	add	r3, r1
 800483a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800483e:	2200      	movs	r2, #0
 8004840:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004842:	7bfb      	ldrb	r3, [r7, #15]
 8004844:	3301      	adds	r3, #1
 8004846:	73fb      	strb	r3, [r7, #15]
 8004848:	7bfa      	ldrb	r2, [r7, #15]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	429a      	cmp	r2, r3
 8004850:	d3b5      	bcc.n	80047be <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	603b      	str	r3, [r7, #0]
 8004858:	687e      	ldr	r6, [r7, #4]
 800485a:	466d      	mov	r5, sp
 800485c:	f106 0410 	add.w	r4, r6, #16
 8004860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004864:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004866:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004868:	e894 0003 	ldmia.w	r4, {r0, r1}
 800486c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004870:	1d33      	adds	r3, r6, #4
 8004872:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004874:	6838      	ldr	r0, [r7, #0]
 8004876:	f002 fbb7 	bl	8006fe8 <USB_DevInit>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2202      	movs	r2, #2
 8004884:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e00d      	b.n	80048a8 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2201      	movs	r2, #1
 8004898:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4618      	mov	r0, r3
 80048a2:	f002 fd82 	bl	80073aa <USB_DevDisconnect>

  return HAL_OK;
 80048a6:	2300      	movs	r3, #0
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	3714      	adds	r7, #20
 80048ac:	46bd      	mov	sp, r7
 80048ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080048b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b086      	sub	sp, #24
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e267      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f003 0301 	and.w	r3, r3, #1
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d075      	beq.n	80049ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048ce:	4b88      	ldr	r3, [pc, #544]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048d0:	689b      	ldr	r3, [r3, #8]
 80048d2:	f003 030c 	and.w	r3, r3, #12
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d00c      	beq.n	80048f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048da:	4b85      	ldr	r3, [pc, #532]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048dc:	689b      	ldr	r3, [r3, #8]
 80048de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80048e2:	2b08      	cmp	r3, #8
 80048e4:	d112      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048e6:	4b82      	ldr	r3, [pc, #520]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048f2:	d10b      	bne.n	800490c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048f4:	4b7e      	ldr	r3, [pc, #504]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d05b      	beq.n	80049b8 <HAL_RCC_OscConfig+0x108>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d157      	bne.n	80049b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004908:	2301      	movs	r3, #1
 800490a:	e242      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004914:	d106      	bne.n	8004924 <HAL_RCC_OscConfig+0x74>
 8004916:	4b76      	ldr	r3, [pc, #472]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a75      	ldr	r2, [pc, #468]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 800491c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004920:	6013      	str	r3, [r2, #0]
 8004922:	e01d      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	685b      	ldr	r3, [r3, #4]
 8004928:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800492c:	d10c      	bne.n	8004948 <HAL_RCC_OscConfig+0x98>
 800492e:	4b70      	ldr	r3, [pc, #448]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a6f      	ldr	r2, [pc, #444]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004934:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004938:	6013      	str	r3, [r2, #0]
 800493a:	4b6d      	ldr	r3, [pc, #436]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a6c      	ldr	r2, [pc, #432]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004940:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004944:	6013      	str	r3, [r2, #0]
 8004946:	e00b      	b.n	8004960 <HAL_RCC_OscConfig+0xb0>
 8004948:	4b69      	ldr	r3, [pc, #420]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	4a68      	ldr	r2, [pc, #416]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 800494e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b66      	ldr	r3, [pc, #408]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	4a65      	ldr	r2, [pc, #404]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 800495a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800495e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d013      	beq.n	8004990 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004968:	f7fd fbd2 	bl	8002110 <HAL_GetTick>
 800496c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800496e:	e008      	b.n	8004982 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004970:	f7fd fbce 	bl	8002110 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	2b64      	cmp	r3, #100	; 0x64
 800497c:	d901      	bls.n	8004982 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800497e:	2303      	movs	r3, #3
 8004980:	e207      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004982:	4b5b      	ldr	r3, [pc, #364]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498a:	2b00      	cmp	r3, #0
 800498c:	d0f0      	beq.n	8004970 <HAL_RCC_OscConfig+0xc0>
 800498e:	e014      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004990:	f7fd fbbe 	bl	8002110 <HAL_GetTick>
 8004994:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004996:	e008      	b.n	80049aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004998:	f7fd fbba 	bl	8002110 <HAL_GetTick>
 800499c:	4602      	mov	r2, r0
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	1ad3      	subs	r3, r2, r3
 80049a2:	2b64      	cmp	r3, #100	; 0x64
 80049a4:	d901      	bls.n	80049aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049a6:	2303      	movs	r3, #3
 80049a8:	e1f3      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049aa:	4b51      	ldr	r3, [pc, #324]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d1f0      	bne.n	8004998 <HAL_RCC_OscConfig+0xe8>
 80049b6:	e000      	b.n	80049ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 0302 	and.w	r3, r3, #2
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d063      	beq.n	8004a8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049c6:	4b4a      	ldr	r3, [pc, #296]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	f003 030c 	and.w	r3, r3, #12
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d00b      	beq.n	80049ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049d2:	4b47      	ldr	r3, [pc, #284]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80049da:	2b08      	cmp	r3, #8
 80049dc:	d11c      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049de:	4b44      	ldr	r3, [pc, #272]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d116      	bne.n	8004a18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ea:	4b41      	ldr	r3, [pc, #260]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f003 0302 	and.w	r3, r3, #2
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d005      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	2b01      	cmp	r3, #1
 80049fc:	d001      	beq.n	8004a02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80049fe:	2301      	movs	r3, #1
 8004a00:	e1c7      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a02:	4b3b      	ldr	r3, [pc, #236]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	00db      	lsls	r3, r3, #3
 8004a10:	4937      	ldr	r1, [pc, #220]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a12:	4313      	orrs	r3, r2
 8004a14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a16:	e03a      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d020      	beq.n	8004a62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a20:	4b34      	ldr	r3, [pc, #208]	; (8004af4 <HAL_RCC_OscConfig+0x244>)
 8004a22:	2201      	movs	r2, #1
 8004a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a26:	f7fd fb73 	bl	8002110 <HAL_GetTick>
 8004a2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a2c:	e008      	b.n	8004a40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a2e:	f7fd fb6f 	bl	8002110 <HAL_GetTick>
 8004a32:	4602      	mov	r2, r0
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	1ad3      	subs	r3, r2, r3
 8004a38:	2b02      	cmp	r3, #2
 8004a3a:	d901      	bls.n	8004a40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a3c:	2303      	movs	r3, #3
 8004a3e:	e1a8      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a40:	4b2b      	ldr	r3, [pc, #172]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0302 	and.w	r3, r3, #2
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d0f0      	beq.n	8004a2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a4c:	4b28      	ldr	r3, [pc, #160]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	691b      	ldr	r3, [r3, #16]
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4925      	ldr	r1, [pc, #148]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
 8004a60:	e015      	b.n	8004a8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a62:	4b24      	ldr	r3, [pc, #144]	; (8004af4 <HAL_RCC_OscConfig+0x244>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a68:	f7fd fb52 	bl	8002110 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a70:	f7fd fb4e 	bl	8002110 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e187      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a82:	4b1b      	ldr	r3, [pc, #108]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 0302 	and.w	r3, r3, #2
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 0308 	and.w	r3, r3, #8
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d036      	beq.n	8004b08 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d016      	beq.n	8004ad0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004aa2:	4b15      	ldr	r3, [pc, #84]	; (8004af8 <HAL_RCC_OscConfig+0x248>)
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004aa8:	f7fd fb32 	bl	8002110 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ab0:	f7fd fb2e 	bl	8002110 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e167      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ac2:	4b0b      	ldr	r3, [pc, #44]	; (8004af0 <HAL_RCC_OscConfig+0x240>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x200>
 8004ace:	e01b      	b.n	8004b08 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ad0:	4b09      	ldr	r3, [pc, #36]	; (8004af8 <HAL_RCC_OscConfig+0x248>)
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ad6:	f7fd fb1b 	bl	8002110 <HAL_GetTick>
 8004ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004adc:	e00e      	b.n	8004afc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ade:	f7fd fb17 	bl	8002110 <HAL_GetTick>
 8004ae2:	4602      	mov	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d907      	bls.n	8004afc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e150      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
 8004af0:	40023800 	.word	0x40023800
 8004af4:	42470000 	.word	0x42470000
 8004af8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004afc:	4b88      	ldr	r3, [pc, #544]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004afe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b00:	f003 0302 	and.w	r3, r3, #2
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1ea      	bne.n	8004ade <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0304 	and.w	r3, r3, #4
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	f000 8097 	beq.w	8004c44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b16:	2300      	movs	r3, #0
 8004b18:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b1a:	4b81      	ldr	r3, [pc, #516]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d10f      	bne.n	8004b46 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b26:	2300      	movs	r3, #0
 8004b28:	60bb      	str	r3, [r7, #8]
 8004b2a:	4b7d      	ldr	r3, [pc, #500]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2e:	4a7c      	ldr	r2, [pc, #496]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b34:	6413      	str	r3, [r2, #64]	; 0x40
 8004b36:	4b7a      	ldr	r3, [pc, #488]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b3e:	60bb      	str	r3, [r7, #8]
 8004b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b42:	2301      	movs	r3, #1
 8004b44:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b46:	4b77      	ldr	r3, [pc, #476]	; (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d118      	bne.n	8004b84 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b52:	4b74      	ldr	r3, [pc, #464]	; (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a73      	ldr	r2, [pc, #460]	; (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b5e:	f7fd fad7 	bl	8002110 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b66:	f7fd fad3 	bl	8002110 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e10c      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b78:	4b6a      	ldr	r3, [pc, #424]	; (8004d24 <HAL_RCC_OscConfig+0x474>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	689b      	ldr	r3, [r3, #8]
 8004b88:	2b01      	cmp	r3, #1
 8004b8a:	d106      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2ea>
 8004b8c:	4b64      	ldr	r3, [pc, #400]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b90:	4a63      	ldr	r2, [pc, #396]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004b92:	f043 0301 	orr.w	r3, r3, #1
 8004b96:	6713      	str	r3, [r2, #112]	; 0x70
 8004b98:	e01c      	b.n	8004bd4 <HAL_RCC_OscConfig+0x324>
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	2b05      	cmp	r3, #5
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x30c>
 8004ba2:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba6:	4a5e      	ldr	r2, [pc, #376]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	f043 0304 	orr.w	r3, r3, #4
 8004bac:	6713      	str	r3, [r2, #112]	; 0x70
 8004bae:	4b5c      	ldr	r3, [pc, #368]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb2:	4a5b      	ldr	r2, [pc, #364]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	f043 0301 	orr.w	r3, r3, #1
 8004bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0x324>
 8004bbc:	4b58      	ldr	r3, [pc, #352]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bc0:	4a57      	ldr	r2, [pc, #348]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bc2:	f023 0301 	bic.w	r3, r3, #1
 8004bc6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc8:	4b55      	ldr	r3, [pc, #340]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bcc:	4a54      	ldr	r2, [pc, #336]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bce:	f023 0304 	bic.w	r3, r3, #4
 8004bd2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	689b      	ldr	r3, [r3, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d015      	beq.n	8004c08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bdc:	f7fd fa98 	bl	8002110 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004be2:	e00a      	b.n	8004bfa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004be4:	f7fd fa94 	bl	8002110 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d901      	bls.n	8004bfa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004bf6:	2303      	movs	r3, #3
 8004bf8:	e0cb      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bfa:	4b49      	ldr	r3, [pc, #292]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bfe:	f003 0302 	and.w	r3, r3, #2
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d0ee      	beq.n	8004be4 <HAL_RCC_OscConfig+0x334>
 8004c06:	e014      	b.n	8004c32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c08:	f7fd fa82 	bl	8002110 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c0e:	e00a      	b.n	8004c26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c10:	f7fd fa7e 	bl	8002110 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c1e:	4293      	cmp	r3, r2
 8004c20:	d901      	bls.n	8004c26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c22:	2303      	movs	r3, #3
 8004c24:	e0b5      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c26:	4b3e      	ldr	r3, [pc, #248]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	f003 0302 	and.w	r3, r3, #2
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d1ee      	bne.n	8004c10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d105      	bne.n	8004c44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3c:	4a38      	ldr	r2, [pc, #224]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	699b      	ldr	r3, [r3, #24]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	f000 80a1 	beq.w	8004d90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c4e:	4b34      	ldr	r3, [pc, #208]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	f003 030c 	and.w	r3, r3, #12
 8004c56:	2b08      	cmp	r3, #8
 8004c58:	d05c      	beq.n	8004d14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	699b      	ldr	r3, [r3, #24]
 8004c5e:	2b02      	cmp	r3, #2
 8004c60:	d141      	bne.n	8004ce6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c62:	4b31      	ldr	r3, [pc, #196]	; (8004d28 <HAL_RCC_OscConfig+0x478>)
 8004c64:	2200      	movs	r2, #0
 8004c66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fd fa52 	bl	8002110 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c70:	f7fd fa4e 	bl	8002110 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b02      	cmp	r3, #2
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e087      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	69da      	ldr	r2, [r3, #28]
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	431a      	orrs	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	019b      	lsls	r3, r3, #6
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ca4:	085b      	lsrs	r3, r3, #1
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	041b      	lsls	r3, r3, #16
 8004caa:	431a      	orrs	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	061b      	lsls	r3, r3, #24
 8004cb2:	491b      	ldr	r1, [pc, #108]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cb8:	4b1b      	ldr	r3, [pc, #108]	; (8004d28 <HAL_RCC_OscConfig+0x478>)
 8004cba:	2201      	movs	r2, #1
 8004cbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cbe:	f7fd fa27 	bl	8002110 <HAL_GetTick>
 8004cc2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cc4:	e008      	b.n	8004cd8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cc6:	f7fd fa23 	bl	8002110 <HAL_GetTick>
 8004cca:	4602      	mov	r2, r0
 8004ccc:	693b      	ldr	r3, [r7, #16]
 8004cce:	1ad3      	subs	r3, r2, r3
 8004cd0:	2b02      	cmp	r3, #2
 8004cd2:	d901      	bls.n	8004cd8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	e05c      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd8:	4b11      	ldr	r3, [pc, #68]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d0f0      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x416>
 8004ce4:	e054      	b.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ce6:	4b10      	ldr	r3, [pc, #64]	; (8004d28 <HAL_RCC_OscConfig+0x478>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cec:	f7fd fa10 	bl	8002110 <HAL_GetTick>
 8004cf0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004cf2:	e008      	b.n	8004d06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004cf4:	f7fd fa0c 	bl	8002110 <HAL_GetTick>
 8004cf8:	4602      	mov	r2, r0
 8004cfa:	693b      	ldr	r3, [r7, #16]
 8004cfc:	1ad3      	subs	r3, r2, r3
 8004cfe:	2b02      	cmp	r3, #2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e045      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d06:	4b06      	ldr	r3, [pc, #24]	; (8004d20 <HAL_RCC_OscConfig+0x470>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1f0      	bne.n	8004cf4 <HAL_RCC_OscConfig+0x444>
 8004d12:	e03d      	b.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	699b      	ldr	r3, [r3, #24]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d107      	bne.n	8004d2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e038      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
 8004d20:	40023800 	.word	0x40023800
 8004d24:	40007000 	.word	0x40007000
 8004d28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d2c:	4b1b      	ldr	r3, [pc, #108]	; (8004d9c <HAL_RCC_OscConfig+0x4ec>)
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	699b      	ldr	r3, [r3, #24]
 8004d36:	2b01      	cmp	r3, #1
 8004d38:	d028      	beq.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d121      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d11a      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d5c:	4013      	ands	r3, r2
 8004d5e:	687a      	ldr	r2, [r7, #4]
 8004d60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d111      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	3b01      	subs	r3, #1
 8004d76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d107      	bne.n	8004d8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d001      	beq.n	8004d90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	e000      	b.n	8004d92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004d90:	2300      	movs	r3, #0
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3718      	adds	r7, #24
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40023800 	.word	0x40023800

08004da0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d101      	bne.n	8004db4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004db0:	2301      	movs	r3, #1
 8004db2:	e0cc      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004db4:	4b68      	ldr	r3, [pc, #416]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	f003 0307 	and.w	r3, r3, #7
 8004dbc:	683a      	ldr	r2, [r7, #0]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d90c      	bls.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dc2:	4b65      	ldr	r3, [pc, #404]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dca:	4b63      	ldr	r3, [pc, #396]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0307 	and.w	r3, r3, #7
 8004dd2:	683a      	ldr	r2, [r7, #0]
 8004dd4:	429a      	cmp	r2, r3
 8004dd6:	d001      	beq.n	8004ddc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	e0b8      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0302 	and.w	r3, r3, #2
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d020      	beq.n	8004e2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f003 0304 	and.w	r3, r3, #4
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d005      	beq.n	8004e00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004df4:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	4a58      	ldr	r2, [pc, #352]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004dfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004dfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f003 0308 	and.w	r3, r3, #8
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d005      	beq.n	8004e18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e0c:	4b53      	ldr	r3, [pc, #332]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	4a52      	ldr	r2, [pc, #328]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e18:	4b50      	ldr	r3, [pc, #320]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	494d      	ldr	r1, [pc, #308]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e26:	4313      	orrs	r3, r2
 8004e28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d044      	beq.n	8004ec0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d107      	bne.n	8004e4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e3e:	4b47      	ldr	r3, [pc, #284]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d119      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e4a:	2301      	movs	r3, #1
 8004e4c:	e07f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	685b      	ldr	r3, [r3, #4]
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d003      	beq.n	8004e5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d107      	bne.n	8004e6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e5e:	4b3f      	ldr	r3, [pc, #252]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d109      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e06f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e6e:	4b3b      	ldr	r3, [pc, #236]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 0302 	and.w	r3, r3, #2
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d101      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e067      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e7e:	4b37      	ldr	r3, [pc, #220]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f023 0203 	bic.w	r2, r3, #3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	4934      	ldr	r1, [pc, #208]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004e90:	f7fd f93e 	bl	8002110 <HAL_GetTick>
 8004e94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e96:	e00a      	b.n	8004eae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e98:	f7fd f93a 	bl	8002110 <HAL_GetTick>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	1ad3      	subs	r3, r2, r3
 8004ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d901      	bls.n	8004eae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eaa:	2303      	movs	r3, #3
 8004eac:	e04f      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eae:	4b2b      	ldr	r3, [pc, #172]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f003 020c 	and.w	r2, r3, #12
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d1eb      	bne.n	8004e98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004ec0:	4b25      	ldr	r3, [pc, #148]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f003 0307 	and.w	r3, r3, #7
 8004ec8:	683a      	ldr	r2, [r7, #0]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d20c      	bcs.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ece:	4b22      	ldr	r3, [pc, #136]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ed6:	4b20      	ldr	r3, [pc, #128]	; (8004f58 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	f003 0307 	and.w	r3, r3, #7
 8004ede:	683a      	ldr	r2, [r7, #0]
 8004ee0:	429a      	cmp	r2, r3
 8004ee2:	d001      	beq.n	8004ee8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	e032      	b.n	8004f4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f003 0304 	and.w	r3, r3, #4
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d008      	beq.n	8004f06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ef4:	4b19      	ldr	r3, [pc, #100]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	68db      	ldr	r3, [r3, #12]
 8004f00:	4916      	ldr	r1, [pc, #88]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f003 0308 	and.w	r3, r3, #8
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d009      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f12:	4b12      	ldr	r3, [pc, #72]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f14:	689b      	ldr	r3, [r3, #8]
 8004f16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	00db      	lsls	r3, r3, #3
 8004f20:	490e      	ldr	r1, [pc, #56]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004f26:	f000 f821 	bl	8004f6c <HAL_RCC_GetSysClockFreq>
 8004f2a:	4602      	mov	r2, r0
 8004f2c:	4b0b      	ldr	r3, [pc, #44]	; (8004f5c <HAL_RCC_ClockConfig+0x1bc>)
 8004f2e:	689b      	ldr	r3, [r3, #8]
 8004f30:	091b      	lsrs	r3, r3, #4
 8004f32:	f003 030f 	and.w	r3, r3, #15
 8004f36:	490a      	ldr	r1, [pc, #40]	; (8004f60 <HAL_RCC_ClockConfig+0x1c0>)
 8004f38:	5ccb      	ldrb	r3, [r1, r3]
 8004f3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3e:	4a09      	ldr	r2, [pc, #36]	; (8004f64 <HAL_RCC_ClockConfig+0x1c4>)
 8004f40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004f42:	4b09      	ldr	r3, [pc, #36]	; (8004f68 <HAL_RCC_ClockConfig+0x1c8>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7fb ff22 	bl	8000d90 <HAL_InitTick>

  return HAL_OK;
 8004f4c:	2300      	movs	r3, #0
}
 8004f4e:	4618      	mov	r0, r3
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	40023c00 	.word	0x40023c00
 8004f5c:	40023800 	.word	0x40023800
 8004f60:	08014490 	.word	0x08014490
 8004f64:	20000004 	.word	0x20000004
 8004f68:	20000008 	.word	0x20000008

08004f6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f70:	b094      	sub	sp, #80	; 0x50
 8004f72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f74:	2300      	movs	r3, #0
 8004f76:	647b      	str	r3, [r7, #68]	; 0x44
 8004f78:	2300      	movs	r3, #0
 8004f7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004f80:	2300      	movs	r3, #0
 8004f82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f84:	4b79      	ldr	r3, [pc, #484]	; (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f003 030c 	and.w	r3, r3, #12
 8004f8c:	2b08      	cmp	r3, #8
 8004f8e:	d00d      	beq.n	8004fac <HAL_RCC_GetSysClockFreq+0x40>
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	f200 80e1 	bhi.w	8005158 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <HAL_RCC_GetSysClockFreq+0x34>
 8004f9a:	2b04      	cmp	r3, #4
 8004f9c:	d003      	beq.n	8004fa6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f9e:	e0db      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fa0:	4b73      	ldr	r3, [pc, #460]	; (8005170 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fa2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004fa4:	e0db      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fa6:	4b73      	ldr	r3, [pc, #460]	; (8005174 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fa8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004faa:	e0d8      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fac:	4b6f      	ldr	r3, [pc, #444]	; (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	; (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d063      	beq.n	800508a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc2:	4b6a      	ldr	r3, [pc, #424]	; (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	099b      	lsrs	r3, r3, #6
 8004fc8:	2200      	movs	r2, #0
 8004fca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004fda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004fde:	4622      	mov	r2, r4
 8004fe0:	462b      	mov	r3, r5
 8004fe2:	f04f 0000 	mov.w	r0, #0
 8004fe6:	f04f 0100 	mov.w	r1, #0
 8004fea:	0159      	lsls	r1, r3, #5
 8004fec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ff0:	0150      	lsls	r0, r2, #5
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	4621      	mov	r1, r4
 8004ff8:	1a51      	subs	r1, r2, r1
 8004ffa:	6139      	str	r1, [r7, #16]
 8004ffc:	4629      	mov	r1, r5
 8004ffe:	eb63 0301 	sbc.w	r3, r3, r1
 8005002:	617b      	str	r3, [r7, #20]
 8005004:	f04f 0200 	mov.w	r2, #0
 8005008:	f04f 0300 	mov.w	r3, #0
 800500c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005010:	4659      	mov	r1, fp
 8005012:	018b      	lsls	r3, r1, #6
 8005014:	4651      	mov	r1, sl
 8005016:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800501a:	4651      	mov	r1, sl
 800501c:	018a      	lsls	r2, r1, #6
 800501e:	4651      	mov	r1, sl
 8005020:	ebb2 0801 	subs.w	r8, r2, r1
 8005024:	4659      	mov	r1, fp
 8005026:	eb63 0901 	sbc.w	r9, r3, r1
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503e:	4690      	mov	r8, r2
 8005040:	4699      	mov	r9, r3
 8005042:	4623      	mov	r3, r4
 8005044:	eb18 0303 	adds.w	r3, r8, r3
 8005048:	60bb      	str	r3, [r7, #8]
 800504a:	462b      	mov	r3, r5
 800504c:	eb49 0303 	adc.w	r3, r9, r3
 8005050:	60fb      	str	r3, [r7, #12]
 8005052:	f04f 0200 	mov.w	r2, #0
 8005056:	f04f 0300 	mov.w	r3, #0
 800505a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800505e:	4629      	mov	r1, r5
 8005060:	024b      	lsls	r3, r1, #9
 8005062:	4621      	mov	r1, r4
 8005064:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005068:	4621      	mov	r1, r4
 800506a:	024a      	lsls	r2, r1, #9
 800506c:	4610      	mov	r0, r2
 800506e:	4619      	mov	r1, r3
 8005070:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005072:	2200      	movs	r2, #0
 8005074:	62bb      	str	r3, [r7, #40]	; 0x28
 8005076:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005078:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800507c:	f7fb f960 	bl	8000340 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4613      	mov	r3, r2
 8005086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005088:	e058      	b.n	800513c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800508a:	4b38      	ldr	r3, [pc, #224]	; (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	099b      	lsrs	r3, r3, #6
 8005090:	2200      	movs	r2, #0
 8005092:	4618      	mov	r0, r3
 8005094:	4611      	mov	r1, r2
 8005096:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800509a:	623b      	str	r3, [r7, #32]
 800509c:	2300      	movs	r3, #0
 800509e:	627b      	str	r3, [r7, #36]	; 0x24
 80050a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	f04f 0000 	mov.w	r0, #0
 80050ac:	f04f 0100 	mov.w	r1, #0
 80050b0:	0159      	lsls	r1, r3, #5
 80050b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050b6:	0150      	lsls	r0, r2, #5
 80050b8:	4602      	mov	r2, r0
 80050ba:	460b      	mov	r3, r1
 80050bc:	4641      	mov	r1, r8
 80050be:	ebb2 0a01 	subs.w	sl, r2, r1
 80050c2:	4649      	mov	r1, r9
 80050c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050c8:	f04f 0200 	mov.w	r2, #0
 80050cc:	f04f 0300 	mov.w	r3, #0
 80050d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050dc:	ebb2 040a 	subs.w	r4, r2, sl
 80050e0:	eb63 050b 	sbc.w	r5, r3, fp
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	00eb      	lsls	r3, r5, #3
 80050ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050f2:	00e2      	lsls	r2, r4, #3
 80050f4:	4614      	mov	r4, r2
 80050f6:	461d      	mov	r5, r3
 80050f8:	4643      	mov	r3, r8
 80050fa:	18e3      	adds	r3, r4, r3
 80050fc:	603b      	str	r3, [r7, #0]
 80050fe:	464b      	mov	r3, r9
 8005100:	eb45 0303 	adc.w	r3, r5, r3
 8005104:	607b      	str	r3, [r7, #4]
 8005106:	f04f 0200 	mov.w	r2, #0
 800510a:	f04f 0300 	mov.w	r3, #0
 800510e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005112:	4629      	mov	r1, r5
 8005114:	028b      	lsls	r3, r1, #10
 8005116:	4621      	mov	r1, r4
 8005118:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800511c:	4621      	mov	r1, r4
 800511e:	028a      	lsls	r2, r1, #10
 8005120:	4610      	mov	r0, r2
 8005122:	4619      	mov	r1, r3
 8005124:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005126:	2200      	movs	r2, #0
 8005128:	61bb      	str	r3, [r7, #24]
 800512a:	61fa      	str	r2, [r7, #28]
 800512c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005130:	f7fb f906 	bl	8000340 <__aeabi_uldivmod>
 8005134:	4602      	mov	r2, r0
 8005136:	460b      	mov	r3, r1
 8005138:	4613      	mov	r3, r2
 800513a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_RCC_GetSysClockFreq+0x200>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	0c1b      	lsrs	r3, r3, #16
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	3301      	adds	r3, #1
 8005148:	005b      	lsls	r3, r3, #1
 800514a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800514c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800514e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005150:	fbb2 f3f3 	udiv	r3, r2, r3
 8005154:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005156:	e002      	b.n	800515e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005158:	4b05      	ldr	r3, [pc, #20]	; (8005170 <HAL_RCC_GetSysClockFreq+0x204>)
 800515a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800515c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800515e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005160:	4618      	mov	r0, r3
 8005162:	3750      	adds	r7, #80	; 0x50
 8005164:	46bd      	mov	sp, r7
 8005166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	00f42400 	.word	0x00f42400
 8005174:	007a1200 	.word	0x007a1200

08005178 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005178:	b480      	push	{r7}
 800517a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800517c:	4b03      	ldr	r3, [pc, #12]	; (800518c <HAL_RCC_GetHCLKFreq+0x14>)
 800517e:	681b      	ldr	r3, [r3, #0]
}
 8005180:	4618      	mov	r0, r3
 8005182:	46bd      	mov	sp, r7
 8005184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005188:	4770      	bx	lr
 800518a:	bf00      	nop
 800518c:	20000004 	.word	0x20000004

08005190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005190:	b580      	push	{r7, lr}
 8005192:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005194:	f7ff fff0 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 8005198:	4602      	mov	r2, r0
 800519a:	4b05      	ldr	r3, [pc, #20]	; (80051b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	0a9b      	lsrs	r3, r3, #10
 80051a0:	f003 0307 	and.w	r3, r3, #7
 80051a4:	4903      	ldr	r1, [pc, #12]	; (80051b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051a6:	5ccb      	ldrb	r3, [r1, r3]
 80051a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	40023800 	.word	0x40023800
 80051b4:	080144a0 	.word	0x080144a0

080051b8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80051bc:	f7ff ffdc 	bl	8005178 <HAL_RCC_GetHCLKFreq>
 80051c0:	4602      	mov	r2, r0
 80051c2:	4b05      	ldr	r3, [pc, #20]	; (80051d8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051c4:	689b      	ldr	r3, [r3, #8]
 80051c6:	0b5b      	lsrs	r3, r3, #13
 80051c8:	f003 0307 	and.w	r3, r3, #7
 80051cc:	4903      	ldr	r1, [pc, #12]	; (80051dc <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ce:	5ccb      	ldrb	r3, [r1, r3]
 80051d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051d4:	4618      	mov	r0, r3
 80051d6:	bd80      	pop	{r7, pc}
 80051d8:	40023800 	.word	0x40023800
 80051dc:	080144a0 	.word	0x080144a0

080051e0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80051e0:	b480      	push	{r7}
 80051e2:	b083      	sub	sp, #12
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
 80051e8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	220f      	movs	r2, #15
 80051ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80051f0:	4b12      	ldr	r3, [pc, #72]	; (800523c <HAL_RCC_GetClockConfig+0x5c>)
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f003 0203 	and.w	r2, r3, #3
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80051fc:	4b0f      	ldr	r3, [pc, #60]	; (800523c <HAL_RCC_GetClockConfig+0x5c>)
 80051fe:	689b      	ldr	r3, [r3, #8]
 8005200:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005208:	4b0c      	ldr	r3, [pc, #48]	; (800523c <HAL_RCC_GetClockConfig+0x5c>)
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005214:	4b09      	ldr	r3, [pc, #36]	; (800523c <HAL_RCC_GetClockConfig+0x5c>)
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	08db      	lsrs	r3, r3, #3
 800521a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005222:	4b07      	ldr	r3, [pc, #28]	; (8005240 <HAL_RCC_GetClockConfig+0x60>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0207 	and.w	r2, r3, #7
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	601a      	str	r2, [r3, #0]
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
 800523a:	bf00      	nop
 800523c:	40023800 	.word	0x40023800
 8005240:	40023c00 	.word	0x40023c00

08005244 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d101      	bne.n	8005256 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005252:	2301      	movs	r3, #1
 8005254:	e041      	b.n	80052da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800525c:	b2db      	uxtb	r3, r3
 800525e:	2b00      	cmp	r3, #0
 8005260:	d106      	bne.n	8005270 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f000 f839 	bl	80052e2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2202      	movs	r2, #2
 8005274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681a      	ldr	r2, [r3, #0]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4619      	mov	r1, r3
 8005282:	4610      	mov	r0, r2
 8005284:	f000 f9d8 	bl	8005638 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2201      	movs	r2, #1
 8005294:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2201      	movs	r2, #1
 800529c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	2201      	movs	r2, #1
 80052a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2201      	movs	r2, #1
 80052ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2201      	movs	r2, #1
 80052b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2201      	movs	r2, #1
 80052bc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2201      	movs	r2, #1
 80052c4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2201      	movs	r2, #1
 80052d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	4618      	mov	r0, r3
 80052dc:	3708      	adds	r7, #8
 80052de:	46bd      	mov	sp, r7
 80052e0:	bd80      	pop	{r7, pc}

080052e2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b083      	sub	sp, #12
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80052ea:	bf00      	nop
 80052ec:	370c      	adds	r7, #12
 80052ee:	46bd      	mov	sp, r7
 80052f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f4:	4770      	bx	lr
	...

080052f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80052f8:	b480      	push	{r7}
 80052fa:	b085      	sub	sp, #20
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005306:	b2db      	uxtb	r3, r3
 8005308:	2b01      	cmp	r3, #1
 800530a:	d001      	beq.n	8005310 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e04e      	b.n	80053ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2202      	movs	r2, #2
 8005314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	68da      	ldr	r2, [r3, #12]
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f042 0201 	orr.w	r2, r2, #1
 8005326:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	4a23      	ldr	r2, [pc, #140]	; (80053bc <HAL_TIM_Base_Start_IT+0xc4>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d022      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800533a:	d01d      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1f      	ldr	r2, [pc, #124]	; (80053c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d018      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1e      	ldr	r2, [pc, #120]	; (80053c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d013      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a1c      	ldr	r2, [pc, #112]	; (80053c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d00e      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a1b      	ldr	r2, [pc, #108]	; (80053cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d009      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a19      	ldr	r2, [pc, #100]	; (80053d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d004      	beq.n	8005378 <HAL_TIM_Base_Start_IT+0x80>
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a18      	ldr	r2, [pc, #96]	; (80053d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d111      	bne.n	800539c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	f003 0307 	and.w	r3, r3, #7
 8005382:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	2b06      	cmp	r3, #6
 8005388:	d010      	beq.n	80053ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681a      	ldr	r2, [r3, #0]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f042 0201 	orr.w	r2, r2, #1
 8005398:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800539a:	e007      	b.n	80053ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681a      	ldr	r2, [r3, #0]
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0201 	orr.w	r2, r2, #1
 80053aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3714      	adds	r7, #20
 80053b2:	46bd      	mov	sp, r7
 80053b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b8:	4770      	bx	lr
 80053ba:	bf00      	nop
 80053bc:	40010000 	.word	0x40010000
 80053c0:	40000400 	.word	0x40000400
 80053c4:	40000800 	.word	0x40000800
 80053c8:	40000c00 	.word	0x40000c00
 80053cc:	40010400 	.word	0x40010400
 80053d0:	40014000 	.word	0x40014000
 80053d4:	40001800 	.word	0x40001800

080053d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	f003 0302 	and.w	r3, r3, #2
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d122      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d11b      	bne.n	8005434 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f06f 0202 	mvn.w	r2, #2
 8005404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	699b      	ldr	r3, [r3, #24]
 8005412:	f003 0303 	and.w	r3, r3, #3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f8ee 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 8005420:	e005      	b.n	800542e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8e0 	bl	80055e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005428:	6878      	ldr	r0, [r7, #4]
 800542a:	f000 f8f1 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	2200      	movs	r2, #0
 8005432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	f003 0304 	and.w	r3, r3, #4
 800543e:	2b04      	cmp	r3, #4
 8005440:	d122      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	f003 0304 	and.w	r3, r3, #4
 800544c:	2b04      	cmp	r3, #4
 800544e:	d11b      	bne.n	8005488 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f06f 0204 	mvn.w	r2, #4
 8005458:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2202      	movs	r2, #2
 800545e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800546a:	2b00      	cmp	r3, #0
 800546c:	d003      	beq.n	8005476 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800546e:	6878      	ldr	r0, [r7, #4]
 8005470:	f000 f8c4 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 8005474:	e005      	b.n	8005482 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005476:	6878      	ldr	r0, [r7, #4]
 8005478:	f000 f8b6 	bl	80055e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f000 f8c7 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	691b      	ldr	r3, [r3, #16]
 800548e:	f003 0308 	and.w	r3, r3, #8
 8005492:	2b08      	cmp	r3, #8
 8005494:	d122      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	68db      	ldr	r3, [r3, #12]
 800549c:	f003 0308 	and.w	r3, r3, #8
 80054a0:	2b08      	cmp	r3, #8
 80054a2:	d11b      	bne.n	80054dc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f06f 0208 	mvn.w	r2, #8
 80054ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	2204      	movs	r2, #4
 80054b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	69db      	ldr	r3, [r3, #28]
 80054ba:	f003 0303 	and.w	r3, r3, #3
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d003      	beq.n	80054ca <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f000 f89a 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 80054c8:	e005      	b.n	80054d6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ca:	6878      	ldr	r0, [r7, #4]
 80054cc:	f000 f88c 	bl	80055e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f89d 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	2200      	movs	r2, #0
 80054da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	691b      	ldr	r3, [r3, #16]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b10      	cmp	r3, #16
 80054e8:	d122      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	f003 0310 	and.w	r3, r3, #16
 80054f4:	2b10      	cmp	r3, #16
 80054f6:	d11b      	bne.n	8005530 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f06f 0210 	mvn.w	r2, #16
 8005500:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2208      	movs	r2, #8
 8005506:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	69db      	ldr	r3, [r3, #28]
 800550e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005512:	2b00      	cmp	r3, #0
 8005514:	d003      	beq.n	800551e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005516:	6878      	ldr	r0, [r7, #4]
 8005518:	f000 f870 	bl	80055fc <HAL_TIM_IC_CaptureCallback>
 800551c:	e005      	b.n	800552a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f000 f862 	bl	80055e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 f873 	bl	8005610 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	2200      	movs	r2, #0
 800552e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	f003 0301 	and.w	r3, r3, #1
 800553a:	2b01      	cmp	r3, #1
 800553c:	d10e      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f003 0301 	and.w	r3, r3, #1
 8005548:	2b01      	cmp	r3, #1
 800554a:	d107      	bne.n	800555c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f06f 0201 	mvn.w	r2, #1
 8005554:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005556:	6878      	ldr	r0, [r7, #4]
 8005558:	f7fb fbd6 	bl	8000d08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005566:	2b80      	cmp	r3, #128	; 0x80
 8005568:	d10e      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005574:	2b80      	cmp	r3, #128	; 0x80
 8005576:	d107      	bne.n	8005588 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005580:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 f902 	bl	800578c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005592:	2b40      	cmp	r3, #64	; 0x40
 8005594:	d10e      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a0:	2b40      	cmp	r3, #64	; 0x40
 80055a2:	d107      	bne.n	80055b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055ae:	6878      	ldr	r0, [r7, #4]
 80055b0:	f000 f838 	bl	8005624 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	691b      	ldr	r3, [r3, #16]
 80055ba:	f003 0320 	and.w	r3, r3, #32
 80055be:	2b20      	cmp	r3, #32
 80055c0:	d10e      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	2b20      	cmp	r3, #32
 80055ce:	d107      	bne.n	80055e0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f06f 0220 	mvn.w	r2, #32
 80055d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055da:	6878      	ldr	r0, [r7, #4]
 80055dc:	f000 f8cc 	bl	8005778 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055e0:	bf00      	nop
 80055e2:	3708      	adds	r7, #8
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055f0:	bf00      	nop
 80055f2:	370c      	adds	r7, #12
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b083      	sub	sp, #12
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005618:	bf00      	nop
 800561a:	370c      	adds	r7, #12
 800561c:	46bd      	mov	sp, r7
 800561e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005622:	4770      	bx	lr

08005624 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005638:	b480      	push	{r7}
 800563a:	b085      	sub	sp, #20
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
 8005640:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a40      	ldr	r2, [pc, #256]	; (800574c <TIM_Base_SetConfig+0x114>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d013      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005656:	d00f      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	4a3d      	ldr	r2, [pc, #244]	; (8005750 <TIM_Base_SetConfig+0x118>)
 800565c:	4293      	cmp	r3, r2
 800565e:	d00b      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	4a3c      	ldr	r2, [pc, #240]	; (8005754 <TIM_Base_SetConfig+0x11c>)
 8005664:	4293      	cmp	r3, r2
 8005666:	d007      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a3b      	ldr	r2, [pc, #236]	; (8005758 <TIM_Base_SetConfig+0x120>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d003      	beq.n	8005678 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	4a3a      	ldr	r2, [pc, #232]	; (800575c <TIM_Base_SetConfig+0x124>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d108      	bne.n	800568a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800567e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	685b      	ldr	r3, [r3, #4]
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	4313      	orrs	r3, r2
 8005688:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	4a2f      	ldr	r2, [pc, #188]	; (800574c <TIM_Base_SetConfig+0x114>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d02b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005698:	d027      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a2c      	ldr	r2, [pc, #176]	; (8005750 <TIM_Base_SetConfig+0x118>)
 800569e:	4293      	cmp	r3, r2
 80056a0:	d023      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	4a2b      	ldr	r2, [pc, #172]	; (8005754 <TIM_Base_SetConfig+0x11c>)
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d01f      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a2a      	ldr	r2, [pc, #168]	; (8005758 <TIM_Base_SetConfig+0x120>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d01b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	4a29      	ldr	r2, [pc, #164]	; (800575c <TIM_Base_SetConfig+0x124>)
 80056b6:	4293      	cmp	r3, r2
 80056b8:	d017      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a28      	ldr	r2, [pc, #160]	; (8005760 <TIM_Base_SetConfig+0x128>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d013      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a27      	ldr	r2, [pc, #156]	; (8005764 <TIM_Base_SetConfig+0x12c>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d00f      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a26      	ldr	r2, [pc, #152]	; (8005768 <TIM_Base_SetConfig+0x130>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d00b      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a25      	ldr	r2, [pc, #148]	; (800576c <TIM_Base_SetConfig+0x134>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d007      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a24      	ldr	r2, [pc, #144]	; (8005770 <TIM_Base_SetConfig+0x138>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d003      	beq.n	80056ea <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a23      	ldr	r2, [pc, #140]	; (8005774 <TIM_Base_SetConfig+0x13c>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d108      	bne.n	80056fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	68db      	ldr	r3, [r3, #12]
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	4313      	orrs	r3, r2
 80056fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	4313      	orrs	r3, r2
 8005708:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005718:	683b      	ldr	r3, [r7, #0]
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	4a0a      	ldr	r2, [pc, #40]	; (800574c <TIM_Base_SetConfig+0x114>)
 8005724:	4293      	cmp	r3, r2
 8005726:	d003      	beq.n	8005730 <TIM_Base_SetConfig+0xf8>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	4a0c      	ldr	r2, [pc, #48]	; (800575c <TIM_Base_SetConfig+0x124>)
 800572c:	4293      	cmp	r3, r2
 800572e:	d103      	bne.n	8005738 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	691a      	ldr	r2, [r3, #16]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2201      	movs	r2, #1
 800573c:	615a      	str	r2, [r3, #20]
}
 800573e:	bf00      	nop
 8005740:	3714      	adds	r7, #20
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40010000 	.word	0x40010000
 8005750:	40000400 	.word	0x40000400
 8005754:	40000800 	.word	0x40000800
 8005758:	40000c00 	.word	0x40000c00
 800575c:	40010400 	.word	0x40010400
 8005760:	40014000 	.word	0x40014000
 8005764:	40014400 	.word	0x40014400
 8005768:	40014800 	.word	0x40014800
 800576c:	40001800 	.word	0x40001800
 8005770:	40001c00 	.word	0x40001c00
 8005774:	40002000 	.word	0x40002000

08005778 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005780:	bf00      	nop
 8005782:	370c      	adds	r7, #12
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800578c:	b480      	push	{r7}
 800578e:	b083      	sub	sp, #12
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005794:	bf00      	nop
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e03f      	b.n	8005832 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057b8:	b2db      	uxtb	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d106      	bne.n	80057cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f7fb fd5a 	bl	8001280 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2224      	movs	r2, #36	; 0x24
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68da      	ldr	r2, [r3, #12]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80057e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f001 f8cd 	bl	8006984 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	691a      	ldr	r2, [r3, #16]
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80057f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695a      	ldr	r2, [r3, #20]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005808:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68da      	ldr	r2, [r3, #12]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005818:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2200      	movs	r2, #0
 800581e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2220      	movs	r2, #32
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2220      	movs	r2, #32
 800582c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005830:	2300      	movs	r3, #0
}
 8005832:	4618      	mov	r0, r3
 8005834:	3708      	adds	r7, #8
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b08a      	sub	sp, #40	; 0x28
 800583e:	af02      	add	r7, sp, #8
 8005840:	60f8      	str	r0, [r7, #12]
 8005842:	60b9      	str	r1, [r7, #8]
 8005844:	603b      	str	r3, [r7, #0]
 8005846:	4613      	mov	r3, r2
 8005848:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800584a:	2300      	movs	r3, #0
 800584c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005854:	b2db      	uxtb	r3, r3
 8005856:	2b20      	cmp	r3, #32
 8005858:	d17c      	bne.n	8005954 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800585a:	68bb      	ldr	r3, [r7, #8]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d002      	beq.n	8005866 <HAL_UART_Transmit+0x2c>
 8005860:	88fb      	ldrh	r3, [r7, #6]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d101      	bne.n	800586a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005866:	2301      	movs	r3, #1
 8005868:	e075      	b.n	8005956 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005870:	2b01      	cmp	r3, #1
 8005872:	d101      	bne.n	8005878 <HAL_UART_Transmit+0x3e>
 8005874:	2302      	movs	r3, #2
 8005876:	e06e      	b.n	8005956 <HAL_UART_Transmit+0x11c>
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2201      	movs	r2, #1
 800587c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2221      	movs	r2, #33	; 0x21
 800588a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800588e:	f7fc fc3f 	bl	8002110 <HAL_GetTick>
 8005892:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	88fa      	ldrh	r2, [r7, #6]
 8005898:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	88fa      	ldrh	r2, [r7, #6]
 800589e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	689b      	ldr	r3, [r3, #8]
 80058a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80058a8:	d108      	bne.n	80058bc <HAL_UART_Transmit+0x82>
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	691b      	ldr	r3, [r3, #16]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d104      	bne.n	80058bc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80058b2:	2300      	movs	r3, #0
 80058b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	61bb      	str	r3, [r7, #24]
 80058ba:	e003      	b.n	80058c4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80058cc:	e02a      	b.n	8005924 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	9300      	str	r3, [sp, #0]
 80058d2:	697b      	ldr	r3, [r7, #20]
 80058d4:	2200      	movs	r2, #0
 80058d6:	2180      	movs	r1, #128	; 0x80
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f000 fd84 	bl	80063e6 <UART_WaitOnFlagUntilTimeout>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80058e4:	2303      	movs	r3, #3
 80058e6:	e036      	b.n	8005956 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80058e8:	69fb      	ldr	r3, [r7, #28]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d10b      	bne.n	8005906 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	881b      	ldrh	r3, [r3, #0]
 80058f2:	461a      	mov	r2, r3
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80058fc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80058fe:	69bb      	ldr	r3, [r7, #24]
 8005900:	3302      	adds	r3, #2
 8005902:	61bb      	str	r3, [r7, #24]
 8005904:	e007      	b.n	8005916 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	781a      	ldrb	r2, [r3, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	3301      	adds	r3, #1
 8005914:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800591a:	b29b      	uxth	r3, r3
 800591c:	3b01      	subs	r3, #1
 800591e:	b29a      	uxth	r2, r3
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b00      	cmp	r3, #0
 800592c:	d1cf      	bne.n	80058ce <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	697b      	ldr	r3, [r7, #20]
 8005934:	2200      	movs	r2, #0
 8005936:	2140      	movs	r1, #64	; 0x40
 8005938:	68f8      	ldr	r0, [r7, #12]
 800593a:	f000 fd54 	bl	80063e6 <UART_WaitOnFlagUntilTimeout>
 800593e:	4603      	mov	r3, r0
 8005940:	2b00      	cmp	r3, #0
 8005942:	d001      	beq.n	8005948 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e006      	b.n	8005956 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2220      	movs	r2, #32
 800594c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005950:	2300      	movs	r3, #0
 8005952:	e000      	b.n	8005956 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005954:	2302      	movs	r3, #2
  }
}
 8005956:	4618      	mov	r0, r3
 8005958:	3720      	adds	r7, #32
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}
	...

08005960 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b08c      	sub	sp, #48	; 0x30
 8005964:	af00      	add	r7, sp, #0
 8005966:	60f8      	str	r0, [r7, #12]
 8005968:	60b9      	str	r1, [r7, #8]
 800596a:	4613      	mov	r3, r2
 800596c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b20      	cmp	r3, #32
 8005978:	d165      	bne.n	8005a46 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 800597a:	68bb      	ldr	r3, [r7, #8]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d002      	beq.n	8005986 <HAL_UART_Transmit_DMA+0x26>
 8005980:	88fb      	ldrh	r3, [r7, #6]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d101      	bne.n	800598a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e05e      	b.n	8005a48 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005990:	2b01      	cmp	r3, #1
 8005992:	d101      	bne.n	8005998 <HAL_UART_Transmit_DMA+0x38>
 8005994:	2302      	movs	r3, #2
 8005996:	e057      	b.n	8005a48 <HAL_UART_Transmit_DMA+0xe8>
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	88fa      	ldrh	r2, [r7, #6]
 80059aa:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	88fa      	ldrh	r2, [r7, #6]
 80059b0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	2221      	movs	r2, #33	; 0x21
 80059bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c4:	4a22      	ldr	r2, [pc, #136]	; (8005a50 <HAL_UART_Transmit_DMA+0xf0>)
 80059c6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059cc:	4a21      	ldr	r2, [pc, #132]	; (8005a54 <HAL_UART_Transmit_DMA+0xf4>)
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d4:	4a20      	ldr	r2, [pc, #128]	; (8005a58 <HAL_UART_Transmit_DMA+0xf8>)
 80059d6:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059dc:	2200      	movs	r2, #0
 80059de:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80059e0:	f107 0308 	add.w	r3, r7, #8
 80059e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80059ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059ec:	6819      	ldr	r1, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	3304      	adds	r3, #4
 80059f4:	461a      	mov	r2, r3
 80059f6:	88fb      	ldrh	r3, [r7, #6]
 80059f8:	f7fc ffac 	bl	8002954 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005a04:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	3314      	adds	r3, #20
 8005a14:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	e853 3f00 	ldrex	r3, [r3]
 8005a1c:	617b      	str	r3, [r7, #20]
   return(result);
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	3314      	adds	r3, #20
 8005a2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a2e:	627a      	str	r2, [r7, #36]	; 0x24
 8005a30:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6a39      	ldr	r1, [r7, #32]
 8005a34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e5      	bne.n	8005a0e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005a42:	2300      	movs	r3, #0
 8005a44:	e000      	b.n	8005a48 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005a46:	2302      	movs	r3, #2
  }
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3730      	adds	r7, #48	; 0x30
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	bd80      	pop	{r7, pc}
 8005a50:	08006141 	.word	0x08006141
 8005a54:	080061db 	.word	0x080061db
 8005a58:	08006353 	.word	0x08006353

08005a5c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b084      	sub	sp, #16
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a70:	b2db      	uxtb	r3, r3
 8005a72:	2b20      	cmp	r3, #32
 8005a74:	d11d      	bne.n	8005ab2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <HAL_UART_Receive_DMA+0x26>
 8005a7c:	88fb      	ldrh	r3, [r7, #6]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d101      	bne.n	8005a86 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005a82:	2301      	movs	r3, #1
 8005a84:	e016      	b.n	8005ab4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_UART_Receive_DMA+0x38>
 8005a90:	2302      	movs	r3, #2
 8005a92:	e00f      	b.n	8005ab4 <HAL_UART_Receive_DMA+0x58>
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005aa2:	88fb      	ldrh	r3, [r7, #6]
 8005aa4:	461a      	mov	r2, r3
 8005aa6:	68b9      	ldr	r1, [r7, #8]
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f000 fd0b 	bl	80064c4 <UART_Start_Receive_DMA>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	e000      	b.n	8005ab4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005ab2:	2302      	movs	r3, #2
  }
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}

08005abc <HAL_UART_DMAStop>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 8005abc:	b580      	push	{r7, lr}
 8005abe:	b090      	sub	sp, #64	; 0x40
 8005ac0:	af00      	add	r7, sp, #0
 8005ac2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
     when calling HAL_DMA_Abort() API the DMA TX/RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_UART_TxCpltCallback() / HAL_UART_RxCpltCallback()
     */

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	695b      	ldr	r3, [r3, #20]
 8005ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ad2:	2b80      	cmp	r3, #128	; 0x80
 8005ad4:	bf0c      	ite	eq
 8005ad6:	2301      	moveq	r3, #1
 8005ad8:	2300      	movne	r3, #0
 8005ada:	b2db      	uxtb	r3, r3
 8005adc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ae4:	b2db      	uxtb	r3, r3
 8005ae6:	2b21      	cmp	r3, #33	; 0x21
 8005ae8:	d128      	bne.n	8005b3c <HAL_UART_DMAStop+0x80>
 8005aea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d025      	beq.n	8005b3c <HAL_UART_DMAStop+0x80>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	3314      	adds	r3, #20
 8005af6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005afa:	e853 3f00 	ldrex	r3, [r3]
 8005afe:	623b      	str	r3, [r7, #32]
   return(result);
 8005b00:	6a3b      	ldr	r3, [r7, #32]
 8005b02:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b06:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	3314      	adds	r3, #20
 8005b0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b10:	633a      	str	r2, [r7, #48]	; 0x30
 8005b12:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b18:	e841 2300 	strex	r3, r2, [r1]
 8005b1c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1e5      	bne.n	8005af0 <HAL_UART_DMAStop+0x34>

    /* Abort the UART DMA Tx stream */
    if (huart->hdmatx != NULL)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d004      	beq.n	8005b36 <HAL_UART_DMAStop+0x7a>
    {
      HAL_DMA_Abort(huart->hdmatx);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b30:	4618      	mov	r0, r3
 8005b32:	f7fc ff67 	bl	8002a04 <HAL_DMA_Abort>
    }
    UART_EndTxTransfer(huart);
 8005b36:	6878      	ldr	r0, [r7, #4]
 8005b38:	f000 fd62 	bl	8006600 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b46:	2b40      	cmp	r3, #64	; 0x40
 8005b48:	bf0c      	ite	eq
 8005b4a:	2301      	moveq	r3, #1
 8005b4c:	2300      	movne	r3, #0
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	63fb      	str	r3, [r7, #60]	; 0x3c
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005b58:	b2db      	uxtb	r3, r3
 8005b5a:	2b22      	cmp	r3, #34	; 0x22
 8005b5c:	d128      	bne.n	8005bb0 <HAL_UART_DMAStop+0xf4>
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d025      	beq.n	8005bb0 <HAL_UART_DMAStop+0xf4>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	3314      	adds	r3, #20
 8005b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	e853 3f00 	ldrex	r3, [r3]
 8005b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b7a:	637b      	str	r3, [r7, #52]	; 0x34
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3314      	adds	r3, #20
 8005b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b84:	61fa      	str	r2, [r7, #28]
 8005b86:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b88:	69b9      	ldr	r1, [r7, #24]
 8005b8a:	69fa      	ldr	r2, [r7, #28]
 8005b8c:	e841 2300 	strex	r3, r2, [r1]
 8005b90:	617b      	str	r3, [r7, #20]
   return(result);
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d1e5      	bne.n	8005b64 <HAL_UART_DMAStop+0xa8>

    /* Abort the UART DMA Rx stream */
    if (huart->hdmarx != NULL)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d004      	beq.n	8005baa <HAL_UART_DMAStop+0xee>
    {
      HAL_DMA_Abort(huart->hdmarx);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fc ff2d 	bl	8002a04 <HAL_DMA_Abort>
    }
    UART_EndRxTransfer(huart);
 8005baa:	6878      	ldr	r0, [r7, #4]
 8005bac:	f000 fd50 	bl	8006650 <UART_EndRxTransfer>
  }

  return HAL_OK;
 8005bb0:	2300      	movs	r3, #0
}
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	3740      	adds	r7, #64	; 0x40
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	bd80      	pop	{r7, pc}
	...

08005bbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b0ba      	sub	sp, #232	; 0xe8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68db      	ldr	r3, [r3, #12]
 8005bd4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	695b      	ldr	r3, [r3, #20]
 8005bde:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005be2:	2300      	movs	r3, #0
 8005be4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005be8:	2300      	movs	r3, #0
 8005bea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005bee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bf2:	f003 030f 	and.w	r3, r3, #15
 8005bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005bfa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d10f      	bne.n	8005c22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c06:	f003 0320 	and.w	r3, r3, #32
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d009      	beq.n	8005c22 <HAL_UART_IRQHandler+0x66>
 8005c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d003      	beq.n	8005c22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	f000 fdf7 	bl	800680e <UART_Receive_IT>
      return;
 8005c20:	e256      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 80de 	beq.w	8005de8 <HAL_UART_IRQHandler+0x22c>
 8005c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c30:	f003 0301 	and.w	r3, r3, #1
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d106      	bne.n	8005c46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005c38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	f000 80d1 	beq.w	8005de8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c4a:	f003 0301 	and.w	r3, r3, #1
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <HAL_UART_IRQHandler+0xae>
 8005c52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d005      	beq.n	8005c6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c62:	f043 0201 	orr.w	r2, r3, #1
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c6e:	f003 0304 	and.w	r3, r3, #4
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00b      	beq.n	8005c8e <HAL_UART_IRQHandler+0xd2>
 8005c76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c7a:	f003 0301 	and.w	r3, r3, #1
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d005      	beq.n	8005c8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c86:	f043 0202 	orr.w	r2, r3, #2
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005c8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d00b      	beq.n	8005cb2 <HAL_UART_IRQHandler+0xf6>
 8005c9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005c9e:	f003 0301 	and.w	r3, r3, #1
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d005      	beq.n	8005cb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005caa:	f043 0204 	orr.w	r2, r3, #4
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005cb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cb6:	f003 0308 	and.w	r3, r3, #8
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d011      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x126>
 8005cbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cc2:	f003 0320 	and.w	r3, r3, #32
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d105      	bne.n	8005cd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005cca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d005      	beq.n	8005ce2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f043 0208 	orr.w	r2, r3, #8
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	f000 81ed 	beq.w	80060c6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005cf0:	f003 0320 	and.w	r3, r3, #32
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d008      	beq.n	8005d0a <HAL_UART_IRQHandler+0x14e>
 8005cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005cfc:	f003 0320 	and.w	r3, r3, #32
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 fd82 	bl	800680e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d14:	2b40      	cmp	r3, #64	; 0x40
 8005d16:	bf0c      	ite	eq
 8005d18:	2301      	moveq	r3, #1
 8005d1a:	2300      	movne	r3, #0
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d26:	f003 0308 	and.w	r3, r3, #8
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d103      	bne.n	8005d36 <HAL_UART_IRQHandler+0x17a>
 8005d2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d04f      	beq.n	8005dd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fc8a 	bl	8006650 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	695b      	ldr	r3, [r3, #20]
 8005d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d46:	2b40      	cmp	r3, #64	; 0x40
 8005d48:	d141      	bne.n	8005dce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	3314      	adds	r3, #20
 8005d50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d58:	e853 3f00 	ldrex	r3, [r3]
 8005d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	3314      	adds	r3, #20
 8005d72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005d76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005d7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005d82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005d8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d1d9      	bne.n	8005d4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d013      	beq.n	8005dc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005da2:	4a7d      	ldr	r2, [pc, #500]	; (8005f98 <HAL_UART_IRQHandler+0x3dc>)
 8005da4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005daa:	4618      	mov	r0, r3
 8005dac:	f7fc fe9a 	bl	8002ae4 <HAL_DMA_Abort_IT>
 8005db0:	4603      	mov	r3, r0
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d016      	beq.n	8005de4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005dc0:	4610      	mov	r0, r2
 8005dc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dc4:	e00e      	b.n	8005de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	f000 f9a4 	bl	8006114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dcc:	e00a      	b.n	8005de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 f9a0 	bl	8006114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005dd4:	e006      	b.n	8005de4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f99c 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2200      	movs	r2, #0
 8005de0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005de2:	e170      	b.n	80060c6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005de4:	bf00      	nop
    return;
 8005de6:	e16e      	b.n	80060c6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dec:	2b01      	cmp	r3, #1
 8005dee:	f040 814a 	bne.w	8006086 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005df6:	f003 0310 	and.w	r3, r3, #16
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	f000 8143 	beq.w	8006086 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005e00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005e04:	f003 0310 	and.w	r3, r3, #16
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	f000 813c 	beq.w	8006086 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e0e:	2300      	movs	r3, #0
 8005e10:	60bb      	str	r3, [r7, #8]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	60bb      	str	r3, [r7, #8]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60bb      	str	r3, [r7, #8]
 8005e22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e2e:	2b40      	cmp	r3, #64	; 0x40
 8005e30:	f040 80b4 	bne.w	8005f9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005e40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f000 8140 	beq.w	80060ca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e52:	429a      	cmp	r2, r3
 8005e54:	f080 8139 	bcs.w	80060ca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005e5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e64:	69db      	ldr	r3, [r3, #28]
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	f000 8088 	beq.w	8005f7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	330c      	adds	r3, #12
 8005e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e7c:	e853 3f00 	ldrex	r3, [r3]
 8005e80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005e84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	330c      	adds	r3, #12
 8005e96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005e9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ea2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005ea6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005eaa:	e841 2300 	strex	r3, r2, [r1]
 8005eae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005eb2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d1d9      	bne.n	8005e6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	3314      	adds	r3, #20
 8005ec0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005ec4:	e853 3f00 	ldrex	r3, [r3]
 8005ec8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005eca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ecc:	f023 0301 	bic.w	r3, r3, #1
 8005ed0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	3314      	adds	r3, #20
 8005eda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005ede:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005ee2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ee4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005ee6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005eea:	e841 2300 	strex	r3, r2, [r1]
 8005eee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005ef0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d1e1      	bne.n	8005eba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	3314      	adds	r3, #20
 8005efc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005efe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f00:	e853 3f00 	ldrex	r3, [r3]
 8005f04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005f06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	3314      	adds	r3, #20
 8005f16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005f1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005f20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005f22:	e841 2300 	strex	r3, r2, [r1]
 8005f26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005f28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1e3      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	2220      	movs	r2, #32
 8005f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	2200      	movs	r2, #0
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	330c      	adds	r3, #12
 8005f42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f46:	e853 3f00 	ldrex	r3, [r3]
 8005f4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005f4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005f4e:	f023 0310 	bic.w	r3, r3, #16
 8005f52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	330c      	adds	r3, #12
 8005f5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8005f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005f68:	e841 2300 	strex	r3, r2, [r1]
 8005f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d1e3      	bne.n	8005f3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f78:	4618      	mov	r0, r3
 8005f7a:	f7fc fd43 	bl	8002a04 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005f86:	b29b      	uxth	r3, r3
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 f8ca 	bl	8006128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005f94:	e099      	b.n	80060ca <HAL_UART_IRQHandler+0x50e>
 8005f96:	bf00      	nop
 8005f98:	08006717 	.word	0x08006717
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fa4:	b29b      	uxth	r3, r3
 8005fa6:	1ad3      	subs	r3, r2, r3
 8005fa8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 808b 	beq.w	80060ce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005fb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	f000 8086 	beq.w	80060ce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	330c      	adds	r3, #12
 8005fc8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005fca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fcc:	e853 3f00 	ldrex	r3, [r3]
 8005fd0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fd4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005fd8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	330c      	adds	r3, #12
 8005fe2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fe6:	647a      	str	r2, [r7, #68]	; 0x44
 8005fe8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005fea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005fec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fee:	e841 2300 	strex	r3, r2, [r1]
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005ff4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d1e3      	bne.n	8005fc2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	3314      	adds	r3, #20
 8006000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006004:	e853 3f00 	ldrex	r3, [r3]
 8006008:	623b      	str	r3, [r7, #32]
   return(result);
 800600a:	6a3b      	ldr	r3, [r7, #32]
 800600c:	f023 0301 	bic.w	r3, r3, #1
 8006010:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	3314      	adds	r3, #20
 800601a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800601e:	633a      	str	r2, [r7, #48]	; 0x30
 8006020:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006022:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006024:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006026:	e841 2300 	strex	r3, r2, [r1]
 800602a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800602c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1e3      	bne.n	8005ffa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2220      	movs	r2, #32
 8006036:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	693b      	ldr	r3, [r7, #16]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	60fb      	str	r3, [r7, #12]
   return(result);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	330c      	adds	r3, #12
 8006060:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006064:	61fa      	str	r2, [r7, #28]
 8006066:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006068:	69b9      	ldr	r1, [r7, #24]
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	e841 2300 	strex	r3, r2, [r1]
 8006070:	617b      	str	r3, [r7, #20]
   return(result);
 8006072:	697b      	ldr	r3, [r7, #20]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d1e3      	bne.n	8006040 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006078:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800607c:	4619      	mov	r1, r3
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f000 f852 	bl	8006128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006084:	e023      	b.n	80060ce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800608a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800608e:	2b00      	cmp	r3, #0
 8006090:	d009      	beq.n	80060a6 <HAL_UART_IRQHandler+0x4ea>
 8006092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006096:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800609a:	2b00      	cmp	r3, #0
 800609c:	d003      	beq.n	80060a6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 fb4d 	bl	800673e <UART_Transmit_IT>
    return;
 80060a4:	e014      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00e      	beq.n	80060d0 <HAL_UART_IRQHandler+0x514>
 80060b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80060b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d008      	beq.n	80060d0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fb8d 	bl	80067de <UART_EndTransmit_IT>
    return;
 80060c4:	e004      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
    return;
 80060c6:	bf00      	nop
 80060c8:	e002      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
      return;
 80060ca:	bf00      	nop
 80060cc:	e000      	b.n	80060d0 <HAL_UART_IRQHandler+0x514>
      return;
 80060ce:	bf00      	nop
  }
}
 80060d0:	37e8      	adds	r7, #232	; 0xe8
 80060d2:	46bd      	mov	sp, r7
 80060d4:	bd80      	pop	{r7, pc}
 80060d6:	bf00      	nop

080060d8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060d8:	b480      	push	{r7}
 80060da:	b083      	sub	sp, #12
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060e0:	bf00      	nop
 80060e2:	370c      	adds	r7, #12
 80060e4:	46bd      	mov	sp, r7
 80060e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ea:	4770      	bx	lr

080060ec <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b083      	sub	sp, #12
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80060f4:	bf00      	nop
 80060f6:	370c      	adds	r7, #12
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006100:	b480      	push	{r7}
 8006102:	b083      	sub	sp, #12
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006108:	bf00      	nop
 800610a:	370c      	adds	r7, #12
 800610c:	46bd      	mov	sp, r7
 800610e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006112:	4770      	bx	lr

08006114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006114:	b480      	push	{r7}
 8006116:	b083      	sub	sp, #12
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	460b      	mov	r3, r1
 8006132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006134:	bf00      	nop
 8006136:	370c      	adds	r7, #12
 8006138:	46bd      	mov	sp, r7
 800613a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613e:	4770      	bx	lr

08006140 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b090      	sub	sp, #64	; 0x40
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800614c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006158:	2b00      	cmp	r3, #0
 800615a:	d137      	bne.n	80061cc <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800615c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800615e:	2200      	movs	r2, #0
 8006160:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3314      	adds	r3, #20
 8006168:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	623b      	str	r3, [r7, #32]
   return(result);
 8006172:	6a3b      	ldr	r3, [r7, #32]
 8006174:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006178:	63bb      	str	r3, [r7, #56]	; 0x38
 800617a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006182:	633a      	str	r2, [r7, #48]	; 0x30
 8006184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006196:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	330c      	adds	r3, #12
 800619c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800619e:	693b      	ldr	r3, [r7, #16]
 80061a0:	e853 3f00 	ldrex	r3, [r3]
 80061a4:	60fb      	str	r3, [r7, #12]
   return(result);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80061ac:	637b      	str	r3, [r7, #52]	; 0x34
 80061ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	330c      	adds	r3, #12
 80061b4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061b6:	61fa      	str	r2, [r7, #28]
 80061b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ba:	69b9      	ldr	r1, [r7, #24]
 80061bc:	69fa      	ldr	r2, [r7, #28]
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	617b      	str	r3, [r7, #20]
   return(result);
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d1e5      	bne.n	8006196 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80061ca:	e002      	b.n	80061d2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 80061cc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80061ce:	f7ff ff83 	bl	80060d8 <HAL_UART_TxCpltCallback>
}
 80061d2:	bf00      	nop
 80061d4:	3740      	adds	r7, #64	; 0x40
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}

080061da <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80061da:	b580      	push	{r7, lr}
 80061dc:	b084      	sub	sp, #16
 80061de:	af00      	add	r7, sp, #0
 80061e0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80061e8:	68f8      	ldr	r0, [r7, #12]
 80061ea:	f7ff ff7f 	bl	80060ec <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061ee:	bf00      	nop
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}

080061f6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80061f6:	b580      	push	{r7, lr}
 80061f8:	b09c      	sub	sp, #112	; 0x70
 80061fa:	af00      	add	r7, sp, #0
 80061fc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006202:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800620e:	2b00      	cmp	r3, #0
 8006210:	d172      	bne.n	80062f8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8006212:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006214:	2200      	movs	r2, #0
 8006216:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006218:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	330c      	adds	r3, #12
 800621e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006220:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006222:	e853 3f00 	ldrex	r3, [r3]
 8006226:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006228:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800622a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800622e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006230:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	330c      	adds	r3, #12
 8006236:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006238:	65ba      	str	r2, [r7, #88]	; 0x58
 800623a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800623c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800623e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006240:	e841 2300 	strex	r3, r2, [r1]
 8006244:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1e5      	bne.n	8006218 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3314      	adds	r3, #20
 8006252:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006256:	e853 3f00 	ldrex	r3, [r3]
 800625a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800625c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800625e:	f023 0301 	bic.w	r3, r3, #1
 8006262:	667b      	str	r3, [r7, #100]	; 0x64
 8006264:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	3314      	adds	r3, #20
 800626a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800626c:	647a      	str	r2, [r7, #68]	; 0x44
 800626e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006270:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006272:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006274:	e841 2300 	strex	r3, r2, [r1]
 8006278:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800627a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800627c:	2b00      	cmp	r3, #0
 800627e:	d1e5      	bne.n	800624c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006280:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	3314      	adds	r3, #20
 8006286:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800628a:	e853 3f00 	ldrex	r3, [r3]
 800628e:	623b      	str	r3, [r7, #32]
   return(result);
 8006290:	6a3b      	ldr	r3, [r7, #32]
 8006292:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006296:	663b      	str	r3, [r7, #96]	; 0x60
 8006298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	3314      	adds	r3, #20
 800629e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80062a0:	633a      	str	r2, [r7, #48]	; 0x30
 80062a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062a4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80062a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80062a8:	e841 2300 	strex	r3, r2, [r1]
 80062ac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80062ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d1e5      	bne.n	8006280 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062b6:	2220      	movs	r2, #32
 80062b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062bc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d119      	bne.n	80062f8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80062c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	330c      	adds	r3, #12
 80062ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	e853 3f00 	ldrex	r3, [r3]
 80062d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f023 0310 	bic.w	r3, r3, #16
 80062da:	65fb      	str	r3, [r7, #92]	; 0x5c
 80062dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	330c      	adds	r3, #12
 80062e2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80062e4:	61fa      	str	r2, [r7, #28]
 80062e6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062e8:	69b9      	ldr	r1, [r7, #24]
 80062ea:	69fa      	ldr	r2, [r7, #28]
 80062ec:	e841 2300 	strex	r3, r2, [r1]
 80062f0:	617b      	str	r3, [r7, #20]
   return(result);
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1e5      	bne.n	80062c4 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80062f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d106      	bne.n	800630e <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006300:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006302:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006304:	4619      	mov	r1, r3
 8006306:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006308:	f7ff ff0e 	bl	8006128 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800630c:	e002      	b.n	8006314 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 800630e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8006310:	f7fb fea4 	bl	800205c <HAL_UART_RxCpltCallback>
}
 8006314:	bf00      	nop
 8006316:	3770      	adds	r7, #112	; 0x70
 8006318:	46bd      	mov	sp, r7
 800631a:	bd80      	pop	{r7, pc}

0800631c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006328:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800632e:	2b01      	cmp	r3, #1
 8006330:	d108      	bne.n	8006344 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006336:	085b      	lsrs	r3, r3, #1
 8006338:	b29b      	uxth	r3, r3
 800633a:	4619      	mov	r1, r3
 800633c:	68f8      	ldr	r0, [r7, #12]
 800633e:	f7ff fef3 	bl	8006128 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006342:	e002      	b.n	800634a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8006344:	68f8      	ldr	r0, [r7, #12]
 8006346:	f7ff fedb 	bl	8006100 <HAL_UART_RxHalfCpltCallback>
}
 800634a:	bf00      	nop
 800634c:	3710      	adds	r7, #16
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}

08006352 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006352:	b580      	push	{r7, lr}
 8006354:	b084      	sub	sp, #16
 8006356:	af00      	add	r7, sp, #0
 8006358:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800635a:	2300      	movs	r3, #0
 800635c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006362:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	695b      	ldr	r3, [r3, #20]
 800636a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800636e:	2b80      	cmp	r3, #128	; 0x80
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006380:	b2db      	uxtb	r3, r3
 8006382:	2b21      	cmp	r3, #33	; 0x21
 8006384:	d108      	bne.n	8006398 <UART_DMAError+0x46>
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d005      	beq.n	8006398 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	2200      	movs	r2, #0
 8006390:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006392:	68b8      	ldr	r0, [r7, #8]
 8006394:	f000 f934 	bl	8006600 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006398:	68bb      	ldr	r3, [r7, #8]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	695b      	ldr	r3, [r3, #20]
 800639e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a2:	2b40      	cmp	r3, #64	; 0x40
 80063a4:	bf0c      	ite	eq
 80063a6:	2301      	moveq	r3, #1
 80063a8:	2300      	movne	r3, #0
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b22      	cmp	r3, #34	; 0x22
 80063b8:	d108      	bne.n	80063cc <UART_DMAError+0x7a>
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d005      	beq.n	80063cc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80063c0:	68bb      	ldr	r3, [r7, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80063c6:	68b8      	ldr	r0, [r7, #8]
 80063c8:	f000 f942 	bl	8006650 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063d0:	f043 0210 	orr.w	r2, r3, #16
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063d8:	68b8      	ldr	r0, [r7, #8]
 80063da:	f7ff fe9b 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063de:	bf00      	nop
 80063e0:	3710      	adds	r7, #16
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}

080063e6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80063e6:	b580      	push	{r7, lr}
 80063e8:	b090      	sub	sp, #64	; 0x40
 80063ea:	af00      	add	r7, sp, #0
 80063ec:	60f8      	str	r0, [r7, #12]
 80063ee:	60b9      	str	r1, [r7, #8]
 80063f0:	603b      	str	r3, [r7, #0]
 80063f2:	4613      	mov	r3, r2
 80063f4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063f6:	e050      	b.n	800649a <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80063fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80063fe:	d04c      	beq.n	800649a <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006400:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006402:	2b00      	cmp	r3, #0
 8006404:	d007      	beq.n	8006416 <UART_WaitOnFlagUntilTimeout+0x30>
 8006406:	f7fb fe83 	bl	8002110 <HAL_GetTick>
 800640a:	4602      	mov	r2, r0
 800640c:	683b      	ldr	r3, [r7, #0]
 800640e:	1ad3      	subs	r3, r2, r3
 8006410:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006412:	429a      	cmp	r2, r3
 8006414:	d241      	bcs.n	800649a <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	330c      	adds	r3, #12
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800641e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006420:	e853 3f00 	ldrex	r3, [r3]
 8006424:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006428:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800642c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	330c      	adds	r3, #12
 8006434:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006436:	637a      	str	r2, [r7, #52]	; 0x34
 8006438:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800643a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800643c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800643e:	e841 2300 	strex	r3, r2, [r1]
 8006442:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006446:	2b00      	cmp	r3, #0
 8006448:	d1e5      	bne.n	8006416 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	3314      	adds	r3, #20
 8006450:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	e853 3f00 	ldrex	r3, [r3]
 8006458:	613b      	str	r3, [r7, #16]
   return(result);
 800645a:	693b      	ldr	r3, [r7, #16]
 800645c:	f023 0301 	bic.w	r3, r3, #1
 8006460:	63bb      	str	r3, [r7, #56]	; 0x38
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	3314      	adds	r3, #20
 8006468:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800646a:	623a      	str	r2, [r7, #32]
 800646c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800646e:	69f9      	ldr	r1, [r7, #28]
 8006470:	6a3a      	ldr	r2, [r7, #32]
 8006472:	e841 2300 	strex	r3, r2, [r1]
 8006476:	61bb      	str	r3, [r7, #24]
   return(result);
 8006478:	69bb      	ldr	r3, [r7, #24]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d1e5      	bne.n	800644a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	2220      	movs	r2, #32
 8006482:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	2220      	movs	r2, #32
 800648a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	2200      	movs	r2, #0
 8006492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006496:	2303      	movs	r3, #3
 8006498:	e00f      	b.n	80064ba <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	4013      	ands	r3, r2
 80064a4:	68ba      	ldr	r2, [r7, #8]
 80064a6:	429a      	cmp	r2, r3
 80064a8:	bf0c      	ite	eq
 80064aa:	2301      	moveq	r3, #1
 80064ac:	2300      	movne	r3, #0
 80064ae:	b2db      	uxtb	r3, r3
 80064b0:	461a      	mov	r2, r3
 80064b2:	79fb      	ldrb	r3, [r7, #7]
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d09f      	beq.n	80063f8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064b8:	2300      	movs	r3, #0
}
 80064ba:	4618      	mov	r0, r3
 80064bc:	3740      	adds	r7, #64	; 0x40
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}
	...

080064c4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b098      	sub	sp, #96	; 0x60
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	88fa      	ldrh	r2, [r7, #6]
 80064dc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	2200      	movs	r2, #0
 80064e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2222      	movs	r2, #34	; 0x22
 80064e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f0:	4a40      	ldr	r2, [pc, #256]	; (80065f4 <UART_Start_Receive_DMA+0x130>)
 80064f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064f8:	4a3f      	ldr	r2, [pc, #252]	; (80065f8 <UART_Start_Receive_DMA+0x134>)
 80064fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006500:	4a3e      	ldr	r2, [pc, #248]	; (80065fc <UART_Start_Receive_DMA+0x138>)
 8006502:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006508:	2200      	movs	r2, #0
 800650a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800650c:	f107 0308 	add.w	r3, r7, #8
 8006510:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	3304      	adds	r3, #4
 800651c:	4619      	mov	r1, r3
 800651e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006520:	681a      	ldr	r2, [r3, #0]
 8006522:	88fb      	ldrh	r3, [r7, #6]
 8006524:	f7fc fa16 	bl	8002954 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006528:	2300      	movs	r3, #0
 800652a:	613b      	str	r3, [r7, #16]
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	613b      	str	r3, [r7, #16]
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	613b      	str	r3, [r7, #16]
 800653c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	2200      	movs	r2, #0
 8006542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d019      	beq.n	8006582 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	330c      	adds	r3, #12
 8006554:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006556:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006558:	e853 3f00 	ldrex	r3, [r3]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800655e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006560:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006564:	65bb      	str	r3, [r7, #88]	; 0x58
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	330c      	adds	r3, #12
 800656c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800656e:	64fa      	str	r2, [r7, #76]	; 0x4c
 8006570:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006572:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8006574:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006576:	e841 2300 	strex	r3, r2, [r1]
 800657a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800657c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800657e:	2b00      	cmp	r3, #0
 8006580:	d1e5      	bne.n	800654e <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3314      	adds	r3, #20
 8006588:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800658c:	e853 3f00 	ldrex	r3, [r3]
 8006590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006594:	f043 0301 	orr.w	r3, r3, #1
 8006598:	657b      	str	r3, [r7, #84]	; 0x54
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	3314      	adds	r3, #20
 80065a0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80065a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80065a4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80065a8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80065aa:	e841 2300 	strex	r3, r2, [r1]
 80065ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80065b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1e5      	bne.n	8006582 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	3314      	adds	r3, #20
 80065bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065be:	69bb      	ldr	r3, [r7, #24]
 80065c0:	e853 3f00 	ldrex	r3, [r3]
 80065c4:	617b      	str	r3, [r7, #20]
   return(result);
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80065cc:	653b      	str	r3, [r7, #80]	; 0x50
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3314      	adds	r3, #20
 80065d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80065d6:	627a      	str	r2, [r7, #36]	; 0x24
 80065d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065da:	6a39      	ldr	r1, [r7, #32]
 80065dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80065de:	e841 2300 	strex	r3, r2, [r1]
 80065e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d1e5      	bne.n	80065b6 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 80065ea:	2300      	movs	r3, #0
}
 80065ec:	4618      	mov	r0, r3
 80065ee:	3760      	adds	r7, #96	; 0x60
 80065f0:	46bd      	mov	sp, r7
 80065f2:	bd80      	pop	{r7, pc}
 80065f4:	080061f7 	.word	0x080061f7
 80065f8:	0800631d 	.word	0x0800631d
 80065fc:	08006353 	.word	0x08006353

08006600 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006600:	b480      	push	{r7}
 8006602:	b089      	sub	sp, #36	; 0x24
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	330c      	adds	r3, #12
 800660e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	e853 3f00 	ldrex	r3, [r3]
 8006616:	60bb      	str	r3, [r7, #8]
   return(result);
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800661e:	61fb      	str	r3, [r7, #28]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	330c      	adds	r3, #12
 8006626:	69fa      	ldr	r2, [r7, #28]
 8006628:	61ba      	str	r2, [r7, #24]
 800662a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800662c:	6979      	ldr	r1, [r7, #20]
 800662e:	69ba      	ldr	r2, [r7, #24]
 8006630:	e841 2300 	strex	r3, r2, [r1]
 8006634:	613b      	str	r3, [r7, #16]
   return(result);
 8006636:	693b      	ldr	r3, [r7, #16]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1e5      	bne.n	8006608 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2220      	movs	r2, #32
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006644:	bf00      	nop
 8006646:	3724      	adds	r7, #36	; 0x24
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006650:	b480      	push	{r7}
 8006652:	b095      	sub	sp, #84	; 0x54
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	330c      	adds	r3, #12
 800665e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006660:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006662:	e853 3f00 	ldrex	r3, [r3]
 8006666:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800666e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	330c      	adds	r3, #12
 8006676:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006678:	643a      	str	r2, [r7, #64]	; 0x40
 800667a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800667c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800667e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006680:	e841 2300 	strex	r3, r2, [r1]
 8006684:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006688:	2b00      	cmp	r3, #0
 800668a:	d1e5      	bne.n	8006658 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	3314      	adds	r3, #20
 8006692:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006694:	6a3b      	ldr	r3, [r7, #32]
 8006696:	e853 3f00 	ldrex	r3, [r3]
 800669a:	61fb      	str	r3, [r7, #28]
   return(result);
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	f023 0301 	bic.w	r3, r3, #1
 80066a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	3314      	adds	r3, #20
 80066aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80066ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80066ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80066b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80066b4:	e841 2300 	strex	r3, r2, [r1]
 80066b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d1e5      	bne.n	800668c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066c4:	2b01      	cmp	r3, #1
 80066c6:	d119      	bne.n	80066fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	330c      	adds	r3, #12
 80066ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	e853 3f00 	ldrex	r3, [r3]
 80066d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f023 0310 	bic.w	r3, r3, #16
 80066de:	647b      	str	r3, [r7, #68]	; 0x44
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	330c      	adds	r3, #12
 80066e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066e8:	61ba      	str	r2, [r7, #24]
 80066ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80066ec:	6979      	ldr	r1, [r7, #20]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	e841 2300 	strex	r3, r2, [r1]
 80066f4:	613b      	str	r3, [r7, #16]
   return(result);
 80066f6:	693b      	ldr	r3, [r7, #16]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d1e5      	bne.n	80066c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2220      	movs	r2, #32
 8006700:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2200      	movs	r2, #0
 8006708:	631a      	str	r2, [r3, #48]	; 0x30
}
 800670a:	bf00      	nop
 800670c:	3754      	adds	r7, #84	; 0x54
 800670e:	46bd      	mov	sp, r7
 8006710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006714:	4770      	bx	lr

08006716 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006716:	b580      	push	{r7, lr}
 8006718:	b084      	sub	sp, #16
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006722:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2200      	movs	r2, #0
 8006728:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2200      	movs	r2, #0
 800672e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006730:	68f8      	ldr	r0, [r7, #12]
 8006732:	f7ff fcef 	bl	8006114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006736:	bf00      	nop
 8006738:	3710      	adds	r7, #16
 800673a:	46bd      	mov	sp, r7
 800673c:	bd80      	pop	{r7, pc}

0800673e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800673e:	b480      	push	{r7}
 8006740:	b085      	sub	sp, #20
 8006742:	af00      	add	r7, sp, #0
 8006744:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b21      	cmp	r3, #33	; 0x21
 8006750:	d13e      	bne.n	80067d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d114      	bne.n	8006786 <UART_Transmit_IT+0x48>
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	691b      	ldr	r3, [r3, #16]
 8006760:	2b00      	cmp	r3, #0
 8006762:	d110      	bne.n	8006786 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	881b      	ldrh	r3, [r3, #0]
 800676e:	461a      	mov	r2, r3
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006778:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6a1b      	ldr	r3, [r3, #32]
 800677e:	1c9a      	adds	r2, r3, #2
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	621a      	str	r2, [r3, #32]
 8006784:	e008      	b.n	8006798 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
 800678a:	1c59      	adds	r1, r3, #1
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	6211      	str	r1, [r2, #32]
 8006790:	781a      	ldrb	r2, [r3, #0]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800679c:	b29b      	uxth	r3, r3
 800679e:	3b01      	subs	r3, #1
 80067a0:	b29b      	uxth	r3, r3
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	4619      	mov	r1, r3
 80067a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d10f      	bne.n	80067cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68da      	ldr	r2, [r3, #12]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80067ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	68da      	ldr	r2, [r3, #12]
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80067ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80067cc:	2300      	movs	r3, #0
 80067ce:	e000      	b.n	80067d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80067d0:	2302      	movs	r3, #2
  }
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	3714      	adds	r7, #20
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr

080067de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b082      	sub	sp, #8
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	68da      	ldr	r2, [r3, #12]
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2220      	movs	r2, #32
 80067fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f7ff fc6a 	bl	80060d8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	3708      	adds	r7, #8
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b08c      	sub	sp, #48	; 0x30
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800681c:	b2db      	uxtb	r3, r3
 800681e:	2b22      	cmp	r3, #34	; 0x22
 8006820:	f040 80ab 	bne.w	800697a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800682c:	d117      	bne.n	800685e <UART_Receive_IT+0x50>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	691b      	ldr	r3, [r3, #16]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d113      	bne.n	800685e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800683e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	685b      	ldr	r3, [r3, #4]
 8006846:	b29b      	uxth	r3, r3
 8006848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800684c:	b29a      	uxth	r2, r3
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006856:	1c9a      	adds	r2, r3, #2
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	629a      	str	r2, [r3, #40]	; 0x28
 800685c:	e026      	b.n	80068ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006862:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006864:	2300      	movs	r3, #0
 8006866:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	689b      	ldr	r3, [r3, #8]
 800686c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006870:	d007      	beq.n	8006882 <UART_Receive_IT+0x74>
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	689b      	ldr	r3, [r3, #8]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d10a      	bne.n	8006890 <UART_Receive_IT+0x82>
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d106      	bne.n	8006890 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	b2da      	uxtb	r2, r3
 800688a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800688c:	701a      	strb	r2, [r3, #0]
 800688e:	e008      	b.n	80068a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	685b      	ldr	r3, [r3, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800689c:	b2da      	uxtb	r2, r3
 800689e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80068a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068a6:	1c5a      	adds	r2, r3, #1
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	687a      	ldr	r2, [r7, #4]
 80068b8:	4619      	mov	r1, r3
 80068ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d15a      	bne.n	8006976 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68da      	ldr	r2, [r3, #12]
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f022 0220 	bic.w	r2, r2, #32
 80068ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	68da      	ldr	r2, [r3, #12]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80068de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	695a      	ldr	r2, [r3, #20]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f022 0201 	bic.w	r2, r2, #1
 80068ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068fc:	2b01      	cmp	r3, #1
 80068fe:	d135      	bne.n	800696c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	330c      	adds	r3, #12
 800690c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690e:	697b      	ldr	r3, [r7, #20]
 8006910:	e853 3f00 	ldrex	r3, [r3]
 8006914:	613b      	str	r3, [r7, #16]
   return(result);
 8006916:	693b      	ldr	r3, [r7, #16]
 8006918:	f023 0310 	bic.w	r3, r3, #16
 800691c:	627b      	str	r3, [r7, #36]	; 0x24
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	330c      	adds	r3, #12
 8006924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006926:	623a      	str	r2, [r7, #32]
 8006928:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692a:	69f9      	ldr	r1, [r7, #28]
 800692c:	6a3a      	ldr	r2, [r7, #32]
 800692e:	e841 2300 	strex	r3, r2, [r1]
 8006932:	61bb      	str	r3, [r7, #24]
   return(result);
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1e5      	bne.n	8006906 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	f003 0310 	and.w	r3, r3, #16
 8006944:	2b10      	cmp	r3, #16
 8006946:	d10a      	bne.n	800695e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006948:	2300      	movs	r3, #0
 800694a:	60fb      	str	r3, [r7, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	60fb      	str	r3, [r7, #12]
 800695c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006962:	4619      	mov	r1, r3
 8006964:	6878      	ldr	r0, [r7, #4]
 8006966:	f7ff fbdf 	bl	8006128 <HAL_UARTEx_RxEventCallback>
 800696a:	e002      	b.n	8006972 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800696c:	6878      	ldr	r0, [r7, #4]
 800696e:	f7fb fb75 	bl	800205c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e002      	b.n	800697c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8006976:	2300      	movs	r3, #0
 8006978:	e000      	b.n	800697c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800697a:	2302      	movs	r3, #2
  }
}
 800697c:	4618      	mov	r0, r3
 800697e:	3730      	adds	r7, #48	; 0x30
 8006980:	46bd      	mov	sp, r7
 8006982:	bd80      	pop	{r7, pc}

08006984 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006984:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006988:	b0c0      	sub	sp, #256	; 0x100
 800698a:	af00      	add	r7, sp, #0
 800698c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	691b      	ldr	r3, [r3, #16]
 8006998:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800699c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a0:	68d9      	ldr	r1, [r3, #12]
 80069a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	ea40 0301 	orr.w	r3, r0, r1
 80069ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80069ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b2:	689a      	ldr	r2, [r3, #8]
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069b8:	691b      	ldr	r3, [r3, #16]
 80069ba:	431a      	orrs	r2, r3
 80069bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c0:	695b      	ldr	r3, [r3, #20]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	4313      	orrs	r3, r2
 80069cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80069d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80069dc:	f021 010c 	bic.w	r1, r1, #12
 80069e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80069ea:	430b      	orrs	r3, r1
 80069ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80069ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	695b      	ldr	r3, [r3, #20]
 80069f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80069fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069fe:	6999      	ldr	r1, [r3, #24]
 8006a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	ea40 0301 	orr.w	r3, r0, r1
 8006a0a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	4b8f      	ldr	r3, [pc, #572]	; (8006c50 <UART_SetConfig+0x2cc>)
 8006a14:	429a      	cmp	r2, r3
 8006a16:	d005      	beq.n	8006a24 <UART_SetConfig+0xa0>
 8006a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a1c:	681a      	ldr	r2, [r3, #0]
 8006a1e:	4b8d      	ldr	r3, [pc, #564]	; (8006c54 <UART_SetConfig+0x2d0>)
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d104      	bne.n	8006a2e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a24:	f7fe fbc8 	bl	80051b8 <HAL_RCC_GetPCLK2Freq>
 8006a28:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006a2c:	e003      	b.n	8006a36 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a2e:	f7fe fbaf 	bl	8005190 <HAL_RCC_GetPCLK1Freq>
 8006a32:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a3a:	69db      	ldr	r3, [r3, #28]
 8006a3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a40:	f040 810c 	bne.w	8006c5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006a44:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a48:	2200      	movs	r2, #0
 8006a4a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006a4e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8006a52:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006a56:	4622      	mov	r2, r4
 8006a58:	462b      	mov	r3, r5
 8006a5a:	1891      	adds	r1, r2, r2
 8006a5c:	65b9      	str	r1, [r7, #88]	; 0x58
 8006a5e:	415b      	adcs	r3, r3
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006a62:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8006a66:	4621      	mov	r1, r4
 8006a68:	eb12 0801 	adds.w	r8, r2, r1
 8006a6c:	4629      	mov	r1, r5
 8006a6e:	eb43 0901 	adc.w	r9, r3, r1
 8006a72:	f04f 0200 	mov.w	r2, #0
 8006a76:	f04f 0300 	mov.w	r3, #0
 8006a7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006a7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006a82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006a86:	4690      	mov	r8, r2
 8006a88:	4699      	mov	r9, r3
 8006a8a:	4623      	mov	r3, r4
 8006a8c:	eb18 0303 	adds.w	r3, r8, r3
 8006a90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006a94:	462b      	mov	r3, r5
 8006a96:	eb49 0303 	adc.w	r3, r9, r3
 8006a9a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006a9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006aa2:	685b      	ldr	r3, [r3, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006aaa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006aae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006ab2:	460b      	mov	r3, r1
 8006ab4:	18db      	adds	r3, r3, r3
 8006ab6:	653b      	str	r3, [r7, #80]	; 0x50
 8006ab8:	4613      	mov	r3, r2
 8006aba:	eb42 0303 	adc.w	r3, r2, r3
 8006abe:	657b      	str	r3, [r7, #84]	; 0x54
 8006ac0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006ac4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006ac8:	f7f9 fc3a 	bl	8000340 <__aeabi_uldivmod>
 8006acc:	4602      	mov	r2, r0
 8006ace:	460b      	mov	r3, r1
 8006ad0:	4b61      	ldr	r3, [pc, #388]	; (8006c58 <UART_SetConfig+0x2d4>)
 8006ad2:	fba3 2302 	umull	r2, r3, r3, r2
 8006ad6:	095b      	lsrs	r3, r3, #5
 8006ad8:	011c      	lsls	r4, r3, #4
 8006ada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ade:	2200      	movs	r2, #0
 8006ae0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ae4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006ae8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006aec:	4642      	mov	r2, r8
 8006aee:	464b      	mov	r3, r9
 8006af0:	1891      	adds	r1, r2, r2
 8006af2:	64b9      	str	r1, [r7, #72]	; 0x48
 8006af4:	415b      	adcs	r3, r3
 8006af6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006af8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006afc:	4641      	mov	r1, r8
 8006afe:	eb12 0a01 	adds.w	sl, r2, r1
 8006b02:	4649      	mov	r1, r9
 8006b04:	eb43 0b01 	adc.w	fp, r3, r1
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006b14:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006b18:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b1c:	4692      	mov	sl, r2
 8006b1e:	469b      	mov	fp, r3
 8006b20:	4643      	mov	r3, r8
 8006b22:	eb1a 0303 	adds.w	r3, sl, r3
 8006b26:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b2a:	464b      	mov	r3, r9
 8006b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8006b30:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006b34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b38:	685b      	ldr	r3, [r3, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006b40:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006b44:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006b48:	460b      	mov	r3, r1
 8006b4a:	18db      	adds	r3, r3, r3
 8006b4c:	643b      	str	r3, [r7, #64]	; 0x40
 8006b4e:	4613      	mov	r3, r2
 8006b50:	eb42 0303 	adc.w	r3, r2, r3
 8006b54:	647b      	str	r3, [r7, #68]	; 0x44
 8006b56:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006b5a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006b5e:	f7f9 fbef 	bl	8000340 <__aeabi_uldivmod>
 8006b62:	4602      	mov	r2, r0
 8006b64:	460b      	mov	r3, r1
 8006b66:	4611      	mov	r1, r2
 8006b68:	4b3b      	ldr	r3, [pc, #236]	; (8006c58 <UART_SetConfig+0x2d4>)
 8006b6a:	fba3 2301 	umull	r2, r3, r3, r1
 8006b6e:	095b      	lsrs	r3, r3, #5
 8006b70:	2264      	movs	r2, #100	; 0x64
 8006b72:	fb02 f303 	mul.w	r3, r2, r3
 8006b76:	1acb      	subs	r3, r1, r3
 8006b78:	00db      	lsls	r3, r3, #3
 8006b7a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006b7e:	4b36      	ldr	r3, [pc, #216]	; (8006c58 <UART_SetConfig+0x2d4>)
 8006b80:	fba3 2302 	umull	r2, r3, r3, r2
 8006b84:	095b      	lsrs	r3, r3, #5
 8006b86:	005b      	lsls	r3, r3, #1
 8006b88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006b8c:	441c      	add	r4, r3
 8006b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b92:	2200      	movs	r2, #0
 8006b94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006b98:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006b9c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006ba0:	4642      	mov	r2, r8
 8006ba2:	464b      	mov	r3, r9
 8006ba4:	1891      	adds	r1, r2, r2
 8006ba6:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ba8:	415b      	adcs	r3, r3
 8006baa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006bac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006bb0:	4641      	mov	r1, r8
 8006bb2:	1851      	adds	r1, r2, r1
 8006bb4:	6339      	str	r1, [r7, #48]	; 0x30
 8006bb6:	4649      	mov	r1, r9
 8006bb8:	414b      	adcs	r3, r1
 8006bba:	637b      	str	r3, [r7, #52]	; 0x34
 8006bbc:	f04f 0200 	mov.w	r2, #0
 8006bc0:	f04f 0300 	mov.w	r3, #0
 8006bc4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006bc8:	4659      	mov	r1, fp
 8006bca:	00cb      	lsls	r3, r1, #3
 8006bcc:	4651      	mov	r1, sl
 8006bce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006bd2:	4651      	mov	r1, sl
 8006bd4:	00ca      	lsls	r2, r1, #3
 8006bd6:	4610      	mov	r0, r2
 8006bd8:	4619      	mov	r1, r3
 8006bda:	4603      	mov	r3, r0
 8006bdc:	4642      	mov	r2, r8
 8006bde:	189b      	adds	r3, r3, r2
 8006be0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006be4:	464b      	mov	r3, r9
 8006be6:	460a      	mov	r2, r1
 8006be8:	eb42 0303 	adc.w	r3, r2, r3
 8006bec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bf4:	685b      	ldr	r3, [r3, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006bfc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006c00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006c04:	460b      	mov	r3, r1
 8006c06:	18db      	adds	r3, r3, r3
 8006c08:	62bb      	str	r3, [r7, #40]	; 0x28
 8006c0a:	4613      	mov	r3, r2
 8006c0c:	eb42 0303 	adc.w	r3, r2, r3
 8006c10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006c12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006c16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006c1a:	f7f9 fb91 	bl	8000340 <__aeabi_uldivmod>
 8006c1e:	4602      	mov	r2, r0
 8006c20:	460b      	mov	r3, r1
 8006c22:	4b0d      	ldr	r3, [pc, #52]	; (8006c58 <UART_SetConfig+0x2d4>)
 8006c24:	fba3 1302 	umull	r1, r3, r3, r2
 8006c28:	095b      	lsrs	r3, r3, #5
 8006c2a:	2164      	movs	r1, #100	; 0x64
 8006c2c:	fb01 f303 	mul.w	r3, r1, r3
 8006c30:	1ad3      	subs	r3, r2, r3
 8006c32:	00db      	lsls	r3, r3, #3
 8006c34:	3332      	adds	r3, #50	; 0x32
 8006c36:	4a08      	ldr	r2, [pc, #32]	; (8006c58 <UART_SetConfig+0x2d4>)
 8006c38:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	f003 0207 	and.w	r2, r3, #7
 8006c42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	4422      	add	r2, r4
 8006c4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006c4c:	e106      	b.n	8006e5c <UART_SetConfig+0x4d8>
 8006c4e:	bf00      	nop
 8006c50:	40011000 	.word	0x40011000
 8006c54:	40011400 	.word	0x40011400
 8006c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c60:	2200      	movs	r2, #0
 8006c62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006c66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006c6e:	4642      	mov	r2, r8
 8006c70:	464b      	mov	r3, r9
 8006c72:	1891      	adds	r1, r2, r2
 8006c74:	6239      	str	r1, [r7, #32]
 8006c76:	415b      	adcs	r3, r3
 8006c78:	627b      	str	r3, [r7, #36]	; 0x24
 8006c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006c7e:	4641      	mov	r1, r8
 8006c80:	1854      	adds	r4, r2, r1
 8006c82:	4649      	mov	r1, r9
 8006c84:	eb43 0501 	adc.w	r5, r3, r1
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	00eb      	lsls	r3, r5, #3
 8006c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006c96:	00e2      	lsls	r2, r4, #3
 8006c98:	4614      	mov	r4, r2
 8006c9a:	461d      	mov	r5, r3
 8006c9c:	4643      	mov	r3, r8
 8006c9e:	18e3      	adds	r3, r4, r3
 8006ca0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006ca4:	464b      	mov	r3, r9
 8006ca6:	eb45 0303 	adc.w	r3, r5, r3
 8006caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	2200      	movs	r2, #0
 8006cb6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006cba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006cbe:	f04f 0200 	mov.w	r2, #0
 8006cc2:	f04f 0300 	mov.w	r3, #0
 8006cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006cca:	4629      	mov	r1, r5
 8006ccc:	008b      	lsls	r3, r1, #2
 8006cce:	4621      	mov	r1, r4
 8006cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cd4:	4621      	mov	r1, r4
 8006cd6:	008a      	lsls	r2, r1, #2
 8006cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cdc:	f7f9 fb30 	bl	8000340 <__aeabi_uldivmod>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	460b      	mov	r3, r1
 8006ce4:	4b60      	ldr	r3, [pc, #384]	; (8006e68 <UART_SetConfig+0x4e4>)
 8006ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8006cea:	095b      	lsrs	r3, r3, #5
 8006cec:	011c      	lsls	r4, r3, #4
 8006cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006cf8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006d00:	4642      	mov	r2, r8
 8006d02:	464b      	mov	r3, r9
 8006d04:	1891      	adds	r1, r2, r2
 8006d06:	61b9      	str	r1, [r7, #24]
 8006d08:	415b      	adcs	r3, r3
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006d10:	4641      	mov	r1, r8
 8006d12:	1851      	adds	r1, r2, r1
 8006d14:	6139      	str	r1, [r7, #16]
 8006d16:	4649      	mov	r1, r9
 8006d18:	414b      	adcs	r3, r1
 8006d1a:	617b      	str	r3, [r7, #20]
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d28:	4659      	mov	r1, fp
 8006d2a:	00cb      	lsls	r3, r1, #3
 8006d2c:	4651      	mov	r1, sl
 8006d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d32:	4651      	mov	r1, sl
 8006d34:	00ca      	lsls	r2, r1, #3
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006d44:	464b      	mov	r3, r9
 8006d46:	460a      	mov	r2, r1
 8006d48:	eb42 0303 	adc.w	r3, r2, r3
 8006d4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	67bb      	str	r3, [r7, #120]	; 0x78
 8006d5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006d5c:	f04f 0200 	mov.w	r2, #0
 8006d60:	f04f 0300 	mov.w	r3, #0
 8006d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006d68:	4649      	mov	r1, r9
 8006d6a:	008b      	lsls	r3, r1, #2
 8006d6c:	4641      	mov	r1, r8
 8006d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d72:	4641      	mov	r1, r8
 8006d74:	008a      	lsls	r2, r1, #2
 8006d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006d7a:	f7f9 fae1 	bl	8000340 <__aeabi_uldivmod>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4611      	mov	r1, r2
 8006d84:	4b38      	ldr	r3, [pc, #224]	; (8006e68 <UART_SetConfig+0x4e4>)
 8006d86:	fba3 2301 	umull	r2, r3, r3, r1
 8006d8a:	095b      	lsrs	r3, r3, #5
 8006d8c:	2264      	movs	r2, #100	; 0x64
 8006d8e:	fb02 f303 	mul.w	r3, r2, r3
 8006d92:	1acb      	subs	r3, r1, r3
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	3332      	adds	r3, #50	; 0x32
 8006d98:	4a33      	ldr	r2, [pc, #204]	; (8006e68 <UART_SetConfig+0x4e4>)
 8006d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9e:	095b      	lsrs	r3, r3, #5
 8006da0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006da4:	441c      	add	r4, r3
 8006da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006daa:	2200      	movs	r2, #0
 8006dac:	673b      	str	r3, [r7, #112]	; 0x70
 8006dae:	677a      	str	r2, [r7, #116]	; 0x74
 8006db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006db4:	4642      	mov	r2, r8
 8006db6:	464b      	mov	r3, r9
 8006db8:	1891      	adds	r1, r2, r2
 8006dba:	60b9      	str	r1, [r7, #8]
 8006dbc:	415b      	adcs	r3, r3
 8006dbe:	60fb      	str	r3, [r7, #12]
 8006dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006dc4:	4641      	mov	r1, r8
 8006dc6:	1851      	adds	r1, r2, r1
 8006dc8:	6039      	str	r1, [r7, #0]
 8006dca:	4649      	mov	r1, r9
 8006dcc:	414b      	adcs	r3, r1
 8006dce:	607b      	str	r3, [r7, #4]
 8006dd0:	f04f 0200 	mov.w	r2, #0
 8006dd4:	f04f 0300 	mov.w	r3, #0
 8006dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006ddc:	4659      	mov	r1, fp
 8006dde:	00cb      	lsls	r3, r1, #3
 8006de0:	4651      	mov	r1, sl
 8006de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006de6:	4651      	mov	r1, sl
 8006de8:	00ca      	lsls	r2, r1, #3
 8006dea:	4610      	mov	r0, r2
 8006dec:	4619      	mov	r1, r3
 8006dee:	4603      	mov	r3, r0
 8006df0:	4642      	mov	r2, r8
 8006df2:	189b      	adds	r3, r3, r2
 8006df4:	66bb      	str	r3, [r7, #104]	; 0x68
 8006df6:	464b      	mov	r3, r9
 8006df8:	460a      	mov	r2, r1
 8006dfa:	eb42 0303 	adc.w	r3, r2, r3
 8006dfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e04:	685b      	ldr	r3, [r3, #4]
 8006e06:	2200      	movs	r2, #0
 8006e08:	663b      	str	r3, [r7, #96]	; 0x60
 8006e0a:	667a      	str	r2, [r7, #100]	; 0x64
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006e18:	4649      	mov	r1, r9
 8006e1a:	008b      	lsls	r3, r1, #2
 8006e1c:	4641      	mov	r1, r8
 8006e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006e22:	4641      	mov	r1, r8
 8006e24:	008a      	lsls	r2, r1, #2
 8006e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006e2a:	f7f9 fa89 	bl	8000340 <__aeabi_uldivmod>
 8006e2e:	4602      	mov	r2, r0
 8006e30:	460b      	mov	r3, r1
 8006e32:	4b0d      	ldr	r3, [pc, #52]	; (8006e68 <UART_SetConfig+0x4e4>)
 8006e34:	fba3 1302 	umull	r1, r3, r3, r2
 8006e38:	095b      	lsrs	r3, r3, #5
 8006e3a:	2164      	movs	r1, #100	; 0x64
 8006e3c:	fb01 f303 	mul.w	r3, r1, r3
 8006e40:	1ad3      	subs	r3, r2, r3
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	3332      	adds	r3, #50	; 0x32
 8006e46:	4a08      	ldr	r2, [pc, #32]	; (8006e68 <UART_SetConfig+0x4e4>)
 8006e48:	fba2 2303 	umull	r2, r3, r2, r3
 8006e4c:	095b      	lsrs	r3, r3, #5
 8006e4e:	f003 020f 	and.w	r2, r3, #15
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	4422      	add	r2, r4
 8006e5a:	609a      	str	r2, [r3, #8]
}
 8006e5c:	bf00      	nop
 8006e5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006e62:	46bd      	mov	sp, r7
 8006e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e68:	51eb851f 	.word	0x51eb851f

08006e6c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006e6c:	b084      	sub	sp, #16
 8006e6e:	b580      	push	{r7, lr}
 8006e70:	b084      	sub	sp, #16
 8006e72:	af00      	add	r7, sp, #0
 8006e74:	6078      	str	r0, [r7, #4]
 8006e76:	f107 001c 	add.w	r0, r7, #28
 8006e7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	d122      	bne.n	8006eca <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e88:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	68db      	ldr	r3, [r3, #12]
 8006e94:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006e98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e9c:	687a      	ldr	r2, [r7, #4]
 8006e9e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	68db      	ldr	r3, [r3, #12]
 8006ea4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006eac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d105      	bne.n	8006ebe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	68db      	ldr	r3, [r3, #12]
 8006eb6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f000 faa2 	bl	8007408 <USB_CoreReset>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	73fb      	strb	r3, [r7, #15]
 8006ec8:	e01a      	b.n	8006f00 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fa96 	bl	8007408 <USB_CoreReset>
 8006edc:	4603      	mov	r3, r0
 8006ede:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ee0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d106      	bne.n	8006ef4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ef2:	e005      	b.n	8006f00 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d10b      	bne.n	8006f1e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	f043 0206 	orr.w	r2, r3, #6
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f043 0220 	orr.w	r2, r3, #32
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006f1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f20:	4618      	mov	r0, r3
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f2a:	b004      	add	sp, #16
 8006f2c:	4770      	bx	lr

08006f2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006f2e:	b480      	push	{r7}
 8006f30:	b083      	sub	sp, #12
 8006f32:	af00      	add	r7, sp, #0
 8006f34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	689b      	ldr	r3, [r3, #8]
 8006f3a:	f023 0201 	bic.w	r2, r3, #1
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	370c      	adds	r7, #12
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b084      	sub	sp, #16
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006f6c:	78fb      	ldrb	r3, [r7, #3]
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d115      	bne.n	8006f9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	68db      	ldr	r3, [r3, #12]
 8006f76:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006f7e:	2001      	movs	r0, #1
 8006f80:	f7fb f8d2 	bl	8002128 <HAL_Delay>
      ms++;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	3301      	adds	r3, #1
 8006f88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 fa2e 	bl	80073ec <USB_GetMode>
 8006f90:	4603      	mov	r3, r0
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d01e      	beq.n	8006fd4 <USB_SetCurrentMode+0x84>
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	2b31      	cmp	r3, #49	; 0x31
 8006f9a:	d9f0      	bls.n	8006f7e <USB_SetCurrentMode+0x2e>
 8006f9c:	e01a      	b.n	8006fd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006f9e:	78fb      	ldrb	r3, [r7, #3]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d115      	bne.n	8006fd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006fb0:	2001      	movs	r0, #1
 8006fb2:	f7fb f8b9 	bl	8002128 <HAL_Delay>
      ms++;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fa15 	bl	80073ec <USB_GetMode>
 8006fc2:	4603      	mov	r3, r0
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <USB_SetCurrentMode+0x84>
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2b31      	cmp	r3, #49	; 0x31
 8006fcc:	d9f0      	bls.n	8006fb0 <USB_SetCurrentMode+0x60>
 8006fce:	e001      	b.n	8006fd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e005      	b.n	8006fe0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2b32      	cmp	r3, #50	; 0x32
 8006fd8:	d101      	bne.n	8006fde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006fda:	2301      	movs	r3, #1
 8006fdc:	e000      	b.n	8006fe0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006fde:	2300      	movs	r3, #0
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3710      	adds	r7, #16
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}

08006fe8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fe8:	b084      	sub	sp, #16
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
 8006ff2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ff6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007002:	2300      	movs	r3, #0
 8007004:	613b      	str	r3, [r7, #16]
 8007006:	e009      	b.n	800701c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007008:	687a      	ldr	r2, [r7, #4]
 800700a:	693b      	ldr	r3, [r7, #16]
 800700c:	3340      	adds	r3, #64	; 0x40
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4413      	add	r3, r2
 8007012:	2200      	movs	r2, #0
 8007014:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007016:	693b      	ldr	r3, [r7, #16]
 8007018:	3301      	adds	r3, #1
 800701a:	613b      	str	r3, [r7, #16]
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2b0e      	cmp	r3, #14
 8007020:	d9f2      	bls.n	8007008 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007022:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007024:	2b00      	cmp	r3, #0
 8007026:	d11c      	bne.n	8007062 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800702e:	685b      	ldr	r3, [r3, #4]
 8007030:	68fa      	ldr	r2, [r7, #12]
 8007032:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007036:	f043 0302 	orr.w	r3, r3, #2
 800703a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007040:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007058:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	639a      	str	r2, [r3, #56]	; 0x38
 8007060:	e00b      	b.n	800707a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007066:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007072:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007080:	461a      	mov	r2, r3
 8007082:	2300      	movs	r3, #0
 8007084:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800708c:	4619      	mov	r1, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007094:	461a      	mov	r2, r3
 8007096:	680b      	ldr	r3, [r1, #0]
 8007098:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800709a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800709c:	2b01      	cmp	r3, #1
 800709e:	d10c      	bne.n	80070ba <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80070a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d104      	bne.n	80070b0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80070a6:	2100      	movs	r1, #0
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 f965 	bl	8007378 <USB_SetDevSpeed>
 80070ae:	e008      	b.n	80070c2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80070b0:	2101      	movs	r1, #1
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f000 f960 	bl	8007378 <USB_SetDevSpeed>
 80070b8:	e003      	b.n	80070c2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80070ba:	2103      	movs	r1, #3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f95b 	bl	8007378 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80070c2:	2110      	movs	r1, #16
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 f8f3 	bl	80072b0 <USB_FlushTxFifo>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d001      	beq.n	80070d4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f000 f91f 	bl	8007318 <USB_FlushRxFifo>
 80070da:	4603      	mov	r3, r0
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d001      	beq.n	80070e4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80070e0:	2301      	movs	r3, #1
 80070e2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070ea:	461a      	mov	r2, r3
 80070ec:	2300      	movs	r3, #0
 80070ee:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070f6:	461a      	mov	r2, r3
 80070f8:	2300      	movs	r3, #0
 80070fa:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007102:	461a      	mov	r2, r3
 8007104:	2300      	movs	r3, #0
 8007106:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007108:	2300      	movs	r3, #0
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	e043      	b.n	8007196 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800710e:	693b      	ldr	r3, [r7, #16]
 8007110:	015a      	lsls	r2, r3, #5
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007120:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007124:	d118      	bne.n	8007158 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d10a      	bne.n	8007142 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800712c:	693b      	ldr	r3, [r7, #16]
 800712e:	015a      	lsls	r2, r3, #5
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	4413      	add	r3, r2
 8007134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007138:	461a      	mov	r2, r3
 800713a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800713e:	6013      	str	r3, [r2, #0]
 8007140:	e013      	b.n	800716a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007142:	693b      	ldr	r3, [r7, #16]
 8007144:	015a      	lsls	r2, r3, #5
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4413      	add	r3, r2
 800714a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800714e:	461a      	mov	r2, r3
 8007150:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007154:	6013      	str	r3, [r2, #0]
 8007156:	e008      	b.n	800716a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007158:	693b      	ldr	r3, [r7, #16]
 800715a:	015a      	lsls	r2, r3, #5
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	4413      	add	r3, r2
 8007160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007164:	461a      	mov	r2, r3
 8007166:	2300      	movs	r3, #0
 8007168:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	015a      	lsls	r2, r3, #5
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	4413      	add	r3, r2
 8007172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007176:	461a      	mov	r2, r3
 8007178:	2300      	movs	r3, #0
 800717a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	015a      	lsls	r2, r3, #5
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	4413      	add	r3, r2
 8007184:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007188:	461a      	mov	r2, r3
 800718a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800718e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	3301      	adds	r3, #1
 8007194:	613b      	str	r3, [r7, #16]
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	693a      	ldr	r2, [r7, #16]
 800719a:	429a      	cmp	r2, r3
 800719c:	d3b7      	bcc.n	800710e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800719e:	2300      	movs	r3, #0
 80071a0:	613b      	str	r3, [r7, #16]
 80071a2:	e043      	b.n	800722c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	015a      	lsls	r2, r3, #5
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	4413      	add	r3, r2
 80071ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071ba:	d118      	bne.n	80071ee <USB_DevInit+0x206>
    {
      if (i == 0U)
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d10a      	bne.n	80071d8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	015a      	lsls	r2, r3, #5
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	4413      	add	r3, r2
 80071ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071ce:	461a      	mov	r2, r3
 80071d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071d4:	6013      	str	r3, [r2, #0]
 80071d6:	e013      	b.n	8007200 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	015a      	lsls	r2, r3, #5
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071e4:	461a      	mov	r2, r3
 80071e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071ea:	6013      	str	r3, [r2, #0]
 80071ec:	e008      	b.n	8007200 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	015a      	lsls	r2, r3, #5
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	4413      	add	r3, r2
 80071f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80071fa:	461a      	mov	r2, r3
 80071fc:	2300      	movs	r3, #0
 80071fe:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	015a      	lsls	r2, r3, #5
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	4413      	add	r3, r2
 8007208:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800720c:	461a      	mov	r2, r3
 800720e:	2300      	movs	r3, #0
 8007210:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	015a      	lsls	r2, r3, #5
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	4413      	add	r3, r2
 800721a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800721e:	461a      	mov	r2, r3
 8007220:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007224:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007226:	693b      	ldr	r3, [r7, #16]
 8007228:	3301      	adds	r3, #1
 800722a:	613b      	str	r3, [r7, #16]
 800722c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800722e:	693a      	ldr	r2, [r7, #16]
 8007230:	429a      	cmp	r2, r3
 8007232:	d3b7      	bcc.n	80071a4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800723a:	691b      	ldr	r3, [r3, #16]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007242:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007246:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2200      	movs	r2, #0
 800724c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007254:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007258:	2b00      	cmp	r3, #0
 800725a:	d105      	bne.n	8007268 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	699b      	ldr	r3, [r3, #24]
 8007260:	f043 0210 	orr.w	r2, r3, #16
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	699a      	ldr	r2, [r3, #24]
 800726c:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <USB_DevInit+0x2c4>)
 800726e:	4313      	orrs	r3, r2
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007274:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007276:	2b00      	cmp	r3, #0
 8007278:	d005      	beq.n	8007286 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699b      	ldr	r3, [r3, #24]
 800727e:	f043 0208 	orr.w	r2, r3, #8
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007288:	2b01      	cmp	r3, #1
 800728a:	d107      	bne.n	800729c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	699b      	ldr	r3, [r3, #24]
 8007290:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007294:	f043 0304 	orr.w	r3, r3, #4
 8007298:	687a      	ldr	r2, [r7, #4]
 800729a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800729c:	7dfb      	ldrb	r3, [r7, #23]
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3718      	adds	r7, #24
 80072a2:	46bd      	mov	sp, r7
 80072a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80072a8:	b004      	add	sp, #16
 80072aa:	4770      	bx	lr
 80072ac:	803c3800 	.word	0x803c3800

080072b0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80072b0:	b480      	push	{r7}
 80072b2:	b085      	sub	sp, #20
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
 80072b8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80072ba:	2300      	movs	r3, #0
 80072bc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	3301      	adds	r3, #1
 80072c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	4a13      	ldr	r2, [pc, #76]	; (8007314 <USB_FlushTxFifo+0x64>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d901      	bls.n	80072d0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80072cc:	2303      	movs	r3, #3
 80072ce:	e01b      	b.n	8007308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	daf2      	bge.n	80072be <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80072dc:	683b      	ldr	r3, [r7, #0]
 80072de:	019b      	lsls	r3, r3, #6
 80072e0:	f043 0220 	orr.w	r2, r3, #32
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	3301      	adds	r3, #1
 80072ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	4a08      	ldr	r2, [pc, #32]	; (8007314 <USB_FlushTxFifo+0x64>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d901      	bls.n	80072fa <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e006      	b.n	8007308 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	691b      	ldr	r3, [r3, #16]
 80072fe:	f003 0320 	and.w	r3, r3, #32
 8007302:	2b20      	cmp	r3, #32
 8007304:	d0f0      	beq.n	80072e8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8007306:	2300      	movs	r3, #0
}
 8007308:	4618      	mov	r0, r3
 800730a:	3714      	adds	r7, #20
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr
 8007314:	00030d40 	.word	0x00030d40

08007318 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8007318:	b480      	push	{r7}
 800731a:	b085      	sub	sp, #20
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	3301      	adds	r3, #1
 8007328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	4a11      	ldr	r2, [pc, #68]	; (8007374 <USB_FlushRxFifo+0x5c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d901      	bls.n	8007336 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007332:	2303      	movs	r3, #3
 8007334:	e018      	b.n	8007368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	691b      	ldr	r3, [r3, #16]
 800733a:	2b00      	cmp	r3, #0
 800733c:	daf2      	bge.n	8007324 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800733e:	2300      	movs	r3, #0
 8007340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	2210      	movs	r2, #16
 8007346:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	3301      	adds	r3, #1
 800734c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	4a08      	ldr	r2, [pc, #32]	; (8007374 <USB_FlushRxFifo+0x5c>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d901      	bls.n	800735a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007356:	2303      	movs	r3, #3
 8007358:	e006      	b.n	8007368 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	691b      	ldr	r3, [r3, #16]
 800735e:	f003 0310 	and.w	r3, r3, #16
 8007362:	2b10      	cmp	r3, #16
 8007364:	d0f0      	beq.n	8007348 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007366:	2300      	movs	r3, #0
}
 8007368:	4618      	mov	r0, r3
 800736a:	3714      	adds	r7, #20
 800736c:	46bd      	mov	sp, r7
 800736e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007372:	4770      	bx	lr
 8007374:	00030d40 	.word	0x00030d40

08007378 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007378:	b480      	push	{r7}
 800737a:	b085      	sub	sp, #20
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	460b      	mov	r3, r1
 8007382:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800738e:	681a      	ldr	r2, [r3, #0]
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	68f9      	ldr	r1, [r7, #12]
 8007394:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007398:	4313      	orrs	r3, r2
 800739a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr

080073aa <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80073aa:	b480      	push	{r7}
 80073ac:	b085      	sub	sp, #20
 80073ae:	af00      	add	r7, sp, #0
 80073b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	68fa      	ldr	r2, [r7, #12]
 80073c0:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80073c4:	f023 0303 	bic.w	r3, r3, #3
 80073c8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	68fa      	ldr	r2, [r7, #12]
 80073d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80073d8:	f043 0302 	orr.w	r3, r3, #2
 80073dc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80073de:	2300      	movs	r3, #0
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3714      	adds	r7, #20
 80073e4:	46bd      	mov	sp, r7
 80073e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ea:	4770      	bx	lr

080073ec <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b083      	sub	sp, #12
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	f003 0301 	and.w	r3, r3, #1
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	370c      	adds	r7, #12
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007410:	2300      	movs	r3, #0
 8007412:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	3301      	adds	r3, #1
 8007418:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a13      	ldr	r2, [pc, #76]	; (800746c <USB_CoreReset+0x64>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d901      	bls.n	8007426 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007422:	2303      	movs	r3, #3
 8007424:	e01b      	b.n	800745e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	daf2      	bge.n	8007414 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800742e:	2300      	movs	r3, #0
 8007430:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	691b      	ldr	r3, [r3, #16]
 8007436:	f043 0201 	orr.w	r2, r3, #1
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	3301      	adds	r3, #1
 8007442:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	4a09      	ldr	r2, [pc, #36]	; (800746c <USB_CoreReset+0x64>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d901      	bls.n	8007450 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800744c:	2303      	movs	r3, #3
 800744e:	e006      	b.n	800745e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	691b      	ldr	r3, [r3, #16]
 8007454:	f003 0301 	and.w	r3, r3, #1
 8007458:	2b01      	cmp	r3, #1
 800745a:	d0f0      	beq.n	800743e <USB_CoreReset+0x36>

  return HAL_OK;
 800745c:	2300      	movs	r3, #0
}
 800745e:	4618      	mov	r0, r3
 8007460:	3714      	adds	r7, #20
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	00030d40 	.word	0x00030d40

08007470 <__NVIC_SetPriority>:
{
 8007470:	b480      	push	{r7}
 8007472:	b083      	sub	sp, #12
 8007474:	af00      	add	r7, sp, #0
 8007476:	4603      	mov	r3, r0
 8007478:	6039      	str	r1, [r7, #0]
 800747a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800747c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007480:	2b00      	cmp	r3, #0
 8007482:	db0a      	blt.n	800749a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007484:	683b      	ldr	r3, [r7, #0]
 8007486:	b2da      	uxtb	r2, r3
 8007488:	490c      	ldr	r1, [pc, #48]	; (80074bc <__NVIC_SetPriority+0x4c>)
 800748a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800748e:	0112      	lsls	r2, r2, #4
 8007490:	b2d2      	uxtb	r2, r2
 8007492:	440b      	add	r3, r1
 8007494:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007498:	e00a      	b.n	80074b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	4908      	ldr	r1, [pc, #32]	; (80074c0 <__NVIC_SetPriority+0x50>)
 80074a0:	79fb      	ldrb	r3, [r7, #7]
 80074a2:	f003 030f 	and.w	r3, r3, #15
 80074a6:	3b04      	subs	r3, #4
 80074a8:	0112      	lsls	r2, r2, #4
 80074aa:	b2d2      	uxtb	r2, r2
 80074ac:	440b      	add	r3, r1
 80074ae:	761a      	strb	r2, [r3, #24]
}
 80074b0:	bf00      	nop
 80074b2:	370c      	adds	r7, #12
 80074b4:	46bd      	mov	sp, r7
 80074b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ba:	4770      	bx	lr
 80074bc:	e000e100 	.word	0xe000e100
 80074c0:	e000ed00 	.word	0xe000ed00

080074c4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80074c8:	4b05      	ldr	r3, [pc, #20]	; (80074e0 <SysTick_Handler+0x1c>)
 80074ca:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80074cc:	f001 fd5e 	bl	8008f8c <xTaskGetSchedulerState>
 80074d0:	4603      	mov	r3, r0
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d001      	beq.n	80074da <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80074d6:	f002 fb47 	bl	8009b68 <xPortSysTickHandler>
  }
}
 80074da:	bf00      	nop
 80074dc:	bd80      	pop	{r7, pc}
 80074de:	bf00      	nop
 80074e0:	e000e010 	.word	0xe000e010

080074e4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80074e4:	b580      	push	{r7, lr}
 80074e6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80074e8:	2100      	movs	r1, #0
 80074ea:	f06f 0004 	mvn.w	r0, #4
 80074ee:	f7ff ffbf 	bl	8007470 <__NVIC_SetPriority>
#endif
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80074f8:	b480      	push	{r7}
 80074fa:	b083      	sub	sp, #12
 80074fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80074fe:	f3ef 8305 	mrs	r3, IPSR
 8007502:	603b      	str	r3, [r7, #0]
  return(result);
 8007504:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007506:	2b00      	cmp	r3, #0
 8007508:	d003      	beq.n	8007512 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800750a:	f06f 0305 	mvn.w	r3, #5
 800750e:	607b      	str	r3, [r7, #4]
 8007510:	e00c      	b.n	800752c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007512:	4b0a      	ldr	r3, [pc, #40]	; (800753c <osKernelInitialize+0x44>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800751a:	4b08      	ldr	r3, [pc, #32]	; (800753c <osKernelInitialize+0x44>)
 800751c:	2201      	movs	r2, #1
 800751e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007520:	2300      	movs	r3, #0
 8007522:	607b      	str	r3, [r7, #4]
 8007524:	e002      	b.n	800752c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800752a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800752c:	687b      	ldr	r3, [r7, #4]
}
 800752e:	4618      	mov	r0, r3
 8007530:	370c      	adds	r7, #12
 8007532:	46bd      	mov	sp, r7
 8007534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007538:	4770      	bx	lr
 800753a:	bf00      	nop
 800753c:	20008a0c 	.word	0x20008a0c

08007540 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007540:	b580      	push	{r7, lr}
 8007542:	b082      	sub	sp, #8
 8007544:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007546:	f3ef 8305 	mrs	r3, IPSR
 800754a:	603b      	str	r3, [r7, #0]
  return(result);
 800754c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <osKernelStart+0x1a>
    stat = osErrorISR;
 8007552:	f06f 0305 	mvn.w	r3, #5
 8007556:	607b      	str	r3, [r7, #4]
 8007558:	e010      	b.n	800757c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800755a:	4b0b      	ldr	r3, [pc, #44]	; (8007588 <osKernelStart+0x48>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2b01      	cmp	r3, #1
 8007560:	d109      	bne.n	8007576 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007562:	f7ff ffbf 	bl	80074e4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007566:	4b08      	ldr	r3, [pc, #32]	; (8007588 <osKernelStart+0x48>)
 8007568:	2202      	movs	r2, #2
 800756a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800756c:	f001 f8a0 	bl	80086b0 <vTaskStartScheduler>
      stat = osOK;
 8007570:	2300      	movs	r3, #0
 8007572:	607b      	str	r3, [r7, #4]
 8007574:	e002      	b.n	800757c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007576:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800757a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800757c:	687b      	ldr	r3, [r7, #4]
}
 800757e:	4618      	mov	r0, r3
 8007580:	3708      	adds	r7, #8
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}
 8007586:	bf00      	nop
 8007588:	20008a0c 	.word	0x20008a0c

0800758c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800758c:	b580      	push	{r7, lr}
 800758e:	b08e      	sub	sp, #56	; 0x38
 8007590:	af04      	add	r7, sp, #16
 8007592:	60f8      	str	r0, [r7, #12]
 8007594:	60b9      	str	r1, [r7, #8]
 8007596:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007598:	2300      	movs	r3, #0
 800759a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800759c:	f3ef 8305 	mrs	r3, IPSR
 80075a0:	617b      	str	r3, [r7, #20]
  return(result);
 80075a2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d17e      	bne.n	80076a6 <osThreadNew+0x11a>
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d07b      	beq.n	80076a6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80075ae:	2380      	movs	r3, #128	; 0x80
 80075b0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80075b2:	2318      	movs	r3, #24
 80075b4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80075b6:	2300      	movs	r3, #0
 80075b8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80075be:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d045      	beq.n	8007652 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d002      	beq.n	80075d4 <osThreadNew+0x48>
        name = attr->name;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	699b      	ldr	r3, [r3, #24]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d002      	beq.n	80075e2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	699b      	ldr	r3, [r3, #24]
 80075e0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d008      	beq.n	80075fa <osThreadNew+0x6e>
 80075e8:	69fb      	ldr	r3, [r7, #28]
 80075ea:	2b38      	cmp	r3, #56	; 0x38
 80075ec:	d805      	bhi.n	80075fa <osThreadNew+0x6e>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f003 0301 	and.w	r3, r3, #1
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d001      	beq.n	80075fe <osThreadNew+0x72>
        return (NULL);
 80075fa:	2300      	movs	r3, #0
 80075fc:	e054      	b.n	80076a8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	695b      	ldr	r3, [r3, #20]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d003      	beq.n	800760e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	089b      	lsrs	r3, r3, #2
 800760c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	689b      	ldr	r3, [r3, #8]
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00e      	beq.n	8007634 <osThreadNew+0xa8>
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	2b5b      	cmp	r3, #91	; 0x5b
 800761c:	d90a      	bls.n	8007634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007622:	2b00      	cmp	r3, #0
 8007624:	d006      	beq.n	8007634 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	695b      	ldr	r3, [r3, #20]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d002      	beq.n	8007634 <osThreadNew+0xa8>
        mem = 1;
 800762e:	2301      	movs	r3, #1
 8007630:	61bb      	str	r3, [r7, #24]
 8007632:	e010      	b.n	8007656 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	689b      	ldr	r3, [r3, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10c      	bne.n	8007656 <osThreadNew+0xca>
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d108      	bne.n	8007656 <osThreadNew+0xca>
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	691b      	ldr	r3, [r3, #16]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d104      	bne.n	8007656 <osThreadNew+0xca>
          mem = 0;
 800764c:	2300      	movs	r3, #0
 800764e:	61bb      	str	r3, [r7, #24]
 8007650:	e001      	b.n	8007656 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007652:	2300      	movs	r3, #0
 8007654:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	2b01      	cmp	r3, #1
 800765a:	d110      	bne.n	800767e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007660:	687a      	ldr	r2, [r7, #4]
 8007662:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007664:	9202      	str	r2, [sp, #8]
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	69fb      	ldr	r3, [r7, #28]
 800766a:	9300      	str	r3, [sp, #0]
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6a3a      	ldr	r2, [r7, #32]
 8007670:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f000 fe46 	bl	8008304 <xTaskCreateStatic>
 8007678:	4603      	mov	r3, r0
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	e013      	b.n	80076a6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800767e:	69bb      	ldr	r3, [r7, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d110      	bne.n	80076a6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	b29a      	uxth	r2, r3
 8007688:	f107 0310 	add.w	r3, r7, #16
 800768c:	9301      	str	r3, [sp, #4]
 800768e:	69fb      	ldr	r3, [r7, #28]
 8007690:	9300      	str	r3, [sp, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007696:	68f8      	ldr	r0, [r7, #12]
 8007698:	f000 fe91 	bl	80083be <xTaskCreate>
 800769c:	4603      	mov	r3, r0
 800769e:	2b01      	cmp	r3, #1
 80076a0:	d001      	beq.n	80076a6 <osThreadNew+0x11a>
            hTask = NULL;
 80076a2:	2300      	movs	r3, #0
 80076a4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80076a6:	693b      	ldr	r3, [r7, #16]
}
 80076a8:	4618      	mov	r0, r3
 80076aa:	3728      	adds	r7, #40	; 0x28
 80076ac:	46bd      	mov	sp, r7
 80076ae:	bd80      	pop	{r7, pc}

080076b0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80076b0:	b580      	push	{r7, lr}
 80076b2:	b084      	sub	sp, #16
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80076b8:	f3ef 8305 	mrs	r3, IPSR
 80076bc:	60bb      	str	r3, [r7, #8]
  return(result);
 80076be:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d003      	beq.n	80076cc <osDelay+0x1c>
    stat = osErrorISR;
 80076c4:	f06f 0305 	mvn.w	r3, #5
 80076c8:	60fb      	str	r3, [r7, #12]
 80076ca:	e007      	b.n	80076dc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d002      	beq.n	80076dc <osDelay+0x2c>
      vTaskDelay(ticks);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 ffb6 	bl	8008648 <vTaskDelay>
    }
  }

  return (stat);
 80076dc:	68fb      	ldr	r3, [r7, #12]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
	...

080076e8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80076e8:	b480      	push	{r7}
 80076ea:	b085      	sub	sp, #20
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	60f8      	str	r0, [r7, #12]
 80076f0:	60b9      	str	r1, [r7, #8]
 80076f2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	4a07      	ldr	r2, [pc, #28]	; (8007714 <vApplicationGetIdleTaskMemory+0x2c>)
 80076f8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80076fa:	68bb      	ldr	r3, [r7, #8]
 80076fc:	4a06      	ldr	r2, [pc, #24]	; (8007718 <vApplicationGetIdleTaskMemory+0x30>)
 80076fe:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	2280      	movs	r2, #128	; 0x80
 8007704:	601a      	str	r2, [r3, #0]
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20008a10 	.word	0x20008a10
 8007718:	20008a6c 	.word	0x20008a6c

0800771c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800771c:	b480      	push	{r7}
 800771e:	b085      	sub	sp, #20
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	4a07      	ldr	r2, [pc, #28]	; (8007748 <vApplicationGetTimerTaskMemory+0x2c>)
 800772c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	4a06      	ldr	r2, [pc, #24]	; (800774c <vApplicationGetTimerTaskMemory+0x30>)
 8007732:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800773a:	601a      	str	r2, [r3, #0]
}
 800773c:	bf00      	nop
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr
 8007748:	20008c6c 	.word	0x20008c6c
 800774c:	20008cc8 	.word	0x20008cc8

08007750 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f103 0208 	add.w	r2, r3, #8
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007768:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f103 0208 	add.w	r2, r3, #8
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f103 0208 	add.w	r2, r3, #8
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	2200      	movs	r2, #0
 800779c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800779e:	bf00      	nop
 80077a0:	370c      	adds	r7, #12
 80077a2:	46bd      	mov	sp, r7
 80077a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a8:	4770      	bx	lr

080077aa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077aa:	b480      	push	{r7}
 80077ac:	b085      	sub	sp, #20
 80077ae:	af00      	add	r7, sp, #0
 80077b0:	6078      	str	r0, [r7, #4]
 80077b2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689a      	ldr	r2, [r3, #8]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	689b      	ldr	r3, [r3, #8]
 80077cc:	683a      	ldr	r2, [r7, #0]
 80077ce:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	683a      	ldr	r2, [r7, #0]
 80077d4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	687a      	ldr	r2, [r7, #4]
 80077da:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	1c5a      	adds	r2, r3, #1
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	601a      	str	r2, [r3, #0]
}
 80077e6:	bf00      	nop
 80077e8:	3714      	adds	r7, #20
 80077ea:	46bd      	mov	sp, r7
 80077ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f0:	4770      	bx	lr

080077f2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80077f2:	b480      	push	{r7}
 80077f4:	b085      	sub	sp, #20
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	6078      	str	r0, [r7, #4]
 80077fa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007802:	68bb      	ldr	r3, [r7, #8]
 8007804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007808:	d103      	bne.n	8007812 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	60fb      	str	r3, [r7, #12]
 8007810:	e00c      	b.n	800782c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	3308      	adds	r3, #8
 8007816:	60fb      	str	r3, [r7, #12]
 8007818:	e002      	b.n	8007820 <vListInsert+0x2e>
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	685b      	ldr	r3, [r3, #4]
 800781e:	60fb      	str	r3, [r7, #12]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68ba      	ldr	r2, [r7, #8]
 8007828:	429a      	cmp	r2, r3
 800782a:	d2f6      	bcs.n	800781a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	685a      	ldr	r2, [r3, #4]
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800783c:	683b      	ldr	r3, [r7, #0]
 800783e:	68fa      	ldr	r2, [r7, #12]
 8007840:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	683a      	ldr	r2, [r7, #0]
 8007846:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	687a      	ldr	r2, [r7, #4]
 800784c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	1c5a      	adds	r2, r3, #1
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	601a      	str	r2, [r3, #0]
}
 8007858:	bf00      	nop
 800785a:	3714      	adds	r7, #20
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr

08007864 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007864:	b480      	push	{r7}
 8007866:	b085      	sub	sp, #20
 8007868:	af00      	add	r7, sp, #0
 800786a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	691b      	ldr	r3, [r3, #16]
 8007870:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	685b      	ldr	r3, [r3, #4]
 8007876:	687a      	ldr	r2, [r7, #4]
 8007878:	6892      	ldr	r2, [r2, #8]
 800787a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	689b      	ldr	r3, [r3, #8]
 8007880:	687a      	ldr	r2, [r7, #4]
 8007882:	6852      	ldr	r2, [r2, #4]
 8007884:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	685b      	ldr	r3, [r3, #4]
 800788a:	687a      	ldr	r2, [r7, #4]
 800788c:	429a      	cmp	r2, r3
 800788e:	d103      	bne.n	8007898 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	1e5a      	subs	r2, r3, #1
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
}
 80078ac:	4618      	mov	r0, r3
 80078ae:	3714      	adds	r7, #20
 80078b0:	46bd      	mov	sp, r7
 80078b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b6:	4770      	bx	lr

080078b8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b084      	sub	sp, #16
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
 80078c0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d10a      	bne.n	80078e2 <xQueueGenericReset+0x2a>
	__asm volatile
 80078cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d0:	f383 8811 	msr	BASEPRI, r3
 80078d4:	f3bf 8f6f 	isb	sy
 80078d8:	f3bf 8f4f 	dsb	sy
 80078dc:	60bb      	str	r3, [r7, #8]
}
 80078de:	bf00      	nop
 80078e0:	e7fe      	b.n	80078e0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80078e2:	f002 f8af 	bl	8009a44 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80078ee:	68f9      	ldr	r1, [r7, #12]
 80078f0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80078f2:	fb01 f303 	mul.w	r3, r1, r3
 80078f6:	441a      	add	r2, r3
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681a      	ldr	r2, [r3, #0]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007912:	3b01      	subs	r3, #1
 8007914:	68f9      	ldr	r1, [r7, #12]
 8007916:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007918:	fb01 f303 	mul.w	r3, r1, r3
 800791c:	441a      	add	r2, r3
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	22ff      	movs	r2, #255	; 0xff
 8007926:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	; 0xff
 800792e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d114      	bne.n	8007962 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	691b      	ldr	r3, [r3, #16]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d01a      	beq.n	8007976 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	3310      	adds	r3, #16
 8007944:	4618      	mov	r0, r3
 8007946:	f001 f93d 	bl	8008bc4 <xTaskRemoveFromEventList>
 800794a:	4603      	mov	r3, r0
 800794c:	2b00      	cmp	r3, #0
 800794e:	d012      	beq.n	8007976 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007950:	4b0c      	ldr	r3, [pc, #48]	; (8007984 <xQueueGenericReset+0xcc>)
 8007952:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007956:	601a      	str	r2, [r3, #0]
 8007958:	f3bf 8f4f 	dsb	sy
 800795c:	f3bf 8f6f 	isb	sy
 8007960:	e009      	b.n	8007976 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3310      	adds	r3, #16
 8007966:	4618      	mov	r0, r3
 8007968:	f7ff fef2 	bl	8007750 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	3324      	adds	r3, #36	; 0x24
 8007970:	4618      	mov	r0, r3
 8007972:	f7ff feed 	bl	8007750 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007976:	f002 f895 	bl	8009aa4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800797a:	2301      	movs	r3, #1
}
 800797c:	4618      	mov	r0, r3
 800797e:	3710      	adds	r7, #16
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}
 8007984:	e000ed04 	.word	0xe000ed04

08007988 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007988:	b580      	push	{r7, lr}
 800798a:	b08e      	sub	sp, #56	; 0x38
 800798c:	af02      	add	r7, sp, #8
 800798e:	60f8      	str	r0, [r7, #12]
 8007990:	60b9      	str	r1, [r7, #8]
 8007992:	607a      	str	r2, [r7, #4]
 8007994:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d10a      	bne.n	80079b2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800799c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079a0:	f383 8811 	msr	BASEPRI, r3
 80079a4:	f3bf 8f6f 	isb	sy
 80079a8:	f3bf 8f4f 	dsb	sy
 80079ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80079ae:	bf00      	nop
 80079b0:	e7fe      	b.n	80079b0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d10a      	bne.n	80079ce <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80079b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079bc:	f383 8811 	msr	BASEPRI, r3
 80079c0:	f3bf 8f6f 	isb	sy
 80079c4:	f3bf 8f4f 	dsb	sy
 80079c8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80079ca:	bf00      	nop
 80079cc:	e7fe      	b.n	80079cc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d002      	beq.n	80079da <xQueueGenericCreateStatic+0x52>
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <xQueueGenericCreateStatic+0x56>
 80079da:	2301      	movs	r3, #1
 80079dc:	e000      	b.n	80079e0 <xQueueGenericCreateStatic+0x58>
 80079de:	2300      	movs	r3, #0
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10a      	bne.n	80079fa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80079e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e8:	f383 8811 	msr	BASEPRI, r3
 80079ec:	f3bf 8f6f 	isb	sy
 80079f0:	f3bf 8f4f 	dsb	sy
 80079f4:	623b      	str	r3, [r7, #32]
}
 80079f6:	bf00      	nop
 80079f8:	e7fe      	b.n	80079f8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d102      	bne.n	8007a06 <xQueueGenericCreateStatic+0x7e>
 8007a00:	68bb      	ldr	r3, [r7, #8]
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d101      	bne.n	8007a0a <xQueueGenericCreateStatic+0x82>
 8007a06:	2301      	movs	r3, #1
 8007a08:	e000      	b.n	8007a0c <xQueueGenericCreateStatic+0x84>
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d10a      	bne.n	8007a26 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a14:	f383 8811 	msr	BASEPRI, r3
 8007a18:	f3bf 8f6f 	isb	sy
 8007a1c:	f3bf 8f4f 	dsb	sy
 8007a20:	61fb      	str	r3, [r7, #28]
}
 8007a22:	bf00      	nop
 8007a24:	e7fe      	b.n	8007a24 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007a26:	2350      	movs	r3, #80	; 0x50
 8007a28:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007a2a:	697b      	ldr	r3, [r7, #20]
 8007a2c:	2b50      	cmp	r3, #80	; 0x50
 8007a2e:	d00a      	beq.n	8007a46 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a34:	f383 8811 	msr	BASEPRI, r3
 8007a38:	f3bf 8f6f 	isb	sy
 8007a3c:	f3bf 8f4f 	dsb	sy
 8007a40:	61bb      	str	r3, [r7, #24]
}
 8007a42:	bf00      	nop
 8007a44:	e7fe      	b.n	8007a44 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007a46:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d00d      	beq.n	8007a6e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007a52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007a5a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a60:	9300      	str	r3, [sp, #0]
 8007a62:	4613      	mov	r3, r2
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	68b9      	ldr	r1, [r7, #8]
 8007a68:	68f8      	ldr	r0, [r7, #12]
 8007a6a:	f000 f83f 	bl	8007aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007a6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007a70:	4618      	mov	r0, r3
 8007a72:	3730      	adds	r7, #48	; 0x30
 8007a74:	46bd      	mov	sp, r7
 8007a76:	bd80      	pop	{r7, pc}

08007a78 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b08a      	sub	sp, #40	; 0x28
 8007a7c:	af02      	add	r7, sp, #8
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	4613      	mov	r3, r2
 8007a84:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d10a      	bne.n	8007aa2 <xQueueGenericCreate+0x2a>
	__asm volatile
 8007a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a90:	f383 8811 	msr	BASEPRI, r3
 8007a94:	f3bf 8f6f 	isb	sy
 8007a98:	f3bf 8f4f 	dsb	sy
 8007a9c:	613b      	str	r3, [r7, #16]
}
 8007a9e:	bf00      	nop
 8007aa0:	e7fe      	b.n	8007aa0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	68ba      	ldr	r2, [r7, #8]
 8007aa6:	fb02 f303 	mul.w	r3, r2, r3
 8007aaa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007aac:	69fb      	ldr	r3, [r7, #28]
 8007aae:	3350      	adds	r3, #80	; 0x50
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f002 f8e9 	bl	8009c88 <pvPortMalloc>
 8007ab6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d011      	beq.n	8007ae2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	3350      	adds	r3, #80	; 0x50
 8007ac6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2200      	movs	r2, #0
 8007acc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ad0:	79fa      	ldrb	r2, [r7, #7]
 8007ad2:	69bb      	ldr	r3, [r7, #24]
 8007ad4:	9300      	str	r3, [sp, #0]
 8007ad6:	4613      	mov	r3, r2
 8007ad8:	697a      	ldr	r2, [r7, #20]
 8007ada:	68b9      	ldr	r1, [r7, #8]
 8007adc:	68f8      	ldr	r0, [r7, #12]
 8007ade:	f000 f805 	bl	8007aec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007ae2:	69bb      	ldr	r3, [r7, #24]
	}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3720      	adds	r7, #32
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	60f8      	str	r0, [r7, #12]
 8007af4:	60b9      	str	r1, [r7, #8]
 8007af6:	607a      	str	r2, [r7, #4]
 8007af8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007afa:	68bb      	ldr	r3, [r7, #8]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d103      	bne.n	8007b08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007b00:	69bb      	ldr	r3, [r7, #24]
 8007b02:	69ba      	ldr	r2, [r7, #24]
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	e002      	b.n	8007b0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	687a      	ldr	r2, [r7, #4]
 8007b0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007b0e:	69bb      	ldr	r3, [r7, #24]
 8007b10:	68fa      	ldr	r2, [r7, #12]
 8007b12:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007b14:	69bb      	ldr	r3, [r7, #24]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007b1a:	2101      	movs	r1, #1
 8007b1c:	69b8      	ldr	r0, [r7, #24]
 8007b1e:	f7ff fecb 	bl	80078b8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	78fa      	ldrb	r2, [r7, #3]
 8007b26:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007b2a:	bf00      	nop
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
	...

08007b34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b08e      	sub	sp, #56	; 0x38
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	60f8      	str	r0, [r7, #12]
 8007b3c:	60b9      	str	r1, [r7, #8]
 8007b3e:	607a      	str	r2, [r7, #4]
 8007b40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007b42:	2300      	movs	r3, #0
 8007b44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	d10a      	bne.n	8007b66 <xQueueGenericSend+0x32>
	__asm volatile
 8007b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b54:	f383 8811 	msr	BASEPRI, r3
 8007b58:	f3bf 8f6f 	isb	sy
 8007b5c:	f3bf 8f4f 	dsb	sy
 8007b60:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007b62:	bf00      	nop
 8007b64:	e7fe      	b.n	8007b64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d103      	bne.n	8007b74 <xQueueGenericSend+0x40>
 8007b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	d101      	bne.n	8007b78 <xQueueGenericSend+0x44>
 8007b74:	2301      	movs	r3, #1
 8007b76:	e000      	b.n	8007b7a <xQueueGenericSend+0x46>
 8007b78:	2300      	movs	r3, #0
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d10a      	bne.n	8007b94 <xQueueGenericSend+0x60>
	__asm volatile
 8007b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b82:	f383 8811 	msr	BASEPRI, r3
 8007b86:	f3bf 8f6f 	isb	sy
 8007b8a:	f3bf 8f4f 	dsb	sy
 8007b8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007b90:	bf00      	nop
 8007b92:	e7fe      	b.n	8007b92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d103      	bne.n	8007ba2 <xQueueGenericSend+0x6e>
 8007b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <xQueueGenericSend+0x72>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	e000      	b.n	8007ba8 <xQueueGenericSend+0x74>
 8007ba6:	2300      	movs	r3, #0
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d10a      	bne.n	8007bc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8007bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bb0:	f383 8811 	msr	BASEPRI, r3
 8007bb4:	f3bf 8f6f 	isb	sy
 8007bb8:	f3bf 8f4f 	dsb	sy
 8007bbc:	623b      	str	r3, [r7, #32]
}
 8007bbe:	bf00      	nop
 8007bc0:	e7fe      	b.n	8007bc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007bc2:	f001 f9e3 	bl	8008f8c <xTaskGetSchedulerState>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d102      	bne.n	8007bd2 <xQueueGenericSend+0x9e>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d101      	bne.n	8007bd6 <xQueueGenericSend+0xa2>
 8007bd2:	2301      	movs	r3, #1
 8007bd4:	e000      	b.n	8007bd8 <xQueueGenericSend+0xa4>
 8007bd6:	2300      	movs	r3, #0
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d10a      	bne.n	8007bf2 <xQueueGenericSend+0xbe>
	__asm volatile
 8007bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007be0:	f383 8811 	msr	BASEPRI, r3
 8007be4:	f3bf 8f6f 	isb	sy
 8007be8:	f3bf 8f4f 	dsb	sy
 8007bec:	61fb      	str	r3, [r7, #28]
}
 8007bee:	bf00      	nop
 8007bf0:	e7fe      	b.n	8007bf0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007bf2:	f001 ff27 	bl	8009a44 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bf8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007bfe:	429a      	cmp	r2, r3
 8007c00:	d302      	bcc.n	8007c08 <xQueueGenericSend+0xd4>
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d129      	bne.n	8007c5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007c08:	683a      	ldr	r2, [r7, #0]
 8007c0a:	68b9      	ldr	r1, [r7, #8]
 8007c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007c0e:	f000 fa0b 	bl	8008028 <prvCopyDataToQueue>
 8007c12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d010      	beq.n	8007c3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c1e:	3324      	adds	r3, #36	; 0x24
 8007c20:	4618      	mov	r0, r3
 8007c22:	f000 ffcf 	bl	8008bc4 <xTaskRemoveFromEventList>
 8007c26:	4603      	mov	r3, r0
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d013      	beq.n	8007c54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007c2c:	4b3f      	ldr	r3, [pc, #252]	; (8007d2c <xQueueGenericSend+0x1f8>)
 8007c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c32:	601a      	str	r2, [r3, #0]
 8007c34:	f3bf 8f4f 	dsb	sy
 8007c38:	f3bf 8f6f 	isb	sy
 8007c3c:	e00a      	b.n	8007c54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d007      	beq.n	8007c54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007c44:	4b39      	ldr	r3, [pc, #228]	; (8007d2c <xQueueGenericSend+0x1f8>)
 8007c46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007c4a:	601a      	str	r2, [r3, #0]
 8007c4c:	f3bf 8f4f 	dsb	sy
 8007c50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007c54:	f001 ff26 	bl	8009aa4 <vPortExitCritical>
				return pdPASS;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	e063      	b.n	8007d24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d103      	bne.n	8007c6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007c62:	f001 ff1f 	bl	8009aa4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007c66:	2300      	movs	r3, #0
 8007c68:	e05c      	b.n	8007d24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c6c:	2b00      	cmp	r3, #0
 8007c6e:	d106      	bne.n	8007c7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007c70:	f107 0314 	add.w	r3, r7, #20
 8007c74:	4618      	mov	r0, r3
 8007c76:	f001 f82f 	bl	8008cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007c7e:	f001 ff11 	bl	8009aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007c82:	f000 fd7b 	bl	800877c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007c86:	f001 fedd 	bl	8009a44 <vPortEnterCritical>
 8007c8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007c90:	b25b      	sxtb	r3, r3
 8007c92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007c96:	d103      	bne.n	8007ca0 <xQueueGenericSend+0x16c>
 8007c98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ca0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007ca6:	b25b      	sxtb	r3, r3
 8007ca8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007cac:	d103      	bne.n	8007cb6 <xQueueGenericSend+0x182>
 8007cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007cb6:	f001 fef5 	bl	8009aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007cba:	1d3a      	adds	r2, r7, #4
 8007cbc:	f107 0314 	add.w	r3, r7, #20
 8007cc0:	4611      	mov	r1, r2
 8007cc2:	4618      	mov	r0, r3
 8007cc4:	f001 f81e 	bl	8008d04 <xTaskCheckForTimeOut>
 8007cc8:	4603      	mov	r3, r0
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d124      	bne.n	8007d18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8007cce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cd0:	f000 faa2 	bl	8008218 <prvIsQueueFull>
 8007cd4:	4603      	mov	r3, r0
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d018      	beq.n	8007d0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8007cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007cdc:	3310      	adds	r3, #16
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	4611      	mov	r1, r2
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f000 ff1e 	bl	8008b24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8007ce8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007cea:	f000 fa2d 	bl	8008148 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8007cee:	f000 fd53 	bl	8008798 <xTaskResumeAll>
 8007cf2:	4603      	mov	r3, r0
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	f47f af7c 	bne.w	8007bf2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8007cfa:	4b0c      	ldr	r3, [pc, #48]	; (8007d2c <xQueueGenericSend+0x1f8>)
 8007cfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d00:	601a      	str	r2, [r3, #0]
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	f3bf 8f6f 	isb	sy
 8007d0a:	e772      	b.n	8007bf2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8007d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d0e:	f000 fa1b 	bl	8008148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007d12:	f000 fd41 	bl	8008798 <xTaskResumeAll>
 8007d16:	e76c      	b.n	8007bf2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8007d18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007d1a:	f000 fa15 	bl	8008148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8007d1e:	f000 fd3b 	bl	8008798 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8007d22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3738      	adds	r7, #56	; 0x38
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}
 8007d2c:	e000ed04 	.word	0xe000ed04

08007d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b090      	sub	sp, #64	; 0x40
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	60f8      	str	r0, [r7, #12]
 8007d38:	60b9      	str	r1, [r7, #8]
 8007d3a:	607a      	str	r2, [r7, #4]
 8007d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8007d42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d10a      	bne.n	8007d5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8007d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d4c:	f383 8811 	msr	BASEPRI, r3
 8007d50:	f3bf 8f6f 	isb	sy
 8007d54:	f3bf 8f4f 	dsb	sy
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d5a:	bf00      	nop
 8007d5c:	e7fe      	b.n	8007d5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d103      	bne.n	8007d6c <xQueueGenericSendFromISR+0x3c>
 8007d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d101      	bne.n	8007d70 <xQueueGenericSendFromISR+0x40>
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <xQueueGenericSendFromISR+0x42>
 8007d70:	2300      	movs	r3, #0
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d10a      	bne.n	8007d8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007d88:	bf00      	nop
 8007d8a:	e7fe      	b.n	8007d8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b02      	cmp	r3, #2
 8007d90:	d103      	bne.n	8007d9a <xQueueGenericSendFromISR+0x6a>
 8007d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007d96:	2b01      	cmp	r3, #1
 8007d98:	d101      	bne.n	8007d9e <xQueueGenericSendFromISR+0x6e>
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e000      	b.n	8007da0 <xQueueGenericSendFromISR+0x70>
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d10a      	bne.n	8007dba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8007da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da8:	f383 8811 	msr	BASEPRI, r3
 8007dac:	f3bf 8f6f 	isb	sy
 8007db0:	f3bf 8f4f 	dsb	sy
 8007db4:	623b      	str	r3, [r7, #32]
}
 8007db6:	bf00      	nop
 8007db8:	e7fe      	b.n	8007db8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007dba:	f001 ff25 	bl	8009c08 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8007dbe:	f3ef 8211 	mrs	r2, BASEPRI
 8007dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc6:	f383 8811 	msr	BASEPRI, r3
 8007dca:	f3bf 8f6f 	isb	sy
 8007dce:	f3bf 8f4f 	dsb	sy
 8007dd2:	61fa      	str	r2, [r7, #28]
 8007dd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8007dd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007dd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d302      	bcc.n	8007dec <xQueueGenericSendFromISR+0xbc>
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d12f      	bne.n	8007e4c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8007dec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007df2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007dfc:	683a      	ldr	r2, [r7, #0]
 8007dfe:	68b9      	ldr	r1, [r7, #8]
 8007e00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8007e02:	f000 f911 	bl	8008028 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8007e06:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8007e0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007e0e:	d112      	bne.n	8007e36 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d016      	beq.n	8007e46 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007e18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e1a:	3324      	adds	r3, #36	; 0x24
 8007e1c:	4618      	mov	r0, r3
 8007e1e:	f000 fed1 	bl	8008bc4 <xTaskRemoveFromEventList>
 8007e22:	4603      	mov	r3, r0
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d00e      	beq.n	8007e46 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d00b      	beq.n	8007e46 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
 8007e34:	e007      	b.n	8007e46 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8007e36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8007e3a:	3301      	adds	r3, #1
 8007e3c:	b2db      	uxtb	r3, r3
 8007e3e:	b25a      	sxtb	r2, r3
 8007e40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8007e46:	2301      	movs	r3, #1
 8007e48:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8007e4a:	e001      	b.n	8007e50 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e52:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8007e54:	697b      	ldr	r3, [r7, #20]
 8007e56:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8007e5a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8007e5e:	4618      	mov	r0, r3
 8007e60:	3740      	adds	r7, #64	; 0x40
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
	...

08007e68 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8007e68:	b580      	push	{r7, lr}
 8007e6a:	b08c      	sub	sp, #48	; 0x30
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	60f8      	str	r0, [r7, #12]
 8007e70:	60b9      	str	r1, [r7, #8]
 8007e72:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8007e74:	2300      	movs	r3, #0
 8007e76:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8007e7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d10a      	bne.n	8007e98 <xQueueReceive+0x30>
	__asm volatile
 8007e82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e86:	f383 8811 	msr	BASEPRI, r3
 8007e8a:	f3bf 8f6f 	isb	sy
 8007e8e:	f3bf 8f4f 	dsb	sy
 8007e92:	623b      	str	r3, [r7, #32]
}
 8007e94:	bf00      	nop
 8007e96:	e7fe      	b.n	8007e96 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007e98:	68bb      	ldr	r3, [r7, #8]
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d103      	bne.n	8007ea6 <xQueueReceive+0x3e>
 8007e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d101      	bne.n	8007eaa <xQueueReceive+0x42>
 8007ea6:	2301      	movs	r3, #1
 8007ea8:	e000      	b.n	8007eac <xQueueReceive+0x44>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	2b00      	cmp	r3, #0
 8007eae:	d10a      	bne.n	8007ec6 <xQueueReceive+0x5e>
	__asm volatile
 8007eb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eb4:	f383 8811 	msr	BASEPRI, r3
 8007eb8:	f3bf 8f6f 	isb	sy
 8007ebc:	f3bf 8f4f 	dsb	sy
 8007ec0:	61fb      	str	r3, [r7, #28]
}
 8007ec2:	bf00      	nop
 8007ec4:	e7fe      	b.n	8007ec4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007ec6:	f001 f861 	bl	8008f8c <xTaskGetSchedulerState>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d102      	bne.n	8007ed6 <xQueueReceive+0x6e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d101      	bne.n	8007eda <xQueueReceive+0x72>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e000      	b.n	8007edc <xQueueReceive+0x74>
 8007eda:	2300      	movs	r3, #0
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d10a      	bne.n	8007ef6 <xQueueReceive+0x8e>
	__asm volatile
 8007ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ee4:	f383 8811 	msr	BASEPRI, r3
 8007ee8:	f3bf 8f6f 	isb	sy
 8007eec:	f3bf 8f4f 	dsb	sy
 8007ef0:	61bb      	str	r3, [r7, #24]
}
 8007ef2:	bf00      	nop
 8007ef4:	e7fe      	b.n	8007ef4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007ef6:	f001 fda5 	bl	8009a44 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007efe:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d01f      	beq.n	8007f46 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007f06:	68b9      	ldr	r1, [r7, #8]
 8007f08:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007f0a:	f000 f8f7 	bl	80080fc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8007f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f10:	1e5a      	subs	r2, r3, #1
 8007f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f14:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f18:	691b      	ldr	r3, [r3, #16]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00f      	beq.n	8007f3e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f20:	3310      	adds	r3, #16
 8007f22:	4618      	mov	r0, r3
 8007f24:	f000 fe4e 	bl	8008bc4 <xTaskRemoveFromEventList>
 8007f28:	4603      	mov	r3, r0
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d007      	beq.n	8007f3e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8007f2e:	4b3d      	ldr	r3, [pc, #244]	; (8008024 <xQueueReceive+0x1bc>)
 8007f30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f34:	601a      	str	r2, [r3, #0]
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8007f3e:	f001 fdb1 	bl	8009aa4 <vPortExitCritical>
				return pdPASS;
 8007f42:	2301      	movs	r3, #1
 8007f44:	e069      	b.n	800801a <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d103      	bne.n	8007f54 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007f4c:	f001 fdaa 	bl	8009aa4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e062      	b.n	800801a <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d106      	bne.n	8007f68 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007f5a:	f107 0310 	add.w	r3, r7, #16
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f000 feba 	bl	8008cd8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007f64:	2301      	movs	r3, #1
 8007f66:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007f68:	f001 fd9c 	bl	8009aa4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007f6c:	f000 fc06 	bl	800877c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007f70:	f001 fd68 	bl	8009a44 <vPortEnterCritical>
 8007f74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f76:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007f7a:	b25b      	sxtb	r3, r3
 8007f7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f80:	d103      	bne.n	8007f8a <xQueueReceive+0x122>
 8007f82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f84:	2200      	movs	r2, #0
 8007f86:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007f8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f8c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007f90:	b25b      	sxtb	r3, r3
 8007f92:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007f96:	d103      	bne.n	8007fa0 <xQueueReceive+0x138>
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007fa0:	f001 fd80 	bl	8009aa4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007fa4:	1d3a      	adds	r2, r7, #4
 8007fa6:	f107 0310 	add.w	r3, r7, #16
 8007faa:	4611      	mov	r1, r2
 8007fac:	4618      	mov	r0, r3
 8007fae:	f000 fea9 	bl	8008d04 <xTaskCheckForTimeOut>
 8007fb2:	4603      	mov	r3, r0
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d123      	bne.n	8008000 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007fb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fba:	f000 f917 	bl	80081ec <prvIsQueueEmpty>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d017      	beq.n	8007ff4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007fc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fc6:	3324      	adds	r3, #36	; 0x24
 8007fc8:	687a      	ldr	r2, [r7, #4]
 8007fca:	4611      	mov	r1, r2
 8007fcc:	4618      	mov	r0, r3
 8007fce:	f000 fda9 	bl	8008b24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8007fd2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007fd4:	f000 f8b8 	bl	8008148 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007fd8:	f000 fbde 	bl	8008798 <xTaskResumeAll>
 8007fdc:	4603      	mov	r3, r0
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d189      	bne.n	8007ef6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8007fe2:	4b10      	ldr	r3, [pc, #64]	; (8008024 <xQueueReceive+0x1bc>)
 8007fe4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	f3bf 8f4f 	dsb	sy
 8007fee:	f3bf 8f6f 	isb	sy
 8007ff2:	e780      	b.n	8007ef6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8007ff4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007ff6:	f000 f8a7 	bl	8008148 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8007ffa:	f000 fbcd 	bl	8008798 <xTaskResumeAll>
 8007ffe:	e77a      	b.n	8007ef6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008002:	f000 f8a1 	bl	8008148 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008006:	f000 fbc7 	bl	8008798 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800800a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800800c:	f000 f8ee 	bl	80081ec <prvIsQueueEmpty>
 8008010:	4603      	mov	r3, r0
 8008012:	2b00      	cmp	r3, #0
 8008014:	f43f af6f 	beq.w	8007ef6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800801a:	4618      	mov	r0, r3
 800801c:	3730      	adds	r7, #48	; 0x30
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	bf00      	nop
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b086      	sub	sp, #24
 800802c:	af00      	add	r7, sp, #0
 800802e:	60f8      	str	r0, [r7, #12]
 8008030:	60b9      	str	r1, [r7, #8]
 8008032:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008034:	2300      	movs	r3, #0
 8008036:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008038:	68fb      	ldr	r3, [r7, #12]
 800803a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008042:	2b00      	cmp	r3, #0
 8008044:	d10d      	bne.n	8008062 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d14d      	bne.n	80080ea <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	689b      	ldr	r3, [r3, #8]
 8008052:	4618      	mov	r0, r3
 8008054:	f000 ffb8 	bl	8008fc8 <xTaskPriorityDisinherit>
 8008058:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	2200      	movs	r2, #0
 800805e:	609a      	str	r2, [r3, #8]
 8008060:	e043      	b.n	80080ea <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2b00      	cmp	r3, #0
 8008066:	d119      	bne.n	800809c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6858      	ldr	r0, [r3, #4]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008070:	461a      	mov	r2, r3
 8008072:	68b9      	ldr	r1, [r7, #8]
 8008074:	f00b fa9a 	bl	80135ac <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	685a      	ldr	r2, [r3, #4]
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008080:	441a      	add	r2, r3
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	685a      	ldr	r2, [r3, #4]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	429a      	cmp	r2, r3
 8008090:	d32b      	bcc.n	80080ea <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	681a      	ldr	r2, [r3, #0]
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	605a      	str	r2, [r3, #4]
 800809a:	e026      	b.n	80080ea <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	68d8      	ldr	r0, [r3, #12]
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080a4:	461a      	mov	r2, r3
 80080a6:	68b9      	ldr	r1, [r7, #8]
 80080a8:	f00b fa80 	bl	80135ac <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68da      	ldr	r2, [r3, #12]
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080b4:	425b      	negs	r3, r3
 80080b6:	441a      	add	r2, r3
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	68da      	ldr	r2, [r3, #12]
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d207      	bcs.n	80080d8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	689a      	ldr	r2, [r3, #8]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080d0:	425b      	negs	r3, r3
 80080d2:	441a      	add	r2, r3
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b02      	cmp	r3, #2
 80080dc:	d105      	bne.n	80080ea <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80080de:	693b      	ldr	r3, [r7, #16]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d002      	beq.n	80080ea <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80080e4:	693b      	ldr	r3, [r7, #16]
 80080e6:	3b01      	subs	r3, #1
 80080e8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80080ea:	693b      	ldr	r3, [r7, #16]
 80080ec:	1c5a      	adds	r2, r3, #1
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80080f2:	697b      	ldr	r3, [r7, #20]
}
 80080f4:	4618      	mov	r0, r3
 80080f6:	3718      	adds	r7, #24
 80080f8:	46bd      	mov	sp, r7
 80080fa:	bd80      	pop	{r7, pc}

080080fc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	b082      	sub	sp, #8
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800810a:	2b00      	cmp	r3, #0
 800810c:	d018      	beq.n	8008140 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008116:	441a      	add	r2, r3
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	68da      	ldr	r2, [r3, #12]
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	689b      	ldr	r3, [r3, #8]
 8008124:	429a      	cmp	r2, r3
 8008126:	d303      	bcc.n	8008130 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	681a      	ldr	r2, [r3, #0]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	68d9      	ldr	r1, [r3, #12]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008138:	461a      	mov	r2, r3
 800813a:	6838      	ldr	r0, [r7, #0]
 800813c:	f00b fa36 	bl	80135ac <memcpy>
	}
}
 8008140:	bf00      	nop
 8008142:	3708      	adds	r7, #8
 8008144:	46bd      	mov	sp, r7
 8008146:	bd80      	pop	{r7, pc}

08008148 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008150:	f001 fc78 	bl	8009a44 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800815a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800815c:	e011      	b.n	8008182 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008162:	2b00      	cmp	r3, #0
 8008164:	d012      	beq.n	800818c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	3324      	adds	r3, #36	; 0x24
 800816a:	4618      	mov	r0, r3
 800816c:	f000 fd2a 	bl	8008bc4 <xTaskRemoveFromEventList>
 8008170:	4603      	mov	r3, r0
 8008172:	2b00      	cmp	r3, #0
 8008174:	d001      	beq.n	800817a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008176:	f000 fe27 	bl	8008dc8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800817a:	7bfb      	ldrb	r3, [r7, #15]
 800817c:	3b01      	subs	r3, #1
 800817e:	b2db      	uxtb	r3, r3
 8008180:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008182:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008186:	2b00      	cmp	r3, #0
 8008188:	dce9      	bgt.n	800815e <prvUnlockQueue+0x16>
 800818a:	e000      	b.n	800818e <prvUnlockQueue+0x46>
					break;
 800818c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	22ff      	movs	r2, #255	; 0xff
 8008192:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8008196:	f001 fc85 	bl	8009aa4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800819a:	f001 fc53 	bl	8009a44 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80081a4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081a6:	e011      	b.n	80081cc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d012      	beq.n	80081d6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	3310      	adds	r3, #16
 80081b4:	4618      	mov	r0, r3
 80081b6:	f000 fd05 	bl	8008bc4 <xTaskRemoveFromEventList>
 80081ba:	4603      	mov	r3, r0
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d001      	beq.n	80081c4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80081c0:	f000 fe02 	bl	8008dc8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	3b01      	subs	r3, #1
 80081c8:	b2db      	uxtb	r3, r3
 80081ca:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80081cc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	dce9      	bgt.n	80081a8 <prvUnlockQueue+0x60>
 80081d4:	e000      	b.n	80081d8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80081d6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	22ff      	movs	r2, #255	; 0xff
 80081dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80081e0:	f001 fc60 	bl	8009aa4 <vPortExitCritical>
}
 80081e4:	bf00      	nop
 80081e6:	3710      	adds	r7, #16
 80081e8:	46bd      	mov	sp, r7
 80081ea:	bd80      	pop	{r7, pc}

080081ec <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80081ec:	b580      	push	{r7, lr}
 80081ee:	b084      	sub	sp, #16
 80081f0:	af00      	add	r7, sp, #0
 80081f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80081f4:	f001 fc26 	bl	8009a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d102      	bne.n	8008206 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008200:	2301      	movs	r3, #1
 8008202:	60fb      	str	r3, [r7, #12]
 8008204:	e001      	b.n	800820a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008206:	2300      	movs	r3, #0
 8008208:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800820a:	f001 fc4b 	bl	8009aa4 <vPortExitCritical>

	return xReturn;
 800820e:	68fb      	ldr	r3, [r7, #12]
}
 8008210:	4618      	mov	r0, r3
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008220:	f001 fc10 	bl	8009a44 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800822c:	429a      	cmp	r2, r3
 800822e:	d102      	bne.n	8008236 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	60fb      	str	r3, [r7, #12]
 8008234:	e001      	b.n	800823a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008236:	2300      	movs	r3, #0
 8008238:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800823a:	f001 fc33 	bl	8009aa4 <vPortExitCritical>

	return xReturn;
 800823e:	68fb      	ldr	r3, [r7, #12]
}
 8008240:	4618      	mov	r0, r3
 8008242:	3710      	adds	r7, #16
 8008244:	46bd      	mov	sp, r7
 8008246:	bd80      	pop	{r7, pc}

08008248 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008248:	b480      	push	{r7}
 800824a:	b085      	sub	sp, #20
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
 8008250:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008252:	2300      	movs	r3, #0
 8008254:	60fb      	str	r3, [r7, #12]
 8008256:	e014      	b.n	8008282 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008258:	4a0f      	ldr	r2, [pc, #60]	; (8008298 <vQueueAddToRegistry+0x50>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008260:	2b00      	cmp	r3, #0
 8008262:	d10b      	bne.n	800827c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008264:	490c      	ldr	r1, [pc, #48]	; (8008298 <vQueueAddToRegistry+0x50>)
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	683a      	ldr	r2, [r7, #0]
 800826a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800826e:	4a0a      	ldr	r2, [pc, #40]	; (8008298 <vQueueAddToRegistry+0x50>)
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	00db      	lsls	r3, r3, #3
 8008274:	4413      	add	r3, r2
 8008276:	687a      	ldr	r2, [r7, #4]
 8008278:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800827a:	e006      	b.n	800828a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	3301      	adds	r3, #1
 8008280:	60fb      	str	r3, [r7, #12]
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	2b07      	cmp	r3, #7
 8008286:	d9e7      	bls.n	8008258 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008288:	bf00      	nop
 800828a:	bf00      	nop
 800828c:	3714      	adds	r7, #20
 800828e:	46bd      	mov	sp, r7
 8008290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008294:	4770      	bx	lr
 8008296:	bf00      	nop
 8008298:	200090c8 	.word	0x200090c8

0800829c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800829c:	b580      	push	{r7, lr}
 800829e:	b086      	sub	sp, #24
 80082a0:	af00      	add	r7, sp, #0
 80082a2:	60f8      	str	r0, [r7, #12]
 80082a4:	60b9      	str	r1, [r7, #8]
 80082a6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80082ac:	f001 fbca 	bl	8009a44 <vPortEnterCritical>
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082b6:	b25b      	sxtb	r3, r3
 80082b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082bc:	d103      	bne.n	80082c6 <vQueueWaitForMessageRestricted+0x2a>
 80082be:	697b      	ldr	r3, [r7, #20]
 80082c0:	2200      	movs	r2, #0
 80082c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80082cc:	b25b      	sxtb	r3, r3
 80082ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082d2:	d103      	bne.n	80082dc <vQueueWaitForMessageRestricted+0x40>
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80082dc:	f001 fbe2 	bl	8009aa4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80082e0:	697b      	ldr	r3, [r7, #20]
 80082e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d106      	bne.n	80082f6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80082e8:	697b      	ldr	r3, [r7, #20]
 80082ea:	3324      	adds	r3, #36	; 0x24
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	68b9      	ldr	r1, [r7, #8]
 80082f0:	4618      	mov	r0, r3
 80082f2:	f000 fc3b 	bl	8008b6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80082f6:	6978      	ldr	r0, [r7, #20]
 80082f8:	f7ff ff26 	bl	8008148 <prvUnlockQueue>
	}
 80082fc:	bf00      	nop
 80082fe:	3718      	adds	r7, #24
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008304:	b580      	push	{r7, lr}
 8008306:	b08e      	sub	sp, #56	; 0x38
 8008308:	af04      	add	r7, sp, #16
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008314:	2b00      	cmp	r3, #0
 8008316:	d10a      	bne.n	800832e <xTaskCreateStatic+0x2a>
	__asm volatile
 8008318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800831c:	f383 8811 	msr	BASEPRI, r3
 8008320:	f3bf 8f6f 	isb	sy
 8008324:	f3bf 8f4f 	dsb	sy
 8008328:	623b      	str	r3, [r7, #32]
}
 800832a:	bf00      	nop
 800832c:	e7fe      	b.n	800832c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800832e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008330:	2b00      	cmp	r3, #0
 8008332:	d10a      	bne.n	800834a <xTaskCreateStatic+0x46>
	__asm volatile
 8008334:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008338:	f383 8811 	msr	BASEPRI, r3
 800833c:	f3bf 8f6f 	isb	sy
 8008340:	f3bf 8f4f 	dsb	sy
 8008344:	61fb      	str	r3, [r7, #28]
}
 8008346:	bf00      	nop
 8008348:	e7fe      	b.n	8008348 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800834a:	235c      	movs	r3, #92	; 0x5c
 800834c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800834e:	693b      	ldr	r3, [r7, #16]
 8008350:	2b5c      	cmp	r3, #92	; 0x5c
 8008352:	d00a      	beq.n	800836a <xTaskCreateStatic+0x66>
	__asm volatile
 8008354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008358:	f383 8811 	msr	BASEPRI, r3
 800835c:	f3bf 8f6f 	isb	sy
 8008360:	f3bf 8f4f 	dsb	sy
 8008364:	61bb      	str	r3, [r7, #24]
}
 8008366:	bf00      	nop
 8008368:	e7fe      	b.n	8008368 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800836a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800836c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800836e:	2b00      	cmp	r3, #0
 8008370:	d01e      	beq.n	80083b0 <xTaskCreateStatic+0xac>
 8008372:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01b      	beq.n	80083b0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008378:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800837c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008380:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008384:	2202      	movs	r2, #2
 8008386:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800838a:	2300      	movs	r3, #0
 800838c:	9303      	str	r3, [sp, #12]
 800838e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008390:	9302      	str	r3, [sp, #8]
 8008392:	f107 0314 	add.w	r3, r7, #20
 8008396:	9301      	str	r3, [sp, #4]
 8008398:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800839a:	9300      	str	r3, [sp, #0]
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	68b9      	ldr	r1, [r7, #8]
 80083a2:	68f8      	ldr	r0, [r7, #12]
 80083a4:	f000 f850 	bl	8008448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80083aa:	f000 f8dd 	bl	8008568 <prvAddNewTaskToReadyList>
 80083ae:	e001      	b.n	80083b4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80083b0:	2300      	movs	r3, #0
 80083b2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80083b4:	697b      	ldr	r3, [r7, #20]
	}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3728      	adds	r7, #40	; 0x28
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b08c      	sub	sp, #48	; 0x30
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	603b      	str	r3, [r7, #0]
 80083ca:	4613      	mov	r3, r2
 80083cc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80083ce:	88fb      	ldrh	r3, [r7, #6]
 80083d0:	009b      	lsls	r3, r3, #2
 80083d2:	4618      	mov	r0, r3
 80083d4:	f001 fc58 	bl	8009c88 <pvPortMalloc>
 80083d8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d00e      	beq.n	80083fe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083e0:	205c      	movs	r0, #92	; 0x5c
 80083e2:	f001 fc51 	bl	8009c88 <pvPortMalloc>
 80083e6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083e8:	69fb      	ldr	r3, [r7, #28]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d003      	beq.n	80083f6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083ee:	69fb      	ldr	r3, [r7, #28]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	631a      	str	r2, [r3, #48]	; 0x30
 80083f4:	e005      	b.n	8008402 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083f6:	6978      	ldr	r0, [r7, #20]
 80083f8:	f001 fd12 	bl	8009e20 <vPortFree>
 80083fc:	e001      	b.n	8008402 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083fe:	2300      	movs	r3, #0
 8008400:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008402:	69fb      	ldr	r3, [r7, #28]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d017      	beq.n	8008438 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008408:	69fb      	ldr	r3, [r7, #28]
 800840a:	2200      	movs	r2, #0
 800840c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008410:	88fa      	ldrh	r2, [r7, #6]
 8008412:	2300      	movs	r3, #0
 8008414:	9303      	str	r3, [sp, #12]
 8008416:	69fb      	ldr	r3, [r7, #28]
 8008418:	9302      	str	r3, [sp, #8]
 800841a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800841c:	9301      	str	r3, [sp, #4]
 800841e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008420:	9300      	str	r3, [sp, #0]
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	68b9      	ldr	r1, [r7, #8]
 8008426:	68f8      	ldr	r0, [r7, #12]
 8008428:	f000 f80e 	bl	8008448 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800842c:	69f8      	ldr	r0, [r7, #28]
 800842e:	f000 f89b 	bl	8008568 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008432:	2301      	movs	r3, #1
 8008434:	61bb      	str	r3, [r7, #24]
 8008436:	e002      	b.n	800843e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008438:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800843c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800843e:	69bb      	ldr	r3, [r7, #24]
	}
 8008440:	4618      	mov	r0, r3
 8008442:	3720      	adds	r7, #32
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}

08008448 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008448:	b580      	push	{r7, lr}
 800844a:	b088      	sub	sp, #32
 800844c:	af00      	add	r7, sp, #0
 800844e:	60f8      	str	r0, [r7, #12]
 8008450:	60b9      	str	r1, [r7, #8]
 8008452:	607a      	str	r2, [r7, #4]
 8008454:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	009b      	lsls	r3, r3, #2
 800845e:	461a      	mov	r2, r3
 8008460:	21a5      	movs	r1, #165	; 0xa5
 8008462:	f00a ffdb 	bl	801341c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008468:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8008470:	3b01      	subs	r3, #1
 8008472:	009b      	lsls	r3, r3, #2
 8008474:	4413      	add	r3, r2
 8008476:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008478:	69bb      	ldr	r3, [r7, #24]
 800847a:	f023 0307 	bic.w	r3, r3, #7
 800847e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008480:	69bb      	ldr	r3, [r7, #24]
 8008482:	f003 0307 	and.w	r3, r3, #7
 8008486:	2b00      	cmp	r3, #0
 8008488:	d00a      	beq.n	80084a0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800848a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800848e:	f383 8811 	msr	BASEPRI, r3
 8008492:	f3bf 8f6f 	isb	sy
 8008496:	f3bf 8f4f 	dsb	sy
 800849a:	617b      	str	r3, [r7, #20]
}
 800849c:	bf00      	nop
 800849e:	e7fe      	b.n	800849e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80084a0:	68bb      	ldr	r3, [r7, #8]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d01f      	beq.n	80084e6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084a6:	2300      	movs	r3, #0
 80084a8:	61fb      	str	r3, [r7, #28]
 80084aa:	e012      	b.n	80084d2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80084ac:	68ba      	ldr	r2, [r7, #8]
 80084ae:	69fb      	ldr	r3, [r7, #28]
 80084b0:	4413      	add	r3, r2
 80084b2:	7819      	ldrb	r1, [r3, #0]
 80084b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	4413      	add	r3, r2
 80084ba:	3334      	adds	r3, #52	; 0x34
 80084bc:	460a      	mov	r2, r1
 80084be:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80084c0:	68ba      	ldr	r2, [r7, #8]
 80084c2:	69fb      	ldr	r3, [r7, #28]
 80084c4:	4413      	add	r3, r2
 80084c6:	781b      	ldrb	r3, [r3, #0]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d006      	beq.n	80084da <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80084cc:	69fb      	ldr	r3, [r7, #28]
 80084ce:	3301      	adds	r3, #1
 80084d0:	61fb      	str	r3, [r7, #28]
 80084d2:	69fb      	ldr	r3, [r7, #28]
 80084d4:	2b0f      	cmp	r3, #15
 80084d6:	d9e9      	bls.n	80084ac <prvInitialiseNewTask+0x64>
 80084d8:	e000      	b.n	80084dc <prvInitialiseNewTask+0x94>
			{
				break;
 80084da:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80084dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084de:	2200      	movs	r2, #0
 80084e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80084e4:	e003      	b.n	80084ee <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80084e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084e8:	2200      	movs	r2, #0
 80084ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084f0:	2b37      	cmp	r3, #55	; 0x37
 80084f2:	d901      	bls.n	80084f8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084f4:	2337      	movs	r3, #55	; 0x37
 80084f6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80084fc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008500:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008502:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008506:	2200      	movs	r2, #0
 8008508:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800850a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850c:	3304      	adds	r3, #4
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff f93e 	bl	8007790 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008516:	3318      	adds	r3, #24
 8008518:	4618      	mov	r0, r3
 800851a:	f7ff f939 	bl	8007790 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800851e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008520:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008522:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008526:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800852a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800852c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800852e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008530:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008532:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008536:	2200      	movs	r2, #0
 8008538:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800853a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800853c:	2200      	movs	r2, #0
 800853e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008542:	683a      	ldr	r2, [r7, #0]
 8008544:	68f9      	ldr	r1, [r7, #12]
 8008546:	69b8      	ldr	r0, [r7, #24]
 8008548:	f001 f94e 	bl	80097e8 <pxPortInitialiseStack>
 800854c:	4602      	mov	r2, r0
 800854e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008550:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008554:	2b00      	cmp	r3, #0
 8008556:	d002      	beq.n	800855e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800855c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800855e:	bf00      	nop
 8008560:	3720      	adds	r7, #32
 8008562:	46bd      	mov	sp, r7
 8008564:	bd80      	pop	{r7, pc}
	...

08008568 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008570:	f001 fa68 	bl	8009a44 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008574:	4b2d      	ldr	r3, [pc, #180]	; (800862c <prvAddNewTaskToReadyList+0xc4>)
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	3301      	adds	r3, #1
 800857a:	4a2c      	ldr	r2, [pc, #176]	; (800862c <prvAddNewTaskToReadyList+0xc4>)
 800857c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800857e:	4b2c      	ldr	r3, [pc, #176]	; (8008630 <prvAddNewTaskToReadyList+0xc8>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d109      	bne.n	800859a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008586:	4a2a      	ldr	r2, [pc, #168]	; (8008630 <prvAddNewTaskToReadyList+0xc8>)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800858c:	4b27      	ldr	r3, [pc, #156]	; (800862c <prvAddNewTaskToReadyList+0xc4>)
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	2b01      	cmp	r3, #1
 8008592:	d110      	bne.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008594:	f000 fc3c 	bl	8008e10 <prvInitialiseTaskLists>
 8008598:	e00d      	b.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800859a:	4b26      	ldr	r3, [pc, #152]	; (8008634 <prvAddNewTaskToReadyList+0xcc>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d109      	bne.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80085a2:	4b23      	ldr	r3, [pc, #140]	; (8008630 <prvAddNewTaskToReadyList+0xc8>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085ac:	429a      	cmp	r2, r3
 80085ae:	d802      	bhi.n	80085b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80085b0:	4a1f      	ldr	r2, [pc, #124]	; (8008630 <prvAddNewTaskToReadyList+0xc8>)
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80085b6:	4b20      	ldr	r3, [pc, #128]	; (8008638 <prvAddNewTaskToReadyList+0xd0>)
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	3301      	adds	r3, #1
 80085bc:	4a1e      	ldr	r2, [pc, #120]	; (8008638 <prvAddNewTaskToReadyList+0xd0>)
 80085be:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80085c0:	4b1d      	ldr	r3, [pc, #116]	; (8008638 <prvAddNewTaskToReadyList+0xd0>)
 80085c2:	681a      	ldr	r2, [r3, #0]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085cc:	4b1b      	ldr	r3, [pc, #108]	; (800863c <prvAddNewTaskToReadyList+0xd4>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	429a      	cmp	r2, r3
 80085d2:	d903      	bls.n	80085dc <prvAddNewTaskToReadyList+0x74>
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085d8:	4a18      	ldr	r2, [pc, #96]	; (800863c <prvAddNewTaskToReadyList+0xd4>)
 80085da:	6013      	str	r3, [r2, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085e0:	4613      	mov	r3, r2
 80085e2:	009b      	lsls	r3, r3, #2
 80085e4:	4413      	add	r3, r2
 80085e6:	009b      	lsls	r3, r3, #2
 80085e8:	4a15      	ldr	r2, [pc, #84]	; (8008640 <prvAddNewTaskToReadyList+0xd8>)
 80085ea:	441a      	add	r2, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3304      	adds	r3, #4
 80085f0:	4619      	mov	r1, r3
 80085f2:	4610      	mov	r0, r2
 80085f4:	f7ff f8d9 	bl	80077aa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085f8:	f001 fa54 	bl	8009aa4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085fc:	4b0d      	ldr	r3, [pc, #52]	; (8008634 <prvAddNewTaskToReadyList+0xcc>)
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	2b00      	cmp	r3, #0
 8008602:	d00e      	beq.n	8008622 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008604:	4b0a      	ldr	r3, [pc, #40]	; (8008630 <prvAddNewTaskToReadyList+0xc8>)
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800860e:	429a      	cmp	r2, r3
 8008610:	d207      	bcs.n	8008622 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008612:	4b0c      	ldr	r3, [pc, #48]	; (8008644 <prvAddNewTaskToReadyList+0xdc>)
 8008614:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008618:	601a      	str	r2, [r3, #0]
 800861a:	f3bf 8f4f 	dsb	sy
 800861e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008622:	bf00      	nop
 8008624:	3708      	adds	r7, #8
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	200095dc 	.word	0x200095dc
 8008630:	20009108 	.word	0x20009108
 8008634:	200095e8 	.word	0x200095e8
 8008638:	200095f8 	.word	0x200095f8
 800863c:	200095e4 	.word	0x200095e4
 8008640:	2000910c 	.word	0x2000910c
 8008644:	e000ed04 	.word	0xe000ed04

08008648 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008648:	b580      	push	{r7, lr}
 800864a:	b084      	sub	sp, #16
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008650:	2300      	movs	r3, #0
 8008652:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	2b00      	cmp	r3, #0
 8008658:	d017      	beq.n	800868a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800865a:	4b13      	ldr	r3, [pc, #76]	; (80086a8 <vTaskDelay+0x60>)
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00a      	beq.n	8008678 <vTaskDelay+0x30>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	60bb      	str	r3, [r7, #8]
}
 8008674:	bf00      	nop
 8008676:	e7fe      	b.n	8008676 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008678:	f000 f880 	bl	800877c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800867c:	2100      	movs	r1, #0
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 fd10 	bl	80090a4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008684:	f000 f888 	bl	8008798 <xTaskResumeAll>
 8008688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d107      	bne.n	80086a0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008690:	4b06      	ldr	r3, [pc, #24]	; (80086ac <vTaskDelay+0x64>)
 8008692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008696:	601a      	str	r2, [r3, #0]
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80086a0:	bf00      	nop
 80086a2:	3710      	adds	r7, #16
 80086a4:	46bd      	mov	sp, r7
 80086a6:	bd80      	pop	{r7, pc}
 80086a8:	20009604 	.word	0x20009604
 80086ac:	e000ed04 	.word	0xe000ed04

080086b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b08a      	sub	sp, #40	; 0x28
 80086b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80086b6:	2300      	movs	r3, #0
 80086b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80086ba:	2300      	movs	r3, #0
 80086bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80086be:	463a      	mov	r2, r7
 80086c0:	1d39      	adds	r1, r7, #4
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	4618      	mov	r0, r3
 80086c8:	f7ff f80e 	bl	80076e8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80086cc:	6839      	ldr	r1, [r7, #0]
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	68ba      	ldr	r2, [r7, #8]
 80086d2:	9202      	str	r2, [sp, #8]
 80086d4:	9301      	str	r3, [sp, #4]
 80086d6:	2300      	movs	r3, #0
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	2300      	movs	r3, #0
 80086dc:	460a      	mov	r2, r1
 80086de:	4921      	ldr	r1, [pc, #132]	; (8008764 <vTaskStartScheduler+0xb4>)
 80086e0:	4821      	ldr	r0, [pc, #132]	; (8008768 <vTaskStartScheduler+0xb8>)
 80086e2:	f7ff fe0f 	bl	8008304 <xTaskCreateStatic>
 80086e6:	4603      	mov	r3, r0
 80086e8:	4a20      	ldr	r2, [pc, #128]	; (800876c <vTaskStartScheduler+0xbc>)
 80086ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80086ec:	4b1f      	ldr	r3, [pc, #124]	; (800876c <vTaskStartScheduler+0xbc>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d002      	beq.n	80086fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80086f4:	2301      	movs	r3, #1
 80086f6:	617b      	str	r3, [r7, #20]
 80086f8:	e001      	b.n	80086fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80086fa:	2300      	movs	r3, #0
 80086fc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80086fe:	697b      	ldr	r3, [r7, #20]
 8008700:	2b01      	cmp	r3, #1
 8008702:	d102      	bne.n	800870a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008704:	f000 fd22 	bl	800914c <xTimerCreateTimerTask>
 8008708:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800870a:	697b      	ldr	r3, [r7, #20]
 800870c:	2b01      	cmp	r3, #1
 800870e:	d116      	bne.n	800873e <vTaskStartScheduler+0x8e>
	__asm volatile
 8008710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008714:	f383 8811 	msr	BASEPRI, r3
 8008718:	f3bf 8f6f 	isb	sy
 800871c:	f3bf 8f4f 	dsb	sy
 8008720:	613b      	str	r3, [r7, #16]
}
 8008722:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008724:	4b12      	ldr	r3, [pc, #72]	; (8008770 <vTaskStartScheduler+0xc0>)
 8008726:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800872a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800872c:	4b11      	ldr	r3, [pc, #68]	; (8008774 <vTaskStartScheduler+0xc4>)
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008732:	4b11      	ldr	r3, [pc, #68]	; (8008778 <vTaskStartScheduler+0xc8>)
 8008734:	2200      	movs	r2, #0
 8008736:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008738:	f001 f8e2 	bl	8009900 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800873c:	e00e      	b.n	800875c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008744:	d10a      	bne.n	800875c <vTaskStartScheduler+0xac>
	__asm volatile
 8008746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800874a:	f383 8811 	msr	BASEPRI, r3
 800874e:	f3bf 8f6f 	isb	sy
 8008752:	f3bf 8f4f 	dsb	sy
 8008756:	60fb      	str	r3, [r7, #12]
}
 8008758:	bf00      	nop
 800875a:	e7fe      	b.n	800875a <vTaskStartScheduler+0xaa>
}
 800875c:	bf00      	nop
 800875e:	3718      	adds	r7, #24
 8008760:	46bd      	mov	sp, r7
 8008762:	bd80      	pop	{r7, pc}
 8008764:	08014448 	.word	0x08014448
 8008768:	08008de1 	.word	0x08008de1
 800876c:	20009600 	.word	0x20009600
 8008770:	200095fc 	.word	0x200095fc
 8008774:	200095e8 	.word	0x200095e8
 8008778:	200095e0 	.word	0x200095e0

0800877c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800877c:	b480      	push	{r7}
 800877e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008780:	4b04      	ldr	r3, [pc, #16]	; (8008794 <vTaskSuspendAll+0x18>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	3301      	adds	r3, #1
 8008786:	4a03      	ldr	r2, [pc, #12]	; (8008794 <vTaskSuspendAll+0x18>)
 8008788:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800878a:	bf00      	nop
 800878c:	46bd      	mov	sp, r7
 800878e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008792:	4770      	bx	lr
 8008794:	20009604 	.word	0x20009604

08008798 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008798:	b580      	push	{r7, lr}
 800879a:	b084      	sub	sp, #16
 800879c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800879e:	2300      	movs	r3, #0
 80087a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80087a2:	2300      	movs	r3, #0
 80087a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80087a6:	4b42      	ldr	r3, [pc, #264]	; (80088b0 <xTaskResumeAll+0x118>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d10a      	bne.n	80087c4 <xTaskResumeAll+0x2c>
	__asm volatile
 80087ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b2:	f383 8811 	msr	BASEPRI, r3
 80087b6:	f3bf 8f6f 	isb	sy
 80087ba:	f3bf 8f4f 	dsb	sy
 80087be:	603b      	str	r3, [r7, #0]
}
 80087c0:	bf00      	nop
 80087c2:	e7fe      	b.n	80087c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80087c4:	f001 f93e 	bl	8009a44 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80087c8:	4b39      	ldr	r3, [pc, #228]	; (80088b0 <xTaskResumeAll+0x118>)
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	3b01      	subs	r3, #1
 80087ce:	4a38      	ldr	r2, [pc, #224]	; (80088b0 <xTaskResumeAll+0x118>)
 80087d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80087d2:	4b37      	ldr	r3, [pc, #220]	; (80088b0 <xTaskResumeAll+0x118>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d162      	bne.n	80088a0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80087da:	4b36      	ldr	r3, [pc, #216]	; (80088b4 <xTaskResumeAll+0x11c>)
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d05e      	beq.n	80088a0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087e2:	e02f      	b.n	8008844 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80087e4:	4b34      	ldr	r3, [pc, #208]	; (80088b8 <xTaskResumeAll+0x120>)
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	68db      	ldr	r3, [r3, #12]
 80087ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	3318      	adds	r3, #24
 80087f0:	4618      	mov	r0, r3
 80087f2:	f7ff f837 	bl	8007864 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	3304      	adds	r3, #4
 80087fa:	4618      	mov	r0, r3
 80087fc:	f7ff f832 	bl	8007864 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008800:	68fb      	ldr	r3, [r7, #12]
 8008802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008804:	4b2d      	ldr	r3, [pc, #180]	; (80088bc <xTaskResumeAll+0x124>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	429a      	cmp	r2, r3
 800880a:	d903      	bls.n	8008814 <xTaskResumeAll+0x7c>
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008810:	4a2a      	ldr	r2, [pc, #168]	; (80088bc <xTaskResumeAll+0x124>)
 8008812:	6013      	str	r3, [r2, #0]
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008818:	4613      	mov	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4413      	add	r3, r2
 800881e:	009b      	lsls	r3, r3, #2
 8008820:	4a27      	ldr	r2, [pc, #156]	; (80088c0 <xTaskResumeAll+0x128>)
 8008822:	441a      	add	r2, r3
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3304      	adds	r3, #4
 8008828:	4619      	mov	r1, r3
 800882a:	4610      	mov	r0, r2
 800882c:	f7fe ffbd 	bl	80077aa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008834:	4b23      	ldr	r3, [pc, #140]	; (80088c4 <xTaskResumeAll+0x12c>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800883a:	429a      	cmp	r2, r3
 800883c:	d302      	bcc.n	8008844 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800883e:	4b22      	ldr	r3, [pc, #136]	; (80088c8 <xTaskResumeAll+0x130>)
 8008840:	2201      	movs	r2, #1
 8008842:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008844:	4b1c      	ldr	r3, [pc, #112]	; (80088b8 <xTaskResumeAll+0x120>)
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d1cb      	bne.n	80087e4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d001      	beq.n	8008856 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008852:	f000 fb7b 	bl	8008f4c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008856:	4b1d      	ldr	r3, [pc, #116]	; (80088cc <xTaskResumeAll+0x134>)
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2b00      	cmp	r3, #0
 8008860:	d010      	beq.n	8008884 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008862:	f000 f847 	bl	80088f4 <xTaskIncrementTick>
 8008866:	4603      	mov	r3, r0
 8008868:	2b00      	cmp	r3, #0
 800886a:	d002      	beq.n	8008872 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800886c:	4b16      	ldr	r3, [pc, #88]	; (80088c8 <xTaskResumeAll+0x130>)
 800886e:	2201      	movs	r2, #1
 8008870:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	3b01      	subs	r3, #1
 8008876:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2b00      	cmp	r3, #0
 800887c:	d1f1      	bne.n	8008862 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800887e:	4b13      	ldr	r3, [pc, #76]	; (80088cc <xTaskResumeAll+0x134>)
 8008880:	2200      	movs	r2, #0
 8008882:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008884:	4b10      	ldr	r3, [pc, #64]	; (80088c8 <xTaskResumeAll+0x130>)
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d009      	beq.n	80088a0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800888c:	2301      	movs	r3, #1
 800888e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008890:	4b0f      	ldr	r3, [pc, #60]	; (80088d0 <xTaskResumeAll+0x138>)
 8008892:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008896:	601a      	str	r2, [r3, #0]
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80088a0:	f001 f900 	bl	8009aa4 <vPortExitCritical>

	return xAlreadyYielded;
 80088a4:	68bb      	ldr	r3, [r7, #8]
}
 80088a6:	4618      	mov	r0, r3
 80088a8:	3710      	adds	r7, #16
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	20009604 	.word	0x20009604
 80088b4:	200095dc 	.word	0x200095dc
 80088b8:	2000959c 	.word	0x2000959c
 80088bc:	200095e4 	.word	0x200095e4
 80088c0:	2000910c 	.word	0x2000910c
 80088c4:	20009108 	.word	0x20009108
 80088c8:	200095f0 	.word	0x200095f0
 80088cc:	200095ec 	.word	0x200095ec
 80088d0:	e000ed04 	.word	0xe000ed04

080088d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80088d4:	b480      	push	{r7}
 80088d6:	b083      	sub	sp, #12
 80088d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <xTaskGetTickCount+0x1c>)
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80088e0:	687b      	ldr	r3, [r7, #4]
}
 80088e2:	4618      	mov	r0, r3
 80088e4:	370c      	adds	r7, #12
 80088e6:	46bd      	mov	sp, r7
 80088e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ec:	4770      	bx	lr
 80088ee:	bf00      	nop
 80088f0:	200095e0 	.word	0x200095e0

080088f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80088f4:	b580      	push	{r7, lr}
 80088f6:	b086      	sub	sp, #24
 80088f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80088fa:	2300      	movs	r3, #0
 80088fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80088fe:	4b4f      	ldr	r3, [pc, #316]	; (8008a3c <xTaskIncrementTick+0x148>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	2b00      	cmp	r3, #0
 8008904:	f040 808f 	bne.w	8008a26 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008908:	4b4d      	ldr	r3, [pc, #308]	; (8008a40 <xTaskIncrementTick+0x14c>)
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	3301      	adds	r3, #1
 800890e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008910:	4a4b      	ldr	r2, [pc, #300]	; (8008a40 <xTaskIncrementTick+0x14c>)
 8008912:	693b      	ldr	r3, [r7, #16]
 8008914:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008916:	693b      	ldr	r3, [r7, #16]
 8008918:	2b00      	cmp	r3, #0
 800891a:	d120      	bne.n	800895e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800891c:	4b49      	ldr	r3, [pc, #292]	; (8008a44 <xTaskIncrementTick+0x150>)
 800891e:	681b      	ldr	r3, [r3, #0]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d00a      	beq.n	800893c <xTaskIncrementTick+0x48>
	__asm volatile
 8008926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800892a:	f383 8811 	msr	BASEPRI, r3
 800892e:	f3bf 8f6f 	isb	sy
 8008932:	f3bf 8f4f 	dsb	sy
 8008936:	603b      	str	r3, [r7, #0]
}
 8008938:	bf00      	nop
 800893a:	e7fe      	b.n	800893a <xTaskIncrementTick+0x46>
 800893c:	4b41      	ldr	r3, [pc, #260]	; (8008a44 <xTaskIncrementTick+0x150>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	60fb      	str	r3, [r7, #12]
 8008942:	4b41      	ldr	r3, [pc, #260]	; (8008a48 <xTaskIncrementTick+0x154>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	4a3f      	ldr	r2, [pc, #252]	; (8008a44 <xTaskIncrementTick+0x150>)
 8008948:	6013      	str	r3, [r2, #0]
 800894a:	4a3f      	ldr	r2, [pc, #252]	; (8008a48 <xTaskIncrementTick+0x154>)
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	4b3e      	ldr	r3, [pc, #248]	; (8008a4c <xTaskIncrementTick+0x158>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	3301      	adds	r3, #1
 8008956:	4a3d      	ldr	r2, [pc, #244]	; (8008a4c <xTaskIncrementTick+0x158>)
 8008958:	6013      	str	r3, [r2, #0]
 800895a:	f000 faf7 	bl	8008f4c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800895e:	4b3c      	ldr	r3, [pc, #240]	; (8008a50 <xTaskIncrementTick+0x15c>)
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	693a      	ldr	r2, [r7, #16]
 8008964:	429a      	cmp	r2, r3
 8008966:	d349      	bcc.n	80089fc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008968:	4b36      	ldr	r3, [pc, #216]	; (8008a44 <xTaskIncrementTick+0x150>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d104      	bne.n	800897c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008972:	4b37      	ldr	r3, [pc, #220]	; (8008a50 <xTaskIncrementTick+0x15c>)
 8008974:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008978:	601a      	str	r2, [r3, #0]
					break;
 800897a:	e03f      	b.n	80089fc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800897c:	4b31      	ldr	r3, [pc, #196]	; (8008a44 <xTaskIncrementTick+0x150>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800898c:	693a      	ldr	r2, [r7, #16]
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	429a      	cmp	r2, r3
 8008992:	d203      	bcs.n	800899c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008994:	4a2e      	ldr	r2, [pc, #184]	; (8008a50 <xTaskIncrementTick+0x15c>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800899a:	e02f      	b.n	80089fc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	3304      	adds	r3, #4
 80089a0:	4618      	mov	r0, r3
 80089a2:	f7fe ff5f 	bl	8007864 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d004      	beq.n	80089b8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80089ae:	68bb      	ldr	r3, [r7, #8]
 80089b0:	3318      	adds	r3, #24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7fe ff56 	bl	8007864 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089bc:	4b25      	ldr	r3, [pc, #148]	; (8008a54 <xTaskIncrementTick+0x160>)
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	429a      	cmp	r2, r3
 80089c2:	d903      	bls.n	80089cc <xTaskIncrementTick+0xd8>
 80089c4:	68bb      	ldr	r3, [r7, #8]
 80089c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089c8:	4a22      	ldr	r2, [pc, #136]	; (8008a54 <xTaskIncrementTick+0x160>)
 80089ca:	6013      	str	r3, [r2, #0]
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089d0:	4613      	mov	r3, r2
 80089d2:	009b      	lsls	r3, r3, #2
 80089d4:	4413      	add	r3, r2
 80089d6:	009b      	lsls	r3, r3, #2
 80089d8:	4a1f      	ldr	r2, [pc, #124]	; (8008a58 <xTaskIncrementTick+0x164>)
 80089da:	441a      	add	r2, r3
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	3304      	adds	r3, #4
 80089e0:	4619      	mov	r1, r3
 80089e2:	4610      	mov	r0, r2
 80089e4:	f7fe fee1 	bl	80077aa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80089e8:	68bb      	ldr	r3, [r7, #8]
 80089ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80089ec:	4b1b      	ldr	r3, [pc, #108]	; (8008a5c <xTaskIncrementTick+0x168>)
 80089ee:	681b      	ldr	r3, [r3, #0]
 80089f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089f2:	429a      	cmp	r2, r3
 80089f4:	d3b8      	bcc.n	8008968 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80089f6:	2301      	movs	r3, #1
 80089f8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80089fa:	e7b5      	b.n	8008968 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80089fc:	4b17      	ldr	r3, [pc, #92]	; (8008a5c <xTaskIncrementTick+0x168>)
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a02:	4915      	ldr	r1, [pc, #84]	; (8008a58 <xTaskIncrementTick+0x164>)
 8008a04:	4613      	mov	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	4413      	add	r3, r2
 8008a0a:	009b      	lsls	r3, r3, #2
 8008a0c:	440b      	add	r3, r1
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	2b01      	cmp	r3, #1
 8008a12:	d901      	bls.n	8008a18 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008a14:	2301      	movs	r3, #1
 8008a16:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008a18:	4b11      	ldr	r3, [pc, #68]	; (8008a60 <xTaskIncrementTick+0x16c>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d007      	beq.n	8008a30 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008a20:	2301      	movs	r3, #1
 8008a22:	617b      	str	r3, [r7, #20]
 8008a24:	e004      	b.n	8008a30 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008a26:	4b0f      	ldr	r3, [pc, #60]	; (8008a64 <xTaskIncrementTick+0x170>)
 8008a28:	681b      	ldr	r3, [r3, #0]
 8008a2a:	3301      	adds	r3, #1
 8008a2c:	4a0d      	ldr	r2, [pc, #52]	; (8008a64 <xTaskIncrementTick+0x170>)
 8008a2e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008a30:	697b      	ldr	r3, [r7, #20]
}
 8008a32:	4618      	mov	r0, r3
 8008a34:	3718      	adds	r7, #24
 8008a36:	46bd      	mov	sp, r7
 8008a38:	bd80      	pop	{r7, pc}
 8008a3a:	bf00      	nop
 8008a3c:	20009604 	.word	0x20009604
 8008a40:	200095e0 	.word	0x200095e0
 8008a44:	20009594 	.word	0x20009594
 8008a48:	20009598 	.word	0x20009598
 8008a4c:	200095f4 	.word	0x200095f4
 8008a50:	200095fc 	.word	0x200095fc
 8008a54:	200095e4 	.word	0x200095e4
 8008a58:	2000910c 	.word	0x2000910c
 8008a5c:	20009108 	.word	0x20009108
 8008a60:	200095f0 	.word	0x200095f0
 8008a64:	200095ec 	.word	0x200095ec

08008a68 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b085      	sub	sp, #20
 8008a6c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008a6e:	4b28      	ldr	r3, [pc, #160]	; (8008b10 <vTaskSwitchContext+0xa8>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d003      	beq.n	8008a7e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008a76:	4b27      	ldr	r3, [pc, #156]	; (8008b14 <vTaskSwitchContext+0xac>)
 8008a78:	2201      	movs	r2, #1
 8008a7a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008a7c:	e041      	b.n	8008b02 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008a7e:	4b25      	ldr	r3, [pc, #148]	; (8008b14 <vTaskSwitchContext+0xac>)
 8008a80:	2200      	movs	r2, #0
 8008a82:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a84:	4b24      	ldr	r3, [pc, #144]	; (8008b18 <vTaskSwitchContext+0xb0>)
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	60fb      	str	r3, [r7, #12]
 8008a8a:	e010      	b.n	8008aae <vTaskSwitchContext+0x46>
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d10a      	bne.n	8008aa8 <vTaskSwitchContext+0x40>
	__asm volatile
 8008a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a96:	f383 8811 	msr	BASEPRI, r3
 8008a9a:	f3bf 8f6f 	isb	sy
 8008a9e:	f3bf 8f4f 	dsb	sy
 8008aa2:	607b      	str	r3, [r7, #4]
}
 8008aa4:	bf00      	nop
 8008aa6:	e7fe      	b.n	8008aa6 <vTaskSwitchContext+0x3e>
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	3b01      	subs	r3, #1
 8008aac:	60fb      	str	r3, [r7, #12]
 8008aae:	491b      	ldr	r1, [pc, #108]	; (8008b1c <vTaskSwitchContext+0xb4>)
 8008ab0:	68fa      	ldr	r2, [r7, #12]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	440b      	add	r3, r1
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d0e4      	beq.n	8008a8c <vTaskSwitchContext+0x24>
 8008ac2:	68fa      	ldr	r2, [r7, #12]
 8008ac4:	4613      	mov	r3, r2
 8008ac6:	009b      	lsls	r3, r3, #2
 8008ac8:	4413      	add	r3, r2
 8008aca:	009b      	lsls	r3, r3, #2
 8008acc:	4a13      	ldr	r2, [pc, #76]	; (8008b1c <vTaskSwitchContext+0xb4>)
 8008ace:	4413      	add	r3, r2
 8008ad0:	60bb      	str	r3, [r7, #8]
 8008ad2:	68bb      	ldr	r3, [r7, #8]
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	685a      	ldr	r2, [r3, #4]
 8008ad8:	68bb      	ldr	r3, [r7, #8]
 8008ada:	605a      	str	r2, [r3, #4]
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	685a      	ldr	r2, [r3, #4]
 8008ae0:	68bb      	ldr	r3, [r7, #8]
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	429a      	cmp	r2, r3
 8008ae6:	d104      	bne.n	8008af2 <vTaskSwitchContext+0x8a>
 8008ae8:	68bb      	ldr	r3, [r7, #8]
 8008aea:	685b      	ldr	r3, [r3, #4]
 8008aec:	685a      	ldr	r2, [r3, #4]
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	605a      	str	r2, [r3, #4]
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	4a09      	ldr	r2, [pc, #36]	; (8008b20 <vTaskSwitchContext+0xb8>)
 8008afa:	6013      	str	r3, [r2, #0]
 8008afc:	4a06      	ldr	r2, [pc, #24]	; (8008b18 <vTaskSwitchContext+0xb0>)
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	6013      	str	r3, [r2, #0]
}
 8008b02:	bf00      	nop
 8008b04:	3714      	adds	r7, #20
 8008b06:	46bd      	mov	sp, r7
 8008b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0c:	4770      	bx	lr
 8008b0e:	bf00      	nop
 8008b10:	20009604 	.word	0x20009604
 8008b14:	200095f0 	.word	0x200095f0
 8008b18:	200095e4 	.word	0x200095e4
 8008b1c:	2000910c 	.word	0x2000910c
 8008b20:	20009108 	.word	0x20009108

08008b24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b084      	sub	sp, #16
 8008b28:	af00      	add	r7, sp, #0
 8008b2a:	6078      	str	r0, [r7, #4]
 8008b2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d10a      	bne.n	8008b4a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008b34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b38:	f383 8811 	msr	BASEPRI, r3
 8008b3c:	f3bf 8f6f 	isb	sy
 8008b40:	f3bf 8f4f 	dsb	sy
 8008b44:	60fb      	str	r3, [r7, #12]
}
 8008b46:	bf00      	nop
 8008b48:	e7fe      	b.n	8008b48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b4a:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <vTaskPlaceOnEventList+0x44>)
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	3318      	adds	r3, #24
 8008b50:	4619      	mov	r1, r3
 8008b52:	6878      	ldr	r0, [r7, #4]
 8008b54:	f7fe fe4d 	bl	80077f2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008b58:	2101      	movs	r1, #1
 8008b5a:	6838      	ldr	r0, [r7, #0]
 8008b5c:	f000 faa2 	bl	80090a4 <prvAddCurrentTaskToDelayedList>
}
 8008b60:	bf00      	nop
 8008b62:	3710      	adds	r7, #16
 8008b64:	46bd      	mov	sp, r7
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20009108 	.word	0x20009108

08008b6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b086      	sub	sp, #24
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	60f8      	str	r0, [r7, #12]
 8008b74:	60b9      	str	r1, [r7, #8]
 8008b76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d10a      	bne.n	8008b94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b82:	f383 8811 	msr	BASEPRI, r3
 8008b86:	f3bf 8f6f 	isb	sy
 8008b8a:	f3bf 8f4f 	dsb	sy
 8008b8e:	617b      	str	r3, [r7, #20]
}
 8008b90:	bf00      	nop
 8008b92:	e7fe      	b.n	8008b92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008b94:	4b0a      	ldr	r3, [pc, #40]	; (8008bc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	3318      	adds	r3, #24
 8008b9a:	4619      	mov	r1, r3
 8008b9c:	68f8      	ldr	r0, [r7, #12]
 8008b9e:	f7fe fe04 	bl	80077aa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d002      	beq.n	8008bae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8008ba8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008bac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8008bae:	6879      	ldr	r1, [r7, #4]
 8008bb0:	68b8      	ldr	r0, [r7, #8]
 8008bb2:	f000 fa77 	bl	80090a4 <prvAddCurrentTaskToDelayedList>
	}
 8008bb6:	bf00      	nop
 8008bb8:	3718      	adds	r7, #24
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	20009108 	.word	0x20009108

08008bc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008bc4:	b580      	push	{r7, lr}
 8008bc6:	b086      	sub	sp, #24
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	68db      	ldr	r3, [r3, #12]
 8008bd0:	68db      	ldr	r3, [r3, #12]
 8008bd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d10a      	bne.n	8008bf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8008bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bde:	f383 8811 	msr	BASEPRI, r3
 8008be2:	f3bf 8f6f 	isb	sy
 8008be6:	f3bf 8f4f 	dsb	sy
 8008bea:	60fb      	str	r3, [r7, #12]
}
 8008bec:	bf00      	nop
 8008bee:	e7fe      	b.n	8008bee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	3318      	adds	r3, #24
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f7fe fe35 	bl	8007864 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008bfa:	4b1e      	ldr	r3, [pc, #120]	; (8008c74 <xTaskRemoveFromEventList+0xb0>)
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d11d      	bne.n	8008c3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	3304      	adds	r3, #4
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7fe fe2c 	bl	8007864 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c10:	4b19      	ldr	r3, [pc, #100]	; (8008c78 <xTaskRemoveFromEventList+0xb4>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	429a      	cmp	r2, r3
 8008c16:	d903      	bls.n	8008c20 <xTaskRemoveFromEventList+0x5c>
 8008c18:	693b      	ldr	r3, [r7, #16]
 8008c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c1c:	4a16      	ldr	r2, [pc, #88]	; (8008c78 <xTaskRemoveFromEventList+0xb4>)
 8008c1e:	6013      	str	r3, [r2, #0]
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c24:	4613      	mov	r3, r2
 8008c26:	009b      	lsls	r3, r3, #2
 8008c28:	4413      	add	r3, r2
 8008c2a:	009b      	lsls	r3, r3, #2
 8008c2c:	4a13      	ldr	r2, [pc, #76]	; (8008c7c <xTaskRemoveFromEventList+0xb8>)
 8008c2e:	441a      	add	r2, r3
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	3304      	adds	r3, #4
 8008c34:	4619      	mov	r1, r3
 8008c36:	4610      	mov	r0, r2
 8008c38:	f7fe fdb7 	bl	80077aa <vListInsertEnd>
 8008c3c:	e005      	b.n	8008c4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8008c3e:	693b      	ldr	r3, [r7, #16]
 8008c40:	3318      	adds	r3, #24
 8008c42:	4619      	mov	r1, r3
 8008c44:	480e      	ldr	r0, [pc, #56]	; (8008c80 <xTaskRemoveFromEventList+0xbc>)
 8008c46:	f7fe fdb0 	bl	80077aa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c4e:	4b0d      	ldr	r3, [pc, #52]	; (8008c84 <xTaskRemoveFromEventList+0xc0>)
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	429a      	cmp	r2, r3
 8008c56:	d905      	bls.n	8008c64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008c58:	2301      	movs	r3, #1
 8008c5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8008c5c:	4b0a      	ldr	r3, [pc, #40]	; (8008c88 <xTaskRemoveFromEventList+0xc4>)
 8008c5e:	2201      	movs	r2, #1
 8008c60:	601a      	str	r2, [r3, #0]
 8008c62:	e001      	b.n	8008c68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008c64:	2300      	movs	r3, #0
 8008c66:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008c68:	697b      	ldr	r3, [r7, #20]
}
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	3718      	adds	r7, #24
 8008c6e:	46bd      	mov	sp, r7
 8008c70:	bd80      	pop	{r7, pc}
 8008c72:	bf00      	nop
 8008c74:	20009604 	.word	0x20009604
 8008c78:	200095e4 	.word	0x200095e4
 8008c7c:	2000910c 	.word	0x2000910c
 8008c80:	2000959c 	.word	0x2000959c
 8008c84:	20009108 	.word	0x20009108
 8008c88:	200095f0 	.word	0x200095f0

08008c8c <vTaskSetTimeOutState>:
	}
}
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
	configASSERT( pxTimeOut );
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d10a      	bne.n	8008cb0 <vTaskSetTimeOutState+0x24>
	__asm volatile
 8008c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c9e:	f383 8811 	msr	BASEPRI, r3
 8008ca2:	f3bf 8f6f 	isb	sy
 8008ca6:	f3bf 8f4f 	dsb	sy
 8008caa:	60fb      	str	r3, [r7, #12]
}
 8008cac:	bf00      	nop
 8008cae:	e7fe      	b.n	8008cae <vTaskSetTimeOutState+0x22>
	taskENTER_CRITICAL();
 8008cb0:	f000 fec8 	bl	8009a44 <vPortEnterCritical>
	{
		pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008cb4:	4b06      	ldr	r3, [pc, #24]	; (8008cd0 <vTaskSetTimeOutState+0x44>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	601a      	str	r2, [r3, #0]
		pxTimeOut->xTimeOnEntering = xTickCount;
 8008cbc:	4b05      	ldr	r3, [pc, #20]	; (8008cd4 <vTaskSetTimeOutState+0x48>)
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	605a      	str	r2, [r3, #4]
	}
	taskEXIT_CRITICAL();
 8008cc4:	f000 feee 	bl	8009aa4 <vPortExitCritical>
}
 8008cc8:	bf00      	nop
 8008cca:	3710      	adds	r7, #16
 8008ccc:	46bd      	mov	sp, r7
 8008cce:	bd80      	pop	{r7, pc}
 8008cd0:	200095f4 	.word	0x200095f4
 8008cd4:	200095e0 	.word	0x200095e0

08008cd8 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008ce0:	4b06      	ldr	r3, [pc, #24]	; (8008cfc <vTaskInternalSetTimeOutState+0x24>)
 8008ce2:	681a      	ldr	r2, [r3, #0]
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8008ce8:	4b05      	ldr	r3, [pc, #20]	; (8008d00 <vTaskInternalSetTimeOutState+0x28>)
 8008cea:	681a      	ldr	r2, [r3, #0]
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	605a      	str	r2, [r3, #4]
}
 8008cf0:	bf00      	nop
 8008cf2:	370c      	adds	r7, #12
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfa:	4770      	bx	lr
 8008cfc:	200095f4 	.word	0x200095f4
 8008d00:	200095e0 	.word	0x200095e0

08008d04 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008d04:	b580      	push	{r7, lr}
 8008d06:	b088      	sub	sp, #32
 8008d08:	af00      	add	r7, sp, #0
 8008d0a:	6078      	str	r0, [r7, #4]
 8008d0c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d10a      	bne.n	8008d2a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8008d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d18:	f383 8811 	msr	BASEPRI, r3
 8008d1c:	f3bf 8f6f 	isb	sy
 8008d20:	f3bf 8f4f 	dsb	sy
 8008d24:	613b      	str	r3, [r7, #16]
}
 8008d26:	bf00      	nop
 8008d28:	e7fe      	b.n	8008d28 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8008d2a:	683b      	ldr	r3, [r7, #0]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d10a      	bne.n	8008d46 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8008d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d34:	f383 8811 	msr	BASEPRI, r3
 8008d38:	f3bf 8f6f 	isb	sy
 8008d3c:	f3bf 8f4f 	dsb	sy
 8008d40:	60fb      	str	r3, [r7, #12]
}
 8008d42:	bf00      	nop
 8008d44:	e7fe      	b.n	8008d44 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8008d46:	f000 fe7d 	bl	8009a44 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8008d4a:	4b1d      	ldr	r3, [pc, #116]	; (8008dc0 <xTaskCheckForTimeOut+0xbc>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	69ba      	ldr	r2, [r7, #24]
 8008d56:	1ad3      	subs	r3, r2, r3
 8008d58:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8008d5a:	683b      	ldr	r3, [r7, #0]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008d62:	d102      	bne.n	8008d6a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	61fb      	str	r3, [r7, #28]
 8008d68:	e023      	b.n	8008db2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	4b15      	ldr	r3, [pc, #84]	; (8008dc4 <xTaskCheckForTimeOut+0xc0>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	429a      	cmp	r2, r3
 8008d74:	d007      	beq.n	8008d86 <xTaskCheckForTimeOut+0x82>
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	685b      	ldr	r3, [r3, #4]
 8008d7a:	69ba      	ldr	r2, [r7, #24]
 8008d7c:	429a      	cmp	r2, r3
 8008d7e:	d302      	bcc.n	8008d86 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008d80:	2301      	movs	r3, #1
 8008d82:	61fb      	str	r3, [r7, #28]
 8008d84:	e015      	b.n	8008db2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008d86:	683b      	ldr	r3, [r7, #0]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	697a      	ldr	r2, [r7, #20]
 8008d8c:	429a      	cmp	r2, r3
 8008d8e:	d20b      	bcs.n	8008da8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008d90:	683b      	ldr	r3, [r7, #0]
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	1ad2      	subs	r2, r2, r3
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f7ff ff9b 	bl	8008cd8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008da2:	2300      	movs	r3, #0
 8008da4:	61fb      	str	r3, [r7, #28]
 8008da6:	e004      	b.n	8008db2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8008da8:	683b      	ldr	r3, [r7, #0]
 8008daa:	2200      	movs	r2, #0
 8008dac:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008dae:	2301      	movs	r3, #1
 8008db0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008db2:	f000 fe77 	bl	8009aa4 <vPortExitCritical>

	return xReturn;
 8008db6:	69fb      	ldr	r3, [r7, #28]
}
 8008db8:	4618      	mov	r0, r3
 8008dba:	3720      	adds	r7, #32
 8008dbc:	46bd      	mov	sp, r7
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	200095e0 	.word	0x200095e0
 8008dc4:	200095f4 	.word	0x200095f4

08008dc8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008dc8:	b480      	push	{r7}
 8008dca:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008dcc:	4b03      	ldr	r3, [pc, #12]	; (8008ddc <vTaskMissedYield+0x14>)
 8008dce:	2201      	movs	r2, #1
 8008dd0:	601a      	str	r2, [r3, #0]
}
 8008dd2:	bf00      	nop
 8008dd4:	46bd      	mov	sp, r7
 8008dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dda:	4770      	bx	lr
 8008ddc:	200095f0 	.word	0x200095f0

08008de0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008de0:	b580      	push	{r7, lr}
 8008de2:	b082      	sub	sp, #8
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008de8:	f000 f852 	bl	8008e90 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008dec:	4b06      	ldr	r3, [pc, #24]	; (8008e08 <prvIdleTask+0x28>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2b01      	cmp	r3, #1
 8008df2:	d9f9      	bls.n	8008de8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <prvIdleTask+0x2c>)
 8008df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008dfa:	601a      	str	r2, [r3, #0]
 8008dfc:	f3bf 8f4f 	dsb	sy
 8008e00:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008e04:	e7f0      	b.n	8008de8 <prvIdleTask+0x8>
 8008e06:	bf00      	nop
 8008e08:	2000910c 	.word	0x2000910c
 8008e0c:	e000ed04 	.word	0xe000ed04

08008e10 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008e10:	b580      	push	{r7, lr}
 8008e12:	b082      	sub	sp, #8
 8008e14:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e16:	2300      	movs	r3, #0
 8008e18:	607b      	str	r3, [r7, #4]
 8008e1a:	e00c      	b.n	8008e36 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008e1c:	687a      	ldr	r2, [r7, #4]
 8008e1e:	4613      	mov	r3, r2
 8008e20:	009b      	lsls	r3, r3, #2
 8008e22:	4413      	add	r3, r2
 8008e24:	009b      	lsls	r3, r3, #2
 8008e26:	4a12      	ldr	r2, [pc, #72]	; (8008e70 <prvInitialiseTaskLists+0x60>)
 8008e28:	4413      	add	r3, r2
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f7fe fc90 	bl	8007750 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	3301      	adds	r3, #1
 8008e34:	607b      	str	r3, [r7, #4]
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2b37      	cmp	r3, #55	; 0x37
 8008e3a:	d9ef      	bls.n	8008e1c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008e3c:	480d      	ldr	r0, [pc, #52]	; (8008e74 <prvInitialiseTaskLists+0x64>)
 8008e3e:	f7fe fc87 	bl	8007750 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008e42:	480d      	ldr	r0, [pc, #52]	; (8008e78 <prvInitialiseTaskLists+0x68>)
 8008e44:	f7fe fc84 	bl	8007750 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008e48:	480c      	ldr	r0, [pc, #48]	; (8008e7c <prvInitialiseTaskLists+0x6c>)
 8008e4a:	f7fe fc81 	bl	8007750 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008e4e:	480c      	ldr	r0, [pc, #48]	; (8008e80 <prvInitialiseTaskLists+0x70>)
 8008e50:	f7fe fc7e 	bl	8007750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008e54:	480b      	ldr	r0, [pc, #44]	; (8008e84 <prvInitialiseTaskLists+0x74>)
 8008e56:	f7fe fc7b 	bl	8007750 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008e5a:	4b0b      	ldr	r3, [pc, #44]	; (8008e88 <prvInitialiseTaskLists+0x78>)
 8008e5c:	4a05      	ldr	r2, [pc, #20]	; (8008e74 <prvInitialiseTaskLists+0x64>)
 8008e5e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008e60:	4b0a      	ldr	r3, [pc, #40]	; (8008e8c <prvInitialiseTaskLists+0x7c>)
 8008e62:	4a05      	ldr	r2, [pc, #20]	; (8008e78 <prvInitialiseTaskLists+0x68>)
 8008e64:	601a      	str	r2, [r3, #0]
}
 8008e66:	bf00      	nop
 8008e68:	3708      	adds	r7, #8
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bd80      	pop	{r7, pc}
 8008e6e:	bf00      	nop
 8008e70:	2000910c 	.word	0x2000910c
 8008e74:	2000956c 	.word	0x2000956c
 8008e78:	20009580 	.word	0x20009580
 8008e7c:	2000959c 	.word	0x2000959c
 8008e80:	200095b0 	.word	0x200095b0
 8008e84:	200095c8 	.word	0x200095c8
 8008e88:	20009594 	.word	0x20009594
 8008e8c:	20009598 	.word	0x20009598

08008e90 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008e90:	b580      	push	{r7, lr}
 8008e92:	b082      	sub	sp, #8
 8008e94:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008e96:	e019      	b.n	8008ecc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008e98:	f000 fdd4 	bl	8009a44 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e9c:	4b10      	ldr	r3, [pc, #64]	; (8008ee0 <prvCheckTasksWaitingTermination+0x50>)
 8008e9e:	68db      	ldr	r3, [r3, #12]
 8008ea0:	68db      	ldr	r3, [r3, #12]
 8008ea2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	3304      	adds	r3, #4
 8008ea8:	4618      	mov	r0, r3
 8008eaa:	f7fe fcdb 	bl	8007864 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008eae:	4b0d      	ldr	r3, [pc, #52]	; (8008ee4 <prvCheckTasksWaitingTermination+0x54>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	4a0b      	ldr	r2, [pc, #44]	; (8008ee4 <prvCheckTasksWaitingTermination+0x54>)
 8008eb6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008eb8:	4b0b      	ldr	r3, [pc, #44]	; (8008ee8 <prvCheckTasksWaitingTermination+0x58>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	3b01      	subs	r3, #1
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <prvCheckTasksWaitingTermination+0x58>)
 8008ec0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008ec2:	f000 fdef 	bl	8009aa4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008ec6:	6878      	ldr	r0, [r7, #4]
 8008ec8:	f000 f810 	bl	8008eec <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008ecc:	4b06      	ldr	r3, [pc, #24]	; (8008ee8 <prvCheckTasksWaitingTermination+0x58>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d1e1      	bne.n	8008e98 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3708      	adds	r7, #8
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
 8008ede:	bf00      	nop
 8008ee0:	200095b0 	.word	0x200095b0
 8008ee4:	200095dc 	.word	0x200095dc
 8008ee8:	200095c4 	.word	0x200095c4

08008eec <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b084      	sub	sp, #16
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d108      	bne.n	8008f10 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f02:	4618      	mov	r0, r3
 8008f04:	f000 ff8c 	bl	8009e20 <vPortFree>
				vPortFree( pxTCB );
 8008f08:	6878      	ldr	r0, [r7, #4]
 8008f0a:	f000 ff89 	bl	8009e20 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008f0e:	e018      	b.n	8008f42 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d103      	bne.n	8008f22 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f000 ff80 	bl	8009e20 <vPortFree>
	}
 8008f20:	e00f      	b.n	8008f42 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008f28:	2b02      	cmp	r3, #2
 8008f2a:	d00a      	beq.n	8008f42 <prvDeleteTCB+0x56>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	60fb      	str	r3, [r7, #12]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <prvDeleteTCB+0x54>
	}
 8008f42:	bf00      	nop
 8008f44:	3710      	adds	r7, #16
 8008f46:	46bd      	mov	sp, r7
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008f4c:	b480      	push	{r7}
 8008f4e:	b083      	sub	sp, #12
 8008f50:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008f52:	4b0c      	ldr	r3, [pc, #48]	; (8008f84 <prvResetNextTaskUnblockTime+0x38>)
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	681b      	ldr	r3, [r3, #0]
 8008f58:	2b00      	cmp	r3, #0
 8008f5a:	d104      	bne.n	8008f66 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008f5c:	4b0a      	ldr	r3, [pc, #40]	; (8008f88 <prvResetNextTaskUnblockTime+0x3c>)
 8008f5e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8008f62:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008f64:	e008      	b.n	8008f78 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f66:	4b07      	ldr	r3, [pc, #28]	; (8008f84 <prvResetNextTaskUnblockTime+0x38>)
 8008f68:	681b      	ldr	r3, [r3, #0]
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	68db      	ldr	r3, [r3, #12]
 8008f6e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	685b      	ldr	r3, [r3, #4]
 8008f74:	4a04      	ldr	r2, [pc, #16]	; (8008f88 <prvResetNextTaskUnblockTime+0x3c>)
 8008f76:	6013      	str	r3, [r2, #0]
}
 8008f78:	bf00      	nop
 8008f7a:	370c      	adds	r7, #12
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f82:	4770      	bx	lr
 8008f84:	20009594 	.word	0x20009594
 8008f88:	200095fc 	.word	0x200095fc

08008f8c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008f8c:	b480      	push	{r7}
 8008f8e:	b083      	sub	sp, #12
 8008f90:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008f92:	4b0b      	ldr	r3, [pc, #44]	; (8008fc0 <xTaskGetSchedulerState+0x34>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d102      	bne.n	8008fa0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	607b      	str	r3, [r7, #4]
 8008f9e:	e008      	b.n	8008fb2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fa0:	4b08      	ldr	r3, [pc, #32]	; (8008fc4 <xTaskGetSchedulerState+0x38>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d102      	bne.n	8008fae <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008fa8:	2302      	movs	r3, #2
 8008faa:	607b      	str	r3, [r7, #4]
 8008fac:	e001      	b.n	8008fb2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8008fae:	2300      	movs	r3, #0
 8008fb0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008fb2:	687b      	ldr	r3, [r7, #4]
	}
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	370c      	adds	r7, #12
 8008fb8:	46bd      	mov	sp, r7
 8008fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fbe:	4770      	bx	lr
 8008fc0:	200095e8 	.word	0x200095e8
 8008fc4:	20009604 	.word	0x20009604

08008fc8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	b086      	sub	sp, #24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	2b00      	cmp	r3, #0
 8008fdc:	d056      	beq.n	800908c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8008fde:	4b2e      	ldr	r3, [pc, #184]	; (8009098 <xTaskPriorityDisinherit+0xd0>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	693a      	ldr	r2, [r7, #16]
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d00a      	beq.n	8008ffe <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008fe8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fec:	f383 8811 	msr	BASEPRI, r3
 8008ff0:	f3bf 8f6f 	isb	sy
 8008ff4:	f3bf 8f4f 	dsb	sy
 8008ff8:	60fb      	str	r3, [r7, #12]
}
 8008ffa:	bf00      	nop
 8008ffc:	e7fe      	b.n	8008ffc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8008ffe:	693b      	ldr	r3, [r7, #16]
 8009000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009002:	2b00      	cmp	r3, #0
 8009004:	d10a      	bne.n	800901c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8009006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800900a:	f383 8811 	msr	BASEPRI, r3
 800900e:	f3bf 8f6f 	isb	sy
 8009012:	f3bf 8f4f 	dsb	sy
 8009016:	60bb      	str	r3, [r7, #8]
}
 8009018:	bf00      	nop
 800901a:	e7fe      	b.n	800901a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800901c:	693b      	ldr	r3, [r7, #16]
 800901e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009020:	1e5a      	subs	r2, r3, #1
 8009022:	693b      	ldr	r3, [r7, #16]
 8009024:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800902a:	693b      	ldr	r3, [r7, #16]
 800902c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800902e:	429a      	cmp	r2, r3
 8009030:	d02c      	beq.n	800908c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009036:	2b00      	cmp	r3, #0
 8009038:	d128      	bne.n	800908c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800903a:	693b      	ldr	r3, [r7, #16]
 800903c:	3304      	adds	r3, #4
 800903e:	4618      	mov	r0, r3
 8009040:	f7fe fc10 	bl	8007864 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009048:	693b      	ldr	r3, [r7, #16]
 800904a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009050:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009054:	693b      	ldr	r3, [r7, #16]
 8009056:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800905c:	4b0f      	ldr	r3, [pc, #60]	; (800909c <xTaskPriorityDisinherit+0xd4>)
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	429a      	cmp	r2, r3
 8009062:	d903      	bls.n	800906c <xTaskPriorityDisinherit+0xa4>
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009068:	4a0c      	ldr	r2, [pc, #48]	; (800909c <xTaskPriorityDisinherit+0xd4>)
 800906a:	6013      	str	r3, [r2, #0]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009070:	4613      	mov	r3, r2
 8009072:	009b      	lsls	r3, r3, #2
 8009074:	4413      	add	r3, r2
 8009076:	009b      	lsls	r3, r3, #2
 8009078:	4a09      	ldr	r2, [pc, #36]	; (80090a0 <xTaskPriorityDisinherit+0xd8>)
 800907a:	441a      	add	r2, r3
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	3304      	adds	r3, #4
 8009080:	4619      	mov	r1, r3
 8009082:	4610      	mov	r0, r2
 8009084:	f7fe fb91 	bl	80077aa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009088:	2301      	movs	r3, #1
 800908a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800908c:	697b      	ldr	r3, [r7, #20]
	}
 800908e:	4618      	mov	r0, r3
 8009090:	3718      	adds	r7, #24
 8009092:	46bd      	mov	sp, r7
 8009094:	bd80      	pop	{r7, pc}
 8009096:	bf00      	nop
 8009098:	20009108 	.word	0x20009108
 800909c:	200095e4 	.word	0x200095e4
 80090a0:	2000910c 	.word	0x2000910c

080090a4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80090a4:	b580      	push	{r7, lr}
 80090a6:	b084      	sub	sp, #16
 80090a8:	af00      	add	r7, sp, #0
 80090aa:	6078      	str	r0, [r7, #4]
 80090ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80090ae:	4b21      	ldr	r3, [pc, #132]	; (8009134 <prvAddCurrentTaskToDelayedList+0x90>)
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80090b4:	4b20      	ldr	r3, [pc, #128]	; (8009138 <prvAddCurrentTaskToDelayedList+0x94>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	3304      	adds	r3, #4
 80090ba:	4618      	mov	r0, r3
 80090bc:	f7fe fbd2 	bl	8007864 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090c6:	d10a      	bne.n	80090de <prvAddCurrentTaskToDelayedList+0x3a>
 80090c8:	683b      	ldr	r3, [r7, #0]
 80090ca:	2b00      	cmp	r3, #0
 80090cc:	d007      	beq.n	80090de <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090ce:	4b1a      	ldr	r3, [pc, #104]	; (8009138 <prvAddCurrentTaskToDelayedList+0x94>)
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	3304      	adds	r3, #4
 80090d4:	4619      	mov	r1, r3
 80090d6:	4819      	ldr	r0, [pc, #100]	; (800913c <prvAddCurrentTaskToDelayedList+0x98>)
 80090d8:	f7fe fb67 	bl	80077aa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80090dc:	e026      	b.n	800912c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80090de:	68fa      	ldr	r2, [r7, #12]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4413      	add	r3, r2
 80090e4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80090e6:	4b14      	ldr	r3, [pc, #80]	; (8009138 <prvAddCurrentTaskToDelayedList+0x94>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	68ba      	ldr	r2, [r7, #8]
 80090ec:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80090ee:	68ba      	ldr	r2, [r7, #8]
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	429a      	cmp	r2, r3
 80090f4:	d209      	bcs.n	800910a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80090f6:	4b12      	ldr	r3, [pc, #72]	; (8009140 <prvAddCurrentTaskToDelayedList+0x9c>)
 80090f8:	681a      	ldr	r2, [r3, #0]
 80090fa:	4b0f      	ldr	r3, [pc, #60]	; (8009138 <prvAddCurrentTaskToDelayedList+0x94>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	3304      	adds	r3, #4
 8009100:	4619      	mov	r1, r3
 8009102:	4610      	mov	r0, r2
 8009104:	f7fe fb75 	bl	80077f2 <vListInsert>
}
 8009108:	e010      	b.n	800912c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800910a:	4b0e      	ldr	r3, [pc, #56]	; (8009144 <prvAddCurrentTaskToDelayedList+0xa0>)
 800910c:	681a      	ldr	r2, [r3, #0]
 800910e:	4b0a      	ldr	r3, [pc, #40]	; (8009138 <prvAddCurrentTaskToDelayedList+0x94>)
 8009110:	681b      	ldr	r3, [r3, #0]
 8009112:	3304      	adds	r3, #4
 8009114:	4619      	mov	r1, r3
 8009116:	4610      	mov	r0, r2
 8009118:	f7fe fb6b 	bl	80077f2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800911c:	4b0a      	ldr	r3, [pc, #40]	; (8009148 <prvAddCurrentTaskToDelayedList+0xa4>)
 800911e:	681b      	ldr	r3, [r3, #0]
 8009120:	68ba      	ldr	r2, [r7, #8]
 8009122:	429a      	cmp	r2, r3
 8009124:	d202      	bcs.n	800912c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009126:	4a08      	ldr	r2, [pc, #32]	; (8009148 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	6013      	str	r3, [r2, #0]
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	200095e0 	.word	0x200095e0
 8009138:	20009108 	.word	0x20009108
 800913c:	200095c8 	.word	0x200095c8
 8009140:	20009598 	.word	0x20009598
 8009144:	20009594 	.word	0x20009594
 8009148:	200095fc 	.word	0x200095fc

0800914c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b08a      	sub	sp, #40	; 0x28
 8009150:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009152:	2300      	movs	r3, #0
 8009154:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009156:	f000 fb07 	bl	8009768 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800915a:	4b1c      	ldr	r3, [pc, #112]	; (80091cc <xTimerCreateTimerTask+0x80>)
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	2b00      	cmp	r3, #0
 8009160:	d021      	beq.n	80091a6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009162:	2300      	movs	r3, #0
 8009164:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009166:	2300      	movs	r3, #0
 8009168:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800916a:	1d3a      	adds	r2, r7, #4
 800916c:	f107 0108 	add.w	r1, r7, #8
 8009170:	f107 030c 	add.w	r3, r7, #12
 8009174:	4618      	mov	r0, r3
 8009176:	f7fe fad1 	bl	800771c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800917a:	6879      	ldr	r1, [r7, #4]
 800917c:	68bb      	ldr	r3, [r7, #8]
 800917e:	68fa      	ldr	r2, [r7, #12]
 8009180:	9202      	str	r2, [sp, #8]
 8009182:	9301      	str	r3, [sp, #4]
 8009184:	2302      	movs	r3, #2
 8009186:	9300      	str	r3, [sp, #0]
 8009188:	2300      	movs	r3, #0
 800918a:	460a      	mov	r2, r1
 800918c:	4910      	ldr	r1, [pc, #64]	; (80091d0 <xTimerCreateTimerTask+0x84>)
 800918e:	4811      	ldr	r0, [pc, #68]	; (80091d4 <xTimerCreateTimerTask+0x88>)
 8009190:	f7ff f8b8 	bl	8008304 <xTaskCreateStatic>
 8009194:	4603      	mov	r3, r0
 8009196:	4a10      	ldr	r2, [pc, #64]	; (80091d8 <xTimerCreateTimerTask+0x8c>)
 8009198:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800919a:	4b0f      	ldr	r3, [pc, #60]	; (80091d8 <xTimerCreateTimerTask+0x8c>)
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d001      	beq.n	80091a6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80091a2:	2301      	movs	r3, #1
 80091a4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80091a6:	697b      	ldr	r3, [r7, #20]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d10a      	bne.n	80091c2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80091ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091b0:	f383 8811 	msr	BASEPRI, r3
 80091b4:	f3bf 8f6f 	isb	sy
 80091b8:	f3bf 8f4f 	dsb	sy
 80091bc:	613b      	str	r3, [r7, #16]
}
 80091be:	bf00      	nop
 80091c0:	e7fe      	b.n	80091c0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80091c2:	697b      	ldr	r3, [r7, #20]
}
 80091c4:	4618      	mov	r0, r3
 80091c6:	3718      	adds	r7, #24
 80091c8:	46bd      	mov	sp, r7
 80091ca:	bd80      	pop	{r7, pc}
 80091cc:	20009638 	.word	0x20009638
 80091d0:	08014450 	.word	0x08014450
 80091d4:	08009311 	.word	0x08009311
 80091d8:	2000963c 	.word	0x2000963c

080091dc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80091dc:	b580      	push	{r7, lr}
 80091de:	b08a      	sub	sp, #40	; 0x28
 80091e0:	af00      	add	r7, sp, #0
 80091e2:	60f8      	str	r0, [r7, #12]
 80091e4:	60b9      	str	r1, [r7, #8]
 80091e6:	607a      	str	r2, [r7, #4]
 80091e8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80091ea:	2300      	movs	r3, #0
 80091ec:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10a      	bne.n	800920a <xTimerGenericCommand+0x2e>
	__asm volatile
 80091f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f8:	f383 8811 	msr	BASEPRI, r3
 80091fc:	f3bf 8f6f 	isb	sy
 8009200:	f3bf 8f4f 	dsb	sy
 8009204:	623b      	str	r3, [r7, #32]
}
 8009206:	bf00      	nop
 8009208:	e7fe      	b.n	8009208 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800920a:	4b1a      	ldr	r3, [pc, #104]	; (8009274 <xTimerGenericCommand+0x98>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	2b00      	cmp	r3, #0
 8009210:	d02a      	beq.n	8009268 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800921e:	68bb      	ldr	r3, [r7, #8]
 8009220:	2b05      	cmp	r3, #5
 8009222:	dc18      	bgt.n	8009256 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009224:	f7ff feb2 	bl	8008f8c <xTaskGetSchedulerState>
 8009228:	4603      	mov	r3, r0
 800922a:	2b02      	cmp	r3, #2
 800922c:	d109      	bne.n	8009242 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800922e:	4b11      	ldr	r3, [pc, #68]	; (8009274 <xTimerGenericCommand+0x98>)
 8009230:	6818      	ldr	r0, [r3, #0]
 8009232:	f107 0110 	add.w	r1, r7, #16
 8009236:	2300      	movs	r3, #0
 8009238:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800923a:	f7fe fc7b 	bl	8007b34 <xQueueGenericSend>
 800923e:	6278      	str	r0, [r7, #36]	; 0x24
 8009240:	e012      	b.n	8009268 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009242:	4b0c      	ldr	r3, [pc, #48]	; (8009274 <xTimerGenericCommand+0x98>)
 8009244:	6818      	ldr	r0, [r3, #0]
 8009246:	f107 0110 	add.w	r1, r7, #16
 800924a:	2300      	movs	r3, #0
 800924c:	2200      	movs	r2, #0
 800924e:	f7fe fc71 	bl	8007b34 <xQueueGenericSend>
 8009252:	6278      	str	r0, [r7, #36]	; 0x24
 8009254:	e008      	b.n	8009268 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009256:	4b07      	ldr	r3, [pc, #28]	; (8009274 <xTimerGenericCommand+0x98>)
 8009258:	6818      	ldr	r0, [r3, #0]
 800925a:	f107 0110 	add.w	r1, r7, #16
 800925e:	2300      	movs	r3, #0
 8009260:	683a      	ldr	r2, [r7, #0]
 8009262:	f7fe fd65 	bl	8007d30 <xQueueGenericSendFromISR>
 8009266:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800926a:	4618      	mov	r0, r3
 800926c:	3728      	adds	r7, #40	; 0x28
 800926e:	46bd      	mov	sp, r7
 8009270:	bd80      	pop	{r7, pc}
 8009272:	bf00      	nop
 8009274:	20009638 	.word	0x20009638

08009278 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b088      	sub	sp, #32
 800927c:	af02      	add	r7, sp, #8
 800927e:	6078      	str	r0, [r7, #4]
 8009280:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009282:	4b22      	ldr	r3, [pc, #136]	; (800930c <prvProcessExpiredTimer+0x94>)
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	68db      	ldr	r3, [r3, #12]
 8009288:	68db      	ldr	r3, [r3, #12]
 800928a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	3304      	adds	r3, #4
 8009290:	4618      	mov	r0, r3
 8009292:	f7fe fae7 	bl	8007864 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009296:	697b      	ldr	r3, [r7, #20]
 8009298:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800929c:	f003 0304 	and.w	r3, r3, #4
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d022      	beq.n	80092ea <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80092a4:	697b      	ldr	r3, [r7, #20]
 80092a6:	699a      	ldr	r2, [r3, #24]
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	18d1      	adds	r1, r2, r3
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	6978      	ldr	r0, [r7, #20]
 80092b2:	f000 f8d1 	bl	8009458 <prvInsertTimerInActiveList>
 80092b6:	4603      	mov	r3, r0
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d01f      	beq.n	80092fc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80092bc:	2300      	movs	r3, #0
 80092be:	9300      	str	r3, [sp, #0]
 80092c0:	2300      	movs	r3, #0
 80092c2:	687a      	ldr	r2, [r7, #4]
 80092c4:	2100      	movs	r1, #0
 80092c6:	6978      	ldr	r0, [r7, #20]
 80092c8:	f7ff ff88 	bl	80091dc <xTimerGenericCommand>
 80092cc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d113      	bne.n	80092fc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80092d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80092d8:	f383 8811 	msr	BASEPRI, r3
 80092dc:	f3bf 8f6f 	isb	sy
 80092e0:	f3bf 8f4f 	dsb	sy
 80092e4:	60fb      	str	r3, [r7, #12]
}
 80092e6:	bf00      	nop
 80092e8:	e7fe      	b.n	80092e8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80092f0:	f023 0301 	bic.w	r3, r3, #1
 80092f4:	b2da      	uxtb	r2, r3
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	6978      	ldr	r0, [r7, #20]
 8009302:	4798      	blx	r3
}
 8009304:	bf00      	nop
 8009306:	3718      	adds	r7, #24
 8009308:	46bd      	mov	sp, r7
 800930a:	bd80      	pop	{r7, pc}
 800930c:	20009630 	.word	0x20009630

08009310 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009318:	f107 0308 	add.w	r3, r7, #8
 800931c:	4618      	mov	r0, r3
 800931e:	f000 f857 	bl	80093d0 <prvGetNextExpireTime>
 8009322:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	4619      	mov	r1, r3
 8009328:	68f8      	ldr	r0, [r7, #12]
 800932a:	f000 f803 	bl	8009334 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800932e:	f000 f8d5 	bl	80094dc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009332:	e7f1      	b.n	8009318 <prvTimerTask+0x8>

08009334 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009334:	b580      	push	{r7, lr}
 8009336:	b084      	sub	sp, #16
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800933e:	f7ff fa1d 	bl	800877c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009342:	f107 0308 	add.w	r3, r7, #8
 8009346:	4618      	mov	r0, r3
 8009348:	f000 f866 	bl	8009418 <prvSampleTimeNow>
 800934c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d130      	bne.n	80093b6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009354:	683b      	ldr	r3, [r7, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <prvProcessTimerOrBlockTask+0x3c>
 800935a:	687a      	ldr	r2, [r7, #4]
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	429a      	cmp	r2, r3
 8009360:	d806      	bhi.n	8009370 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009362:	f7ff fa19 	bl	8008798 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009366:	68f9      	ldr	r1, [r7, #12]
 8009368:	6878      	ldr	r0, [r7, #4]
 800936a:	f7ff ff85 	bl	8009278 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800936e:	e024      	b.n	80093ba <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d008      	beq.n	8009388 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009376:	4b13      	ldr	r3, [pc, #76]	; (80093c4 <prvProcessTimerOrBlockTask+0x90>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d101      	bne.n	8009384 <prvProcessTimerOrBlockTask+0x50>
 8009380:	2301      	movs	r3, #1
 8009382:	e000      	b.n	8009386 <prvProcessTimerOrBlockTask+0x52>
 8009384:	2300      	movs	r3, #0
 8009386:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009388:	4b0f      	ldr	r3, [pc, #60]	; (80093c8 <prvProcessTimerOrBlockTask+0x94>)
 800938a:	6818      	ldr	r0, [r3, #0]
 800938c:	687a      	ldr	r2, [r7, #4]
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	683a      	ldr	r2, [r7, #0]
 8009394:	4619      	mov	r1, r3
 8009396:	f7fe ff81 	bl	800829c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800939a:	f7ff f9fd 	bl	8008798 <xTaskResumeAll>
 800939e:	4603      	mov	r3, r0
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d10a      	bne.n	80093ba <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80093a4:	4b09      	ldr	r3, [pc, #36]	; (80093cc <prvProcessTimerOrBlockTask+0x98>)
 80093a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093aa:	601a      	str	r2, [r3, #0]
 80093ac:	f3bf 8f4f 	dsb	sy
 80093b0:	f3bf 8f6f 	isb	sy
}
 80093b4:	e001      	b.n	80093ba <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80093b6:	f7ff f9ef 	bl	8008798 <xTaskResumeAll>
}
 80093ba:	bf00      	nop
 80093bc:	3710      	adds	r7, #16
 80093be:	46bd      	mov	sp, r7
 80093c0:	bd80      	pop	{r7, pc}
 80093c2:	bf00      	nop
 80093c4:	20009634 	.word	0x20009634
 80093c8:	20009638 	.word	0x20009638
 80093cc:	e000ed04 	.word	0xe000ed04

080093d0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80093d0:	b480      	push	{r7}
 80093d2:	b085      	sub	sp, #20
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80093d8:	4b0e      	ldr	r3, [pc, #56]	; (8009414 <prvGetNextExpireTime+0x44>)
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d101      	bne.n	80093e6 <prvGetNextExpireTime+0x16>
 80093e2:	2201      	movs	r2, #1
 80093e4:	e000      	b.n	80093e8 <prvGetNextExpireTime+0x18>
 80093e6:	2200      	movs	r2, #0
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d105      	bne.n	8009400 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80093f4:	4b07      	ldr	r3, [pc, #28]	; (8009414 <prvGetNextExpireTime+0x44>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	68db      	ldr	r3, [r3, #12]
 80093fa:	681b      	ldr	r3, [r3, #0]
 80093fc:	60fb      	str	r3, [r7, #12]
 80093fe:	e001      	b.n	8009404 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009400:	2300      	movs	r3, #0
 8009402:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009404:	68fb      	ldr	r3, [r7, #12]
}
 8009406:	4618      	mov	r0, r3
 8009408:	3714      	adds	r7, #20
 800940a:	46bd      	mov	sp, r7
 800940c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009410:	4770      	bx	lr
 8009412:	bf00      	nop
 8009414:	20009630 	.word	0x20009630

08009418 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b084      	sub	sp, #16
 800941c:	af00      	add	r7, sp, #0
 800941e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009420:	f7ff fa58 	bl	80088d4 <xTaskGetTickCount>
 8009424:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009426:	4b0b      	ldr	r3, [pc, #44]	; (8009454 <prvSampleTimeNow+0x3c>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68fa      	ldr	r2, [r7, #12]
 800942c:	429a      	cmp	r2, r3
 800942e:	d205      	bcs.n	800943c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009430:	f000 f936 	bl	80096a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	2201      	movs	r2, #1
 8009438:	601a      	str	r2, [r3, #0]
 800943a:	e002      	b.n	8009442 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	2200      	movs	r2, #0
 8009440:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009442:	4a04      	ldr	r2, [pc, #16]	; (8009454 <prvSampleTimeNow+0x3c>)
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009448:	68fb      	ldr	r3, [r7, #12]
}
 800944a:	4618      	mov	r0, r3
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
 8009452:	bf00      	nop
 8009454:	20009640 	.word	0x20009640

08009458 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009458:	b580      	push	{r7, lr}
 800945a:	b086      	sub	sp, #24
 800945c:	af00      	add	r7, sp, #0
 800945e:	60f8      	str	r0, [r7, #12]
 8009460:	60b9      	str	r1, [r7, #8]
 8009462:	607a      	str	r2, [r7, #4]
 8009464:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009466:	2300      	movs	r3, #0
 8009468:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	68ba      	ldr	r2, [r7, #8]
 800946e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	68fa      	ldr	r2, [r7, #12]
 8009474:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009476:	68ba      	ldr	r2, [r7, #8]
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	429a      	cmp	r2, r3
 800947c:	d812      	bhi.n	80094a4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800947e:	687a      	ldr	r2, [r7, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	1ad2      	subs	r2, r2, r3
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	699b      	ldr	r3, [r3, #24]
 8009488:	429a      	cmp	r2, r3
 800948a:	d302      	bcc.n	8009492 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800948c:	2301      	movs	r3, #1
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e01b      	b.n	80094ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009492:	4b10      	ldr	r3, [pc, #64]	; (80094d4 <prvInsertTimerInActiveList+0x7c>)
 8009494:	681a      	ldr	r2, [r3, #0]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	3304      	adds	r3, #4
 800949a:	4619      	mov	r1, r3
 800949c:	4610      	mov	r0, r2
 800949e:	f7fe f9a8 	bl	80077f2 <vListInsert>
 80094a2:	e012      	b.n	80094ca <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	429a      	cmp	r2, r3
 80094aa:	d206      	bcs.n	80094ba <prvInsertTimerInActiveList+0x62>
 80094ac:	68ba      	ldr	r2, [r7, #8]
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	429a      	cmp	r2, r3
 80094b2:	d302      	bcc.n	80094ba <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80094b4:	2301      	movs	r3, #1
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e007      	b.n	80094ca <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80094ba:	4b07      	ldr	r3, [pc, #28]	; (80094d8 <prvInsertTimerInActiveList+0x80>)
 80094bc:	681a      	ldr	r2, [r3, #0]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	3304      	adds	r3, #4
 80094c2:	4619      	mov	r1, r3
 80094c4:	4610      	mov	r0, r2
 80094c6:	f7fe f994 	bl	80077f2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80094ca:	697b      	ldr	r3, [r7, #20]
}
 80094cc:	4618      	mov	r0, r3
 80094ce:	3718      	adds	r7, #24
 80094d0:	46bd      	mov	sp, r7
 80094d2:	bd80      	pop	{r7, pc}
 80094d4:	20009634 	.word	0x20009634
 80094d8:	20009630 	.word	0x20009630

080094dc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b08e      	sub	sp, #56	; 0x38
 80094e0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80094e2:	e0ca      	b.n	800967a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	da18      	bge.n	800951c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80094ea:	1d3b      	adds	r3, r7, #4
 80094ec:	3304      	adds	r3, #4
 80094ee:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80094f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d10a      	bne.n	800950c <prvProcessReceivedCommands+0x30>
	__asm volatile
 80094f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094fa:	f383 8811 	msr	BASEPRI, r3
 80094fe:	f3bf 8f6f 	isb	sy
 8009502:	f3bf 8f4f 	dsb	sy
 8009506:	61fb      	str	r3, [r7, #28]
}
 8009508:	bf00      	nop
 800950a:	e7fe      	b.n	800950a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800950c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009512:	6850      	ldr	r0, [r2, #4]
 8009514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009516:	6892      	ldr	r2, [r2, #8]
 8009518:	4611      	mov	r1, r2
 800951a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2b00      	cmp	r3, #0
 8009520:	f2c0 80ab 	blt.w	800967a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d004      	beq.n	800953a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009532:	3304      	adds	r3, #4
 8009534:	4618      	mov	r0, r3
 8009536:	f7fe f995 	bl	8007864 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800953a:	463b      	mov	r3, r7
 800953c:	4618      	mov	r0, r3
 800953e:	f7ff ff6b 	bl	8009418 <prvSampleTimeNow>
 8009542:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2b09      	cmp	r3, #9
 8009548:	f200 8096 	bhi.w	8009678 <prvProcessReceivedCommands+0x19c>
 800954c:	a201      	add	r2, pc, #4	; (adr r2, 8009554 <prvProcessReceivedCommands+0x78>)
 800954e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009552:	bf00      	nop
 8009554:	0800957d 	.word	0x0800957d
 8009558:	0800957d 	.word	0x0800957d
 800955c:	0800957d 	.word	0x0800957d
 8009560:	080095f1 	.word	0x080095f1
 8009564:	08009605 	.word	0x08009605
 8009568:	0800964f 	.word	0x0800964f
 800956c:	0800957d 	.word	0x0800957d
 8009570:	0800957d 	.word	0x0800957d
 8009574:	080095f1 	.word	0x080095f1
 8009578:	08009605 	.word	0x08009605
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800957c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800957e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009582:	f043 0301 	orr.w	r3, r3, #1
 8009586:	b2da      	uxtb	r2, r3
 8009588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800958a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800958e:	68ba      	ldr	r2, [r7, #8]
 8009590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009592:	699b      	ldr	r3, [r3, #24]
 8009594:	18d1      	adds	r1, r2, r3
 8009596:	68bb      	ldr	r3, [r7, #8]
 8009598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800959a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800959c:	f7ff ff5c 	bl	8009458 <prvInsertTimerInActiveList>
 80095a0:	4603      	mov	r3, r0
 80095a2:	2b00      	cmp	r3, #0
 80095a4:	d069      	beq.n	800967a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80095a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095a8:	6a1b      	ldr	r3, [r3, #32]
 80095aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ac:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80095ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095b0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095b4:	f003 0304 	and.w	r3, r3, #4
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d05e      	beq.n	800967a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80095bc:	68ba      	ldr	r2, [r7, #8]
 80095be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095c0:	699b      	ldr	r3, [r3, #24]
 80095c2:	441a      	add	r2, r3
 80095c4:	2300      	movs	r3, #0
 80095c6:	9300      	str	r3, [sp, #0]
 80095c8:	2300      	movs	r3, #0
 80095ca:	2100      	movs	r1, #0
 80095cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80095ce:	f7ff fe05 	bl	80091dc <xTimerGenericCommand>
 80095d2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80095d4:	6a3b      	ldr	r3, [r7, #32]
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d14f      	bne.n	800967a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80095da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095de:	f383 8811 	msr	BASEPRI, r3
 80095e2:	f3bf 8f6f 	isb	sy
 80095e6:	f3bf 8f4f 	dsb	sy
 80095ea:	61bb      	str	r3, [r7, #24]
}
 80095ec:	bf00      	nop
 80095ee:	e7fe      	b.n	80095ee <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80095f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80095f6:	f023 0301 	bic.w	r3, r3, #1
 80095fa:	b2da      	uxtb	r2, r3
 80095fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009602:	e03a      	b.n	800967a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009606:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800960a:	f043 0301 	orr.w	r3, r3, #1
 800960e:	b2da      	uxtb	r2, r3
 8009610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009612:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009616:	68ba      	ldr	r2, [r7, #8]
 8009618:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800961c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800961e:	699b      	ldr	r3, [r3, #24]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d10a      	bne.n	800963a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009628:	f383 8811 	msr	BASEPRI, r3
 800962c:	f3bf 8f6f 	isb	sy
 8009630:	f3bf 8f4f 	dsb	sy
 8009634:	617b      	str	r3, [r7, #20]
}
 8009636:	bf00      	nop
 8009638:	e7fe      	b.n	8009638 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800963a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800963c:	699a      	ldr	r2, [r3, #24]
 800963e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009640:	18d1      	adds	r1, r2, r3
 8009642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009648:	f7ff ff06 	bl	8009458 <prvInsertTimerInActiveList>
					break;
 800964c:	e015      	b.n	800967a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800964e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009650:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009654:	f003 0302 	and.w	r3, r3, #2
 8009658:	2b00      	cmp	r3, #0
 800965a:	d103      	bne.n	8009664 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800965c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800965e:	f000 fbdf 	bl	8009e20 <vPortFree>
 8009662:	e00a      	b.n	800967a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009666:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800966a:	f023 0301 	bic.w	r3, r3, #1
 800966e:	b2da      	uxtb	r2, r3
 8009670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009672:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009676:	e000      	b.n	800967a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8009678:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800967a:	4b08      	ldr	r3, [pc, #32]	; (800969c <prvProcessReceivedCommands+0x1c0>)
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	1d39      	adds	r1, r7, #4
 8009680:	2200      	movs	r2, #0
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fbf0 	bl	8007e68 <xQueueReceive>
 8009688:	4603      	mov	r3, r0
 800968a:	2b00      	cmp	r3, #0
 800968c:	f47f af2a 	bne.w	80094e4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009690:	bf00      	nop
 8009692:	bf00      	nop
 8009694:	3730      	adds	r7, #48	; 0x30
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}
 800969a:	bf00      	nop
 800969c:	20009638 	.word	0x20009638

080096a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b088      	sub	sp, #32
 80096a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80096a6:	e048      	b.n	800973a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80096a8:	4b2d      	ldr	r3, [pc, #180]	; (8009760 <prvSwitchTimerLists+0xc0>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096b2:	4b2b      	ldr	r3, [pc, #172]	; (8009760 <prvSwitchTimerLists+0xc0>)
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	68db      	ldr	r3, [r3, #12]
 80096b8:	68db      	ldr	r3, [r3, #12]
 80096ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096bc:	68fb      	ldr	r3, [r7, #12]
 80096be:	3304      	adds	r3, #4
 80096c0:	4618      	mov	r0, r3
 80096c2:	f7fe f8cf 	bl	8007864 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	6a1b      	ldr	r3, [r3, #32]
 80096ca:	68f8      	ldr	r0, [r7, #12]
 80096cc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096d4:	f003 0304 	and.w	r3, r3, #4
 80096d8:	2b00      	cmp	r3, #0
 80096da:	d02e      	beq.n	800973a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80096dc:	68fb      	ldr	r3, [r7, #12]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	693a      	ldr	r2, [r7, #16]
 80096e2:	4413      	add	r3, r2
 80096e4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80096e6:	68ba      	ldr	r2, [r7, #8]
 80096e8:	693b      	ldr	r3, [r7, #16]
 80096ea:	429a      	cmp	r2, r3
 80096ec:	d90e      	bls.n	800970c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	68ba      	ldr	r2, [r7, #8]
 80096f2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	68fa      	ldr	r2, [r7, #12]
 80096f8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80096fa:	4b19      	ldr	r3, [pc, #100]	; (8009760 <prvSwitchTimerLists+0xc0>)
 80096fc:	681a      	ldr	r2, [r3, #0]
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	3304      	adds	r3, #4
 8009702:	4619      	mov	r1, r3
 8009704:	4610      	mov	r0, r2
 8009706:	f7fe f874 	bl	80077f2 <vListInsert>
 800970a:	e016      	b.n	800973a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800970c:	2300      	movs	r3, #0
 800970e:	9300      	str	r3, [sp, #0]
 8009710:	2300      	movs	r3, #0
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	2100      	movs	r1, #0
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f7ff fd60 	bl	80091dc <xTimerGenericCommand>
 800971c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d10a      	bne.n	800973a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009724:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009728:	f383 8811 	msr	BASEPRI, r3
 800972c:	f3bf 8f6f 	isb	sy
 8009730:	f3bf 8f4f 	dsb	sy
 8009734:	603b      	str	r3, [r7, #0]
}
 8009736:	bf00      	nop
 8009738:	e7fe      	b.n	8009738 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800973a:	4b09      	ldr	r3, [pc, #36]	; (8009760 <prvSwitchTimerLists+0xc0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	2b00      	cmp	r3, #0
 8009742:	d1b1      	bne.n	80096a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009744:	4b06      	ldr	r3, [pc, #24]	; (8009760 <prvSwitchTimerLists+0xc0>)
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800974a:	4b06      	ldr	r3, [pc, #24]	; (8009764 <prvSwitchTimerLists+0xc4>)
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	4a04      	ldr	r2, [pc, #16]	; (8009760 <prvSwitchTimerLists+0xc0>)
 8009750:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009752:	4a04      	ldr	r2, [pc, #16]	; (8009764 <prvSwitchTimerLists+0xc4>)
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	6013      	str	r3, [r2, #0]
}
 8009758:	bf00      	nop
 800975a:	3718      	adds	r7, #24
 800975c:	46bd      	mov	sp, r7
 800975e:	bd80      	pop	{r7, pc}
 8009760:	20009630 	.word	0x20009630
 8009764:	20009634 	.word	0x20009634

08009768 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009768:	b580      	push	{r7, lr}
 800976a:	b082      	sub	sp, #8
 800976c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800976e:	f000 f969 	bl	8009a44 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009772:	4b15      	ldr	r3, [pc, #84]	; (80097c8 <prvCheckForValidListAndQueue+0x60>)
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	2b00      	cmp	r3, #0
 8009778:	d120      	bne.n	80097bc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800977a:	4814      	ldr	r0, [pc, #80]	; (80097cc <prvCheckForValidListAndQueue+0x64>)
 800977c:	f7fd ffe8 	bl	8007750 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009780:	4813      	ldr	r0, [pc, #76]	; (80097d0 <prvCheckForValidListAndQueue+0x68>)
 8009782:	f7fd ffe5 	bl	8007750 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009786:	4b13      	ldr	r3, [pc, #76]	; (80097d4 <prvCheckForValidListAndQueue+0x6c>)
 8009788:	4a10      	ldr	r2, [pc, #64]	; (80097cc <prvCheckForValidListAndQueue+0x64>)
 800978a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800978c:	4b12      	ldr	r3, [pc, #72]	; (80097d8 <prvCheckForValidListAndQueue+0x70>)
 800978e:	4a10      	ldr	r2, [pc, #64]	; (80097d0 <prvCheckForValidListAndQueue+0x68>)
 8009790:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009792:	2300      	movs	r3, #0
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4b11      	ldr	r3, [pc, #68]	; (80097dc <prvCheckForValidListAndQueue+0x74>)
 8009798:	4a11      	ldr	r2, [pc, #68]	; (80097e0 <prvCheckForValidListAndQueue+0x78>)
 800979a:	2110      	movs	r1, #16
 800979c:	200a      	movs	r0, #10
 800979e:	f7fe f8f3 	bl	8007988 <xQueueGenericCreateStatic>
 80097a2:	4603      	mov	r3, r0
 80097a4:	4a08      	ldr	r2, [pc, #32]	; (80097c8 <prvCheckForValidListAndQueue+0x60>)
 80097a6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80097a8:	4b07      	ldr	r3, [pc, #28]	; (80097c8 <prvCheckForValidListAndQueue+0x60>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d005      	beq.n	80097bc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80097b0:	4b05      	ldr	r3, [pc, #20]	; (80097c8 <prvCheckForValidListAndQueue+0x60>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	490b      	ldr	r1, [pc, #44]	; (80097e4 <prvCheckForValidListAndQueue+0x7c>)
 80097b6:	4618      	mov	r0, r3
 80097b8:	f7fe fd46 	bl	8008248 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80097bc:	f000 f972 	bl	8009aa4 <vPortExitCritical>
}
 80097c0:	bf00      	nop
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20009638 	.word	0x20009638
 80097cc:	20009608 	.word	0x20009608
 80097d0:	2000961c 	.word	0x2000961c
 80097d4:	20009630 	.word	0x20009630
 80097d8:	20009634 	.word	0x20009634
 80097dc:	200096e4 	.word	0x200096e4
 80097e0:	20009644 	.word	0x20009644
 80097e4:	08014458 	.word	0x08014458

080097e8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80097e8:	b480      	push	{r7}
 80097ea:	b085      	sub	sp, #20
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	60b9      	str	r1, [r7, #8]
 80097f2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	3b04      	subs	r3, #4
 80097f8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009800:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	3b04      	subs	r3, #4
 8009806:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009808:	68bb      	ldr	r3, [r7, #8]
 800980a:	f023 0201 	bic.w	r2, r3, #1
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009812:	68fb      	ldr	r3, [r7, #12]
 8009814:	3b04      	subs	r3, #4
 8009816:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009818:	4a0c      	ldr	r2, [pc, #48]	; (800984c <pxPortInitialiseStack+0x64>)
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800981e:	68fb      	ldr	r3, [r7, #12]
 8009820:	3b14      	subs	r3, #20
 8009822:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009824:	687a      	ldr	r2, [r7, #4]
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	3b04      	subs	r3, #4
 800982e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009830:	68fb      	ldr	r3, [r7, #12]
 8009832:	f06f 0202 	mvn.w	r2, #2
 8009836:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	3b20      	subs	r3, #32
 800983c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800983e:	68fb      	ldr	r3, [r7, #12]
}
 8009840:	4618      	mov	r0, r3
 8009842:	3714      	adds	r7, #20
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr
 800984c:	08009851 	.word	0x08009851

08009850 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009850:	b480      	push	{r7}
 8009852:	b085      	sub	sp, #20
 8009854:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009856:	2300      	movs	r3, #0
 8009858:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800985a:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <prvTaskExitError+0x54>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009862:	d00a      	beq.n	800987a <prvTaskExitError+0x2a>
	__asm volatile
 8009864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009868:	f383 8811 	msr	BASEPRI, r3
 800986c:	f3bf 8f6f 	isb	sy
 8009870:	f3bf 8f4f 	dsb	sy
 8009874:	60fb      	str	r3, [r7, #12]
}
 8009876:	bf00      	nop
 8009878:	e7fe      	b.n	8009878 <prvTaskExitError+0x28>
	__asm volatile
 800987a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800987e:	f383 8811 	msr	BASEPRI, r3
 8009882:	f3bf 8f6f 	isb	sy
 8009886:	f3bf 8f4f 	dsb	sy
 800988a:	60bb      	str	r3, [r7, #8]
}
 800988c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800988e:	bf00      	nop
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d0fc      	beq.n	8009890 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009896:	bf00      	nop
 8009898:	bf00      	nop
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	20000010 	.word	0x20000010
	...

080098b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80098b0:	4b07      	ldr	r3, [pc, #28]	; (80098d0 <pxCurrentTCBConst2>)
 80098b2:	6819      	ldr	r1, [r3, #0]
 80098b4:	6808      	ldr	r0, [r1, #0]
 80098b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098ba:	f380 8809 	msr	PSP, r0
 80098be:	f3bf 8f6f 	isb	sy
 80098c2:	f04f 0000 	mov.w	r0, #0
 80098c6:	f380 8811 	msr	BASEPRI, r0
 80098ca:	4770      	bx	lr
 80098cc:	f3af 8000 	nop.w

080098d0 <pxCurrentTCBConst2>:
 80098d0:	20009108 	.word	0x20009108
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80098d4:	bf00      	nop
 80098d6:	bf00      	nop

080098d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80098d8:	4808      	ldr	r0, [pc, #32]	; (80098fc <prvPortStartFirstTask+0x24>)
 80098da:	6800      	ldr	r0, [r0, #0]
 80098dc:	6800      	ldr	r0, [r0, #0]
 80098de:	f380 8808 	msr	MSP, r0
 80098e2:	f04f 0000 	mov.w	r0, #0
 80098e6:	f380 8814 	msr	CONTROL, r0
 80098ea:	b662      	cpsie	i
 80098ec:	b661      	cpsie	f
 80098ee:	f3bf 8f4f 	dsb	sy
 80098f2:	f3bf 8f6f 	isb	sy
 80098f6:	df00      	svc	0
 80098f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80098fa:	bf00      	nop
 80098fc:	e000ed08 	.word	0xe000ed08

08009900 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b086      	sub	sp, #24
 8009904:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009906:	4b46      	ldr	r3, [pc, #280]	; (8009a20 <xPortStartScheduler+0x120>)
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a46      	ldr	r2, [pc, #280]	; (8009a24 <xPortStartScheduler+0x124>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d10a      	bne.n	8009926 <xPortStartScheduler+0x26>
	__asm volatile
 8009910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009914:	f383 8811 	msr	BASEPRI, r3
 8009918:	f3bf 8f6f 	isb	sy
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	613b      	str	r3, [r7, #16]
}
 8009922:	bf00      	nop
 8009924:	e7fe      	b.n	8009924 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009926:	4b3e      	ldr	r3, [pc, #248]	; (8009a20 <xPortStartScheduler+0x120>)
 8009928:	681b      	ldr	r3, [r3, #0]
 800992a:	4a3f      	ldr	r2, [pc, #252]	; (8009a28 <xPortStartScheduler+0x128>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d10a      	bne.n	8009946 <xPortStartScheduler+0x46>
	__asm volatile
 8009930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009934:	f383 8811 	msr	BASEPRI, r3
 8009938:	f3bf 8f6f 	isb	sy
 800993c:	f3bf 8f4f 	dsb	sy
 8009940:	60fb      	str	r3, [r7, #12]
}
 8009942:	bf00      	nop
 8009944:	e7fe      	b.n	8009944 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009946:	4b39      	ldr	r3, [pc, #228]	; (8009a2c <xPortStartScheduler+0x12c>)
 8009948:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800994a:	697b      	ldr	r3, [r7, #20]
 800994c:	781b      	ldrb	r3, [r3, #0]
 800994e:	b2db      	uxtb	r3, r3
 8009950:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009952:	697b      	ldr	r3, [r7, #20]
 8009954:	22ff      	movs	r2, #255	; 0xff
 8009956:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009958:	697b      	ldr	r3, [r7, #20]
 800995a:	781b      	ldrb	r3, [r3, #0]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009960:	78fb      	ldrb	r3, [r7, #3]
 8009962:	b2db      	uxtb	r3, r3
 8009964:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009968:	b2da      	uxtb	r2, r3
 800996a:	4b31      	ldr	r3, [pc, #196]	; (8009a30 <xPortStartScheduler+0x130>)
 800996c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800996e:	4b31      	ldr	r3, [pc, #196]	; (8009a34 <xPortStartScheduler+0x134>)
 8009970:	2207      	movs	r2, #7
 8009972:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009974:	e009      	b.n	800998a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009976:	4b2f      	ldr	r3, [pc, #188]	; (8009a34 <xPortStartScheduler+0x134>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3b01      	subs	r3, #1
 800997c:	4a2d      	ldr	r2, [pc, #180]	; (8009a34 <xPortStartScheduler+0x134>)
 800997e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009980:	78fb      	ldrb	r3, [r7, #3]
 8009982:	b2db      	uxtb	r3, r3
 8009984:	005b      	lsls	r3, r3, #1
 8009986:	b2db      	uxtb	r3, r3
 8009988:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800998a:	78fb      	ldrb	r3, [r7, #3]
 800998c:	b2db      	uxtb	r3, r3
 800998e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009992:	2b80      	cmp	r3, #128	; 0x80
 8009994:	d0ef      	beq.n	8009976 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009996:	4b27      	ldr	r3, [pc, #156]	; (8009a34 <xPortStartScheduler+0x134>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f1c3 0307 	rsb	r3, r3, #7
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d00a      	beq.n	80099b8 <xPortStartScheduler+0xb8>
	__asm volatile
 80099a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80099a6:	f383 8811 	msr	BASEPRI, r3
 80099aa:	f3bf 8f6f 	isb	sy
 80099ae:	f3bf 8f4f 	dsb	sy
 80099b2:	60bb      	str	r3, [r7, #8]
}
 80099b4:	bf00      	nop
 80099b6:	e7fe      	b.n	80099b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80099b8:	4b1e      	ldr	r3, [pc, #120]	; (8009a34 <xPortStartScheduler+0x134>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	021b      	lsls	r3, r3, #8
 80099be:	4a1d      	ldr	r2, [pc, #116]	; (8009a34 <xPortStartScheduler+0x134>)
 80099c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80099c2:	4b1c      	ldr	r3, [pc, #112]	; (8009a34 <xPortStartScheduler+0x134>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80099ca:	4a1a      	ldr	r2, [pc, #104]	; (8009a34 <xPortStartScheduler+0x134>)
 80099cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	b2da      	uxtb	r2, r3
 80099d2:	697b      	ldr	r3, [r7, #20]
 80099d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80099d6:	4b18      	ldr	r3, [pc, #96]	; (8009a38 <xPortStartScheduler+0x138>)
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	4a17      	ldr	r2, [pc, #92]	; (8009a38 <xPortStartScheduler+0x138>)
 80099dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80099e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80099e2:	4b15      	ldr	r3, [pc, #84]	; (8009a38 <xPortStartScheduler+0x138>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a14      	ldr	r2, [pc, #80]	; (8009a38 <xPortStartScheduler+0x138>)
 80099e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80099ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80099ee:	f000 f8dd 	bl	8009bac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80099f2:	4b12      	ldr	r3, [pc, #72]	; (8009a3c <xPortStartScheduler+0x13c>)
 80099f4:	2200      	movs	r2, #0
 80099f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80099f8:	f000 f8fc 	bl	8009bf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80099fc:	4b10      	ldr	r3, [pc, #64]	; (8009a40 <xPortStartScheduler+0x140>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	4a0f      	ldr	r2, [pc, #60]	; (8009a40 <xPortStartScheduler+0x140>)
 8009a02:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009a06:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009a08:	f7ff ff66 	bl	80098d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009a0c:	f7ff f82c 	bl	8008a68 <vTaskSwitchContext>
	prvTaskExitError();
 8009a10:	f7ff ff1e 	bl	8009850 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009a14:	2300      	movs	r3, #0
}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	e000ed00 	.word	0xe000ed00
 8009a24:	410fc271 	.word	0x410fc271
 8009a28:	410fc270 	.word	0x410fc270
 8009a2c:	e000e400 	.word	0xe000e400
 8009a30:	20009734 	.word	0x20009734
 8009a34:	20009738 	.word	0x20009738
 8009a38:	e000ed20 	.word	0xe000ed20
 8009a3c:	20000010 	.word	0x20000010
 8009a40:	e000ef34 	.word	0xe000ef34

08009a44 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
	__asm volatile
 8009a4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4e:	f383 8811 	msr	BASEPRI, r3
 8009a52:	f3bf 8f6f 	isb	sy
 8009a56:	f3bf 8f4f 	dsb	sy
 8009a5a:	607b      	str	r3, [r7, #4]
}
 8009a5c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009a5e:	4b0f      	ldr	r3, [pc, #60]	; (8009a9c <vPortEnterCritical+0x58>)
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	3301      	adds	r3, #1
 8009a64:	4a0d      	ldr	r2, [pc, #52]	; (8009a9c <vPortEnterCritical+0x58>)
 8009a66:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009a68:	4b0c      	ldr	r3, [pc, #48]	; (8009a9c <vPortEnterCritical+0x58>)
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	2b01      	cmp	r3, #1
 8009a6e:	d10f      	bne.n	8009a90 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009a70:	4b0b      	ldr	r3, [pc, #44]	; (8009aa0 <vPortEnterCritical+0x5c>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	b2db      	uxtb	r3, r3
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d00a      	beq.n	8009a90 <vPortEnterCritical+0x4c>
	__asm volatile
 8009a7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a7e:	f383 8811 	msr	BASEPRI, r3
 8009a82:	f3bf 8f6f 	isb	sy
 8009a86:	f3bf 8f4f 	dsb	sy
 8009a8a:	603b      	str	r3, [r7, #0]
}
 8009a8c:	bf00      	nop
 8009a8e:	e7fe      	b.n	8009a8e <vPortEnterCritical+0x4a>
	}
}
 8009a90:	bf00      	nop
 8009a92:	370c      	adds	r7, #12
 8009a94:	46bd      	mov	sp, r7
 8009a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a9a:	4770      	bx	lr
 8009a9c:	20000010 	.word	0x20000010
 8009aa0:	e000ed04 	.word	0xe000ed04

08009aa4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009aa4:	b480      	push	{r7}
 8009aa6:	b083      	sub	sp, #12
 8009aa8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009aaa:	4b12      	ldr	r3, [pc, #72]	; (8009af4 <vPortExitCritical+0x50>)
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	d10a      	bne.n	8009ac8 <vPortExitCritical+0x24>
	__asm volatile
 8009ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ab6:	f383 8811 	msr	BASEPRI, r3
 8009aba:	f3bf 8f6f 	isb	sy
 8009abe:	f3bf 8f4f 	dsb	sy
 8009ac2:	607b      	str	r3, [r7, #4]
}
 8009ac4:	bf00      	nop
 8009ac6:	e7fe      	b.n	8009ac6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ac8:	4b0a      	ldr	r3, [pc, #40]	; (8009af4 <vPortExitCritical+0x50>)
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3b01      	subs	r3, #1
 8009ace:	4a09      	ldr	r2, [pc, #36]	; (8009af4 <vPortExitCritical+0x50>)
 8009ad0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ad2:	4b08      	ldr	r3, [pc, #32]	; (8009af4 <vPortExitCritical+0x50>)
 8009ad4:	681b      	ldr	r3, [r3, #0]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d105      	bne.n	8009ae6 <vPortExitCritical+0x42>
 8009ada:	2300      	movs	r3, #0
 8009adc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	f383 8811 	msr	BASEPRI, r3
}
 8009ae4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009ae6:	bf00      	nop
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr
 8009af2:	bf00      	nop
 8009af4:	20000010 	.word	0x20000010
	...

08009b00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009b00:	f3ef 8009 	mrs	r0, PSP
 8009b04:	f3bf 8f6f 	isb	sy
 8009b08:	4b15      	ldr	r3, [pc, #84]	; (8009b60 <pxCurrentTCBConst>)
 8009b0a:	681a      	ldr	r2, [r3, #0]
 8009b0c:	f01e 0f10 	tst.w	lr, #16
 8009b10:	bf08      	it	eq
 8009b12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009b16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b1a:	6010      	str	r0, [r2, #0]
 8009b1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009b20:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009b24:	f380 8811 	msr	BASEPRI, r0
 8009b28:	f3bf 8f4f 	dsb	sy
 8009b2c:	f3bf 8f6f 	isb	sy
 8009b30:	f7fe ff9a 	bl	8008a68 <vTaskSwitchContext>
 8009b34:	f04f 0000 	mov.w	r0, #0
 8009b38:	f380 8811 	msr	BASEPRI, r0
 8009b3c:	bc09      	pop	{r0, r3}
 8009b3e:	6819      	ldr	r1, [r3, #0]
 8009b40:	6808      	ldr	r0, [r1, #0]
 8009b42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b46:	f01e 0f10 	tst.w	lr, #16
 8009b4a:	bf08      	it	eq
 8009b4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009b50:	f380 8809 	msr	PSP, r0
 8009b54:	f3bf 8f6f 	isb	sy
 8009b58:	4770      	bx	lr
 8009b5a:	bf00      	nop
 8009b5c:	f3af 8000 	nop.w

08009b60 <pxCurrentTCBConst>:
 8009b60:	20009108 	.word	0x20009108
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009b64:	bf00      	nop
 8009b66:	bf00      	nop

08009b68 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b72:	f383 8811 	msr	BASEPRI, r3
 8009b76:	f3bf 8f6f 	isb	sy
 8009b7a:	f3bf 8f4f 	dsb	sy
 8009b7e:	607b      	str	r3, [r7, #4]
}
 8009b80:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009b82:	f7fe feb7 	bl	80088f4 <xTaskIncrementTick>
 8009b86:	4603      	mov	r3, r0
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d003      	beq.n	8009b94 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009b8c:	4b06      	ldr	r3, [pc, #24]	; (8009ba8 <xPortSysTickHandler+0x40>)
 8009b8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b92:	601a      	str	r2, [r3, #0]
 8009b94:	2300      	movs	r3, #0
 8009b96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009b98:	683b      	ldr	r3, [r7, #0]
 8009b9a:	f383 8811 	msr	BASEPRI, r3
}
 8009b9e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009ba0:	bf00      	nop
 8009ba2:	3708      	adds	r7, #8
 8009ba4:	46bd      	mov	sp, r7
 8009ba6:	bd80      	pop	{r7, pc}
 8009ba8:	e000ed04 	.word	0xe000ed04

08009bac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009bac:	b480      	push	{r7}
 8009bae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009bb0:	4b0b      	ldr	r3, [pc, #44]	; (8009be0 <vPortSetupTimerInterrupt+0x34>)
 8009bb2:	2200      	movs	r2, #0
 8009bb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009bb6:	4b0b      	ldr	r3, [pc, #44]	; (8009be4 <vPortSetupTimerInterrupt+0x38>)
 8009bb8:	2200      	movs	r2, #0
 8009bba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009bbc:	4b0a      	ldr	r3, [pc, #40]	; (8009be8 <vPortSetupTimerInterrupt+0x3c>)
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	4a0a      	ldr	r2, [pc, #40]	; (8009bec <vPortSetupTimerInterrupt+0x40>)
 8009bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8009bc6:	099b      	lsrs	r3, r3, #6
 8009bc8:	4a09      	ldr	r2, [pc, #36]	; (8009bf0 <vPortSetupTimerInterrupt+0x44>)
 8009bca:	3b01      	subs	r3, #1
 8009bcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009bce:	4b04      	ldr	r3, [pc, #16]	; (8009be0 <vPortSetupTimerInterrupt+0x34>)
 8009bd0:	2207      	movs	r2, #7
 8009bd2:	601a      	str	r2, [r3, #0]
}
 8009bd4:	bf00      	nop
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bdc:	4770      	bx	lr
 8009bde:	bf00      	nop
 8009be0:	e000e010 	.word	0xe000e010
 8009be4:	e000e018 	.word	0xe000e018
 8009be8:	20000004 	.word	0x20000004
 8009bec:	10624dd3 	.word	0x10624dd3
 8009bf0:	e000e014 	.word	0xe000e014

08009bf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8009bf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8009c04 <vPortEnableVFP+0x10>
 8009bf8:	6801      	ldr	r1, [r0, #0]
 8009bfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8009bfe:	6001      	str	r1, [r0, #0]
 8009c00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8009c02:	bf00      	nop
 8009c04:	e000ed88 	.word	0xe000ed88

08009c08 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c08:	b480      	push	{r7}
 8009c0a:	b085      	sub	sp, #20
 8009c0c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c0e:	f3ef 8305 	mrs	r3, IPSR
 8009c12:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	2b0f      	cmp	r3, #15
 8009c18:	d914      	bls.n	8009c44 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c1a:	4a17      	ldr	r2, [pc, #92]	; (8009c78 <vPortValidateInterruptPriority+0x70>)
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	4413      	add	r3, r2
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c24:	4b15      	ldr	r3, [pc, #84]	; (8009c7c <vPortValidateInterruptPriority+0x74>)
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	7afa      	ldrb	r2, [r7, #11]
 8009c2a:	429a      	cmp	r2, r3
 8009c2c:	d20a      	bcs.n	8009c44 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	607b      	str	r3, [r7, #4]
}
 8009c40:	bf00      	nop
 8009c42:	e7fe      	b.n	8009c42 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009c44:	4b0e      	ldr	r3, [pc, #56]	; (8009c80 <vPortValidateInterruptPriority+0x78>)
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009c4c:	4b0d      	ldr	r3, [pc, #52]	; (8009c84 <vPortValidateInterruptPriority+0x7c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	429a      	cmp	r2, r3
 8009c52:	d90a      	bls.n	8009c6a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c58:	f383 8811 	msr	BASEPRI, r3
 8009c5c:	f3bf 8f6f 	isb	sy
 8009c60:	f3bf 8f4f 	dsb	sy
 8009c64:	603b      	str	r3, [r7, #0]
}
 8009c66:	bf00      	nop
 8009c68:	e7fe      	b.n	8009c68 <vPortValidateInterruptPriority+0x60>
	}
 8009c6a:	bf00      	nop
 8009c6c:	3714      	adds	r7, #20
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c74:	4770      	bx	lr
 8009c76:	bf00      	nop
 8009c78:	e000e3f0 	.word	0xe000e3f0
 8009c7c:	20009734 	.word	0x20009734
 8009c80:	e000ed0c 	.word	0xe000ed0c
 8009c84:	20009738 	.word	0x20009738

08009c88 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b08a      	sub	sp, #40	; 0x28
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009c90:	2300      	movs	r3, #0
 8009c92:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009c94:	f7fe fd72 	bl	800877c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009c98:	4b5b      	ldr	r3, [pc, #364]	; (8009e08 <pvPortMalloc+0x180>)
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d101      	bne.n	8009ca4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009ca0:	f000 f920 	bl	8009ee4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009ca4:	4b59      	ldr	r3, [pc, #356]	; (8009e0c <pvPortMalloc+0x184>)
 8009ca6:	681a      	ldr	r2, [r3, #0]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	4013      	ands	r3, r2
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	f040 8093 	bne.w	8009dd8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2b00      	cmp	r3, #0
 8009cb6:	d01d      	beq.n	8009cf4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009cb8:	2208      	movs	r2, #8
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	4413      	add	r3, r2
 8009cbe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	f003 0307 	and.w	r3, r3, #7
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d014      	beq.n	8009cf4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	f023 0307 	bic.w	r3, r3, #7
 8009cd0:	3308      	adds	r3, #8
 8009cd2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	f003 0307 	and.w	r3, r3, #7
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d00a      	beq.n	8009cf4 <pvPortMalloc+0x6c>
	__asm volatile
 8009cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce2:	f383 8811 	msr	BASEPRI, r3
 8009ce6:	f3bf 8f6f 	isb	sy
 8009cea:	f3bf 8f4f 	dsb	sy
 8009cee:	617b      	str	r3, [r7, #20]
}
 8009cf0:	bf00      	nop
 8009cf2:	e7fe      	b.n	8009cf2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2b00      	cmp	r3, #0
 8009cf8:	d06e      	beq.n	8009dd8 <pvPortMalloc+0x150>
 8009cfa:	4b45      	ldr	r3, [pc, #276]	; (8009e10 <pvPortMalloc+0x188>)
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	687a      	ldr	r2, [r7, #4]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d869      	bhi.n	8009dd8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009d04:	4b43      	ldr	r3, [pc, #268]	; (8009e14 <pvPortMalloc+0x18c>)
 8009d06:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8009d08:	4b42      	ldr	r3, [pc, #264]	; (8009e14 <pvPortMalloc+0x18c>)
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d0e:	e004      	b.n	8009d1a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8009d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d12:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d1c:	685b      	ldr	r3, [r3, #4]
 8009d1e:	687a      	ldr	r2, [r7, #4]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d903      	bls.n	8009d2c <pvPortMalloc+0xa4>
 8009d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	d1f1      	bne.n	8009d10 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009d2c:	4b36      	ldr	r3, [pc, #216]	; (8009e08 <pvPortMalloc+0x180>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d32:	429a      	cmp	r2, r3
 8009d34:	d050      	beq.n	8009dd8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009d36:	6a3b      	ldr	r3, [r7, #32]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	2208      	movs	r2, #8
 8009d3c:	4413      	add	r3, r2
 8009d3e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009d40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d42:	681a      	ldr	r2, [r3, #0]
 8009d44:	6a3b      	ldr	r3, [r7, #32]
 8009d46:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d4a:	685a      	ldr	r2, [r3, #4]
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	1ad2      	subs	r2, r2, r3
 8009d50:	2308      	movs	r3, #8
 8009d52:	005b      	lsls	r3, r3, #1
 8009d54:	429a      	cmp	r2, r3
 8009d56:	d91f      	bls.n	8009d98 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009d58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	4413      	add	r3, r2
 8009d5e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009d60:	69bb      	ldr	r3, [r7, #24]
 8009d62:	f003 0307 	and.w	r3, r3, #7
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d00a      	beq.n	8009d80 <pvPortMalloc+0xf8>
	__asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	613b      	str	r3, [r7, #16]
}
 8009d7c:	bf00      	nop
 8009d7e:	e7fe      	b.n	8009d7e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d82:	685a      	ldr	r2, [r3, #4]
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	1ad2      	subs	r2, r2, r3
 8009d88:	69bb      	ldr	r3, [r7, #24]
 8009d8a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009d92:	69b8      	ldr	r0, [r7, #24]
 8009d94:	f000 f908 	bl	8009fa8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009d98:	4b1d      	ldr	r3, [pc, #116]	; (8009e10 <pvPortMalloc+0x188>)
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d9e:	685b      	ldr	r3, [r3, #4]
 8009da0:	1ad3      	subs	r3, r2, r3
 8009da2:	4a1b      	ldr	r2, [pc, #108]	; (8009e10 <pvPortMalloc+0x188>)
 8009da4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009da6:	4b1a      	ldr	r3, [pc, #104]	; (8009e10 <pvPortMalloc+0x188>)
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	4b1b      	ldr	r3, [pc, #108]	; (8009e18 <pvPortMalloc+0x190>)
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	429a      	cmp	r2, r3
 8009db0:	d203      	bcs.n	8009dba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009db2:	4b17      	ldr	r3, [pc, #92]	; (8009e10 <pvPortMalloc+0x188>)
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a18      	ldr	r2, [pc, #96]	; (8009e18 <pvPortMalloc+0x190>)
 8009db8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dbc:	685a      	ldr	r2, [r3, #4]
 8009dbe:	4b13      	ldr	r3, [pc, #76]	; (8009e0c <pvPortMalloc+0x184>)
 8009dc0:	681b      	ldr	r3, [r3, #0]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dc6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dca:	2200      	movs	r2, #0
 8009dcc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009dce:	4b13      	ldr	r3, [pc, #76]	; (8009e1c <pvPortMalloc+0x194>)
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	3301      	adds	r3, #1
 8009dd4:	4a11      	ldr	r2, [pc, #68]	; (8009e1c <pvPortMalloc+0x194>)
 8009dd6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009dd8:	f7fe fcde 	bl	8008798 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	f003 0307 	and.w	r3, r3, #7
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d00a      	beq.n	8009dfc <pvPortMalloc+0x174>
	__asm volatile
 8009de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dea:	f383 8811 	msr	BASEPRI, r3
 8009dee:	f3bf 8f6f 	isb	sy
 8009df2:	f3bf 8f4f 	dsb	sy
 8009df6:	60fb      	str	r3, [r7, #12]
}
 8009df8:	bf00      	nop
 8009dfa:	e7fe      	b.n	8009dfa <pvPortMalloc+0x172>
	return pvReturn;
 8009dfc:	69fb      	ldr	r3, [r7, #28]
}
 8009dfe:	4618      	mov	r0, r3
 8009e00:	3728      	adds	r7, #40	; 0x28
 8009e02:	46bd      	mov	sp, r7
 8009e04:	bd80      	pop	{r7, pc}
 8009e06:	bf00      	nop
 8009e08:	20010f44 	.word	0x20010f44
 8009e0c:	20010f58 	.word	0x20010f58
 8009e10:	20010f48 	.word	0x20010f48
 8009e14:	20010f3c 	.word	0x20010f3c
 8009e18:	20010f4c 	.word	0x20010f4c
 8009e1c:	20010f50 	.word	0x20010f50

08009e20 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009e20:	b580      	push	{r7, lr}
 8009e22:	b086      	sub	sp, #24
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d04d      	beq.n	8009ece <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009e32:	2308      	movs	r3, #8
 8009e34:	425b      	negs	r3, r3
 8009e36:	697a      	ldr	r2, [r7, #20]
 8009e38:	4413      	add	r3, r2
 8009e3a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	685a      	ldr	r2, [r3, #4]
 8009e44:	4b24      	ldr	r3, [pc, #144]	; (8009ed8 <vPortFree+0xb8>)
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	4013      	ands	r3, r2
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d10a      	bne.n	8009e64 <vPortFree+0x44>
	__asm volatile
 8009e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e52:	f383 8811 	msr	BASEPRI, r3
 8009e56:	f3bf 8f6f 	isb	sy
 8009e5a:	f3bf 8f4f 	dsb	sy
 8009e5e:	60fb      	str	r3, [r7, #12]
}
 8009e60:	bf00      	nop
 8009e62:	e7fe      	b.n	8009e62 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009e64:	693b      	ldr	r3, [r7, #16]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00a      	beq.n	8009e82 <vPortFree+0x62>
	__asm volatile
 8009e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e70:	f383 8811 	msr	BASEPRI, r3
 8009e74:	f3bf 8f6f 	isb	sy
 8009e78:	f3bf 8f4f 	dsb	sy
 8009e7c:	60bb      	str	r3, [r7, #8]
}
 8009e7e:	bf00      	nop
 8009e80:	e7fe      	b.n	8009e80 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009e82:	693b      	ldr	r3, [r7, #16]
 8009e84:	685a      	ldr	r2, [r3, #4]
 8009e86:	4b14      	ldr	r3, [pc, #80]	; (8009ed8 <vPortFree+0xb8>)
 8009e88:	681b      	ldr	r3, [r3, #0]
 8009e8a:	4013      	ands	r3, r2
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d01e      	beq.n	8009ece <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d11a      	bne.n	8009ece <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009e98:	693b      	ldr	r3, [r7, #16]
 8009e9a:	685a      	ldr	r2, [r3, #4]
 8009e9c:	4b0e      	ldr	r3, [pc, #56]	; (8009ed8 <vPortFree+0xb8>)
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	43db      	mvns	r3, r3
 8009ea2:	401a      	ands	r2, r3
 8009ea4:	693b      	ldr	r3, [r7, #16]
 8009ea6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009ea8:	f7fe fc68 	bl	800877c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009eac:	693b      	ldr	r3, [r7, #16]
 8009eae:	685a      	ldr	r2, [r3, #4]
 8009eb0:	4b0a      	ldr	r3, [pc, #40]	; (8009edc <vPortFree+0xbc>)
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4413      	add	r3, r2
 8009eb6:	4a09      	ldr	r2, [pc, #36]	; (8009edc <vPortFree+0xbc>)
 8009eb8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009eba:	6938      	ldr	r0, [r7, #16]
 8009ebc:	f000 f874 	bl	8009fa8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009ec0:	4b07      	ldr	r3, [pc, #28]	; (8009ee0 <vPortFree+0xc0>)
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	3301      	adds	r3, #1
 8009ec6:	4a06      	ldr	r2, [pc, #24]	; (8009ee0 <vPortFree+0xc0>)
 8009ec8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8009eca:	f7fe fc65 	bl	8008798 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009ece:	bf00      	nop
 8009ed0:	3718      	adds	r7, #24
 8009ed2:	46bd      	mov	sp, r7
 8009ed4:	bd80      	pop	{r7, pc}
 8009ed6:	bf00      	nop
 8009ed8:	20010f58 	.word	0x20010f58
 8009edc:	20010f48 	.word	0x20010f48
 8009ee0:	20010f54 	.word	0x20010f54

08009ee4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009ee4:	b480      	push	{r7}
 8009ee6:	b085      	sub	sp, #20
 8009ee8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009eea:	f44f 43f0 	mov.w	r3, #30720	; 0x7800
 8009eee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009ef0:	4b27      	ldr	r3, [pc, #156]	; (8009f90 <prvHeapInit+0xac>)
 8009ef2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	f003 0307 	and.w	r3, r3, #7
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00c      	beq.n	8009f18 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	3307      	adds	r3, #7
 8009f02:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	f023 0307 	bic.w	r3, r3, #7
 8009f0a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009f0c:	68ba      	ldr	r2, [r7, #8]
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1ad3      	subs	r3, r2, r3
 8009f12:	4a1f      	ldr	r2, [pc, #124]	; (8009f90 <prvHeapInit+0xac>)
 8009f14:	4413      	add	r3, r2
 8009f16:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009f1c:	4a1d      	ldr	r2, [pc, #116]	; (8009f94 <prvHeapInit+0xb0>)
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009f22:	4b1c      	ldr	r3, [pc, #112]	; (8009f94 <prvHeapInit+0xb0>)
 8009f24:	2200      	movs	r2, #0
 8009f26:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	68ba      	ldr	r2, [r7, #8]
 8009f2c:	4413      	add	r3, r2
 8009f2e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009f30:	2208      	movs	r2, #8
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	f023 0307 	bic.w	r3, r3, #7
 8009f3e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	4a15      	ldr	r2, [pc, #84]	; (8009f98 <prvHeapInit+0xb4>)
 8009f44:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8009f46:	4b14      	ldr	r3, [pc, #80]	; (8009f98 <prvHeapInit+0xb4>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2200      	movs	r2, #0
 8009f4c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009f4e:	4b12      	ldr	r3, [pc, #72]	; (8009f98 <prvHeapInit+0xb4>)
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	2200      	movs	r2, #0
 8009f54:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009f5a:	683b      	ldr	r3, [r7, #0]
 8009f5c:	68fa      	ldr	r2, [r7, #12]
 8009f5e:	1ad2      	subs	r2, r2, r3
 8009f60:	683b      	ldr	r3, [r7, #0]
 8009f62:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009f64:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <prvHeapInit+0xb4>)
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	685b      	ldr	r3, [r3, #4]
 8009f70:	4a0a      	ldr	r2, [pc, #40]	; (8009f9c <prvHeapInit+0xb8>)
 8009f72:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	4a09      	ldr	r2, [pc, #36]	; (8009fa0 <prvHeapInit+0xbc>)
 8009f7a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009f7c:	4b09      	ldr	r3, [pc, #36]	; (8009fa4 <prvHeapInit+0xc0>)
 8009f7e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009f82:	601a      	str	r2, [r3, #0]
}
 8009f84:	bf00      	nop
 8009f86:	3714      	adds	r7, #20
 8009f88:	46bd      	mov	sp, r7
 8009f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f8e:	4770      	bx	lr
 8009f90:	2000973c 	.word	0x2000973c
 8009f94:	20010f3c 	.word	0x20010f3c
 8009f98:	20010f44 	.word	0x20010f44
 8009f9c:	20010f4c 	.word	0x20010f4c
 8009fa0:	20010f48 	.word	0x20010f48
 8009fa4:	20010f58 	.word	0x20010f58

08009fa8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009fa8:	b480      	push	{r7}
 8009faa:	b085      	sub	sp, #20
 8009fac:	af00      	add	r7, sp, #0
 8009fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009fb0:	4b28      	ldr	r3, [pc, #160]	; (800a054 <prvInsertBlockIntoFreeList+0xac>)
 8009fb2:	60fb      	str	r3, [r7, #12]
 8009fb4:	e002      	b.n	8009fbc <prvInsertBlockIntoFreeList+0x14>
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	60fb      	str	r3, [r7, #12]
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	687a      	ldr	r2, [r7, #4]
 8009fc2:	429a      	cmp	r2, r3
 8009fc4:	d8f7      	bhi.n	8009fb6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	685b      	ldr	r3, [r3, #4]
 8009fce:	68ba      	ldr	r2, [r7, #8]
 8009fd0:	4413      	add	r3, r2
 8009fd2:	687a      	ldr	r2, [r7, #4]
 8009fd4:	429a      	cmp	r2, r3
 8009fd6:	d108      	bne.n	8009fea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	685a      	ldr	r2, [r3, #4]
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	685b      	ldr	r3, [r3, #4]
 8009fe0:	441a      	add	r2, r3
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	685b      	ldr	r3, [r3, #4]
 8009ff2:	68ba      	ldr	r2, [r7, #8]
 8009ff4:	441a      	add	r2, r3
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	681b      	ldr	r3, [r3, #0]
 8009ffa:	429a      	cmp	r2, r3
 8009ffc:	d118      	bne.n	800a030 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681a      	ldr	r2, [r3, #0]
 800a002:	4b15      	ldr	r3, [pc, #84]	; (800a058 <prvInsertBlockIntoFreeList+0xb0>)
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	429a      	cmp	r2, r3
 800a008:	d00d      	beq.n	800a026 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	685a      	ldr	r2, [r3, #4]
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	441a      	add	r2, r3
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a01a:	68fb      	ldr	r3, [r7, #12]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	681a      	ldr	r2, [r3, #0]
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	601a      	str	r2, [r3, #0]
 800a024:	e008      	b.n	800a038 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a026:	4b0c      	ldr	r3, [pc, #48]	; (800a058 <prvInsertBlockIntoFreeList+0xb0>)
 800a028:	681a      	ldr	r2, [r3, #0]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	601a      	str	r2, [r3, #0]
 800a02e:	e003      	b.n	800a038 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	681a      	ldr	r2, [r3, #0]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a038:	68fa      	ldr	r2, [r7, #12]
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d002      	beq.n	800a046 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a040:	68fb      	ldr	r3, [r7, #12]
 800a042:	687a      	ldr	r2, [r7, #4]
 800a044:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a046:	bf00      	nop
 800a048:	3714      	adds	r7, #20
 800a04a:	46bd      	mov	sp, r7
 800a04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a050:	4770      	bx	lr
 800a052:	bf00      	nop
 800a054:	20010f3c 	.word	0x20010f3c
 800a058:	20010f44 	.word	0x20010f44

0800a05c <rcl_get_zero_initialized_publisher>:
 800a05c:	4b01      	ldr	r3, [pc, #4]	; (800a064 <rcl_get_zero_initialized_publisher+0x8>)
 800a05e:	6818      	ldr	r0, [r3, #0]
 800a060:	4770      	bx	lr
 800a062:	bf00      	nop
 800a064:	080144b0 	.word	0x080144b0

0800a068 <rcl_publisher_init>:
 800a068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a06c:	b088      	sub	sp, #32
 800a06e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800a070:	2d00      	cmp	r5, #0
 800a072:	d069      	beq.n	800a148 <rcl_publisher_init+0xe0>
 800a074:	f105 0950 	add.w	r9, r5, #80	; 0x50
 800a078:	4604      	mov	r4, r0
 800a07a:	4648      	mov	r0, r9
 800a07c:	460e      	mov	r6, r1
 800a07e:	4690      	mov	r8, r2
 800a080:	461f      	mov	r7, r3
 800a082:	f000 f9d5 	bl	800a430 <rcutils_allocator_is_valid>
 800a086:	2800      	cmp	r0, #0
 800a088:	d05e      	beq.n	800a148 <rcl_publisher_init+0xe0>
 800a08a:	2c00      	cmp	r4, #0
 800a08c:	d05c      	beq.n	800a148 <rcl_publisher_init+0xe0>
 800a08e:	f8d4 a000 	ldr.w	sl, [r4]
 800a092:	f1ba 0f00 	cmp.w	sl, #0
 800a096:	d004      	beq.n	800a0a2 <rcl_publisher_init+0x3a>
 800a098:	2764      	movs	r7, #100	; 0x64
 800a09a:	4638      	mov	r0, r7
 800a09c:	b008      	add	sp, #32
 800a09e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0a2:	4630      	mov	r0, r6
 800a0a4:	f004 ffb8 	bl	800f018 <rcl_node_is_valid>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d052      	beq.n	800a152 <rcl_publisher_init+0xea>
 800a0ac:	f1b8 0f00 	cmp.w	r8, #0
 800a0b0:	d04a      	beq.n	800a148 <rcl_publisher_init+0xe0>
 800a0b2:	2f00      	cmp	r7, #0
 800a0b4:	d048      	beq.n	800a148 <rcl_publisher_init+0xe0>
 800a0b6:	e9cd aa03 	strd	sl, sl, [sp, #12]
 800a0ba:	aa07      	add	r2, sp, #28
 800a0bc:	9205      	str	r2, [sp, #20]
 800a0be:	f105 0358 	add.w	r3, r5, #88	; 0x58
 800a0c2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0c6:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800a0ca:	f8cd a01c 	str.w	sl, [sp, #28]
 800a0ce:	4639      	mov	r1, r7
 800a0d0:	e899 000c 	ldmia.w	r9, {r2, r3}
 800a0d4:	4630      	mov	r0, r6
 800a0d6:	f004 fff3 	bl	800f0c0 <rcl_node_resolve_name>
 800a0da:	4607      	mov	r7, r0
 800a0dc:	2800      	cmp	r0, #0
 800a0de:	d14f      	bne.n	800a180 <rcl_publisher_init+0x118>
 800a0e0:	6d2b      	ldr	r3, [r5, #80]	; 0x50
 800a0e2:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a0e4:	20c8      	movs	r0, #200	; 0xc8
 800a0e6:	4798      	blx	r3
 800a0e8:	6020      	str	r0, [r4, #0]
 800a0ea:	2800      	cmp	r0, #0
 800a0ec:	d04e      	beq.n	800a18c <rcl_publisher_init+0x124>
 800a0ee:	4630      	mov	r0, r6
 800a0f0:	f004 ffb4 	bl	800f05c <rcl_node_get_rmw_handle>
 800a0f4:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a0f8:	9300      	str	r3, [sp, #0]
 800a0fa:	9a07      	ldr	r2, [sp, #28]
 800a0fc:	6827      	ldr	r7, [r4, #0]
 800a0fe:	462b      	mov	r3, r5
 800a100:	4641      	mov	r1, r8
 800a102:	f000 fa53 	bl	800a5ac <rmw_create_publisher>
 800a106:	6823      	ldr	r3, [r4, #0]
 800a108:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 800a10c:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a110:	b370      	cbz	r0, 800a170 <rcl_publisher_init+0x108>
 800a112:	f103 0170 	add.w	r1, r3, #112	; 0x70
 800a116:	f000 fb27 	bl	800a768 <rmw_publisher_get_actual_qos>
 800a11a:	6823      	ldr	r3, [r4, #0]
 800a11c:	4607      	mov	r7, r0
 800a11e:	b9d0      	cbnz	r0, 800a156 <rcl_publisher_init+0xee>
 800a120:	f895 2048 	ldrb.w	r2, [r5, #72]	; 0x48
 800a124:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
 800a128:	4629      	mov	r1, r5
 800a12a:	2270      	movs	r2, #112	; 0x70
 800a12c:	4618      	mov	r0, r3
 800a12e:	f009 fa3d 	bl	80135ac <memcpy>
 800a132:	6832      	ldr	r2, [r6, #0]
 800a134:	f8c0 20c0 	str.w	r2, [r0, #192]	; 0xc0
 800a138:	9807      	ldr	r0, [sp, #28]
 800a13a:	6d6b      	ldr	r3, [r5, #84]	; 0x54
 800a13c:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a13e:	4798      	blx	r3
 800a140:	4638      	mov	r0, r7
 800a142:	b008      	add	sp, #32
 800a144:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a148:	270b      	movs	r7, #11
 800a14a:	4638      	mov	r0, r7
 800a14c:	b008      	add	sp, #32
 800a14e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a152:	27c8      	movs	r7, #200	; 0xc8
 800a154:	e7a1      	b.n	800a09a <rcl_publisher_init+0x32>
 800a156:	b18b      	cbz	r3, 800a17c <rcl_publisher_init+0x114>
 800a158:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a15c:	b142      	cbz	r2, 800a170 <rcl_publisher_init+0x108>
 800a15e:	4630      	mov	r0, r6
 800a160:	f004 ff7c 	bl	800f05c <rcl_node_get_rmw_handle>
 800a164:	6823      	ldr	r3, [r4, #0]
 800a166:	f8d3 10c4 	ldr.w	r1, [r3, #196]	; 0xc4
 800a16a:	f000 fb0d 	bl	800a788 <rmw_destroy_publisher>
 800a16e:	6823      	ldr	r3, [r4, #0]
 800a170:	6d6a      	ldr	r2, [r5, #84]	; 0x54
 800a172:	6e29      	ldr	r1, [r5, #96]	; 0x60
 800a174:	4618      	mov	r0, r3
 800a176:	4790      	blx	r2
 800a178:	2300      	movs	r3, #0
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	2701      	movs	r7, #1
 800a17e:	e7db      	b.n	800a138 <rcl_publisher_init+0xd0>
 800a180:	2867      	cmp	r0, #103	; 0x67
 800a182:	d0d9      	beq.n	800a138 <rcl_publisher_init+0xd0>
 800a184:	2869      	cmp	r0, #105	; 0x69
 800a186:	d003      	beq.n	800a190 <rcl_publisher_init+0x128>
 800a188:	280a      	cmp	r0, #10
 800a18a:	d1f7      	bne.n	800a17c <rcl_publisher_init+0x114>
 800a18c:	270a      	movs	r7, #10
 800a18e:	e7d3      	b.n	800a138 <rcl_publisher_init+0xd0>
 800a190:	2767      	movs	r7, #103	; 0x67
 800a192:	e7d1      	b.n	800a138 <rcl_publisher_init+0xd0>

0800a194 <rcl_publisher_get_default_options>:
 800a194:	b570      	push	{r4, r5, r6, lr}
 800a196:	4d14      	ldr	r5, [pc, #80]	; (800a1e8 <rcl_publisher_get_default_options+0x54>)
 800a198:	4914      	ldr	r1, [pc, #80]	; (800a1ec <rcl_publisher_get_default_options+0x58>)
 800a19a:	b088      	sub	sp, #32
 800a19c:	4604      	mov	r4, r0
 800a19e:	2250      	movs	r2, #80	; 0x50
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f009 fa03 	bl	80135ac <memcpy>
 800a1a6:	a802      	add	r0, sp, #8
 800a1a8:	f000 f934 	bl	800a414 <rcutils_get_default_allocator>
 800a1ac:	f10d 0c08 	add.w	ip, sp, #8
 800a1b0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800a1b4:	f105 0e50 	add.w	lr, r5, #80	; 0x50
 800a1b8:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800a1bc:	466e      	mov	r6, sp
 800a1be:	f8dc 3000 	ldr.w	r3, [ip]
 800a1c2:	f8ce 3000 	str.w	r3, [lr]
 800a1c6:	4630      	mov	r0, r6
 800a1c8:	f000 f972 	bl	800a4b0 <rmw_get_default_publisher_options>
 800a1cc:	e896 0003 	ldmia.w	r6, {r0, r1}
 800a1d0:	f105 0364 	add.w	r3, r5, #100	; 0x64
 800a1d4:	e883 0003 	stmia.w	r3, {r0, r1}
 800a1d8:	2270      	movs	r2, #112	; 0x70
 800a1da:	4629      	mov	r1, r5
 800a1dc:	4620      	mov	r0, r4
 800a1de:	f009 f9e5 	bl	80135ac <memcpy>
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	b008      	add	sp, #32
 800a1e6:	bd70      	pop	{r4, r5, r6, pc}
 800a1e8:	20010f60 	.word	0x20010f60
 800a1ec:	080144b8 	.word	0x080144b8

0800a1f0 <rcl_publish>:
 800a1f0:	b1f8      	cbz	r0, 800a232 <rcl_publish+0x42>
 800a1f2:	6803      	ldr	r3, [r0, #0]
 800a1f4:	b570      	push	{r4, r5, r6, lr}
 800a1f6:	4604      	mov	r4, r0
 800a1f8:	b1b3      	cbz	r3, 800a228 <rcl_publish+0x38>
 800a1fa:	4616      	mov	r6, r2
 800a1fc:	f8d3 20c4 	ldr.w	r2, [r3, #196]	; 0xc4
 800a200:	b192      	cbz	r2, 800a228 <rcl_publish+0x38>
 800a202:	f8d3 00c0 	ldr.w	r0, [r3, #192]	; 0xc0
 800a206:	460d      	mov	r5, r1
 800a208:	f004 fb2c 	bl	800e864 <rcl_context_is_valid>
 800a20c:	b160      	cbz	r0, 800a228 <rcl_publish+0x38>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	f8d3 00c4 	ldr.w	r0, [r3, #196]	; 0xc4
 800a214:	b140      	cbz	r0, 800a228 <rcl_publish+0x38>
 800a216:	b155      	cbz	r5, 800a22e <rcl_publish+0x3e>
 800a218:	4632      	mov	r2, r6
 800a21a:	4629      	mov	r1, r5
 800a21c:	f000 f966 	bl	800a4ec <rmw_publish>
 800a220:	3800      	subs	r0, #0
 800a222:	bf18      	it	ne
 800a224:	2001      	movne	r0, #1
 800a226:	bd70      	pop	{r4, r5, r6, pc}
 800a228:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a22c:	bd70      	pop	{r4, r5, r6, pc}
 800a22e:	200b      	movs	r0, #11
 800a230:	bd70      	pop	{r4, r5, r6, pc}
 800a232:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800a236:	4770      	bx	lr

0800a238 <rclc_support_init>:
 800a238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a23c:	b086      	sub	sp, #24
 800a23e:	b3b8      	cbz	r0, 800a2b0 <rclc_support_init+0x78>
 800a240:	461c      	mov	r4, r3
 800a242:	b3ab      	cbz	r3, 800a2b0 <rclc_support_init+0x78>
 800a244:	460f      	mov	r7, r1
 800a246:	4690      	mov	r8, r2
 800a248:	4606      	mov	r6, r0
 800a24a:	f004 fc75 	bl	800eb38 <rcl_get_zero_initialized_init_options>
 800a24e:	f104 030c 	add.w	r3, r4, #12
 800a252:	9005      	str	r0, [sp, #20]
 800a254:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a258:	e88d 0003 	stmia.w	sp, {r0, r1}
 800a25c:	a805      	add	r0, sp, #20
 800a25e:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800a262:	f004 fc6b 	bl	800eb3c <rcl_init_options_init>
 800a266:	4605      	mov	r5, r0
 800a268:	b9e0      	cbnz	r0, 800a2a4 <rclc_support_init+0x6c>
 800a26a:	ad02      	add	r5, sp, #8
 800a26c:	4628      	mov	r0, r5
 800a26e:	f004 faef 	bl	800e850 <rcl_get_zero_initialized_context>
 800a272:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a276:	4633      	mov	r3, r6
 800a278:	e886 0003 	stmia.w	r6, {r0, r1}
 800a27c:	aa05      	add	r2, sp, #20
 800a27e:	4641      	mov	r1, r8
 800a280:	4638      	mov	r0, r7
 800a282:	f004 fb55 	bl	800e930 <rcl_init>
 800a286:	4605      	mov	r5, r0
 800a288:	b9b8      	cbnz	r0, 800a2ba <rclc_support_init+0x82>
 800a28a:	60b4      	str	r4, [r6, #8]
 800a28c:	4622      	mov	r2, r4
 800a28e:	f106 010c 	add.w	r1, r6, #12
 800a292:	2003      	movs	r0, #3
 800a294:	f005 f8d0 	bl	800f438 <rcl_clock_init>
 800a298:	4605      	mov	r5, r0
 800a29a:	b970      	cbnz	r0, 800a2ba <rclc_support_init+0x82>
 800a29c:	a805      	add	r0, sp, #20
 800a29e:	f004 fcb3 	bl	800ec08 <rcl_init_options_fini>
 800a2a2:	b108      	cbz	r0, 800a2a8 <rclc_support_init+0x70>
 800a2a4:	f000 f8e8 	bl	800a478 <rcutils_reset_error>
 800a2a8:	4628      	mov	r0, r5
 800a2aa:	b006      	add	sp, #24
 800a2ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2b0:	250b      	movs	r5, #11
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	b006      	add	sp, #24
 800a2b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2ba:	f000 f8dd 	bl	800a478 <rcutils_reset_error>
 800a2be:	a805      	add	r0, sp, #20
 800a2c0:	f004 fca2 	bl	800ec08 <rcl_init_options_fini>
 800a2c4:	2800      	cmp	r0, #0
 800a2c6:	d0ef      	beq.n	800a2a8 <rclc_support_init+0x70>
 800a2c8:	e7ec      	b.n	800a2a4 <rclc_support_init+0x6c>
 800a2ca:	bf00      	nop

0800a2cc <rclc_node_init_default>:
 800a2cc:	b3b8      	cbz	r0, 800a33e <rclc_node_init_default+0x72>
 800a2ce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a2d2:	460d      	mov	r5, r1
 800a2d4:	b0a1      	sub	sp, #132	; 0x84
 800a2d6:	b329      	cbz	r1, 800a324 <rclc_node_init_default+0x58>
 800a2d8:	4616      	mov	r6, r2
 800a2da:	b31a      	cbz	r2, 800a324 <rclc_node_init_default+0x58>
 800a2dc:	461f      	mov	r7, r3
 800a2de:	b30b      	cbz	r3, 800a324 <rclc_node_init_default+0x58>
 800a2e0:	f10d 0810 	add.w	r8, sp, #16
 800a2e4:	4604      	mov	r4, r0
 800a2e6:	4640      	mov	r0, r8
 800a2e8:	f004 fd46 	bl	800ed78 <rcl_get_zero_initialized_node>
 800a2ec:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a2f0:	f10d 0918 	add.w	r9, sp, #24
 800a2f4:	e884 0003 	stmia.w	r4, {r0, r1}
 800a2f8:	4648      	mov	r0, r9
 800a2fa:	f004 feb5 	bl	800f068 <rcl_node_get_default_options>
 800a2fe:	4640      	mov	r0, r8
 800a300:	f004 fd3a 	bl	800ed78 <rcl_get_zero_initialized_node>
 800a304:	f8cd 9000 	str.w	r9, [sp]
 800a308:	e898 0003 	ldmia.w	r8, {r0, r1}
 800a30c:	463b      	mov	r3, r7
 800a30e:	e884 0003 	stmia.w	r4, {r0, r1}
 800a312:	4632      	mov	r2, r6
 800a314:	4629      	mov	r1, r5
 800a316:	4620      	mov	r0, r4
 800a318:	f004 fd38 	bl	800ed8c <rcl_node_init>
 800a31c:	b930      	cbnz	r0, 800a32c <rclc_node_init_default+0x60>
 800a31e:	b021      	add	sp, #132	; 0x84
 800a320:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a324:	200b      	movs	r0, #11
 800a326:	b021      	add	sp, #132	; 0x84
 800a328:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a32c:	9003      	str	r0, [sp, #12]
 800a32e:	f000 f8a3 	bl	800a478 <rcutils_reset_error>
 800a332:	f000 f8a1 	bl	800a478 <rcutils_reset_error>
 800a336:	9803      	ldr	r0, [sp, #12]
 800a338:	b021      	add	sp, #132	; 0x84
 800a33a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a33e:	200b      	movs	r0, #11
 800a340:	4770      	bx	lr
 800a342:	bf00      	nop

0800a344 <rclc_publisher_init_default>:
 800a344:	b368      	cbz	r0, 800a3a2 <rclc_publisher_init_default+0x5e>
 800a346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a34a:	460d      	mov	r5, r1
 800a34c:	b0a0      	sub	sp, #128	; 0x80
 800a34e:	b321      	cbz	r1, 800a39a <rclc_publisher_init_default+0x56>
 800a350:	4616      	mov	r6, r2
 800a352:	b312      	cbz	r2, 800a39a <rclc_publisher_init_default+0x56>
 800a354:	461f      	mov	r7, r3
 800a356:	b303      	cbz	r3, 800a39a <rclc_publisher_init_default+0x56>
 800a358:	4604      	mov	r4, r0
 800a35a:	f7ff fe7f 	bl	800a05c <rcl_get_zero_initialized_publisher>
 800a35e:	f10d 0810 	add.w	r8, sp, #16
 800a362:	6020      	str	r0, [r4, #0]
 800a364:	4640      	mov	r0, r8
 800a366:	f7ff ff15 	bl	800a194 <rcl_publisher_get_default_options>
 800a36a:	490f      	ldr	r1, [pc, #60]	; (800a3a8 <rclc_publisher_init_default+0x64>)
 800a36c:	2250      	movs	r2, #80	; 0x50
 800a36e:	4640      	mov	r0, r8
 800a370:	f009 f91c 	bl	80135ac <memcpy>
 800a374:	f8cd 8000 	str.w	r8, [sp]
 800a378:	463b      	mov	r3, r7
 800a37a:	4632      	mov	r2, r6
 800a37c:	4629      	mov	r1, r5
 800a37e:	4620      	mov	r0, r4
 800a380:	f7ff fe72 	bl	800a068 <rcl_publisher_init>
 800a384:	b910      	cbnz	r0, 800a38c <rclc_publisher_init_default+0x48>
 800a386:	b020      	add	sp, #128	; 0x80
 800a388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a38c:	9003      	str	r0, [sp, #12]
 800a38e:	f000 f873 	bl	800a478 <rcutils_reset_error>
 800a392:	9803      	ldr	r0, [sp, #12]
 800a394:	b020      	add	sp, #128	; 0x80
 800a396:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a39a:	200b      	movs	r0, #11
 800a39c:	b020      	add	sp, #128	; 0x80
 800a39e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a3a2:	200b      	movs	r0, #11
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	08014508 	.word	0x08014508

0800a3ac <__default_zero_allocate>:
 800a3ac:	f008 bc82 	b.w	8012cb4 <calloc>

0800a3b0 <__default_reallocate>:
 800a3b0:	f008 be0e 	b.w	8012fd0 <realloc>

0800a3b4 <__default_deallocate>:
 800a3b4:	f008 bcec 	b.w	8012d90 <free>

0800a3b8 <__default_allocate>:
 800a3b8:	f008 bce2 	b.w	8012d80 <malloc>

0800a3bc <rcutils_get_zero_initialized_allocator>:
 800a3bc:	b510      	push	{r4, lr}
 800a3be:	4c05      	ldr	r4, [pc, #20]	; (800a3d4 <rcutils_get_zero_initialized_allocator+0x18>)
 800a3c0:	4686      	mov	lr, r0
 800a3c2:	4684      	mov	ip, r0
 800a3c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a3c6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a3ca:	6823      	ldr	r3, [r4, #0]
 800a3cc:	f8cc 3000 	str.w	r3, [ip]
 800a3d0:	4670      	mov	r0, lr
 800a3d2:	bd10      	pop	{r4, pc}
 800a3d4:	08014558 	.word	0x08014558

0800a3d8 <rcutils_set_default_allocator>:
 800a3d8:	b1a8      	cbz	r0, 800a406 <rcutils_set_default_allocator+0x2e>
 800a3da:	6802      	ldr	r2, [r0, #0]
 800a3dc:	b1a2      	cbz	r2, 800a408 <rcutils_set_default_allocator+0x30>
 800a3de:	6841      	ldr	r1, [r0, #4]
 800a3e0:	b1a1      	cbz	r1, 800a40c <rcutils_set_default_allocator+0x34>
 800a3e2:	b410      	push	{r4}
 800a3e4:	68c4      	ldr	r4, [r0, #12]
 800a3e6:	b164      	cbz	r4, 800a402 <rcutils_set_default_allocator+0x2a>
 800a3e8:	6880      	ldr	r0, [r0, #8]
 800a3ea:	b138      	cbz	r0, 800a3fc <rcutils_set_default_allocator+0x24>
 800a3ec:	4b08      	ldr	r3, [pc, #32]	; (800a410 <rcutils_set_default_allocator+0x38>)
 800a3ee:	601a      	str	r2, [r3, #0]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	e9c3 4203 	strd	r4, r2, [r3, #12]
 800a3f6:	e9c3 1001 	strd	r1, r0, [r3, #4]
 800a3fa:	2001      	movs	r0, #1
 800a3fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a400:	4770      	bx	lr
 800a402:	4620      	mov	r0, r4
 800a404:	e7fa      	b.n	800a3fc <rcutils_set_default_allocator+0x24>
 800a406:	4770      	bx	lr
 800a408:	4610      	mov	r0, r2
 800a40a:	4770      	bx	lr
 800a40c:	4608      	mov	r0, r1
 800a40e:	4770      	bx	lr
 800a410:	20000014 	.word	0x20000014

0800a414 <rcutils_get_default_allocator>:
 800a414:	b510      	push	{r4, lr}
 800a416:	4c05      	ldr	r4, [pc, #20]	; (800a42c <rcutils_get_default_allocator+0x18>)
 800a418:	4686      	mov	lr, r0
 800a41a:	4684      	mov	ip, r0
 800a41c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a41e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800a422:	6823      	ldr	r3, [r4, #0]
 800a424:	f8cc 3000 	str.w	r3, [ip]
 800a428:	4670      	mov	r0, lr
 800a42a:	bd10      	pop	{r4, pc}
 800a42c:	20000014 	.word	0x20000014

0800a430 <rcutils_allocator_is_valid>:
 800a430:	b158      	cbz	r0, 800a44a <rcutils_allocator_is_valid+0x1a>
 800a432:	6803      	ldr	r3, [r0, #0]
 800a434:	b143      	cbz	r3, 800a448 <rcutils_allocator_is_valid+0x18>
 800a436:	6843      	ldr	r3, [r0, #4]
 800a438:	b133      	cbz	r3, 800a448 <rcutils_allocator_is_valid+0x18>
 800a43a:	68c3      	ldr	r3, [r0, #12]
 800a43c:	b123      	cbz	r3, 800a448 <rcutils_allocator_is_valid+0x18>
 800a43e:	6880      	ldr	r0, [r0, #8]
 800a440:	3800      	subs	r0, #0
 800a442:	bf18      	it	ne
 800a444:	2001      	movne	r0, #1
 800a446:	4770      	bx	lr
 800a448:	4618      	mov	r0, r3
 800a44a:	4770      	bx	lr

0800a44c <rcutils_get_error_string>:
 800a44c:	4b06      	ldr	r3, [pc, #24]	; (800a468 <rcutils_get_error_string+0x1c>)
 800a44e:	781b      	ldrb	r3, [r3, #0]
 800a450:	b13b      	cbz	r3, 800a462 <rcutils_get_error_string+0x16>
 800a452:	4b06      	ldr	r3, [pc, #24]	; (800a46c <rcutils_get_error_string+0x20>)
 800a454:	781a      	ldrb	r2, [r3, #0]
 800a456:	b90a      	cbnz	r2, 800a45c <rcutils_get_error_string+0x10>
 800a458:	2201      	movs	r2, #1
 800a45a:	701a      	strb	r2, [r3, #0]
 800a45c:	4b04      	ldr	r3, [pc, #16]	; (800a470 <rcutils_get_error_string+0x24>)
 800a45e:	7818      	ldrb	r0, [r3, #0]
 800a460:	4770      	bx	lr
 800a462:	4b04      	ldr	r3, [pc, #16]	; (800a474 <rcutils_get_error_string+0x28>)
 800a464:	7818      	ldrb	r0, [r3, #0]
 800a466:	4770      	bx	lr
 800a468:	20010fd0 	.word	0x20010fd0
 800a46c:	20010fe9 	.word	0x20010fe9
 800a470:	20010fe8 	.word	0x20010fe8
 800a474:	0801456c 	.word	0x0801456c

0800a478 <rcutils_reset_error>:
 800a478:	ed9f 7b07 	vldr	d7, [pc, #28]	; 800a498 <rcutils_reset_error+0x20>
 800a47c:	4a08      	ldr	r2, [pc, #32]	; (800a4a0 <rcutils_reset_error+0x28>)
 800a47e:	4809      	ldr	r0, [pc, #36]	; (800a4a4 <rcutils_reset_error+0x2c>)
 800a480:	4909      	ldr	r1, [pc, #36]	; (800a4a8 <rcutils_reset_error+0x30>)
 800a482:	2300      	movs	r3, #0
 800a484:	8013      	strh	r3, [r2, #0]
 800a486:	ed82 7b02 	vstr	d7, [r2, #8]
 800a48a:	4a08      	ldr	r2, [pc, #32]	; (800a4ac <rcutils_reset_error+0x34>)
 800a48c:	7003      	strb	r3, [r0, #0]
 800a48e:	700b      	strb	r3, [r1, #0]
 800a490:	7013      	strb	r3, [r2, #0]
 800a492:	4770      	bx	lr
 800a494:	f3af 8000 	nop.w
	...
 800a4a0:	20010fd8 	.word	0x20010fd8
 800a4a4:	20010fe9 	.word	0x20010fe9
 800a4a8:	20010fe8 	.word	0x20010fe8
 800a4ac:	20010fd0 	.word	0x20010fd0

0800a4b0 <rmw_get_default_publisher_options>:
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	6002      	str	r2, [r0, #0]
 800a4b4:	7102      	strb	r2, [r0, #4]
 800a4b6:	4770      	bx	lr

0800a4b8 <rmw_uros_set_custom_transport>:
 800a4b8:	b470      	push	{r4, r5, r6}
 800a4ba:	e9dd 5603 	ldrd	r5, r6, [sp, #12]
 800a4be:	b162      	cbz	r2, 800a4da <rmw_uros_set_custom_transport+0x22>
 800a4c0:	b15b      	cbz	r3, 800a4da <rmw_uros_set_custom_transport+0x22>
 800a4c2:	b155      	cbz	r5, 800a4da <rmw_uros_set_custom_transport+0x22>
 800a4c4:	b14e      	cbz	r6, 800a4da <rmw_uros_set_custom_transport+0x22>
 800a4c6:	4c06      	ldr	r4, [pc, #24]	; (800a4e0 <rmw_uros_set_custom_transport+0x28>)
 800a4c8:	7020      	strb	r0, [r4, #0]
 800a4ca:	e9c4 1201 	strd	r1, r2, [r4, #4]
 800a4ce:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800a4d2:	6166      	str	r6, [r4, #20]
 800a4d4:	2000      	movs	r0, #0
 800a4d6:	bc70      	pop	{r4, r5, r6}
 800a4d8:	4770      	bx	lr
 800a4da:	200b      	movs	r0, #11
 800a4dc:	bc70      	pop	{r4, r5, r6}
 800a4de:	4770      	bx	lr
 800a4e0:	20010fec 	.word	0x20010fec

0800a4e4 <flush_session>:
 800a4e4:	6fc9      	ldr	r1, [r1, #124]	; 0x7c
 800a4e6:	f002 bb3d 	b.w	800cb64 <uxr_run_session_until_confirm_delivery>
 800a4ea:	bf00      	nop

0800a4ec <rmw_publish>:
 800a4ec:	2800      	cmp	r0, #0
 800a4ee:	d053      	beq.n	800a598 <rmw_publish+0xac>
 800a4f0:	b570      	push	{r4, r5, r6, lr}
 800a4f2:	460d      	mov	r5, r1
 800a4f4:	b08e      	sub	sp, #56	; 0x38
 800a4f6:	2900      	cmp	r1, #0
 800a4f8:	d04b      	beq.n	800a592 <rmw_publish+0xa6>
 800a4fa:	4604      	mov	r4, r0
 800a4fc:	6800      	ldr	r0, [r0, #0]
 800a4fe:	f000 fc47 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 800a502:	2800      	cmp	r0, #0
 800a504:	d045      	beq.n	800a592 <rmw_publish+0xa6>
 800a506:	6866      	ldr	r6, [r4, #4]
 800a508:	2e00      	cmp	r6, #0
 800a50a:	d042      	beq.n	800a592 <rmw_publish+0xa6>
 800a50c:	69b4      	ldr	r4, [r6, #24]
 800a50e:	4628      	mov	r0, r5
 800a510:	6923      	ldr	r3, [r4, #16]
 800a512:	4798      	blx	r3
 800a514:	69f3      	ldr	r3, [r6, #28]
 800a516:	9005      	str	r0, [sp, #20]
 800a518:	b113      	cbz	r3, 800a520 <rmw_publish+0x34>
 800a51a:	a805      	add	r0, sp, #20
 800a51c:	4798      	blx	r3
 800a51e:	9805      	ldr	r0, [sp, #20]
 800a520:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a524:	691b      	ldr	r3, [r3, #16]
 800a526:	9000      	str	r0, [sp, #0]
 800a528:	6972      	ldr	r2, [r6, #20]
 800a52a:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a52c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a530:	ab06      	add	r3, sp, #24
 800a532:	f003 f903 	bl	800d73c <uxr_prepare_output_stream>
 800a536:	b1d8      	cbz	r0, 800a570 <rmw_publish+0x84>
 800a538:	68a3      	ldr	r3, [r4, #8]
 800a53a:	a906      	add	r1, sp, #24
 800a53c:	4628      	mov	r0, r5
 800a53e:	4798      	blx	r3
 800a540:	6a33      	ldr	r3, [r6, #32]
 800a542:	4604      	mov	r4, r0
 800a544:	b10b      	cbz	r3, 800a54a <rmw_publish+0x5e>
 800a546:	a806      	add	r0, sp, #24
 800a548:	4798      	blx	r3
 800a54a:	f896 307a 	ldrb.w	r3, [r6, #122]	; 0x7a
 800a54e:	2b01      	cmp	r3, #1
 800a550:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a554:	d022      	beq.n	800a59c <rmw_publish+0xb0>
 800a556:	6918      	ldr	r0, [r3, #16]
 800a558:	6ff1      	ldr	r1, [r6, #124]	; 0x7c
 800a55a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a55e:	f002 fb01 	bl	800cb64 <uxr_run_session_until_confirm_delivery>
 800a562:	4020      	ands	r0, r4
 800a564:	b2c4      	uxtb	r4, r0
 800a566:	f084 0001 	eor.w	r0, r4, #1
 800a56a:	b2c0      	uxtb	r0, r0
 800a56c:	b00e      	add	sp, #56	; 0x38
 800a56e:	bd70      	pop	{r4, r5, r6, pc}
 800a570:	f8d6 3080 	ldr.w	r3, [r6, #128]	; 0x80
 800a574:	6918      	ldr	r0, [r3, #16]
 800a576:	9b05      	ldr	r3, [sp, #20]
 800a578:	9300      	str	r3, [sp, #0]
 800a57a:	4b0b      	ldr	r3, [pc, #44]	; (800a5a8 <rmw_publish+0xbc>)
 800a57c:	9301      	str	r3, [sp, #4]
 800a57e:	9602      	str	r6, [sp, #8]
 800a580:	6972      	ldr	r2, [r6, #20]
 800a582:	6fb1      	ldr	r1, [r6, #120]	; 0x78
 800a584:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a588:	ab06      	add	r3, sp, #24
 800a58a:	f003 f907 	bl	800d79c <uxr_prepare_output_stream_fragmented>
 800a58e:	2800      	cmp	r0, #0
 800a590:	d1d2      	bne.n	800a538 <rmw_publish+0x4c>
 800a592:	2001      	movs	r0, #1
 800a594:	b00e      	add	sp, #56	; 0x38
 800a596:	bd70      	pop	{r4, r5, r6, pc}
 800a598:	2001      	movs	r0, #1
 800a59a:	4770      	bx	lr
 800a59c:	6918      	ldr	r0, [r3, #16]
 800a59e:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a5a2:	f001 ff59 	bl	800c458 <uxr_flash_output_streams>
 800a5a6:	e7de      	b.n	800a566 <rmw_publish+0x7a>
 800a5a8:	0800a4e5 	.word	0x0800a4e5

0800a5ac <rmw_create_publisher>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	b087      	sub	sp, #28
 800a5b2:	2800      	cmp	r0, #0
 800a5b4:	f000 80cc 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5b8:	460e      	mov	r6, r1
 800a5ba:	2900      	cmp	r1, #0
 800a5bc:	f000 80c8 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5c0:	4604      	mov	r4, r0
 800a5c2:	6800      	ldr	r0, [r0, #0]
 800a5c4:	4615      	mov	r5, r2
 800a5c6:	4698      	mov	r8, r3
 800a5c8:	f000 fbe2 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f000 80bf 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5d2:	2d00      	cmp	r5, #0
 800a5d4:	f000 80bc 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5d8:	782b      	ldrb	r3, [r5, #0]
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	f000 80b8 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5e0:	f1b8 0f00 	cmp.w	r8, #0
 800a5e4:	f000 80b4 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5e8:	485c      	ldr	r0, [pc, #368]	; (800a75c <rmw_create_publisher+0x1b0>)
 800a5ea:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800a5ee:	f005 fc9b 	bl	800ff28 <get_memory>
 800a5f2:	2800      	cmp	r0, #0
 800a5f4:	f000 80ac 	beq.w	800a750 <rmw_create_publisher+0x1a4>
 800a5f8:	6884      	ldr	r4, [r0, #8]
 800a5fa:	f8c4 4088 	str.w	r4, [r4, #136]	; 0x88
 800a5fe:	f005 fcb7 	bl	800ff70 <rmw_get_implementation_identifier>
 800a602:	f104 0a9c 	add.w	sl, r4, #156	; 0x9c
 800a606:	f8c4 0084 	str.w	r0, [r4, #132]	; 0x84
 800a60a:	f8c4 a08c 	str.w	sl, [r4, #140]	; 0x8c
 800a60e:	4628      	mov	r0, r5
 800a610:	f7f5 fde8 	bl	80001e4 <strlen>
 800a614:	3001      	adds	r0, #1
 800a616:	283c      	cmp	r0, #60	; 0x3c
 800a618:	f104 0784 	add.w	r7, r4, #132	; 0x84
 800a61c:	f200 8091 	bhi.w	800a742 <rmw_create_publisher+0x196>
 800a620:	4a4f      	ldr	r2, [pc, #316]	; (800a760 <rmw_create_publisher+0x1b4>)
 800a622:	462b      	mov	r3, r5
 800a624:	213c      	movs	r1, #60	; 0x3c
 800a626:	4650      	mov	r0, sl
 800a628:	f008 fe48 	bl	80132bc <sniprintf>
 800a62c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800a630:	67e3      	str	r3, [r4, #124]	; 0x7c
 800a632:	4641      	mov	r1, r8
 800a634:	f8c4 9080 	str.w	r9, [r4, #128]	; 0x80
 800a638:	2250      	movs	r2, #80	; 0x50
 800a63a:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800a63e:	f008 ffb5 	bl	80135ac <memcpy>
 800a642:	f898 3008 	ldrb.w	r3, [r8, #8]
 800a646:	4947      	ldr	r1, [pc, #284]	; (800a764 <rmw_create_publisher+0x1b8>)
 800a648:	2b02      	cmp	r3, #2
 800a64a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a64e:	bf0c      	ite	eq
 800a650:	f8d3 337c 	ldreq.w	r3, [r3, #892]	; 0x37c
 800a654:	f8d3 3378 	ldrne.w	r3, [r3, #888]	; 0x378
 800a658:	67a3      	str	r3, [r4, #120]	; 0x78
 800a65a:	2300      	movs	r3, #0
 800a65c:	e9c4 3307 	strd	r3, r3, [r4, #28]
 800a660:	4630      	mov	r0, r6
 800a662:	f000 fba3 	bl	800adac <get_message_typesupport_handle>
 800a666:	2800      	cmp	r0, #0
 800a668:	d06b      	beq.n	800a742 <rmw_create_publisher+0x196>
 800a66a:	6842      	ldr	r2, [r0, #4]
 800a66c:	61a2      	str	r2, [r4, #24]
 800a66e:	2a00      	cmp	r2, #0
 800a670:	d067      	beq.n	800a742 <rmw_create_publisher+0x196>
 800a672:	4629      	mov	r1, r5
 800a674:	4643      	mov	r3, r8
 800a676:	4648      	mov	r0, r9
 800a678:	f005 fee0 	bl	801043c <create_topic>
 800a67c:	6260      	str	r0, [r4, #36]	; 0x24
 800a67e:	2800      	cmp	r0, #0
 800a680:	d063      	beq.n	800a74a <rmw_create_publisher+0x19e>
 800a682:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a686:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a68a:	2103      	movs	r1, #3
 800a68c:	f8b3 0598 	ldrh.w	r0, [r3, #1432]	; 0x598
 800a690:	1c42      	adds	r2, r0, #1
 800a692:	f8a3 2598 	strh.w	r2, [r3, #1432]	; 0x598
 800a696:	f001 fd91 	bl	800c1bc <uxr_object_id>
 800a69a:	f8d4 2080 	ldr.w	r2, [r4, #128]	; 0x80
 800a69e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6a2:	6120      	str	r0, [r4, #16]
 800a6a4:	f8d3 3384 	ldr.w	r3, [r3, #900]	; 0x384
 800a6a8:	6910      	ldr	r0, [r2, #16]
 800a6aa:	2506      	movs	r5, #6
 800a6ac:	9500      	str	r5, [sp, #0]
 800a6ae:	6819      	ldr	r1, [r3, #0]
 800a6b0:	6922      	ldr	r2, [r4, #16]
 800a6b2:	f8d9 3014 	ldr.w	r3, [r9, #20]
 800a6b6:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a6ba:	f001 fcd9 	bl	800c070 <uxr_buffer_create_publisher_bin>
 800a6be:	4602      	mov	r2, r0
 800a6c0:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a6c4:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a6c8:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a6cc:	f000 fae0 	bl	800ac90 <run_xrce_session>
 800a6d0:	b3b8      	cbz	r0, 800a742 <rmw_create_publisher+0x196>
 800a6d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a6da:	2105      	movs	r1, #5
 800a6dc:	f8b3 059a 	ldrh.w	r0, [r3, #1434]	; 0x59a
 800a6e0:	1c42      	adds	r2, r0, #1
 800a6e2:	f8a3 259a 	strh.w	r2, [r3, #1434]	; 0x59a
 800a6e6:	f001 fd69 	bl	800c1bc <uxr_object_id>
 800a6ea:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a6ee:	6160      	str	r0, [r4, #20]
 800a6f0:	691e      	ldr	r6, [r3, #16]
 800a6f2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a6f6:	f8d4 b024 	ldr.w	fp, [r4, #36]	; 0x24
 800a6fa:	f10d 0a10 	add.w	sl, sp, #16
 800a6fe:	4641      	mov	r1, r8
 800a700:	4650      	mov	r0, sl
 800a702:	f8d3 8384 	ldr.w	r8, [r3, #900]	; 0x384
 800a706:	f000 fadf 	bl	800acc8 <convert_qos_profile>
 800a70a:	9503      	str	r5, [sp, #12]
 800a70c:	e89a 0003 	ldmia.w	sl, {r0, r1}
 800a710:	9001      	str	r0, [sp, #4]
 800a712:	f8ad 1008 	strh.w	r1, [sp, #8]
 800a716:	f8db 3010 	ldr.w	r3, [fp, #16]
 800a71a:	9300      	str	r3, [sp, #0]
 800a71c:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
 800a720:	e9d4 3204 	ldrd	r3, r2, [r4, #16]
 800a724:	f8d8 1000 	ldr.w	r1, [r8]
 800a728:	4630      	mov	r0, r6
 800a72a:	f001 fcd1 	bl	800c0d0 <uxr_buffer_create_datawriter_bin>
 800a72e:	4602      	mov	r2, r0
 800a730:	f8d9 0010 	ldr.w	r0, [r9, #16]
 800a734:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 800a738:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 800a73c:	f000 faa8 	bl	800ac90 <run_xrce_session>
 800a740:	b938      	cbnz	r0, 800a752 <rmw_create_publisher+0x1a6>
 800a742:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a744:	b108      	cbz	r0, 800a74a <rmw_create_publisher+0x19e>
 800a746:	f000 fa47 	bl	800abd8 <rmw_uxrce_fini_topic_memory>
 800a74a:	4638      	mov	r0, r7
 800a74c:	f000 f9ec 	bl	800ab28 <rmw_uxrce_fini_publisher_memory>
 800a750:	2700      	movs	r7, #0
 800a752:	4638      	mov	r0, r7
 800a754:	b007      	add	sp, #28
 800a756:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a75a:	bf00      	nop
 800a75c:	200158e4 	.word	0x200158e4
 800a760:	080145a4 	.word	0x080145a4
 800a764:	08014570 	.word	0x08014570

0800a768 <rmw_publisher_get_actual_qos>:
 800a768:	b150      	cbz	r0, 800a780 <rmw_publisher_get_actual_qos+0x18>
 800a76a:	b508      	push	{r3, lr}
 800a76c:	460b      	mov	r3, r1
 800a76e:	b149      	cbz	r1, 800a784 <rmw_publisher_get_actual_qos+0x1c>
 800a770:	6841      	ldr	r1, [r0, #4]
 800a772:	2250      	movs	r2, #80	; 0x50
 800a774:	3128      	adds	r1, #40	; 0x28
 800a776:	4618      	mov	r0, r3
 800a778:	f008 ff18 	bl	80135ac <memcpy>
 800a77c:	2000      	movs	r0, #0
 800a77e:	bd08      	pop	{r3, pc}
 800a780:	200b      	movs	r0, #11
 800a782:	4770      	bx	lr
 800a784:	200b      	movs	r0, #11
 800a786:	bd08      	pop	{r3, pc}

0800a788 <rmw_destroy_publisher>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	b128      	cbz	r0, 800a798 <rmw_destroy_publisher+0x10>
 800a78c:	4604      	mov	r4, r0
 800a78e:	6800      	ldr	r0, [r0, #0]
 800a790:	460d      	mov	r5, r1
 800a792:	f000 fafd 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 800a796:	b910      	cbnz	r0, 800a79e <rmw_destroy_publisher+0x16>
 800a798:	2401      	movs	r4, #1
 800a79a:	4620      	mov	r0, r4
 800a79c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a79e:	6863      	ldr	r3, [r4, #4]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d0f9      	beq.n	800a798 <rmw_destroy_publisher+0x10>
 800a7a4:	2d00      	cmp	r5, #0
 800a7a6:	d0f7      	beq.n	800a798 <rmw_destroy_publisher+0x10>
 800a7a8:	6828      	ldr	r0, [r5, #0]
 800a7aa:	f000 faf1 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d0f2      	beq.n	800a798 <rmw_destroy_publisher+0x10>
 800a7b2:	686c      	ldr	r4, [r5, #4]
 800a7b4:	2c00      	cmp	r4, #0
 800a7b6:	d0ef      	beq.n	800a798 <rmw_destroy_publisher+0x10>
 800a7b8:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a7ba:	f8d4 7080 	ldr.w	r7, [r4, #128]	; 0x80
 800a7be:	f005 fe8d 	bl	80104dc <destroy_topic>
 800a7c2:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a7c6:	6962      	ldr	r2, [r4, #20]
 800a7c8:	6918      	ldr	r0, [r3, #16]
 800a7ca:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 800a7ce:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800a7d2:	6819      	ldr	r1, [r3, #0]
 800a7d4:	f001 fb98 	bl	800bf08 <uxr_buffer_delete_entity>
 800a7d8:	f8d4 3080 	ldr.w	r3, [r4, #128]	; 0x80
 800a7dc:	6922      	ldr	r2, [r4, #16]
 800a7de:	691b      	ldr	r3, [r3, #16]
 800a7e0:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 800a7e4:	4604      	mov	r4, r0
 800a7e6:	6809      	ldr	r1, [r1, #0]
 800a7e8:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 800a7ec:	f001 fb8c 	bl	800bf08 <uxr_buffer_delete_entity>
 800a7f0:	693e      	ldr	r6, [r7, #16]
 800a7f2:	4622      	mov	r2, r4
 800a7f4:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a7f8:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a7fc:	4604      	mov	r4, r0
 800a7fe:	4630      	mov	r0, r6
 800a800:	f000 fa46 	bl	800ac90 <run_xrce_session>
 800a804:	693e      	ldr	r6, [r7, #16]
 800a806:	4622      	mov	r2, r4
 800a808:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 800a80c:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 800a810:	4604      	mov	r4, r0
 800a812:	4630      	mov	r0, r6
 800a814:	f000 fa3c 	bl	800ac90 <run_xrce_session>
 800a818:	b12c      	cbz	r4, 800a826 <rmw_destroy_publisher+0x9e>
 800a81a:	b120      	cbz	r0, 800a826 <rmw_destroy_publisher+0x9e>
 800a81c:	2400      	movs	r4, #0
 800a81e:	4628      	mov	r0, r5
 800a820:	f000 f982 	bl	800ab28 <rmw_uxrce_fini_publisher_memory>
 800a824:	e7b9      	b.n	800a79a <rmw_destroy_publisher+0x12>
 800a826:	2402      	movs	r4, #2
 800a828:	e7f9      	b.n	800a81e <rmw_destroy_publisher+0x96>
 800a82a:	bf00      	nop

0800a82c <rmw_uxrce_init_service_memory>:
 800a82c:	b1e2      	cbz	r2, 800a868 <rmw_uxrce_init_service_memory+0x3c>
 800a82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a832:	7b05      	ldrb	r5, [r0, #12]
 800a834:	4606      	mov	r6, r0
 800a836:	b9ad      	cbnz	r5, 800a864 <rmw_uxrce_init_service_memory+0x38>
 800a838:	23c8      	movs	r3, #200	; 0xc8
 800a83a:	e9c0 5500 	strd	r5, r5, [r0]
 800a83e:	6083      	str	r3, [r0, #8]
 800a840:	f240 1301 	movw	r3, #257	; 0x101
 800a844:	4617      	mov	r7, r2
 800a846:	8183      	strh	r3, [r0, #12]
 800a848:	460c      	mov	r4, r1
 800a84a:	46a8      	mov	r8, r5
 800a84c:	4621      	mov	r1, r4
 800a84e:	4630      	mov	r0, r6
 800a850:	3501      	adds	r5, #1
 800a852:	f005 fb79 	bl	800ff48 <put_memory>
 800a856:	42af      	cmp	r7, r5
 800a858:	60a4      	str	r4, [r4, #8]
 800a85a:	f884 800c 	strb.w	r8, [r4, #12]
 800a85e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a862:	d1f3      	bne.n	800a84c <rmw_uxrce_init_service_memory+0x20>
 800a864:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop

0800a86c <rmw_uxrce_init_client_memory>:
 800a86c:	b1e2      	cbz	r2, 800a8a8 <rmw_uxrce_init_client_memory+0x3c>
 800a86e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a872:	7b05      	ldrb	r5, [r0, #12]
 800a874:	4606      	mov	r6, r0
 800a876:	b9ad      	cbnz	r5, 800a8a4 <rmw_uxrce_init_client_memory+0x38>
 800a878:	23c8      	movs	r3, #200	; 0xc8
 800a87a:	e9c0 5500 	strd	r5, r5, [r0]
 800a87e:	6083      	str	r3, [r0, #8]
 800a880:	f240 1301 	movw	r3, #257	; 0x101
 800a884:	4617      	mov	r7, r2
 800a886:	8183      	strh	r3, [r0, #12]
 800a888:	460c      	mov	r4, r1
 800a88a:	46a8      	mov	r8, r5
 800a88c:	4621      	mov	r1, r4
 800a88e:	4630      	mov	r0, r6
 800a890:	3501      	adds	r5, #1
 800a892:	f005 fb59 	bl	800ff48 <put_memory>
 800a896:	42af      	cmp	r7, r5
 800a898:	60a4      	str	r4, [r4, #8]
 800a89a:	f884 800c 	strb.w	r8, [r4, #12]
 800a89e:	f104 04c8 	add.w	r4, r4, #200	; 0xc8
 800a8a2:	d1f3      	bne.n	800a88c <rmw_uxrce_init_client_memory+0x20>
 800a8a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop

0800a8ac <rmw_uxrce_init_publisher_memory>:
 800a8ac:	b1e2      	cbz	r2, 800a8e8 <rmw_uxrce_init_publisher_memory+0x3c>
 800a8ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b2:	7b05      	ldrb	r5, [r0, #12]
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	b9ad      	cbnz	r5, 800a8e4 <rmw_uxrce_init_publisher_memory+0x38>
 800a8b8:	23d8      	movs	r3, #216	; 0xd8
 800a8ba:	e9c0 5500 	strd	r5, r5, [r0]
 800a8be:	6083      	str	r3, [r0, #8]
 800a8c0:	f240 1301 	movw	r3, #257	; 0x101
 800a8c4:	4617      	mov	r7, r2
 800a8c6:	8183      	strh	r3, [r0, #12]
 800a8c8:	460c      	mov	r4, r1
 800a8ca:	46a8      	mov	r8, r5
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	4630      	mov	r0, r6
 800a8d0:	3501      	adds	r5, #1
 800a8d2:	f005 fb39 	bl	800ff48 <put_memory>
 800a8d6:	42af      	cmp	r7, r5
 800a8d8:	60a4      	str	r4, [r4, #8]
 800a8da:	f884 800c 	strb.w	r8, [r4, #12]
 800a8de:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800a8e2:	d1f3      	bne.n	800a8cc <rmw_uxrce_init_publisher_memory+0x20>
 800a8e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8e8:	4770      	bx	lr
 800a8ea:	bf00      	nop

0800a8ec <rmw_uxrce_init_subscription_memory>:
 800a8ec:	b1e2      	cbz	r2, 800a928 <rmw_uxrce_init_subscription_memory+0x3c>
 800a8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8f2:	7b05      	ldrb	r5, [r0, #12]
 800a8f4:	4606      	mov	r6, r0
 800a8f6:	b9ad      	cbnz	r5, 800a924 <rmw_uxrce_init_subscription_memory+0x38>
 800a8f8:	23d8      	movs	r3, #216	; 0xd8
 800a8fa:	e9c0 5500 	strd	r5, r5, [r0]
 800a8fe:	6083      	str	r3, [r0, #8]
 800a900:	f240 1301 	movw	r3, #257	; 0x101
 800a904:	4617      	mov	r7, r2
 800a906:	8183      	strh	r3, [r0, #12]
 800a908:	460c      	mov	r4, r1
 800a90a:	46a8      	mov	r8, r5
 800a90c:	4621      	mov	r1, r4
 800a90e:	4630      	mov	r0, r6
 800a910:	3501      	adds	r5, #1
 800a912:	f005 fb19 	bl	800ff48 <put_memory>
 800a916:	42af      	cmp	r7, r5
 800a918:	60a4      	str	r4, [r4, #8]
 800a91a:	f884 800c 	strb.w	r8, [r4, #12]
 800a91e:	f104 04d8 	add.w	r4, r4, #216	; 0xd8
 800a922:	d1f3      	bne.n	800a90c <rmw_uxrce_init_subscription_memory+0x20>
 800a924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop

0800a92c <rmw_uxrce_init_node_memory>:
 800a92c:	b1e2      	cbz	r2, 800a968 <rmw_uxrce_init_node_memory+0x3c>
 800a92e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a932:	7b05      	ldrb	r5, [r0, #12]
 800a934:	4606      	mov	r6, r0
 800a936:	b9ad      	cbnz	r5, 800a964 <rmw_uxrce_init_node_memory+0x38>
 800a938:	23a4      	movs	r3, #164	; 0xa4
 800a93a:	e9c0 5500 	strd	r5, r5, [r0]
 800a93e:	6083      	str	r3, [r0, #8]
 800a940:	f240 1301 	movw	r3, #257	; 0x101
 800a944:	4617      	mov	r7, r2
 800a946:	8183      	strh	r3, [r0, #12]
 800a948:	460c      	mov	r4, r1
 800a94a:	46a8      	mov	r8, r5
 800a94c:	4621      	mov	r1, r4
 800a94e:	4630      	mov	r0, r6
 800a950:	3501      	adds	r5, #1
 800a952:	f005 faf9 	bl	800ff48 <put_memory>
 800a956:	42af      	cmp	r7, r5
 800a958:	60a4      	str	r4, [r4, #8]
 800a95a:	f884 800c 	strb.w	r8, [r4, #12]
 800a95e:	f104 04a4 	add.w	r4, r4, #164	; 0xa4
 800a962:	d1f3      	bne.n	800a94c <rmw_uxrce_init_node_memory+0x20>
 800a964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a968:	4770      	bx	lr
 800a96a:	bf00      	nop

0800a96c <rmw_uxrce_init_session_memory>:
 800a96c:	b1ea      	cbz	r2, 800a9aa <rmw_uxrce_init_session_memory+0x3e>
 800a96e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a972:	7b05      	ldrb	r5, [r0, #12]
 800a974:	4606      	mov	r6, r0
 800a976:	b9b5      	cbnz	r5, 800a9a6 <rmw_uxrce_init_session_memory+0x3a>
 800a978:	e9c0 5500 	strd	r5, r5, [r0]
 800a97c:	f241 58a8 	movw	r8, #5544	; 0x15a8
 800a980:	f240 1301 	movw	r3, #257	; 0x101
 800a984:	4617      	mov	r7, r2
 800a986:	f8c0 8008 	str.w	r8, [r0, #8]
 800a98a:	460c      	mov	r4, r1
 800a98c:	8183      	strh	r3, [r0, #12]
 800a98e:	46a9      	mov	r9, r5
 800a990:	4621      	mov	r1, r4
 800a992:	4630      	mov	r0, r6
 800a994:	3501      	adds	r5, #1
 800a996:	f005 fad7 	bl	800ff48 <put_memory>
 800a99a:	42af      	cmp	r7, r5
 800a99c:	60a4      	str	r4, [r4, #8]
 800a99e:	f884 900c 	strb.w	r9, [r4, #12]
 800a9a2:	4444      	add	r4, r8
 800a9a4:	d1f4      	bne.n	800a990 <rmw_uxrce_init_session_memory+0x24>
 800a9a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a9aa:	4770      	bx	lr

0800a9ac <rmw_uxrce_init_topic_memory>:
 800a9ac:	b1e2      	cbz	r2, 800a9e8 <rmw_uxrce_init_topic_memory+0x3c>
 800a9ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b2:	7b05      	ldrb	r5, [r0, #12]
 800a9b4:	4606      	mov	r6, r0
 800a9b6:	b9ad      	cbnz	r5, 800a9e4 <rmw_uxrce_init_topic_memory+0x38>
 800a9b8:	231c      	movs	r3, #28
 800a9ba:	e9c0 5500 	strd	r5, r5, [r0]
 800a9be:	6083      	str	r3, [r0, #8]
 800a9c0:	f240 1301 	movw	r3, #257	; 0x101
 800a9c4:	4617      	mov	r7, r2
 800a9c6:	8183      	strh	r3, [r0, #12]
 800a9c8:	460c      	mov	r4, r1
 800a9ca:	46a8      	mov	r8, r5
 800a9cc:	4621      	mov	r1, r4
 800a9ce:	4630      	mov	r0, r6
 800a9d0:	3501      	adds	r5, #1
 800a9d2:	f005 fab9 	bl	800ff48 <put_memory>
 800a9d6:	42af      	cmp	r7, r5
 800a9d8:	60a4      	str	r4, [r4, #8]
 800a9da:	f884 800c 	strb.w	r8, [r4, #12]
 800a9de:	f104 041c 	add.w	r4, r4, #28
 800a9e2:	d1f3      	bne.n	800a9cc <rmw_uxrce_init_topic_memory+0x20>
 800a9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a9e8:	4770      	bx	lr
 800a9ea:	bf00      	nop

0800a9ec <rmw_uxrce_init_static_input_buffer_memory>:
 800a9ec:	b1ea      	cbz	r2, 800aa2a <rmw_uxrce_init_static_input_buffer_memory+0x3e>
 800a9ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a9f2:	7b05      	ldrb	r5, [r0, #12]
 800a9f4:	4606      	mov	r6, r0
 800a9f6:	b9b5      	cbnz	r5, 800aa26 <rmw_uxrce_init_static_input_buffer_memory+0x3a>
 800a9f8:	f44f 6304 	mov.w	r3, #2112	; 0x840
 800a9fc:	e9c0 5500 	strd	r5, r5, [r0]
 800aa00:	6083      	str	r3, [r0, #8]
 800aa02:	f240 1301 	movw	r3, #257	; 0x101
 800aa06:	4617      	mov	r7, r2
 800aa08:	8183      	strh	r3, [r0, #12]
 800aa0a:	460c      	mov	r4, r1
 800aa0c:	46a8      	mov	r8, r5
 800aa0e:	4621      	mov	r1, r4
 800aa10:	4630      	mov	r0, r6
 800aa12:	3501      	adds	r5, #1
 800aa14:	f005 fa98 	bl	800ff48 <put_memory>
 800aa18:	42af      	cmp	r7, r5
 800aa1a:	60a4      	str	r4, [r4, #8]
 800aa1c:	f884 800c 	strb.w	r8, [r4, #12]
 800aa20:	f504 6404 	add.w	r4, r4, #2112	; 0x840
 800aa24:	d1f3      	bne.n	800aa0e <rmw_uxrce_init_static_input_buffer_memory+0x22>
 800aa26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa2a:	4770      	bx	lr

0800aa2c <rmw_uxrce_init_init_options_impl_memory>:
 800aa2c:	b1e2      	cbz	r2, 800aa68 <rmw_uxrce_init_init_options_impl_memory+0x3c>
 800aa2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa32:	7b05      	ldrb	r5, [r0, #12]
 800aa34:	4606      	mov	r6, r0
 800aa36:	b9ad      	cbnz	r5, 800aa64 <rmw_uxrce_init_init_options_impl_memory+0x38>
 800aa38:	232c      	movs	r3, #44	; 0x2c
 800aa3a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa3e:	6083      	str	r3, [r0, #8]
 800aa40:	f240 1301 	movw	r3, #257	; 0x101
 800aa44:	4617      	mov	r7, r2
 800aa46:	8183      	strh	r3, [r0, #12]
 800aa48:	460c      	mov	r4, r1
 800aa4a:	46a8      	mov	r8, r5
 800aa4c:	4621      	mov	r1, r4
 800aa4e:	4630      	mov	r0, r6
 800aa50:	3501      	adds	r5, #1
 800aa52:	f005 fa79 	bl	800ff48 <put_memory>
 800aa56:	42af      	cmp	r7, r5
 800aa58:	60a4      	str	r4, [r4, #8]
 800aa5a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa5e:	f104 042c 	add.w	r4, r4, #44	; 0x2c
 800aa62:	d1f3      	bne.n	800aa4c <rmw_uxrce_init_init_options_impl_memory+0x20>
 800aa64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa68:	4770      	bx	lr
 800aa6a:	bf00      	nop

0800aa6c <rmw_uxrce_init_wait_set_memory>:
 800aa6c:	b1e2      	cbz	r2, 800aaa8 <rmw_uxrce_init_wait_set_memory+0x3c>
 800aa6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa72:	7b05      	ldrb	r5, [r0, #12]
 800aa74:	4606      	mov	r6, r0
 800aa76:	b9ad      	cbnz	r5, 800aaa4 <rmw_uxrce_init_wait_set_memory+0x38>
 800aa78:	231c      	movs	r3, #28
 800aa7a:	e9c0 5500 	strd	r5, r5, [r0]
 800aa7e:	6083      	str	r3, [r0, #8]
 800aa80:	f240 1301 	movw	r3, #257	; 0x101
 800aa84:	4617      	mov	r7, r2
 800aa86:	8183      	strh	r3, [r0, #12]
 800aa88:	460c      	mov	r4, r1
 800aa8a:	46a8      	mov	r8, r5
 800aa8c:	4621      	mov	r1, r4
 800aa8e:	4630      	mov	r0, r6
 800aa90:	3501      	adds	r5, #1
 800aa92:	f005 fa59 	bl	800ff48 <put_memory>
 800aa96:	42af      	cmp	r7, r5
 800aa98:	60a4      	str	r4, [r4, #8]
 800aa9a:	f884 800c 	strb.w	r8, [r4, #12]
 800aa9e:	f104 041c 	add.w	r4, r4, #28
 800aaa2:	d1f3      	bne.n	800aa8c <rmw_uxrce_init_wait_set_memory+0x20>
 800aaa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaa8:	4770      	bx	lr
 800aaaa:	bf00      	nop

0800aaac <rmw_uxrce_init_guard_condition_memory>:
 800aaac:	b1e2      	cbz	r2, 800aae8 <rmw_uxrce_init_guard_condition_memory+0x3c>
 800aaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	7b05      	ldrb	r5, [r0, #12]
 800aab4:	4606      	mov	r6, r0
 800aab6:	b9ad      	cbnz	r5, 800aae4 <rmw_uxrce_init_guard_condition_memory+0x38>
 800aab8:	2320      	movs	r3, #32
 800aaba:	e9c0 5500 	strd	r5, r5, [r0]
 800aabe:	6083      	str	r3, [r0, #8]
 800aac0:	f240 1301 	movw	r3, #257	; 0x101
 800aac4:	4617      	mov	r7, r2
 800aac6:	8183      	strh	r3, [r0, #12]
 800aac8:	460c      	mov	r4, r1
 800aaca:	46a8      	mov	r8, r5
 800aacc:	4621      	mov	r1, r4
 800aace:	4630      	mov	r0, r6
 800aad0:	3501      	adds	r5, #1
 800aad2:	f005 fa39 	bl	800ff48 <put_memory>
 800aad6:	42af      	cmp	r7, r5
 800aad8:	60a4      	str	r4, [r4, #8]
 800aada:	f884 800c 	strb.w	r8, [r4, #12]
 800aade:	f104 0420 	add.w	r4, r4, #32
 800aae2:	d1f3      	bne.n	800aacc <rmw_uxrce_init_guard_condition_memory+0x20>
 800aae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aae8:	4770      	bx	lr
 800aaea:	bf00      	nop

0800aaec <rmw_uxrce_fini_session_memory>:
 800aaec:	4601      	mov	r1, r0
 800aaee:	4801      	ldr	r0, [pc, #4]	; (800aaf4 <rmw_uxrce_fini_session_memory+0x8>)
 800aaf0:	f005 ba2a 	b.w	800ff48 <put_memory>
 800aaf4:	20015904 	.word	0x20015904

0800aaf8 <rmw_uxrce_fini_node_memory>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4604      	mov	r4, r0
 800aafc:	6800      	ldr	r0, [r0, #0]
 800aafe:	b128      	cbz	r0, 800ab0c <rmw_uxrce_fini_node_memory+0x14>
 800ab00:	4b07      	ldr	r3, [pc, #28]	; (800ab20 <rmw_uxrce_fini_node_memory+0x28>)
 800ab02:	6819      	ldr	r1, [r3, #0]
 800ab04:	f7f5 fb64 	bl	80001d0 <strcmp>
 800ab08:	b940      	cbnz	r0, 800ab1c <rmw_uxrce_fini_node_memory+0x24>
 800ab0a:	6020      	str	r0, [r4, #0]
 800ab0c:	6861      	ldr	r1, [r4, #4]
 800ab0e:	b129      	cbz	r1, 800ab1c <rmw_uxrce_fini_node_memory+0x24>
 800ab10:	2500      	movs	r5, #0
 800ab12:	4804      	ldr	r0, [pc, #16]	; (800ab24 <rmw_uxrce_fini_node_memory+0x2c>)
 800ab14:	610d      	str	r5, [r1, #16]
 800ab16:	f005 fa17 	bl	800ff48 <put_memory>
 800ab1a:	6065      	str	r5, [r4, #4]
 800ab1c:	bd38      	pop	{r3, r4, r5, pc}
 800ab1e:	bf00      	nop
 800ab20:	08014b8c 	.word	0x08014b8c
 800ab24:	200158d4 	.word	0x200158d4

0800ab28 <rmw_uxrce_fini_publisher_memory>:
 800ab28:	b510      	push	{r4, lr}
 800ab2a:	4604      	mov	r4, r0
 800ab2c:	6800      	ldr	r0, [r0, #0]
 800ab2e:	b128      	cbz	r0, 800ab3c <rmw_uxrce_fini_publisher_memory+0x14>
 800ab30:	4b06      	ldr	r3, [pc, #24]	; (800ab4c <rmw_uxrce_fini_publisher_memory+0x24>)
 800ab32:	6819      	ldr	r1, [r3, #0]
 800ab34:	f7f5 fb4c 	bl	80001d0 <strcmp>
 800ab38:	b938      	cbnz	r0, 800ab4a <rmw_uxrce_fini_publisher_memory+0x22>
 800ab3a:	6020      	str	r0, [r4, #0]
 800ab3c:	6861      	ldr	r1, [r4, #4]
 800ab3e:	b121      	cbz	r1, 800ab4a <rmw_uxrce_fini_publisher_memory+0x22>
 800ab40:	4803      	ldr	r0, [pc, #12]	; (800ab50 <rmw_uxrce_fini_publisher_memory+0x28>)
 800ab42:	f005 fa01 	bl	800ff48 <put_memory>
 800ab46:	2300      	movs	r3, #0
 800ab48:	6063      	str	r3, [r4, #4]
 800ab4a:	bd10      	pop	{r4, pc}
 800ab4c:	08014b8c 	.word	0x08014b8c
 800ab50:	200158e4 	.word	0x200158e4

0800ab54 <rmw_uxrce_fini_subscription_memory>:
 800ab54:	b510      	push	{r4, lr}
 800ab56:	4604      	mov	r4, r0
 800ab58:	6800      	ldr	r0, [r0, #0]
 800ab5a:	b128      	cbz	r0, 800ab68 <rmw_uxrce_fini_subscription_memory+0x14>
 800ab5c:	4b06      	ldr	r3, [pc, #24]	; (800ab78 <rmw_uxrce_fini_subscription_memory+0x24>)
 800ab5e:	6819      	ldr	r1, [r3, #0]
 800ab60:	f7f5 fb36 	bl	80001d0 <strcmp>
 800ab64:	b938      	cbnz	r0, 800ab76 <rmw_uxrce_fini_subscription_memory+0x22>
 800ab66:	6020      	str	r0, [r4, #0]
 800ab68:	6861      	ldr	r1, [r4, #4]
 800ab6a:	b121      	cbz	r1, 800ab76 <rmw_uxrce_fini_subscription_memory+0x22>
 800ab6c:	4803      	ldr	r0, [pc, #12]	; (800ab7c <rmw_uxrce_fini_subscription_memory+0x28>)
 800ab6e:	f005 f9eb 	bl	800ff48 <put_memory>
 800ab72:	2300      	movs	r3, #0
 800ab74:	6063      	str	r3, [r4, #4]
 800ab76:	bd10      	pop	{r4, pc}
 800ab78:	08014b8c 	.word	0x08014b8c
 800ab7c:	20015924 	.word	0x20015924

0800ab80 <rmw_uxrce_fini_service_memory>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	4604      	mov	r4, r0
 800ab84:	6800      	ldr	r0, [r0, #0]
 800ab86:	b128      	cbz	r0, 800ab94 <rmw_uxrce_fini_service_memory+0x14>
 800ab88:	4b06      	ldr	r3, [pc, #24]	; (800aba4 <rmw_uxrce_fini_service_memory+0x24>)
 800ab8a:	6819      	ldr	r1, [r3, #0]
 800ab8c:	f7f5 fb20 	bl	80001d0 <strcmp>
 800ab90:	b938      	cbnz	r0, 800aba2 <rmw_uxrce_fini_service_memory+0x22>
 800ab92:	6020      	str	r0, [r4, #0]
 800ab94:	6861      	ldr	r1, [r4, #4]
 800ab96:	b121      	cbz	r1, 800aba2 <rmw_uxrce_fini_service_memory+0x22>
 800ab98:	4803      	ldr	r0, [pc, #12]	; (800aba8 <rmw_uxrce_fini_service_memory+0x28>)
 800ab9a:	f005 f9d5 	bl	800ff48 <put_memory>
 800ab9e:	2300      	movs	r3, #0
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	bd10      	pop	{r4, pc}
 800aba4:	08014b8c 	.word	0x08014b8c
 800aba8:	200158f4 	.word	0x200158f4

0800abac <rmw_uxrce_fini_client_memory>:
 800abac:	b510      	push	{r4, lr}
 800abae:	4604      	mov	r4, r0
 800abb0:	6800      	ldr	r0, [r0, #0]
 800abb2:	b128      	cbz	r0, 800abc0 <rmw_uxrce_fini_client_memory+0x14>
 800abb4:	4b06      	ldr	r3, [pc, #24]	; (800abd0 <rmw_uxrce_fini_client_memory+0x24>)
 800abb6:	6819      	ldr	r1, [r3, #0]
 800abb8:	f7f5 fb0a 	bl	80001d0 <strcmp>
 800abbc:	b938      	cbnz	r0, 800abce <rmw_uxrce_fini_client_memory+0x22>
 800abbe:	6020      	str	r0, [r4, #0]
 800abc0:	6861      	ldr	r1, [r4, #4]
 800abc2:	b121      	cbz	r1, 800abce <rmw_uxrce_fini_client_memory+0x22>
 800abc4:	4803      	ldr	r0, [pc, #12]	; (800abd4 <rmw_uxrce_fini_client_memory+0x28>)
 800abc6:	f005 f9bf 	bl	800ff48 <put_memory>
 800abca:	2300      	movs	r3, #0
 800abcc:	6063      	str	r3, [r4, #4]
 800abce:	bd10      	pop	{r4, pc}
 800abd0:	08014b8c 	.word	0x08014b8c
 800abd4:	20011008 	.word	0x20011008

0800abd8 <rmw_uxrce_fini_topic_memory>:
 800abd8:	b510      	push	{r4, lr}
 800abda:	4604      	mov	r4, r0
 800abdc:	4621      	mov	r1, r4
 800abde:	4803      	ldr	r0, [pc, #12]	; (800abec <rmw_uxrce_fini_topic_memory+0x14>)
 800abe0:	f005 f9b2 	bl	800ff48 <put_memory>
 800abe4:	2300      	movs	r3, #0
 800abe6:	61a3      	str	r3, [r4, #24]
 800abe8:	bd10      	pop	{r4, pc}
 800abea:	bf00      	nop
 800abec:	20015934 	.word	0x20015934

0800abf0 <rmw_uxrce_get_static_input_buffer_for_entity>:
 800abf0:	b082      	sub	sp, #8
 800abf2:	b530      	push	{r4, r5, lr}
 800abf4:	4925      	ldr	r1, [pc, #148]	; (800ac8c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800abf6:	680d      	ldr	r5, [r1, #0]
 800abf8:	ac03      	add	r4, sp, #12
 800abfa:	e884 000c 	stmia.w	r4, {r2, r3}
 800abfe:	461c      	mov	r4, r3
 800ac00:	2d00      	cmp	r5, #0
 800ac02:	d041      	beq.n	800ac88 <rmw_uxrce_get_static_input_buffer_for_entity+0x98>
 800ac04:	462b      	mov	r3, r5
 800ac06:	2100      	movs	r1, #0
 800ac08:	689a      	ldr	r2, [r3, #8]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	f8d2 2814 	ldr.w	r2, [r2, #2068]	; 0x814
 800ac10:	4290      	cmp	r0, r2
 800ac12:	bf08      	it	eq
 800ac14:	3101      	addeq	r1, #1
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d1f6      	bne.n	800ac08 <rmw_uxrce_get_static_input_buffer_for_entity+0x18>
 800ac1a:	f89d 300c 	ldrb.w	r3, [sp, #12]
 800ac1e:	2b02      	cmp	r3, #2
 800ac20:	d029      	beq.n	800ac76 <rmw_uxrce_get_static_input_buffer_for_entity+0x86>
 800ac22:	d907      	bls.n	800ac34 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac24:	2b03      	cmp	r3, #3
 800ac26:	d005      	beq.n	800ac34 <rmw_uxrce_get_static_input_buffer_for_entity+0x44>
 800ac28:	2100      	movs	r1, #0
 800ac2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac2e:	4608      	mov	r0, r1
 800ac30:	b002      	add	sp, #8
 800ac32:	4770      	bx	lr
 800ac34:	b314      	cbz	r4, 800ac7c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac36:	428c      	cmp	r4, r1
 800ac38:	d820      	bhi.n	800ac7c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac3a:	2d00      	cmp	r5, #0
 800ac3c:	d0f4      	beq.n	800ac28 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ac3e:	2100      	movs	r1, #0
 800ac40:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800ac44:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
 800ac48:	e002      	b.n	800ac50 <rmw_uxrce_get_static_input_buffer_for_entity+0x60>
 800ac4a:	686d      	ldr	r5, [r5, #4]
 800ac4c:	2d00      	cmp	r5, #0
 800ac4e:	d0ec      	beq.n	800ac2a <rmw_uxrce_get_static_input_buffer_for_entity+0x3a>
 800ac50:	68ab      	ldr	r3, [r5, #8]
 800ac52:	f8d3 2814 	ldr.w	r2, [r3, #2068]	; 0x814
 800ac56:	4290      	cmp	r0, r2
 800ac58:	d1f7      	bne.n	800ac4a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac5a:	f8d3 2818 	ldr.w	r2, [r3, #2072]	; 0x818
 800ac5e:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800ac62:	4562      	cmp	r2, ip
 800ac64:	f853 3c04 	ldr.w	r3, [r3, #-4]
 800ac68:	eb73 0e04 	sbcs.w	lr, r3, r4
 800ac6c:	daed      	bge.n	800ac4a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac6e:	4694      	mov	ip, r2
 800ac70:	461c      	mov	r4, r3
 800ac72:	4629      	mov	r1, r5
 800ac74:	e7e9      	b.n	800ac4a <rmw_uxrce_get_static_input_buffer_for_entity+0x5a>
 800ac76:	b10c      	cbz	r4, 800ac7c <rmw_uxrce_get_static_input_buffer_for_entity+0x8c>
 800ac78:	428c      	cmp	r4, r1
 800ac7a:	d9d5      	bls.n	800ac28 <rmw_uxrce_get_static_input_buffer_for_entity+0x38>
 800ac7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac80:	4802      	ldr	r0, [pc, #8]	; (800ac8c <rmw_uxrce_get_static_input_buffer_for_entity+0x9c>)
 800ac82:	b002      	add	sp, #8
 800ac84:	f005 b950 	b.w	800ff28 <get_memory>
 800ac88:	4629      	mov	r1, r5
 800ac8a:	e7c6      	b.n	800ac1a <rmw_uxrce_get_static_input_buffer_for_entity+0x2a>
 800ac8c:	20015914 	.word	0x20015914

0800ac90 <run_xrce_session>:
 800ac90:	b510      	push	{r4, lr}
 800ac92:	788c      	ldrb	r4, [r1, #2]
 800ac94:	b086      	sub	sp, #24
 800ac96:	2c01      	cmp	r4, #1
 800ac98:	f8ad 200e 	strh.w	r2, [sp, #14]
 800ac9c:	d00c      	beq.n	800acb8 <run_xrce_session+0x28>
 800ac9e:	4619      	mov	r1, r3
 800aca0:	2301      	movs	r3, #1
 800aca2:	9300      	str	r3, [sp, #0]
 800aca4:	f10d 020e 	add.w	r2, sp, #14
 800aca8:	f10d 0317 	add.w	r3, sp, #23
 800acac:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800acb0:	f001 ff7e 	bl	800cbb0 <uxr_run_session_until_all_status>
 800acb4:	b006      	add	sp, #24
 800acb6:	bd10      	pop	{r4, pc}
 800acb8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 800acbc:	f001 fbcc 	bl	800c458 <uxr_flash_output_streams>
 800acc0:	4620      	mov	r0, r4
 800acc2:	b006      	add	sp, #24
 800acc4:	bd10      	pop	{r4, pc}
 800acc6:	bf00      	nop

0800acc8 <convert_qos_profile>:
 800acc8:	7a4a      	ldrb	r2, [r1, #9]
 800acca:	f891 c008 	ldrb.w	ip, [r1, #8]
 800acce:	2a02      	cmp	r2, #2
 800acd0:	bf18      	it	ne
 800acd2:	2200      	movne	r2, #0
 800acd4:	7002      	strb	r2, [r0, #0]
 800acd6:	780a      	ldrb	r2, [r1, #0]
 800acd8:	8889      	ldrh	r1, [r1, #4]
 800acda:	8081      	strh	r1, [r0, #4]
 800acdc:	f1ac 0c02 	sub.w	ip, ip, #2
 800ace0:	f1a2 0202 	sub.w	r2, r2, #2
 800ace4:	fabc fc8c 	clz	ip, ip
 800ace8:	fab2 f282 	clz	r2, r2
 800acec:	ea4f 1c5c 	mov.w	ip, ip, lsr #5
 800acf0:	0952      	lsrs	r2, r2, #5
 800acf2:	f880 c001 	strb.w	ip, [r0, #1]
 800acf6:	7082      	strb	r2, [r0, #2]
 800acf8:	4770      	bx	lr
 800acfa:	bf00      	nop

0800acfc <generate_type_name>:
 800acfc:	b530      	push	{r4, r5, lr}
 800acfe:	2300      	movs	r3, #0
 800ad00:	700b      	strb	r3, [r1, #0]
 800ad02:	6803      	ldr	r3, [r0, #0]
 800ad04:	b087      	sub	sp, #28
 800ad06:	4614      	mov	r4, r2
 800ad08:	b1d3      	cbz	r3, 800ad40 <generate_type_name+0x44>
 800ad0a:	4a0f      	ldr	r2, [pc, #60]	; (800ad48 <generate_type_name+0x4c>)
 800ad0c:	4615      	mov	r5, r2
 800ad0e:	9203      	str	r2, [sp, #12]
 800ad10:	9500      	str	r5, [sp, #0]
 800ad12:	6842      	ldr	r2, [r0, #4]
 800ad14:	480d      	ldr	r0, [pc, #52]	; (800ad4c <generate_type_name+0x50>)
 800ad16:	9001      	str	r0, [sp, #4]
 800ad18:	4608      	mov	r0, r1
 800ad1a:	490d      	ldr	r1, [pc, #52]	; (800ad50 <generate_type_name+0x54>)
 800ad1c:	9204      	str	r2, [sp, #16]
 800ad1e:	9105      	str	r1, [sp, #20]
 800ad20:	9102      	str	r1, [sp, #8]
 800ad22:	4a0c      	ldr	r2, [pc, #48]	; (800ad54 <generate_type_name+0x58>)
 800ad24:	4621      	mov	r1, r4
 800ad26:	f008 fac9 	bl	80132bc <sniprintf>
 800ad2a:	2800      	cmp	r0, #0
 800ad2c:	db05      	blt.n	800ad3a <generate_type_name+0x3e>
 800ad2e:	4284      	cmp	r4, r0
 800ad30:	bfd4      	ite	le
 800ad32:	2000      	movle	r0, #0
 800ad34:	2001      	movgt	r0, #1
 800ad36:	b007      	add	sp, #28
 800ad38:	bd30      	pop	{r4, r5, pc}
 800ad3a:	2000      	movs	r0, #0
 800ad3c:	b007      	add	sp, #28
 800ad3e:	bd30      	pop	{r4, r5, pc}
 800ad40:	4b05      	ldr	r3, [pc, #20]	; (800ad58 <generate_type_name+0x5c>)
 800ad42:	4a01      	ldr	r2, [pc, #4]	; (800ad48 <generate_type_name+0x4c>)
 800ad44:	461d      	mov	r5, r3
 800ad46:	e7e2      	b.n	800ad0e <generate_type_name+0x12>
 800ad48:	08014594 	.word	0x08014594
 800ad4c:	080145ac 	.word	0x080145ac
 800ad50:	080145a8 	.word	0x080145a8
 800ad54:	08014598 	.word	0x08014598
 800ad58:	08014964 	.word	0x08014964

0800ad5c <generate_topic_name>:
 800ad5c:	b510      	push	{r4, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	4614      	mov	r4, r2
 800ad62:	9000      	str	r0, [sp, #0]
 800ad64:	4b08      	ldr	r3, [pc, #32]	; (800ad88 <generate_topic_name+0x2c>)
 800ad66:	4a09      	ldr	r2, [pc, #36]	; (800ad8c <generate_topic_name+0x30>)
 800ad68:	4608      	mov	r0, r1
 800ad6a:	4621      	mov	r1, r4
 800ad6c:	f008 faa6 	bl	80132bc <sniprintf>
 800ad70:	2800      	cmp	r0, #0
 800ad72:	db05      	blt.n	800ad80 <generate_topic_name+0x24>
 800ad74:	4284      	cmp	r4, r0
 800ad76:	bfd4      	ite	le
 800ad78:	2000      	movle	r0, #0
 800ad7a:	2001      	movgt	r0, #1
 800ad7c:	b002      	add	sp, #8
 800ad7e:	bd10      	pop	{r4, pc}
 800ad80:	2000      	movs	r0, #0
 800ad82:	b002      	add	sp, #8
 800ad84:	bd10      	pop	{r4, pc}
 800ad86:	bf00      	nop
 800ad88:	080145b8 	.word	0x080145b8
 800ad8c:	080145b0 	.word	0x080145b0

0800ad90 <is_uxrce_rmw_identifier_valid>:
 800ad90:	b510      	push	{r4, lr}
 800ad92:	4604      	mov	r4, r0
 800ad94:	b140      	cbz	r0, 800ada8 <is_uxrce_rmw_identifier_valid+0x18>
 800ad96:	f005 f8eb 	bl	800ff70 <rmw_get_implementation_identifier>
 800ad9a:	4601      	mov	r1, r0
 800ad9c:	4620      	mov	r0, r4
 800ad9e:	f7f5 fa17 	bl	80001d0 <strcmp>
 800ada2:	fab0 f080 	clz	r0, r0
 800ada6:	0940      	lsrs	r0, r0, #5
 800ada8:	bd10      	pop	{r4, pc}
 800adaa:	bf00      	nop

0800adac <get_message_typesupport_handle>:
 800adac:	6883      	ldr	r3, [r0, #8]
 800adae:	4718      	bx	r3

0800adb0 <get_message_typesupport_handle_function>:
 800adb0:	b510      	push	{r4, lr}
 800adb2:	4604      	mov	r4, r0
 800adb4:	6800      	ldr	r0, [r0, #0]
 800adb6:	f7f5 fa0b 	bl	80001d0 <strcmp>
 800adba:	2800      	cmp	r0, #0
 800adbc:	bf0c      	ite	eq
 800adbe:	4620      	moveq	r0, r4
 800adc0:	2000      	movne	r0, #0
 800adc2:	bd10      	pop	{r4, pc}

0800adc4 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800adc4:	4b04      	ldr	r3, [pc, #16]	; (800add8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	b10a      	cbz	r2, 800adce <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800adca:	4803      	ldr	r0, [pc, #12]	; (800add8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800adcc:	4770      	bx	lr
 800adce:	4a03      	ldr	r2, [pc, #12]	; (800addc <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800add0:	4801      	ldr	r0, [pc, #4]	; (800add8 <rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800add2:	6812      	ldr	r2, [r2, #0]
 800add4:	601a      	str	r2, [r3, #0]
 800add6:	4770      	bx	lr
 800add8:	20000030 	.word	0x20000030
 800addc:	200000ac 	.word	0x200000ac

0800ade0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ade0:	4a02      	ldr	r2, [pc, #8]	; (800adec <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0xc>)
 800ade2:	4b03      	ldr	r3, [pc, #12]	; (800adf0 <_GLOBAL__sub_I_rosidl_typesupport_c__get_message_type_support_handle__std_msgs__msg__Int32+0x10>)
 800ade4:	6812      	ldr	r2, [r2, #0]
 800ade6:	601a      	str	r2, [r3, #0]
 800ade8:	4770      	bx	lr
 800adea:	bf00      	nop
 800adec:	200000ac 	.word	0x200000ac
 800adf0:	20000030 	.word	0x20000030

0800adf4 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_init_function>:
 800adf4:	f005 bda0 	b.w	8010938 <std_msgs__msg__Int32__init>

0800adf8 <std_msgs__msg__Int32__rosidl_typesupport_introspection_c__Int32_fini_function>:
 800adf8:	f005 bda2 	b.w	8010940 <std_msgs__msg__Int32__fini>

0800adfc <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800adfc:	4b04      	ldr	r3, [pc, #16]	; (800ae10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800adfe:	681a      	ldr	r2, [r3, #0]
 800ae00:	b10a      	cbz	r2, 800ae06 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0xa>
 800ae02:	4803      	ldr	r0, [pc, #12]	; (800ae10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ae04:	4770      	bx	lr
 800ae06:	4a03      	ldr	r2, [pc, #12]	; (800ae14 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x18>)
 800ae08:	4801      	ldr	r0, [pc, #4]	; (800ae10 <rosidl_typesupport_introspection_c__get_message_type_support_handle__std_msgs__msg__Int32+0x14>)
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	601a      	str	r2, [r3, #0]
 800ae0e:	4770      	bx	lr
 800ae10:	20000078 	.word	0x20000078
 800ae14:	200000b0 	.word	0x200000b0

0800ae18 <_Int32__max_serialized_size>:
 800ae18:	b508      	push	{r3, lr}
 800ae1a:	2104      	movs	r1, #4
 800ae1c:	2000      	movs	r0, #0
 800ae1e:	f001 f807 	bl	800be30 <ucdr_alignment>
 800ae22:	3004      	adds	r0, #4
 800ae24:	bd08      	pop	{r3, pc}
 800ae26:	bf00      	nop

0800ae28 <_Int32__cdr_deserialize>:
 800ae28:	b109      	cbz	r1, 800ae2e <_Int32__cdr_deserialize+0x6>
 800ae2a:	f000 bf19 	b.w	800bc60 <ucdr_deserialize_int32_t>
 800ae2e:	4608      	mov	r0, r1
 800ae30:	4770      	bx	lr
 800ae32:	bf00      	nop

0800ae34 <get_serialized_size_std_msgs__msg__Int32>:
 800ae34:	b138      	cbz	r0, 800ae46 <get_serialized_size_std_msgs__msg__Int32+0x12>
 800ae36:	b508      	push	{r3, lr}
 800ae38:	460b      	mov	r3, r1
 800ae3a:	4618      	mov	r0, r3
 800ae3c:	2104      	movs	r1, #4
 800ae3e:	f000 fff7 	bl	800be30 <ucdr_alignment>
 800ae42:	3004      	adds	r0, #4
 800ae44:	bd08      	pop	{r3, pc}
 800ae46:	4770      	bx	lr

0800ae48 <_Int32__cdr_serialize>:
 800ae48:	460a      	mov	r2, r1
 800ae4a:	b118      	cbz	r0, 800ae54 <_Int32__cdr_serialize+0xc>
 800ae4c:	6801      	ldr	r1, [r0, #0]
 800ae4e:	4610      	mov	r0, r2
 800ae50:	f000 be6e 	b.w	800bb30 <ucdr_serialize_int32_t>
 800ae54:	4770      	bx	lr
 800ae56:	bf00      	nop

0800ae58 <_Int32__get_serialized_size>:
 800ae58:	b130      	cbz	r0, 800ae68 <_Int32__get_serialized_size+0x10>
 800ae5a:	b508      	push	{r3, lr}
 800ae5c:	2104      	movs	r1, #4
 800ae5e:	2000      	movs	r0, #0
 800ae60:	f000 ffe6 	bl	800be30 <ucdr_alignment>
 800ae64:	3004      	adds	r0, #4
 800ae66:	bd08      	pop	{r3, pc}
 800ae68:	4770      	bx	lr
 800ae6a:	bf00      	nop

0800ae6c <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32>:
 800ae6c:	4800      	ldr	r0, [pc, #0]	; (800ae70 <rosidl_typesupport_microxrcedds_c__get_message_type_support_handle__std_msgs__msg__Int32+0x4>)
 800ae6e:	4770      	bx	lr
 800ae70:	20000084 	.word	0x20000084

0800ae74 <ucdr_serialize_bool>:
 800ae74:	b538      	push	{r3, r4, r5, lr}
 800ae76:	460d      	mov	r5, r1
 800ae78:	2101      	movs	r1, #1
 800ae7a:	4604      	mov	r4, r0
 800ae7c:	f000 ff8c 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800ae80:	b148      	cbz	r0, 800ae96 <ucdr_serialize_bool+0x22>
 800ae82:	68a3      	ldr	r3, [r4, #8]
 800ae84:	701d      	strb	r5, [r3, #0]
 800ae86:	68a2      	ldr	r2, [r4, #8]
 800ae88:	6923      	ldr	r3, [r4, #16]
 800ae8a:	2101      	movs	r1, #1
 800ae8c:	440a      	add	r2, r1
 800ae8e:	440b      	add	r3, r1
 800ae90:	60a2      	str	r2, [r4, #8]
 800ae92:	6123      	str	r3, [r4, #16]
 800ae94:	7561      	strb	r1, [r4, #21]
 800ae96:	7da0      	ldrb	r0, [r4, #22]
 800ae98:	f080 0001 	eor.w	r0, r0, #1
 800ae9c:	bd38      	pop	{r3, r4, r5, pc}
 800ae9e:	bf00      	nop

0800aea0 <ucdr_deserialize_bool>:
 800aea0:	b538      	push	{r3, r4, r5, lr}
 800aea2:	460d      	mov	r5, r1
 800aea4:	2101      	movs	r1, #1
 800aea6:	4604      	mov	r4, r0
 800aea8:	f000 ff76 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800aeac:	b160      	cbz	r0, 800aec8 <ucdr_deserialize_bool+0x28>
 800aeae:	68a2      	ldr	r2, [r4, #8]
 800aeb0:	6923      	ldr	r3, [r4, #16]
 800aeb2:	f812 1b01 	ldrb.w	r1, [r2], #1
 800aeb6:	3900      	subs	r1, #0
 800aeb8:	bf18      	it	ne
 800aeba:	2101      	movne	r1, #1
 800aebc:	7029      	strb	r1, [r5, #0]
 800aebe:	3301      	adds	r3, #1
 800aec0:	2101      	movs	r1, #1
 800aec2:	60a2      	str	r2, [r4, #8]
 800aec4:	6123      	str	r3, [r4, #16]
 800aec6:	7561      	strb	r1, [r4, #21]
 800aec8:	7da0      	ldrb	r0, [r4, #22]
 800aeca:	f080 0001 	eor.w	r0, r0, #1
 800aece:	bd38      	pop	{r3, r4, r5, pc}

0800aed0 <ucdr_serialize_uint8_t>:
 800aed0:	b538      	push	{r3, r4, r5, lr}
 800aed2:	460d      	mov	r5, r1
 800aed4:	2101      	movs	r1, #1
 800aed6:	4604      	mov	r4, r0
 800aed8:	f000 ff5e 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800aedc:	b148      	cbz	r0, 800aef2 <ucdr_serialize_uint8_t+0x22>
 800aede:	68a3      	ldr	r3, [r4, #8]
 800aee0:	701d      	strb	r5, [r3, #0]
 800aee2:	68a2      	ldr	r2, [r4, #8]
 800aee4:	6923      	ldr	r3, [r4, #16]
 800aee6:	2101      	movs	r1, #1
 800aee8:	440a      	add	r2, r1
 800aeea:	440b      	add	r3, r1
 800aeec:	60a2      	str	r2, [r4, #8]
 800aeee:	6123      	str	r3, [r4, #16]
 800aef0:	7561      	strb	r1, [r4, #21]
 800aef2:	7da0      	ldrb	r0, [r4, #22]
 800aef4:	f080 0001 	eor.w	r0, r0, #1
 800aef8:	bd38      	pop	{r3, r4, r5, pc}
 800aefa:	bf00      	nop

0800aefc <ucdr_deserialize_uint8_t>:
 800aefc:	b538      	push	{r3, r4, r5, lr}
 800aefe:	460d      	mov	r5, r1
 800af00:	2101      	movs	r1, #1
 800af02:	4604      	mov	r4, r0
 800af04:	f000 ff48 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800af08:	b150      	cbz	r0, 800af20 <ucdr_deserialize_uint8_t+0x24>
 800af0a:	68a3      	ldr	r3, [r4, #8]
 800af0c:	781b      	ldrb	r3, [r3, #0]
 800af0e:	702b      	strb	r3, [r5, #0]
 800af10:	68a2      	ldr	r2, [r4, #8]
 800af12:	6923      	ldr	r3, [r4, #16]
 800af14:	2101      	movs	r1, #1
 800af16:	440a      	add	r2, r1
 800af18:	440b      	add	r3, r1
 800af1a:	60a2      	str	r2, [r4, #8]
 800af1c:	6123      	str	r3, [r4, #16]
 800af1e:	7561      	strb	r1, [r4, #21]
 800af20:	7da0      	ldrb	r0, [r4, #22]
 800af22:	f080 0001 	eor.w	r0, r0, #1
 800af26:	bd38      	pop	{r3, r4, r5, pc}

0800af28 <ucdr_serialize_uint16_t>:
 800af28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af2c:	b082      	sub	sp, #8
 800af2e:	460b      	mov	r3, r1
 800af30:	2102      	movs	r1, #2
 800af32:	4604      	mov	r4, r0
 800af34:	f8ad 3006 	strh.w	r3, [sp, #6]
 800af38:	f000 ff82 	bl	800be40 <ucdr_buffer_alignment>
 800af3c:	4601      	mov	r1, r0
 800af3e:	4620      	mov	r0, r4
 800af40:	7d67      	ldrb	r7, [r4, #21]
 800af42:	f000 ffc1 	bl	800bec8 <ucdr_advance_buffer>
 800af46:	2102      	movs	r1, #2
 800af48:	4620      	mov	r0, r4
 800af4a:	f000 ff19 	bl	800bd80 <ucdr_check_buffer_available_for>
 800af4e:	bb78      	cbnz	r0, 800afb0 <ucdr_serialize_uint16_t+0x88>
 800af50:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800af54:	42ab      	cmp	r3, r5
 800af56:	d926      	bls.n	800afa6 <ucdr_serialize_uint16_t+0x7e>
 800af58:	1b5e      	subs	r6, r3, r5
 800af5a:	60a3      	str	r3, [r4, #8]
 800af5c:	6923      	ldr	r3, [r4, #16]
 800af5e:	f1c6 0802 	rsb	r8, r6, #2
 800af62:	4433      	add	r3, r6
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	4641      	mov	r1, r8
 800af68:	4620      	mov	r0, r4
 800af6a:	f000 ff15 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800af6e:	2800      	cmp	r0, #0
 800af70:	d03b      	beq.n	800afea <ucdr_serialize_uint16_t+0xc2>
 800af72:	7d23      	ldrb	r3, [r4, #20]
 800af74:	2b01      	cmp	r3, #1
 800af76:	d04a      	beq.n	800b00e <ucdr_serialize_uint16_t+0xe6>
 800af78:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800af7c:	702b      	strb	r3, [r5, #0]
 800af7e:	2e00      	cmp	r6, #0
 800af80:	d040      	beq.n	800b004 <ucdr_serialize_uint16_t+0xdc>
 800af82:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800af86:	706b      	strb	r3, [r5, #1]
 800af88:	6923      	ldr	r3, [r4, #16]
 800af8a:	68a2      	ldr	r2, [r4, #8]
 800af8c:	7da0      	ldrb	r0, [r4, #22]
 800af8e:	3302      	adds	r3, #2
 800af90:	1b9e      	subs	r6, r3, r6
 800af92:	4442      	add	r2, r8
 800af94:	2302      	movs	r3, #2
 800af96:	f080 0001 	eor.w	r0, r0, #1
 800af9a:	60a2      	str	r2, [r4, #8]
 800af9c:	6126      	str	r6, [r4, #16]
 800af9e:	7563      	strb	r3, [r4, #21]
 800afa0:	b002      	add	sp, #8
 800afa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afa6:	2102      	movs	r1, #2
 800afa8:	4620      	mov	r0, r4
 800afaa:	f000 fef5 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800afae:	b190      	cbz	r0, 800afd6 <ucdr_serialize_uint16_t+0xae>
 800afb0:	7d23      	ldrb	r3, [r4, #20]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	68a3      	ldr	r3, [r4, #8]
 800afb6:	d014      	beq.n	800afe2 <ucdr_serialize_uint16_t+0xba>
 800afb8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800afbc:	701a      	strb	r2, [r3, #0]
 800afbe:	68a3      	ldr	r3, [r4, #8]
 800afc0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800afc4:	705a      	strb	r2, [r3, #1]
 800afc6:	68a2      	ldr	r2, [r4, #8]
 800afc8:	6923      	ldr	r3, [r4, #16]
 800afca:	3202      	adds	r2, #2
 800afcc:	3302      	adds	r3, #2
 800afce:	2102      	movs	r1, #2
 800afd0:	60a2      	str	r2, [r4, #8]
 800afd2:	6123      	str	r3, [r4, #16]
 800afd4:	7561      	strb	r1, [r4, #21]
 800afd6:	7da0      	ldrb	r0, [r4, #22]
 800afd8:	f080 0001 	eor.w	r0, r0, #1
 800afdc:	b002      	add	sp, #8
 800afde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800afe2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800afe6:	801a      	strh	r2, [r3, #0]
 800afe8:	e7ed      	b.n	800afc6 <ucdr_serialize_uint16_t+0x9e>
 800afea:	68a2      	ldr	r2, [r4, #8]
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	7da0      	ldrb	r0, [r4, #22]
 800aff0:	7567      	strb	r7, [r4, #21]
 800aff2:	1b92      	subs	r2, r2, r6
 800aff4:	1b9b      	subs	r3, r3, r6
 800aff6:	f080 0001 	eor.w	r0, r0, #1
 800affa:	60a2      	str	r2, [r4, #8]
 800affc:	6123      	str	r3, [r4, #16]
 800affe:	b002      	add	sp, #8
 800b000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b004:	68a3      	ldr	r3, [r4, #8]
 800b006:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b00a:	701a      	strb	r2, [r3, #0]
 800b00c:	e7bc      	b.n	800af88 <ucdr_serialize_uint16_t+0x60>
 800b00e:	4628      	mov	r0, r5
 800b010:	f10d 0506 	add.w	r5, sp, #6
 800b014:	4629      	mov	r1, r5
 800b016:	4632      	mov	r2, r6
 800b018:	f008 fac8 	bl	80135ac <memcpy>
 800b01c:	68a0      	ldr	r0, [r4, #8]
 800b01e:	4642      	mov	r2, r8
 800b020:	19a9      	adds	r1, r5, r6
 800b022:	f008 fac3 	bl	80135ac <memcpy>
 800b026:	e7af      	b.n	800af88 <ucdr_serialize_uint16_t+0x60>

0800b028 <ucdr_serialize_endian_uint16_t>:
 800b028:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b02c:	b083      	sub	sp, #12
 800b02e:	460d      	mov	r5, r1
 800b030:	2102      	movs	r1, #2
 800b032:	4604      	mov	r4, r0
 800b034:	f8ad 2006 	strh.w	r2, [sp, #6]
 800b038:	f000 ff02 	bl	800be40 <ucdr_buffer_alignment>
 800b03c:	4601      	mov	r1, r0
 800b03e:	4620      	mov	r0, r4
 800b040:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b044:	f000 ff40 	bl	800bec8 <ucdr_advance_buffer>
 800b048:	2102      	movs	r1, #2
 800b04a:	4620      	mov	r0, r4
 800b04c:	f000 fe98 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b050:	bb70      	cbnz	r0, 800b0b0 <ucdr_serialize_endian_uint16_t+0x88>
 800b052:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b056:	42be      	cmp	r6, r7
 800b058:	d925      	bls.n	800b0a6 <ucdr_serialize_endian_uint16_t+0x7e>
 800b05a:	6923      	ldr	r3, [r4, #16]
 800b05c:	60a6      	str	r6, [r4, #8]
 800b05e:	1bf6      	subs	r6, r6, r7
 800b060:	4433      	add	r3, r6
 800b062:	f1c6 0902 	rsb	r9, r6, #2
 800b066:	6123      	str	r3, [r4, #16]
 800b068:	4649      	mov	r1, r9
 800b06a:	4620      	mov	r0, r4
 800b06c:	f000 fe94 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b070:	2800      	cmp	r0, #0
 800b072:	d039      	beq.n	800b0e8 <ucdr_serialize_endian_uint16_t+0xc0>
 800b074:	2d01      	cmp	r5, #1
 800b076:	d04a      	beq.n	800b10e <ucdr_serialize_endian_uint16_t+0xe6>
 800b078:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b07c:	703b      	strb	r3, [r7, #0]
 800b07e:	2e00      	cmp	r6, #0
 800b080:	d040      	beq.n	800b104 <ucdr_serialize_endian_uint16_t+0xdc>
 800b082:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b086:	707b      	strb	r3, [r7, #1]
 800b088:	6923      	ldr	r3, [r4, #16]
 800b08a:	68a2      	ldr	r2, [r4, #8]
 800b08c:	7da0      	ldrb	r0, [r4, #22]
 800b08e:	3302      	adds	r3, #2
 800b090:	444a      	add	r2, r9
 800b092:	1b9b      	subs	r3, r3, r6
 800b094:	2102      	movs	r1, #2
 800b096:	f080 0001 	eor.w	r0, r0, #1
 800b09a:	60a2      	str	r2, [r4, #8]
 800b09c:	6123      	str	r3, [r4, #16]
 800b09e:	7561      	strb	r1, [r4, #21]
 800b0a0:	b003      	add	sp, #12
 800b0a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0a6:	2102      	movs	r1, #2
 800b0a8:	4620      	mov	r0, r4
 800b0aa:	f000 fe75 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b0ae:	b188      	cbz	r0, 800b0d4 <ucdr_serialize_endian_uint16_t+0xac>
 800b0b0:	2d01      	cmp	r5, #1
 800b0b2:	68a3      	ldr	r3, [r4, #8]
 800b0b4:	d014      	beq.n	800b0e0 <ucdr_serialize_endian_uint16_t+0xb8>
 800b0b6:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b0ba:	701a      	strb	r2, [r3, #0]
 800b0bc:	68a3      	ldr	r3, [r4, #8]
 800b0be:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b0c2:	705a      	strb	r2, [r3, #1]
 800b0c4:	68a2      	ldr	r2, [r4, #8]
 800b0c6:	6923      	ldr	r3, [r4, #16]
 800b0c8:	3202      	adds	r2, #2
 800b0ca:	3302      	adds	r3, #2
 800b0cc:	2102      	movs	r1, #2
 800b0ce:	60a2      	str	r2, [r4, #8]
 800b0d0:	6123      	str	r3, [r4, #16]
 800b0d2:	7561      	strb	r1, [r4, #21]
 800b0d4:	7da0      	ldrb	r0, [r4, #22]
 800b0d6:	f080 0001 	eor.w	r0, r0, #1
 800b0da:	b003      	add	sp, #12
 800b0dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b0e0:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800b0e4:	801a      	strh	r2, [r3, #0]
 800b0e6:	e7ed      	b.n	800b0c4 <ucdr_serialize_endian_uint16_t+0x9c>
 800b0e8:	68a2      	ldr	r2, [r4, #8]
 800b0ea:	6923      	ldr	r3, [r4, #16]
 800b0ec:	7da0      	ldrb	r0, [r4, #22]
 800b0ee:	f884 8015 	strb.w	r8, [r4, #21]
 800b0f2:	1b92      	subs	r2, r2, r6
 800b0f4:	1b9b      	subs	r3, r3, r6
 800b0f6:	f080 0001 	eor.w	r0, r0, #1
 800b0fa:	60a2      	str	r2, [r4, #8]
 800b0fc:	6123      	str	r3, [r4, #16]
 800b0fe:	b003      	add	sp, #12
 800b100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b104:	68a3      	ldr	r3, [r4, #8]
 800b106:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b10a:	701a      	strb	r2, [r3, #0]
 800b10c:	e7bc      	b.n	800b088 <ucdr_serialize_endian_uint16_t+0x60>
 800b10e:	f10d 0506 	add.w	r5, sp, #6
 800b112:	4629      	mov	r1, r5
 800b114:	4632      	mov	r2, r6
 800b116:	4638      	mov	r0, r7
 800b118:	f008 fa48 	bl	80135ac <memcpy>
 800b11c:	68a0      	ldr	r0, [r4, #8]
 800b11e:	464a      	mov	r2, r9
 800b120:	19a9      	adds	r1, r5, r6
 800b122:	f008 fa43 	bl	80135ac <memcpy>
 800b126:	e7af      	b.n	800b088 <ucdr_serialize_endian_uint16_t+0x60>

0800b128 <ucdr_deserialize_uint16_t>:
 800b128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b12c:	460d      	mov	r5, r1
 800b12e:	2102      	movs	r1, #2
 800b130:	4604      	mov	r4, r0
 800b132:	f000 fe85 	bl	800be40 <ucdr_buffer_alignment>
 800b136:	4601      	mov	r1, r0
 800b138:	4620      	mov	r0, r4
 800b13a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b13e:	f000 fec3 	bl	800bec8 <ucdr_advance_buffer>
 800b142:	2102      	movs	r1, #2
 800b144:	4620      	mov	r0, r4
 800b146:	f000 fe1b 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b14a:	bb60      	cbnz	r0, 800b1a6 <ucdr_deserialize_uint16_t+0x7e>
 800b14c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800b150:	42be      	cmp	r6, r7
 800b152:	d923      	bls.n	800b19c <ucdr_deserialize_uint16_t+0x74>
 800b154:	6923      	ldr	r3, [r4, #16]
 800b156:	60a6      	str	r6, [r4, #8]
 800b158:	1bf6      	subs	r6, r6, r7
 800b15a:	4433      	add	r3, r6
 800b15c:	f1c6 0902 	rsb	r9, r6, #2
 800b160:	6123      	str	r3, [r4, #16]
 800b162:	4649      	mov	r1, r9
 800b164:	4620      	mov	r0, r4
 800b166:	f000 fe17 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b16a:	2800      	cmp	r0, #0
 800b16c:	d034      	beq.n	800b1d8 <ucdr_deserialize_uint16_t+0xb0>
 800b16e:	7d23      	ldrb	r3, [r4, #20]
 800b170:	2b01      	cmp	r3, #1
 800b172:	d042      	beq.n	800b1fa <ucdr_deserialize_uint16_t+0xd2>
 800b174:	787b      	ldrb	r3, [r7, #1]
 800b176:	702b      	strb	r3, [r5, #0]
 800b178:	2e00      	cmp	r6, #0
 800b17a:	d03a      	beq.n	800b1f2 <ucdr_deserialize_uint16_t+0xca>
 800b17c:	783b      	ldrb	r3, [r7, #0]
 800b17e:	706b      	strb	r3, [r5, #1]
 800b180:	6923      	ldr	r3, [r4, #16]
 800b182:	68a2      	ldr	r2, [r4, #8]
 800b184:	7da0      	ldrb	r0, [r4, #22]
 800b186:	2102      	movs	r1, #2
 800b188:	3302      	adds	r3, #2
 800b18a:	444a      	add	r2, r9
 800b18c:	1b9b      	subs	r3, r3, r6
 800b18e:	7561      	strb	r1, [r4, #21]
 800b190:	60a2      	str	r2, [r4, #8]
 800b192:	6123      	str	r3, [r4, #16]
 800b194:	f080 0001 	eor.w	r0, r0, #1
 800b198:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b19c:	2102      	movs	r1, #2
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f000 fdfa 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b1a4:	b180      	cbz	r0, 800b1c8 <ucdr_deserialize_uint16_t+0xa0>
 800b1a6:	7d23      	ldrb	r3, [r4, #20]
 800b1a8:	2b01      	cmp	r3, #1
 800b1aa:	68a3      	ldr	r3, [r4, #8]
 800b1ac:	d011      	beq.n	800b1d2 <ucdr_deserialize_uint16_t+0xaa>
 800b1ae:	785b      	ldrb	r3, [r3, #1]
 800b1b0:	702b      	strb	r3, [r5, #0]
 800b1b2:	68a3      	ldr	r3, [r4, #8]
 800b1b4:	781b      	ldrb	r3, [r3, #0]
 800b1b6:	706b      	strb	r3, [r5, #1]
 800b1b8:	68a2      	ldr	r2, [r4, #8]
 800b1ba:	6923      	ldr	r3, [r4, #16]
 800b1bc:	3202      	adds	r2, #2
 800b1be:	3302      	adds	r3, #2
 800b1c0:	2102      	movs	r1, #2
 800b1c2:	60a2      	str	r2, [r4, #8]
 800b1c4:	6123      	str	r3, [r4, #16]
 800b1c6:	7561      	strb	r1, [r4, #21]
 800b1c8:	7da0      	ldrb	r0, [r4, #22]
 800b1ca:	f080 0001 	eor.w	r0, r0, #1
 800b1ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1d2:	881b      	ldrh	r3, [r3, #0]
 800b1d4:	802b      	strh	r3, [r5, #0]
 800b1d6:	e7ef      	b.n	800b1b8 <ucdr_deserialize_uint16_t+0x90>
 800b1d8:	68a2      	ldr	r2, [r4, #8]
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	7da0      	ldrb	r0, [r4, #22]
 800b1de:	f884 8015 	strb.w	r8, [r4, #21]
 800b1e2:	1b92      	subs	r2, r2, r6
 800b1e4:	1b9b      	subs	r3, r3, r6
 800b1e6:	60a2      	str	r2, [r4, #8]
 800b1e8:	6123      	str	r3, [r4, #16]
 800b1ea:	f080 0001 	eor.w	r0, r0, #1
 800b1ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1f2:	68a3      	ldr	r3, [r4, #8]
 800b1f4:	781b      	ldrb	r3, [r3, #0]
 800b1f6:	706b      	strb	r3, [r5, #1]
 800b1f8:	e7c2      	b.n	800b180 <ucdr_deserialize_uint16_t+0x58>
 800b1fa:	4639      	mov	r1, r7
 800b1fc:	4632      	mov	r2, r6
 800b1fe:	4628      	mov	r0, r5
 800b200:	f008 f9d4 	bl	80135ac <memcpy>
 800b204:	68a1      	ldr	r1, [r4, #8]
 800b206:	464a      	mov	r2, r9
 800b208:	19a8      	adds	r0, r5, r6
 800b20a:	f008 f9cf 	bl	80135ac <memcpy>
 800b20e:	e7b7      	b.n	800b180 <ucdr_deserialize_uint16_t+0x58>

0800b210 <ucdr_deserialize_endian_uint16_t>:
 800b210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b214:	460e      	mov	r6, r1
 800b216:	2102      	movs	r1, #2
 800b218:	4604      	mov	r4, r0
 800b21a:	4615      	mov	r5, r2
 800b21c:	f000 fe10 	bl	800be40 <ucdr_buffer_alignment>
 800b220:	4601      	mov	r1, r0
 800b222:	4620      	mov	r0, r4
 800b224:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b228:	f000 fe4e 	bl	800bec8 <ucdr_advance_buffer>
 800b22c:	2102      	movs	r1, #2
 800b22e:	4620      	mov	r0, r4
 800b230:	f000 fda6 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b234:	bb70      	cbnz	r0, 800b294 <ucdr_deserialize_endian_uint16_t+0x84>
 800b236:	e9d4 7801 	ldrd	r7, r8, [r4, #4]
 800b23a:	4547      	cmp	r7, r8
 800b23c:	d925      	bls.n	800b28a <ucdr_deserialize_endian_uint16_t+0x7a>
 800b23e:	6923      	ldr	r3, [r4, #16]
 800b240:	60a7      	str	r7, [r4, #8]
 800b242:	eba7 0708 	sub.w	r7, r7, r8
 800b246:	443b      	add	r3, r7
 800b248:	f1c7 0a02 	rsb	sl, r7, #2
 800b24c:	6123      	str	r3, [r4, #16]
 800b24e:	4651      	mov	r1, sl
 800b250:	4620      	mov	r0, r4
 800b252:	f000 fda1 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b256:	2800      	cmp	r0, #0
 800b258:	d034      	beq.n	800b2c4 <ucdr_deserialize_endian_uint16_t+0xb4>
 800b25a:	2e01      	cmp	r6, #1
 800b25c:	d043      	beq.n	800b2e6 <ucdr_deserialize_endian_uint16_t+0xd6>
 800b25e:	f898 3001 	ldrb.w	r3, [r8, #1]
 800b262:	702b      	strb	r3, [r5, #0]
 800b264:	2f00      	cmp	r7, #0
 800b266:	d03a      	beq.n	800b2de <ucdr_deserialize_endian_uint16_t+0xce>
 800b268:	f898 3000 	ldrb.w	r3, [r8]
 800b26c:	706b      	strb	r3, [r5, #1]
 800b26e:	6923      	ldr	r3, [r4, #16]
 800b270:	68a2      	ldr	r2, [r4, #8]
 800b272:	7da0      	ldrb	r0, [r4, #22]
 800b274:	2102      	movs	r1, #2
 800b276:	3302      	adds	r3, #2
 800b278:	4452      	add	r2, sl
 800b27a:	1bdb      	subs	r3, r3, r7
 800b27c:	7561      	strb	r1, [r4, #21]
 800b27e:	60a2      	str	r2, [r4, #8]
 800b280:	6123      	str	r3, [r4, #16]
 800b282:	f080 0001 	eor.w	r0, r0, #1
 800b286:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b28a:	2102      	movs	r1, #2
 800b28c:	4620      	mov	r0, r4
 800b28e:	f000 fd83 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b292:	b178      	cbz	r0, 800b2b4 <ucdr_deserialize_endian_uint16_t+0xa4>
 800b294:	2e01      	cmp	r6, #1
 800b296:	68a3      	ldr	r3, [r4, #8]
 800b298:	d011      	beq.n	800b2be <ucdr_deserialize_endian_uint16_t+0xae>
 800b29a:	785b      	ldrb	r3, [r3, #1]
 800b29c:	702b      	strb	r3, [r5, #0]
 800b29e:	68a3      	ldr	r3, [r4, #8]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	706b      	strb	r3, [r5, #1]
 800b2a4:	68a2      	ldr	r2, [r4, #8]
 800b2a6:	6923      	ldr	r3, [r4, #16]
 800b2a8:	3202      	adds	r2, #2
 800b2aa:	3302      	adds	r3, #2
 800b2ac:	2102      	movs	r1, #2
 800b2ae:	60a2      	str	r2, [r4, #8]
 800b2b0:	6123      	str	r3, [r4, #16]
 800b2b2:	7561      	strb	r1, [r4, #21]
 800b2b4:	7da0      	ldrb	r0, [r4, #22]
 800b2b6:	f080 0001 	eor.w	r0, r0, #1
 800b2ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	802b      	strh	r3, [r5, #0]
 800b2c2:	e7ef      	b.n	800b2a4 <ucdr_deserialize_endian_uint16_t+0x94>
 800b2c4:	68a2      	ldr	r2, [r4, #8]
 800b2c6:	6923      	ldr	r3, [r4, #16]
 800b2c8:	7da0      	ldrb	r0, [r4, #22]
 800b2ca:	f884 9015 	strb.w	r9, [r4, #21]
 800b2ce:	1bd2      	subs	r2, r2, r7
 800b2d0:	1bdb      	subs	r3, r3, r7
 800b2d2:	60a2      	str	r2, [r4, #8]
 800b2d4:	6123      	str	r3, [r4, #16]
 800b2d6:	f080 0001 	eor.w	r0, r0, #1
 800b2da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2de:	68a3      	ldr	r3, [r4, #8]
 800b2e0:	781b      	ldrb	r3, [r3, #0]
 800b2e2:	706b      	strb	r3, [r5, #1]
 800b2e4:	e7c3      	b.n	800b26e <ucdr_deserialize_endian_uint16_t+0x5e>
 800b2e6:	4641      	mov	r1, r8
 800b2e8:	463a      	mov	r2, r7
 800b2ea:	4628      	mov	r0, r5
 800b2ec:	f008 f95e 	bl	80135ac <memcpy>
 800b2f0:	68a1      	ldr	r1, [r4, #8]
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	19e8      	adds	r0, r5, r7
 800b2f6:	f008 f959 	bl	80135ac <memcpy>
 800b2fa:	e7b8      	b.n	800b26e <ucdr_deserialize_endian_uint16_t+0x5e>

0800b2fc <ucdr_serialize_uint32_t>:
 800b2fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b300:	b082      	sub	sp, #8
 800b302:	4604      	mov	r4, r0
 800b304:	9101      	str	r1, [sp, #4]
 800b306:	2104      	movs	r1, #4
 800b308:	f000 fd9a 	bl	800be40 <ucdr_buffer_alignment>
 800b30c:	4601      	mov	r1, r0
 800b30e:	4620      	mov	r0, r4
 800b310:	7d67      	ldrb	r7, [r4, #21]
 800b312:	f000 fdd9 	bl	800bec8 <ucdr_advance_buffer>
 800b316:	2104      	movs	r1, #4
 800b318:	4620      	mov	r0, r4
 800b31a:	f000 fd31 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d139      	bne.n	800b396 <ucdr_serialize_uint32_t+0x9a>
 800b322:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b326:	42ab      	cmp	r3, r5
 800b328:	d930      	bls.n	800b38c <ucdr_serialize_uint32_t+0x90>
 800b32a:	1b5e      	subs	r6, r3, r5
 800b32c:	60a3      	str	r3, [r4, #8]
 800b32e:	6923      	ldr	r3, [r4, #16]
 800b330:	f1c6 0804 	rsb	r8, r6, #4
 800b334:	4433      	add	r3, r6
 800b336:	6123      	str	r3, [r4, #16]
 800b338:	4641      	mov	r1, r8
 800b33a:	4620      	mov	r0, r4
 800b33c:	f000 fd2c 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b340:	2800      	cmp	r0, #0
 800b342:	d04c      	beq.n	800b3de <ucdr_serialize_uint32_t+0xe2>
 800b344:	7d23      	ldrb	r3, [r4, #20]
 800b346:	2b01      	cmp	r3, #1
 800b348:	d063      	beq.n	800b412 <ucdr_serialize_uint32_t+0x116>
 800b34a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b34e:	702b      	strb	r3, [r5, #0]
 800b350:	2e00      	cmp	r6, #0
 800b352:	d051      	beq.n	800b3f8 <ucdr_serialize_uint32_t+0xfc>
 800b354:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b358:	706b      	strb	r3, [r5, #1]
 800b35a:	2e01      	cmp	r6, #1
 800b35c:	d050      	beq.n	800b400 <ucdr_serialize_uint32_t+0x104>
 800b35e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b362:	70ab      	strb	r3, [r5, #2]
 800b364:	2e02      	cmp	r6, #2
 800b366:	d04f      	beq.n	800b408 <ucdr_serialize_uint32_t+0x10c>
 800b368:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b36c:	70eb      	strb	r3, [r5, #3]
 800b36e:	6923      	ldr	r3, [r4, #16]
 800b370:	68a2      	ldr	r2, [r4, #8]
 800b372:	7da0      	ldrb	r0, [r4, #22]
 800b374:	3304      	adds	r3, #4
 800b376:	1b9e      	subs	r6, r3, r6
 800b378:	4442      	add	r2, r8
 800b37a:	2304      	movs	r3, #4
 800b37c:	f080 0001 	eor.w	r0, r0, #1
 800b380:	60a2      	str	r2, [r4, #8]
 800b382:	6126      	str	r6, [r4, #16]
 800b384:	7563      	strb	r3, [r4, #21]
 800b386:	b002      	add	sp, #8
 800b388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b38c:	2104      	movs	r1, #4
 800b38e:	4620      	mov	r0, r4
 800b390:	f000 fd02 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b394:	b1d0      	cbz	r0, 800b3cc <ucdr_serialize_uint32_t+0xd0>
 800b396:	7d23      	ldrb	r3, [r4, #20]
 800b398:	2b01      	cmp	r3, #1
 800b39a:	68a3      	ldr	r3, [r4, #8]
 800b39c:	d01c      	beq.n	800b3d8 <ucdr_serialize_uint32_t+0xdc>
 800b39e:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b3a2:	701a      	strb	r2, [r3, #0]
 800b3a4:	68a3      	ldr	r3, [r4, #8]
 800b3a6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3aa:	705a      	strb	r2, [r3, #1]
 800b3ac:	68a3      	ldr	r3, [r4, #8]
 800b3ae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b3b2:	709a      	strb	r2, [r3, #2]
 800b3b4:	68a3      	ldr	r3, [r4, #8]
 800b3b6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b3ba:	70da      	strb	r2, [r3, #3]
 800b3bc:	68a2      	ldr	r2, [r4, #8]
 800b3be:	6923      	ldr	r3, [r4, #16]
 800b3c0:	3204      	adds	r2, #4
 800b3c2:	3304      	adds	r3, #4
 800b3c4:	2104      	movs	r1, #4
 800b3c6:	60a2      	str	r2, [r4, #8]
 800b3c8:	6123      	str	r3, [r4, #16]
 800b3ca:	7561      	strb	r1, [r4, #21]
 800b3cc:	7da0      	ldrb	r0, [r4, #22]
 800b3ce:	f080 0001 	eor.w	r0, r0, #1
 800b3d2:	b002      	add	sp, #8
 800b3d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3d8:	9a01      	ldr	r2, [sp, #4]
 800b3da:	601a      	str	r2, [r3, #0]
 800b3dc:	e7ee      	b.n	800b3bc <ucdr_serialize_uint32_t+0xc0>
 800b3de:	68a2      	ldr	r2, [r4, #8]
 800b3e0:	6923      	ldr	r3, [r4, #16]
 800b3e2:	7da0      	ldrb	r0, [r4, #22]
 800b3e4:	7567      	strb	r7, [r4, #21]
 800b3e6:	1b92      	subs	r2, r2, r6
 800b3e8:	1b9b      	subs	r3, r3, r6
 800b3ea:	f080 0001 	eor.w	r0, r0, #1
 800b3ee:	60a2      	str	r2, [r4, #8]
 800b3f0:	6123      	str	r3, [r4, #16]
 800b3f2:	b002      	add	sp, #8
 800b3f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b3f8:	68a3      	ldr	r3, [r4, #8]
 800b3fa:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b3fe:	701a      	strb	r2, [r3, #0]
 800b400:	68a3      	ldr	r3, [r4, #8]
 800b402:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b406:	701a      	strb	r2, [r3, #0]
 800b408:	68a3      	ldr	r3, [r4, #8]
 800b40a:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b40e:	701a      	strb	r2, [r3, #0]
 800b410:	e7ad      	b.n	800b36e <ucdr_serialize_uint32_t+0x72>
 800b412:	4628      	mov	r0, r5
 800b414:	ad01      	add	r5, sp, #4
 800b416:	4629      	mov	r1, r5
 800b418:	4632      	mov	r2, r6
 800b41a:	f008 f8c7 	bl	80135ac <memcpy>
 800b41e:	68a0      	ldr	r0, [r4, #8]
 800b420:	4642      	mov	r2, r8
 800b422:	19a9      	adds	r1, r5, r6
 800b424:	f008 f8c2 	bl	80135ac <memcpy>
 800b428:	e7a1      	b.n	800b36e <ucdr_serialize_uint32_t+0x72>
 800b42a:	bf00      	nop

0800b42c <ucdr_serialize_endian_uint32_t>:
 800b42c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b430:	b083      	sub	sp, #12
 800b432:	460d      	mov	r5, r1
 800b434:	2104      	movs	r1, #4
 800b436:	4604      	mov	r4, r0
 800b438:	9201      	str	r2, [sp, #4]
 800b43a:	f000 fd01 	bl	800be40 <ucdr_buffer_alignment>
 800b43e:	4601      	mov	r1, r0
 800b440:	4620      	mov	r0, r4
 800b442:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b446:	f000 fd3f 	bl	800bec8 <ucdr_advance_buffer>
 800b44a:	2104      	movs	r1, #4
 800b44c:	4620      	mov	r0, r4
 800b44e:	f000 fc97 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b452:	2800      	cmp	r0, #0
 800b454:	d138      	bne.n	800b4c8 <ucdr_serialize_endian_uint32_t+0x9c>
 800b456:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b45a:	42b7      	cmp	r7, r6
 800b45c:	d92f      	bls.n	800b4be <ucdr_serialize_endian_uint32_t+0x92>
 800b45e:	6923      	ldr	r3, [r4, #16]
 800b460:	60a7      	str	r7, [r4, #8]
 800b462:	1bbf      	subs	r7, r7, r6
 800b464:	443b      	add	r3, r7
 800b466:	f1c7 0904 	rsb	r9, r7, #4
 800b46a:	6123      	str	r3, [r4, #16]
 800b46c:	4649      	mov	r1, r9
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fc92 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b474:	2800      	cmp	r0, #0
 800b476:	d04a      	beq.n	800b50e <ucdr_serialize_endian_uint32_t+0xe2>
 800b478:	2d01      	cmp	r5, #1
 800b47a:	d063      	beq.n	800b544 <ucdr_serialize_endian_uint32_t+0x118>
 800b47c:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b480:	7033      	strb	r3, [r6, #0]
 800b482:	2f00      	cmp	r7, #0
 800b484:	d051      	beq.n	800b52a <ucdr_serialize_endian_uint32_t+0xfe>
 800b486:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b48a:	7073      	strb	r3, [r6, #1]
 800b48c:	2f01      	cmp	r7, #1
 800b48e:	d050      	beq.n	800b532 <ucdr_serialize_endian_uint32_t+0x106>
 800b490:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b494:	70b3      	strb	r3, [r6, #2]
 800b496:	2f02      	cmp	r7, #2
 800b498:	d04f      	beq.n	800b53a <ucdr_serialize_endian_uint32_t+0x10e>
 800b49a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b49e:	70f3      	strb	r3, [r6, #3]
 800b4a0:	6923      	ldr	r3, [r4, #16]
 800b4a2:	68a2      	ldr	r2, [r4, #8]
 800b4a4:	7da0      	ldrb	r0, [r4, #22]
 800b4a6:	3304      	adds	r3, #4
 800b4a8:	444a      	add	r2, r9
 800b4aa:	1bdb      	subs	r3, r3, r7
 800b4ac:	2104      	movs	r1, #4
 800b4ae:	f080 0001 	eor.w	r0, r0, #1
 800b4b2:	60a2      	str	r2, [r4, #8]
 800b4b4:	6123      	str	r3, [r4, #16]
 800b4b6:	7561      	strb	r1, [r4, #21]
 800b4b8:	b003      	add	sp, #12
 800b4ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b4be:	2104      	movs	r1, #4
 800b4c0:	4620      	mov	r0, r4
 800b4c2:	f000 fc69 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b4c6:	b1c8      	cbz	r0, 800b4fc <ucdr_serialize_endian_uint32_t+0xd0>
 800b4c8:	2d01      	cmp	r5, #1
 800b4ca:	68a3      	ldr	r3, [r4, #8]
 800b4cc:	d01c      	beq.n	800b508 <ucdr_serialize_endian_uint32_t+0xdc>
 800b4ce:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b4d2:	701a      	strb	r2, [r3, #0]
 800b4d4:	68a3      	ldr	r3, [r4, #8]
 800b4d6:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b4da:	705a      	strb	r2, [r3, #1]
 800b4dc:	68a3      	ldr	r3, [r4, #8]
 800b4de:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b4e2:	709a      	strb	r2, [r3, #2]
 800b4e4:	68a3      	ldr	r3, [r4, #8]
 800b4e6:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b4ea:	70da      	strb	r2, [r3, #3]
 800b4ec:	68a2      	ldr	r2, [r4, #8]
 800b4ee:	6923      	ldr	r3, [r4, #16]
 800b4f0:	3204      	adds	r2, #4
 800b4f2:	3304      	adds	r3, #4
 800b4f4:	2104      	movs	r1, #4
 800b4f6:	60a2      	str	r2, [r4, #8]
 800b4f8:	6123      	str	r3, [r4, #16]
 800b4fa:	7561      	strb	r1, [r4, #21]
 800b4fc:	7da0      	ldrb	r0, [r4, #22]
 800b4fe:	f080 0001 	eor.w	r0, r0, #1
 800b502:	b003      	add	sp, #12
 800b504:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b508:	9a01      	ldr	r2, [sp, #4]
 800b50a:	601a      	str	r2, [r3, #0]
 800b50c:	e7ee      	b.n	800b4ec <ucdr_serialize_endian_uint32_t+0xc0>
 800b50e:	68a2      	ldr	r2, [r4, #8]
 800b510:	6923      	ldr	r3, [r4, #16]
 800b512:	7da0      	ldrb	r0, [r4, #22]
 800b514:	f884 8015 	strb.w	r8, [r4, #21]
 800b518:	1bd2      	subs	r2, r2, r7
 800b51a:	1bdb      	subs	r3, r3, r7
 800b51c:	f080 0001 	eor.w	r0, r0, #1
 800b520:	60a2      	str	r2, [r4, #8]
 800b522:	6123      	str	r3, [r4, #16]
 800b524:	b003      	add	sp, #12
 800b526:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b52a:	68a3      	ldr	r3, [r4, #8]
 800b52c:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b530:	701a      	strb	r2, [r3, #0]
 800b532:	68a3      	ldr	r3, [r4, #8]
 800b534:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b538:	701a      	strb	r2, [r3, #0]
 800b53a:	68a3      	ldr	r3, [r4, #8]
 800b53c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b540:	701a      	strb	r2, [r3, #0]
 800b542:	e7ad      	b.n	800b4a0 <ucdr_serialize_endian_uint32_t+0x74>
 800b544:	ad01      	add	r5, sp, #4
 800b546:	4629      	mov	r1, r5
 800b548:	463a      	mov	r2, r7
 800b54a:	4630      	mov	r0, r6
 800b54c:	f008 f82e 	bl	80135ac <memcpy>
 800b550:	68a0      	ldr	r0, [r4, #8]
 800b552:	464a      	mov	r2, r9
 800b554:	19e9      	adds	r1, r5, r7
 800b556:	f008 f829 	bl	80135ac <memcpy>
 800b55a:	e7a1      	b.n	800b4a0 <ucdr_serialize_endian_uint32_t+0x74>

0800b55c <ucdr_deserialize_uint32_t>:
 800b55c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b560:	460d      	mov	r5, r1
 800b562:	2104      	movs	r1, #4
 800b564:	4604      	mov	r4, r0
 800b566:	f000 fc6b 	bl	800be40 <ucdr_buffer_alignment>
 800b56a:	4601      	mov	r1, r0
 800b56c:	4620      	mov	r0, r4
 800b56e:	f894 8015 	ldrb.w	r8, [r4, #21]
 800b572:	f000 fca9 	bl	800bec8 <ucdr_advance_buffer>
 800b576:	2104      	movs	r1, #4
 800b578:	4620      	mov	r0, r4
 800b57a:	f000 fc01 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b57e:	2800      	cmp	r0, #0
 800b580:	d138      	bne.n	800b5f4 <ucdr_deserialize_uint32_t+0x98>
 800b582:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800b586:	42b7      	cmp	r7, r6
 800b588:	d92f      	bls.n	800b5ea <ucdr_deserialize_uint32_t+0x8e>
 800b58a:	6923      	ldr	r3, [r4, #16]
 800b58c:	60a7      	str	r7, [r4, #8]
 800b58e:	1bbf      	subs	r7, r7, r6
 800b590:	443b      	add	r3, r7
 800b592:	f1c7 0904 	rsb	r9, r7, #4
 800b596:	6123      	str	r3, [r4, #16]
 800b598:	4649      	mov	r1, r9
 800b59a:	4620      	mov	r0, r4
 800b59c:	f000 fbfc 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d046      	beq.n	800b632 <ucdr_deserialize_uint32_t+0xd6>
 800b5a4:	7d23      	ldrb	r3, [r4, #20]
 800b5a6:	2b01      	cmp	r3, #1
 800b5a8:	d05c      	beq.n	800b664 <ucdr_deserialize_uint32_t+0x108>
 800b5aa:	78f3      	ldrb	r3, [r6, #3]
 800b5ac:	702b      	strb	r3, [r5, #0]
 800b5ae:	2f00      	cmp	r7, #0
 800b5b0:	d04c      	beq.n	800b64c <ucdr_deserialize_uint32_t+0xf0>
 800b5b2:	78b3      	ldrb	r3, [r6, #2]
 800b5b4:	706b      	strb	r3, [r5, #1]
 800b5b6:	2f01      	cmp	r7, #1
 800b5b8:	f105 0302 	add.w	r3, r5, #2
 800b5bc:	d04a      	beq.n	800b654 <ucdr_deserialize_uint32_t+0xf8>
 800b5be:	7873      	ldrb	r3, [r6, #1]
 800b5c0:	70ab      	strb	r3, [r5, #2]
 800b5c2:	2f02      	cmp	r7, #2
 800b5c4:	f105 0303 	add.w	r3, r5, #3
 800b5c8:	d048      	beq.n	800b65c <ucdr_deserialize_uint32_t+0x100>
 800b5ca:	7833      	ldrb	r3, [r6, #0]
 800b5cc:	70eb      	strb	r3, [r5, #3]
 800b5ce:	6923      	ldr	r3, [r4, #16]
 800b5d0:	68a2      	ldr	r2, [r4, #8]
 800b5d2:	7da0      	ldrb	r0, [r4, #22]
 800b5d4:	2104      	movs	r1, #4
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	444a      	add	r2, r9
 800b5da:	1bdb      	subs	r3, r3, r7
 800b5dc:	7561      	strb	r1, [r4, #21]
 800b5de:	60a2      	str	r2, [r4, #8]
 800b5e0:	6123      	str	r3, [r4, #16]
 800b5e2:	f080 0001 	eor.w	r0, r0, #1
 800b5e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b5ea:	2104      	movs	r1, #4
 800b5ec:	4620      	mov	r0, r4
 800b5ee:	f000 fbd3 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b5f2:	b1b0      	cbz	r0, 800b622 <ucdr_deserialize_uint32_t+0xc6>
 800b5f4:	7d23      	ldrb	r3, [r4, #20]
 800b5f6:	2b01      	cmp	r3, #1
 800b5f8:	68a3      	ldr	r3, [r4, #8]
 800b5fa:	d017      	beq.n	800b62c <ucdr_deserialize_uint32_t+0xd0>
 800b5fc:	78db      	ldrb	r3, [r3, #3]
 800b5fe:	702b      	strb	r3, [r5, #0]
 800b600:	68a3      	ldr	r3, [r4, #8]
 800b602:	789b      	ldrb	r3, [r3, #2]
 800b604:	706b      	strb	r3, [r5, #1]
 800b606:	68a3      	ldr	r3, [r4, #8]
 800b608:	785b      	ldrb	r3, [r3, #1]
 800b60a:	70ab      	strb	r3, [r5, #2]
 800b60c:	68a3      	ldr	r3, [r4, #8]
 800b60e:	781b      	ldrb	r3, [r3, #0]
 800b610:	70eb      	strb	r3, [r5, #3]
 800b612:	68a2      	ldr	r2, [r4, #8]
 800b614:	6923      	ldr	r3, [r4, #16]
 800b616:	3204      	adds	r2, #4
 800b618:	3304      	adds	r3, #4
 800b61a:	2104      	movs	r1, #4
 800b61c:	60a2      	str	r2, [r4, #8]
 800b61e:	6123      	str	r3, [r4, #16]
 800b620:	7561      	strb	r1, [r4, #21]
 800b622:	7da0      	ldrb	r0, [r4, #22]
 800b624:	f080 0001 	eor.w	r0, r0, #1
 800b628:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	602b      	str	r3, [r5, #0]
 800b630:	e7ef      	b.n	800b612 <ucdr_deserialize_uint32_t+0xb6>
 800b632:	68a2      	ldr	r2, [r4, #8]
 800b634:	6923      	ldr	r3, [r4, #16]
 800b636:	7da0      	ldrb	r0, [r4, #22]
 800b638:	f884 8015 	strb.w	r8, [r4, #21]
 800b63c:	1bd2      	subs	r2, r2, r7
 800b63e:	1bdb      	subs	r3, r3, r7
 800b640:	60a2      	str	r2, [r4, #8]
 800b642:	6123      	str	r3, [r4, #16]
 800b644:	f080 0001 	eor.w	r0, r0, #1
 800b648:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b64c:	68a3      	ldr	r3, [r4, #8]
 800b64e:	789b      	ldrb	r3, [r3, #2]
 800b650:	706b      	strb	r3, [r5, #1]
 800b652:	1cab      	adds	r3, r5, #2
 800b654:	68a2      	ldr	r2, [r4, #8]
 800b656:	7852      	ldrb	r2, [r2, #1]
 800b658:	f803 2b01 	strb.w	r2, [r3], #1
 800b65c:	68a2      	ldr	r2, [r4, #8]
 800b65e:	7812      	ldrb	r2, [r2, #0]
 800b660:	701a      	strb	r2, [r3, #0]
 800b662:	e7b4      	b.n	800b5ce <ucdr_deserialize_uint32_t+0x72>
 800b664:	4631      	mov	r1, r6
 800b666:	463a      	mov	r2, r7
 800b668:	4628      	mov	r0, r5
 800b66a:	f007 ff9f 	bl	80135ac <memcpy>
 800b66e:	68a1      	ldr	r1, [r4, #8]
 800b670:	464a      	mov	r2, r9
 800b672:	19e8      	adds	r0, r5, r7
 800b674:	f007 ff9a 	bl	80135ac <memcpy>
 800b678:	e7a9      	b.n	800b5ce <ucdr_deserialize_uint32_t+0x72>
 800b67a:	bf00      	nop

0800b67c <ucdr_deserialize_endian_uint32_t>:
 800b67c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b680:	460e      	mov	r6, r1
 800b682:	2104      	movs	r1, #4
 800b684:	4604      	mov	r4, r0
 800b686:	4615      	mov	r5, r2
 800b688:	f000 fbda 	bl	800be40 <ucdr_buffer_alignment>
 800b68c:	4601      	mov	r1, r0
 800b68e:	4620      	mov	r0, r4
 800b690:	f894 9015 	ldrb.w	r9, [r4, #21]
 800b694:	f000 fc18 	bl	800bec8 <ucdr_advance_buffer>
 800b698:	2104      	movs	r1, #4
 800b69a:	4620      	mov	r0, r4
 800b69c:	f000 fb70 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b6a0:	2800      	cmp	r0, #0
 800b6a2:	d13c      	bne.n	800b71e <ucdr_deserialize_endian_uint32_t+0xa2>
 800b6a4:	e9d4 3701 	ldrd	r3, r7, [r4, #4]
 800b6a8:	42bb      	cmp	r3, r7
 800b6aa:	d933      	bls.n	800b714 <ucdr_deserialize_endian_uint32_t+0x98>
 800b6ac:	eba3 0807 	sub.w	r8, r3, r7
 800b6b0:	60a3      	str	r3, [r4, #8]
 800b6b2:	6923      	ldr	r3, [r4, #16]
 800b6b4:	f1c8 0a04 	rsb	sl, r8, #4
 800b6b8:	4443      	add	r3, r8
 800b6ba:	6123      	str	r3, [r4, #16]
 800b6bc:	4651      	mov	r1, sl
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 fb6a 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b6c4:	2800      	cmp	r0, #0
 800b6c6:	d048      	beq.n	800b75a <ucdr_deserialize_endian_uint32_t+0xde>
 800b6c8:	2e01      	cmp	r6, #1
 800b6ca:	d061      	beq.n	800b790 <ucdr_deserialize_endian_uint32_t+0x114>
 800b6cc:	78fb      	ldrb	r3, [r7, #3]
 800b6ce:	702b      	strb	r3, [r5, #0]
 800b6d0:	f1b8 0f00 	cmp.w	r8, #0
 800b6d4:	d050      	beq.n	800b778 <ucdr_deserialize_endian_uint32_t+0xfc>
 800b6d6:	78bb      	ldrb	r3, [r7, #2]
 800b6d8:	706b      	strb	r3, [r5, #1]
 800b6da:	f1b8 0f01 	cmp.w	r8, #1
 800b6de:	f105 0302 	add.w	r3, r5, #2
 800b6e2:	d04d      	beq.n	800b780 <ucdr_deserialize_endian_uint32_t+0x104>
 800b6e4:	787b      	ldrb	r3, [r7, #1]
 800b6e6:	70ab      	strb	r3, [r5, #2]
 800b6e8:	f1b8 0f02 	cmp.w	r8, #2
 800b6ec:	f105 0303 	add.w	r3, r5, #3
 800b6f0:	d04a      	beq.n	800b788 <ucdr_deserialize_endian_uint32_t+0x10c>
 800b6f2:	783b      	ldrb	r3, [r7, #0]
 800b6f4:	70eb      	strb	r3, [r5, #3]
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	68a2      	ldr	r2, [r4, #8]
 800b6fa:	7da0      	ldrb	r0, [r4, #22]
 800b6fc:	2104      	movs	r1, #4
 800b6fe:	3304      	adds	r3, #4
 800b700:	4452      	add	r2, sl
 800b702:	eba3 0308 	sub.w	r3, r3, r8
 800b706:	7561      	strb	r1, [r4, #21]
 800b708:	60a2      	str	r2, [r4, #8]
 800b70a:	6123      	str	r3, [r4, #16]
 800b70c:	f080 0001 	eor.w	r0, r0, #1
 800b710:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b714:	2104      	movs	r1, #4
 800b716:	4620      	mov	r0, r4
 800b718:	f000 fb3e 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b71c:	b1a8      	cbz	r0, 800b74a <ucdr_deserialize_endian_uint32_t+0xce>
 800b71e:	2e01      	cmp	r6, #1
 800b720:	68a3      	ldr	r3, [r4, #8]
 800b722:	d017      	beq.n	800b754 <ucdr_deserialize_endian_uint32_t+0xd8>
 800b724:	78db      	ldrb	r3, [r3, #3]
 800b726:	702b      	strb	r3, [r5, #0]
 800b728:	68a3      	ldr	r3, [r4, #8]
 800b72a:	789b      	ldrb	r3, [r3, #2]
 800b72c:	706b      	strb	r3, [r5, #1]
 800b72e:	68a3      	ldr	r3, [r4, #8]
 800b730:	785b      	ldrb	r3, [r3, #1]
 800b732:	70ab      	strb	r3, [r5, #2]
 800b734:	68a3      	ldr	r3, [r4, #8]
 800b736:	781b      	ldrb	r3, [r3, #0]
 800b738:	70eb      	strb	r3, [r5, #3]
 800b73a:	68a2      	ldr	r2, [r4, #8]
 800b73c:	6923      	ldr	r3, [r4, #16]
 800b73e:	3204      	adds	r2, #4
 800b740:	3304      	adds	r3, #4
 800b742:	2104      	movs	r1, #4
 800b744:	60a2      	str	r2, [r4, #8]
 800b746:	6123      	str	r3, [r4, #16]
 800b748:	7561      	strb	r1, [r4, #21]
 800b74a:	7da0      	ldrb	r0, [r4, #22]
 800b74c:	f080 0001 	eor.w	r0, r0, #1
 800b750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	602b      	str	r3, [r5, #0]
 800b758:	e7ef      	b.n	800b73a <ucdr_deserialize_endian_uint32_t+0xbe>
 800b75a:	68a2      	ldr	r2, [r4, #8]
 800b75c:	6923      	ldr	r3, [r4, #16]
 800b75e:	7da0      	ldrb	r0, [r4, #22]
 800b760:	f884 9015 	strb.w	r9, [r4, #21]
 800b764:	eba2 0208 	sub.w	r2, r2, r8
 800b768:	eba3 0308 	sub.w	r3, r3, r8
 800b76c:	60a2      	str	r2, [r4, #8]
 800b76e:	6123      	str	r3, [r4, #16]
 800b770:	f080 0001 	eor.w	r0, r0, #1
 800b774:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b778:	68a3      	ldr	r3, [r4, #8]
 800b77a:	789b      	ldrb	r3, [r3, #2]
 800b77c:	706b      	strb	r3, [r5, #1]
 800b77e:	1cab      	adds	r3, r5, #2
 800b780:	68a2      	ldr	r2, [r4, #8]
 800b782:	7852      	ldrb	r2, [r2, #1]
 800b784:	f803 2b01 	strb.w	r2, [r3], #1
 800b788:	68a2      	ldr	r2, [r4, #8]
 800b78a:	7812      	ldrb	r2, [r2, #0]
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e7b2      	b.n	800b6f6 <ucdr_deserialize_endian_uint32_t+0x7a>
 800b790:	4639      	mov	r1, r7
 800b792:	4642      	mov	r2, r8
 800b794:	4628      	mov	r0, r5
 800b796:	f007 ff09 	bl	80135ac <memcpy>
 800b79a:	68a1      	ldr	r1, [r4, #8]
 800b79c:	4652      	mov	r2, sl
 800b79e:	eb05 0008 	add.w	r0, r5, r8
 800b7a2:	f007 ff03 	bl	80135ac <memcpy>
 800b7a6:	e7a6      	b.n	800b6f6 <ucdr_deserialize_endian_uint32_t+0x7a>

0800b7a8 <ucdr_serialize_uint64_t>:
 800b7a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b7ac:	2108      	movs	r1, #8
 800b7ae:	b082      	sub	sp, #8
 800b7b0:	4604      	mov	r4, r0
 800b7b2:	e9cd 2300 	strd	r2, r3, [sp]
 800b7b6:	f000 fb43 	bl	800be40 <ucdr_buffer_alignment>
 800b7ba:	4601      	mov	r1, r0
 800b7bc:	4620      	mov	r0, r4
 800b7be:	7d67      	ldrb	r7, [r4, #21]
 800b7c0:	f000 fb82 	bl	800bec8 <ucdr_advance_buffer>
 800b7c4:	2108      	movs	r1, #8
 800b7c6:	4620      	mov	r0, r4
 800b7c8:	f000 fada 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b7cc:	2800      	cmp	r0, #0
 800b7ce:	d14e      	bne.n	800b86e <ucdr_serialize_uint64_t+0xc6>
 800b7d0:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b7d4:	42ab      	cmp	r3, r5
 800b7d6:	d945      	bls.n	800b864 <ucdr_serialize_uint64_t+0xbc>
 800b7d8:	1b5e      	subs	r6, r3, r5
 800b7da:	60a3      	str	r3, [r4, #8]
 800b7dc:	6923      	ldr	r3, [r4, #16]
 800b7de:	f1c6 0808 	rsb	r8, r6, #8
 800b7e2:	4433      	add	r3, r6
 800b7e4:	6123      	str	r3, [r4, #16]
 800b7e6:	4641      	mov	r1, r8
 800b7e8:	4620      	mov	r0, r4
 800b7ea:	f000 fad5 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	d074      	beq.n	800b8dc <ucdr_serialize_uint64_t+0x134>
 800b7f2:	7d23      	ldrb	r3, [r4, #20]
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	f000 809b 	beq.w	800b930 <ucdr_serialize_uint64_t+0x188>
 800b7fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b7fe:	702b      	strb	r3, [r5, #0]
 800b800:	2e00      	cmp	r6, #0
 800b802:	d078      	beq.n	800b8f6 <ucdr_serialize_uint64_t+0x14e>
 800b804:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b808:	706b      	strb	r3, [r5, #1]
 800b80a:	2e01      	cmp	r6, #1
 800b80c:	d077      	beq.n	800b8fe <ucdr_serialize_uint64_t+0x156>
 800b80e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800b812:	70ab      	strb	r3, [r5, #2]
 800b814:	2e02      	cmp	r6, #2
 800b816:	d076      	beq.n	800b906 <ucdr_serialize_uint64_t+0x15e>
 800b818:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800b81c:	70eb      	strb	r3, [r5, #3]
 800b81e:	2e03      	cmp	r6, #3
 800b820:	d075      	beq.n	800b90e <ucdr_serialize_uint64_t+0x166>
 800b822:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800b826:	712b      	strb	r3, [r5, #4]
 800b828:	2e04      	cmp	r6, #4
 800b82a:	d074      	beq.n	800b916 <ucdr_serialize_uint64_t+0x16e>
 800b82c:	f89d 3002 	ldrb.w	r3, [sp, #2]
 800b830:	716b      	strb	r3, [r5, #5]
 800b832:	2e05      	cmp	r6, #5
 800b834:	d073      	beq.n	800b91e <ucdr_serialize_uint64_t+0x176>
 800b836:	f89d 3001 	ldrb.w	r3, [sp, #1]
 800b83a:	71ab      	strb	r3, [r5, #6]
 800b83c:	2e06      	cmp	r6, #6
 800b83e:	d072      	beq.n	800b926 <ucdr_serialize_uint64_t+0x17e>
 800b840:	f89d 3000 	ldrb.w	r3, [sp]
 800b844:	71eb      	strb	r3, [r5, #7]
 800b846:	6923      	ldr	r3, [r4, #16]
 800b848:	68a2      	ldr	r2, [r4, #8]
 800b84a:	7da0      	ldrb	r0, [r4, #22]
 800b84c:	3308      	adds	r3, #8
 800b84e:	1b9e      	subs	r6, r3, r6
 800b850:	4442      	add	r2, r8
 800b852:	2308      	movs	r3, #8
 800b854:	f080 0001 	eor.w	r0, r0, #1
 800b858:	60a2      	str	r2, [r4, #8]
 800b85a:	6126      	str	r6, [r4, #16]
 800b85c:	7563      	strb	r3, [r4, #21]
 800b85e:	b002      	add	sp, #8
 800b860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b864:	2108      	movs	r1, #8
 800b866:	4620      	mov	r0, r4
 800b868:	f000 fa96 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b86c:	b350      	cbz	r0, 800b8c4 <ucdr_serialize_uint64_t+0x11c>
 800b86e:	7d23      	ldrb	r3, [r4, #20]
 800b870:	2b01      	cmp	r3, #1
 800b872:	d02d      	beq.n	800b8d0 <ucdr_serialize_uint64_t+0x128>
 800b874:	68a3      	ldr	r3, [r4, #8]
 800b876:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b87a:	701a      	strb	r2, [r3, #0]
 800b87c:	68a3      	ldr	r3, [r4, #8]
 800b87e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b882:	705a      	strb	r2, [r3, #1]
 800b884:	68a3      	ldr	r3, [r4, #8]
 800b886:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b88a:	709a      	strb	r2, [r3, #2]
 800b88c:	68a3      	ldr	r3, [r4, #8]
 800b88e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b892:	70da      	strb	r2, [r3, #3]
 800b894:	68a3      	ldr	r3, [r4, #8]
 800b896:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b89a:	711a      	strb	r2, [r3, #4]
 800b89c:	68a3      	ldr	r3, [r4, #8]
 800b89e:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b8a2:	715a      	strb	r2, [r3, #5]
 800b8a4:	68a3      	ldr	r3, [r4, #8]
 800b8a6:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b8aa:	719a      	strb	r2, [r3, #6]
 800b8ac:	68a3      	ldr	r3, [r4, #8]
 800b8ae:	f89d 2000 	ldrb.w	r2, [sp]
 800b8b2:	71da      	strb	r2, [r3, #7]
 800b8b4:	68a2      	ldr	r2, [r4, #8]
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	3208      	adds	r2, #8
 800b8ba:	3308      	adds	r3, #8
 800b8bc:	2108      	movs	r1, #8
 800b8be:	60a2      	str	r2, [r4, #8]
 800b8c0:	6123      	str	r3, [r4, #16]
 800b8c2:	7561      	strb	r1, [r4, #21]
 800b8c4:	7da0      	ldrb	r0, [r4, #22]
 800b8c6:	f080 0001 	eor.w	r0, r0, #1
 800b8ca:	b002      	add	sp, #8
 800b8cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8d0:	466b      	mov	r3, sp
 800b8d2:	cb03      	ldmia	r3!, {r0, r1}
 800b8d4:	68a3      	ldr	r3, [r4, #8]
 800b8d6:	6018      	str	r0, [r3, #0]
 800b8d8:	6059      	str	r1, [r3, #4]
 800b8da:	e7eb      	b.n	800b8b4 <ucdr_serialize_uint64_t+0x10c>
 800b8dc:	68a2      	ldr	r2, [r4, #8]
 800b8de:	6923      	ldr	r3, [r4, #16]
 800b8e0:	7da0      	ldrb	r0, [r4, #22]
 800b8e2:	7567      	strb	r7, [r4, #21]
 800b8e4:	1b92      	subs	r2, r2, r6
 800b8e6:	1b9b      	subs	r3, r3, r6
 800b8e8:	f080 0001 	eor.w	r0, r0, #1
 800b8ec:	60a2      	str	r2, [r4, #8]
 800b8ee:	6123      	str	r3, [r4, #16]
 800b8f0:	b002      	add	sp, #8
 800b8f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b8f6:	68a3      	ldr	r3, [r4, #8]
 800b8f8:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b8fc:	701a      	strb	r2, [r3, #0]
 800b8fe:	68a3      	ldr	r3, [r4, #8]
 800b900:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800b904:	701a      	strb	r2, [r3, #0]
 800b906:	68a3      	ldr	r3, [r4, #8]
 800b908:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800b90c:	701a      	strb	r2, [r3, #0]
 800b90e:	68a3      	ldr	r3, [r4, #8]
 800b910:	f89d 2003 	ldrb.w	r2, [sp, #3]
 800b914:	701a      	strb	r2, [r3, #0]
 800b916:	68a3      	ldr	r3, [r4, #8]
 800b918:	f89d 2002 	ldrb.w	r2, [sp, #2]
 800b91c:	701a      	strb	r2, [r3, #0]
 800b91e:	68a3      	ldr	r3, [r4, #8]
 800b920:	f89d 2001 	ldrb.w	r2, [sp, #1]
 800b924:	701a      	strb	r2, [r3, #0]
 800b926:	68a3      	ldr	r3, [r4, #8]
 800b928:	f89d 2000 	ldrb.w	r2, [sp]
 800b92c:	701a      	strb	r2, [r3, #0]
 800b92e:	e78a      	b.n	800b846 <ucdr_serialize_uint64_t+0x9e>
 800b930:	4628      	mov	r0, r5
 800b932:	466d      	mov	r5, sp
 800b934:	4629      	mov	r1, r5
 800b936:	4632      	mov	r2, r6
 800b938:	f007 fe38 	bl	80135ac <memcpy>
 800b93c:	68a0      	ldr	r0, [r4, #8]
 800b93e:	4642      	mov	r2, r8
 800b940:	19a9      	adds	r1, r5, r6
 800b942:	f007 fe33 	bl	80135ac <memcpy>
 800b946:	e77e      	b.n	800b846 <ucdr_serialize_uint64_t+0x9e>

0800b948 <ucdr_serialize_int16_t>:
 800b948:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b94c:	b082      	sub	sp, #8
 800b94e:	460b      	mov	r3, r1
 800b950:	2102      	movs	r1, #2
 800b952:	4604      	mov	r4, r0
 800b954:	f8ad 3006 	strh.w	r3, [sp, #6]
 800b958:	f000 fa72 	bl	800be40 <ucdr_buffer_alignment>
 800b95c:	4601      	mov	r1, r0
 800b95e:	4620      	mov	r0, r4
 800b960:	7d67      	ldrb	r7, [r4, #21]
 800b962:	f000 fab1 	bl	800bec8 <ucdr_advance_buffer>
 800b966:	2102      	movs	r1, #2
 800b968:	4620      	mov	r0, r4
 800b96a:	f000 fa09 	bl	800bd80 <ucdr_check_buffer_available_for>
 800b96e:	bb78      	cbnz	r0, 800b9d0 <ucdr_serialize_int16_t+0x88>
 800b970:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800b974:	42ab      	cmp	r3, r5
 800b976:	d926      	bls.n	800b9c6 <ucdr_serialize_int16_t+0x7e>
 800b978:	1b5e      	subs	r6, r3, r5
 800b97a:	60a3      	str	r3, [r4, #8]
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	f1c6 0802 	rsb	r8, r6, #2
 800b982:	4433      	add	r3, r6
 800b984:	6123      	str	r3, [r4, #16]
 800b986:	4641      	mov	r1, r8
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 fa05 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b98e:	2800      	cmp	r0, #0
 800b990:	d03b      	beq.n	800ba0a <ucdr_serialize_int16_t+0xc2>
 800b992:	7d23      	ldrb	r3, [r4, #20]
 800b994:	2b01      	cmp	r3, #1
 800b996:	d04a      	beq.n	800ba2e <ucdr_serialize_int16_t+0xe6>
 800b998:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800b99c:	702b      	strb	r3, [r5, #0]
 800b99e:	2e00      	cmp	r6, #0
 800b9a0:	d040      	beq.n	800ba24 <ucdr_serialize_int16_t+0xdc>
 800b9a2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800b9a6:	706b      	strb	r3, [r5, #1]
 800b9a8:	6923      	ldr	r3, [r4, #16]
 800b9aa:	68a2      	ldr	r2, [r4, #8]
 800b9ac:	7da0      	ldrb	r0, [r4, #22]
 800b9ae:	3302      	adds	r3, #2
 800b9b0:	1b9e      	subs	r6, r3, r6
 800b9b2:	4442      	add	r2, r8
 800b9b4:	2302      	movs	r3, #2
 800b9b6:	f080 0001 	eor.w	r0, r0, #1
 800b9ba:	60a2      	str	r2, [r4, #8]
 800b9bc:	6126      	str	r6, [r4, #16]
 800b9be:	7563      	strb	r3, [r4, #21]
 800b9c0:	b002      	add	sp, #8
 800b9c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b9c6:	2102      	movs	r1, #2
 800b9c8:	4620      	mov	r0, r4
 800b9ca:	f000 f9e5 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800b9ce:	b190      	cbz	r0, 800b9f6 <ucdr_serialize_int16_t+0xae>
 800b9d0:	7d23      	ldrb	r3, [r4, #20]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	68a3      	ldr	r3, [r4, #8]
 800b9d6:	d014      	beq.n	800ba02 <ucdr_serialize_int16_t+0xba>
 800b9d8:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800b9dc:	701a      	strb	r2, [r3, #0]
 800b9de:	68a3      	ldr	r3, [r4, #8]
 800b9e0:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800b9e4:	705a      	strb	r2, [r3, #1]
 800b9e6:	68a2      	ldr	r2, [r4, #8]
 800b9e8:	6923      	ldr	r3, [r4, #16]
 800b9ea:	3202      	adds	r2, #2
 800b9ec:	3302      	adds	r3, #2
 800b9ee:	2102      	movs	r1, #2
 800b9f0:	60a2      	str	r2, [r4, #8]
 800b9f2:	6123      	str	r3, [r4, #16]
 800b9f4:	7561      	strb	r1, [r4, #21]
 800b9f6:	7da0      	ldrb	r0, [r4, #22]
 800b9f8:	f080 0001 	eor.w	r0, r0, #1
 800b9fc:	b002      	add	sp, #8
 800b9fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba02:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800ba06:	801a      	strh	r2, [r3, #0]
 800ba08:	e7ed      	b.n	800b9e6 <ucdr_serialize_int16_t+0x9e>
 800ba0a:	68a2      	ldr	r2, [r4, #8]
 800ba0c:	6923      	ldr	r3, [r4, #16]
 800ba0e:	7da0      	ldrb	r0, [r4, #22]
 800ba10:	7567      	strb	r7, [r4, #21]
 800ba12:	1b92      	subs	r2, r2, r6
 800ba14:	1b9b      	subs	r3, r3, r6
 800ba16:	f080 0001 	eor.w	r0, r0, #1
 800ba1a:	60a2      	str	r2, [r4, #8]
 800ba1c:	6123      	str	r3, [r4, #16]
 800ba1e:	b002      	add	sp, #8
 800ba20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ba24:	68a3      	ldr	r3, [r4, #8]
 800ba26:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800ba2a:	701a      	strb	r2, [r3, #0]
 800ba2c:	e7bc      	b.n	800b9a8 <ucdr_serialize_int16_t+0x60>
 800ba2e:	4628      	mov	r0, r5
 800ba30:	f10d 0506 	add.w	r5, sp, #6
 800ba34:	4629      	mov	r1, r5
 800ba36:	4632      	mov	r2, r6
 800ba38:	f007 fdb8 	bl	80135ac <memcpy>
 800ba3c:	68a0      	ldr	r0, [r4, #8]
 800ba3e:	4642      	mov	r2, r8
 800ba40:	19a9      	adds	r1, r5, r6
 800ba42:	f007 fdb3 	bl	80135ac <memcpy>
 800ba46:	e7af      	b.n	800b9a8 <ucdr_serialize_int16_t+0x60>

0800ba48 <ucdr_deserialize_int16_t>:
 800ba48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba4c:	460d      	mov	r5, r1
 800ba4e:	2102      	movs	r1, #2
 800ba50:	4604      	mov	r4, r0
 800ba52:	f000 f9f5 	bl	800be40 <ucdr_buffer_alignment>
 800ba56:	4601      	mov	r1, r0
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f894 8015 	ldrb.w	r8, [r4, #21]
 800ba5e:	f000 fa33 	bl	800bec8 <ucdr_advance_buffer>
 800ba62:	2102      	movs	r1, #2
 800ba64:	4620      	mov	r0, r4
 800ba66:	f000 f98b 	bl	800bd80 <ucdr_check_buffer_available_for>
 800ba6a:	bb60      	cbnz	r0, 800bac6 <ucdr_deserialize_int16_t+0x7e>
 800ba6c:	e9d4 6701 	ldrd	r6, r7, [r4, #4]
 800ba70:	42be      	cmp	r6, r7
 800ba72:	d923      	bls.n	800babc <ucdr_deserialize_int16_t+0x74>
 800ba74:	6923      	ldr	r3, [r4, #16]
 800ba76:	60a6      	str	r6, [r4, #8]
 800ba78:	1bf6      	subs	r6, r6, r7
 800ba7a:	4433      	add	r3, r6
 800ba7c:	f1c6 0902 	rsb	r9, r6, #2
 800ba80:	6123      	str	r3, [r4, #16]
 800ba82:	4649      	mov	r1, r9
 800ba84:	4620      	mov	r0, r4
 800ba86:	f000 f987 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800ba8a:	2800      	cmp	r0, #0
 800ba8c:	d034      	beq.n	800baf8 <ucdr_deserialize_int16_t+0xb0>
 800ba8e:	7d23      	ldrb	r3, [r4, #20]
 800ba90:	2b01      	cmp	r3, #1
 800ba92:	d042      	beq.n	800bb1a <ucdr_deserialize_int16_t+0xd2>
 800ba94:	787b      	ldrb	r3, [r7, #1]
 800ba96:	702b      	strb	r3, [r5, #0]
 800ba98:	2e00      	cmp	r6, #0
 800ba9a:	d03a      	beq.n	800bb12 <ucdr_deserialize_int16_t+0xca>
 800ba9c:	783b      	ldrb	r3, [r7, #0]
 800ba9e:	706b      	strb	r3, [r5, #1]
 800baa0:	6923      	ldr	r3, [r4, #16]
 800baa2:	68a2      	ldr	r2, [r4, #8]
 800baa4:	7da0      	ldrb	r0, [r4, #22]
 800baa6:	2102      	movs	r1, #2
 800baa8:	3302      	adds	r3, #2
 800baaa:	444a      	add	r2, r9
 800baac:	1b9b      	subs	r3, r3, r6
 800baae:	7561      	strb	r1, [r4, #21]
 800bab0:	60a2      	str	r2, [r4, #8]
 800bab2:	6123      	str	r3, [r4, #16]
 800bab4:	f080 0001 	eor.w	r0, r0, #1
 800bab8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800babc:	2102      	movs	r1, #2
 800babe:	4620      	mov	r0, r4
 800bac0:	f000 f96a 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800bac4:	b180      	cbz	r0, 800bae8 <ucdr_deserialize_int16_t+0xa0>
 800bac6:	7d23      	ldrb	r3, [r4, #20]
 800bac8:	2b01      	cmp	r3, #1
 800baca:	68a3      	ldr	r3, [r4, #8]
 800bacc:	d011      	beq.n	800baf2 <ucdr_deserialize_int16_t+0xaa>
 800bace:	785b      	ldrb	r3, [r3, #1]
 800bad0:	702b      	strb	r3, [r5, #0]
 800bad2:	68a3      	ldr	r3, [r4, #8]
 800bad4:	781b      	ldrb	r3, [r3, #0]
 800bad6:	706b      	strb	r3, [r5, #1]
 800bad8:	68a2      	ldr	r2, [r4, #8]
 800bada:	6923      	ldr	r3, [r4, #16]
 800badc:	3202      	adds	r2, #2
 800bade:	3302      	adds	r3, #2
 800bae0:	2102      	movs	r1, #2
 800bae2:	60a2      	str	r2, [r4, #8]
 800bae4:	6123      	str	r3, [r4, #16]
 800bae6:	7561      	strb	r1, [r4, #21]
 800bae8:	7da0      	ldrb	r0, [r4, #22]
 800baea:	f080 0001 	eor.w	r0, r0, #1
 800baee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800baf2:	881b      	ldrh	r3, [r3, #0]
 800baf4:	802b      	strh	r3, [r5, #0]
 800baf6:	e7ef      	b.n	800bad8 <ucdr_deserialize_int16_t+0x90>
 800baf8:	68a2      	ldr	r2, [r4, #8]
 800bafa:	6923      	ldr	r3, [r4, #16]
 800bafc:	7da0      	ldrb	r0, [r4, #22]
 800bafe:	f884 8015 	strb.w	r8, [r4, #21]
 800bb02:	1b92      	subs	r2, r2, r6
 800bb04:	1b9b      	subs	r3, r3, r6
 800bb06:	60a2      	str	r2, [r4, #8]
 800bb08:	6123      	str	r3, [r4, #16]
 800bb0a:	f080 0001 	eor.w	r0, r0, #1
 800bb0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb12:	68a3      	ldr	r3, [r4, #8]
 800bb14:	781b      	ldrb	r3, [r3, #0]
 800bb16:	706b      	strb	r3, [r5, #1]
 800bb18:	e7c2      	b.n	800baa0 <ucdr_deserialize_int16_t+0x58>
 800bb1a:	4639      	mov	r1, r7
 800bb1c:	4632      	mov	r2, r6
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f007 fd44 	bl	80135ac <memcpy>
 800bb24:	68a1      	ldr	r1, [r4, #8]
 800bb26:	464a      	mov	r2, r9
 800bb28:	19a8      	adds	r0, r5, r6
 800bb2a:	f007 fd3f 	bl	80135ac <memcpy>
 800bb2e:	e7b7      	b.n	800baa0 <ucdr_deserialize_int16_t+0x58>

0800bb30 <ucdr_serialize_int32_t>:
 800bb30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb34:	b082      	sub	sp, #8
 800bb36:	4604      	mov	r4, r0
 800bb38:	9101      	str	r1, [sp, #4]
 800bb3a:	2104      	movs	r1, #4
 800bb3c:	f000 f980 	bl	800be40 <ucdr_buffer_alignment>
 800bb40:	4601      	mov	r1, r0
 800bb42:	4620      	mov	r0, r4
 800bb44:	7d67      	ldrb	r7, [r4, #21]
 800bb46:	f000 f9bf 	bl	800bec8 <ucdr_advance_buffer>
 800bb4a:	2104      	movs	r1, #4
 800bb4c:	4620      	mov	r0, r4
 800bb4e:	f000 f917 	bl	800bd80 <ucdr_check_buffer_available_for>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d139      	bne.n	800bbca <ucdr_serialize_int32_t+0x9a>
 800bb56:	e9d4 3501 	ldrd	r3, r5, [r4, #4]
 800bb5a:	42ab      	cmp	r3, r5
 800bb5c:	d930      	bls.n	800bbc0 <ucdr_serialize_int32_t+0x90>
 800bb5e:	1b5e      	subs	r6, r3, r5
 800bb60:	60a3      	str	r3, [r4, #8]
 800bb62:	6923      	ldr	r3, [r4, #16]
 800bb64:	f1c6 0804 	rsb	r8, r6, #4
 800bb68:	4433      	add	r3, r6
 800bb6a:	6123      	str	r3, [r4, #16]
 800bb6c:	4641      	mov	r1, r8
 800bb6e:	4620      	mov	r0, r4
 800bb70:	f000 f912 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800bb74:	2800      	cmp	r0, #0
 800bb76:	d04c      	beq.n	800bc12 <ucdr_serialize_int32_t+0xe2>
 800bb78:	7d23      	ldrb	r3, [r4, #20]
 800bb7a:	2b01      	cmp	r3, #1
 800bb7c:	d063      	beq.n	800bc46 <ucdr_serialize_int32_t+0x116>
 800bb7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800bb82:	702b      	strb	r3, [r5, #0]
 800bb84:	2e00      	cmp	r6, #0
 800bb86:	d051      	beq.n	800bc2c <ucdr_serialize_int32_t+0xfc>
 800bb88:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800bb8c:	706b      	strb	r3, [r5, #1]
 800bb8e:	2e01      	cmp	r6, #1
 800bb90:	d050      	beq.n	800bc34 <ucdr_serialize_int32_t+0x104>
 800bb92:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800bb96:	70ab      	strb	r3, [r5, #2]
 800bb98:	2e02      	cmp	r6, #2
 800bb9a:	d04f      	beq.n	800bc3c <ucdr_serialize_int32_t+0x10c>
 800bb9c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800bba0:	70eb      	strb	r3, [r5, #3]
 800bba2:	6923      	ldr	r3, [r4, #16]
 800bba4:	68a2      	ldr	r2, [r4, #8]
 800bba6:	7da0      	ldrb	r0, [r4, #22]
 800bba8:	3304      	adds	r3, #4
 800bbaa:	1b9e      	subs	r6, r3, r6
 800bbac:	4442      	add	r2, r8
 800bbae:	2304      	movs	r3, #4
 800bbb0:	f080 0001 	eor.w	r0, r0, #1
 800bbb4:	60a2      	str	r2, [r4, #8]
 800bbb6:	6126      	str	r6, [r4, #16]
 800bbb8:	7563      	strb	r3, [r4, #21]
 800bbba:	b002      	add	sp, #8
 800bbbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbc0:	2104      	movs	r1, #4
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f000 f8e8 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800bbc8:	b1d0      	cbz	r0, 800bc00 <ucdr_serialize_int32_t+0xd0>
 800bbca:	7d23      	ldrb	r3, [r4, #20]
 800bbcc:	2b01      	cmp	r3, #1
 800bbce:	68a3      	ldr	r3, [r4, #8]
 800bbd0:	d01c      	beq.n	800bc0c <ucdr_serialize_int32_t+0xdc>
 800bbd2:	f89d 2007 	ldrb.w	r2, [sp, #7]
 800bbd6:	701a      	strb	r2, [r3, #0]
 800bbd8:	68a3      	ldr	r3, [r4, #8]
 800bbda:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bbde:	705a      	strb	r2, [r3, #1]
 800bbe0:	68a3      	ldr	r3, [r4, #8]
 800bbe2:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bbe6:	709a      	strb	r2, [r3, #2]
 800bbe8:	68a3      	ldr	r3, [r4, #8]
 800bbea:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bbee:	70da      	strb	r2, [r3, #3]
 800bbf0:	68a2      	ldr	r2, [r4, #8]
 800bbf2:	6923      	ldr	r3, [r4, #16]
 800bbf4:	3204      	adds	r2, #4
 800bbf6:	3304      	adds	r3, #4
 800bbf8:	2104      	movs	r1, #4
 800bbfa:	60a2      	str	r2, [r4, #8]
 800bbfc:	6123      	str	r3, [r4, #16]
 800bbfe:	7561      	strb	r1, [r4, #21]
 800bc00:	7da0      	ldrb	r0, [r4, #22]
 800bc02:	f080 0001 	eor.w	r0, r0, #1
 800bc06:	b002      	add	sp, #8
 800bc08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc0c:	9a01      	ldr	r2, [sp, #4]
 800bc0e:	601a      	str	r2, [r3, #0]
 800bc10:	e7ee      	b.n	800bbf0 <ucdr_serialize_int32_t+0xc0>
 800bc12:	68a2      	ldr	r2, [r4, #8]
 800bc14:	6923      	ldr	r3, [r4, #16]
 800bc16:	7da0      	ldrb	r0, [r4, #22]
 800bc18:	7567      	strb	r7, [r4, #21]
 800bc1a:	1b92      	subs	r2, r2, r6
 800bc1c:	1b9b      	subs	r3, r3, r6
 800bc1e:	f080 0001 	eor.w	r0, r0, #1
 800bc22:	60a2      	str	r2, [r4, #8]
 800bc24:	6123      	str	r3, [r4, #16]
 800bc26:	b002      	add	sp, #8
 800bc28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc2c:	68a3      	ldr	r3, [r4, #8]
 800bc2e:	f89d 2006 	ldrb.w	r2, [sp, #6]
 800bc32:	701a      	strb	r2, [r3, #0]
 800bc34:	68a3      	ldr	r3, [r4, #8]
 800bc36:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800bc3a:	701a      	strb	r2, [r3, #0]
 800bc3c:	68a3      	ldr	r3, [r4, #8]
 800bc3e:	f89d 2004 	ldrb.w	r2, [sp, #4]
 800bc42:	701a      	strb	r2, [r3, #0]
 800bc44:	e7ad      	b.n	800bba2 <ucdr_serialize_int32_t+0x72>
 800bc46:	4628      	mov	r0, r5
 800bc48:	ad01      	add	r5, sp, #4
 800bc4a:	4629      	mov	r1, r5
 800bc4c:	4632      	mov	r2, r6
 800bc4e:	f007 fcad 	bl	80135ac <memcpy>
 800bc52:	68a0      	ldr	r0, [r4, #8]
 800bc54:	4642      	mov	r2, r8
 800bc56:	19a9      	adds	r1, r5, r6
 800bc58:	f007 fca8 	bl	80135ac <memcpy>
 800bc5c:	e7a1      	b.n	800bba2 <ucdr_serialize_int32_t+0x72>
 800bc5e:	bf00      	nop

0800bc60 <ucdr_deserialize_int32_t>:
 800bc60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc64:	460d      	mov	r5, r1
 800bc66:	2104      	movs	r1, #4
 800bc68:	4604      	mov	r4, r0
 800bc6a:	f000 f8e9 	bl	800be40 <ucdr_buffer_alignment>
 800bc6e:	4601      	mov	r1, r0
 800bc70:	4620      	mov	r0, r4
 800bc72:	f894 8015 	ldrb.w	r8, [r4, #21]
 800bc76:	f000 f927 	bl	800bec8 <ucdr_advance_buffer>
 800bc7a:	2104      	movs	r1, #4
 800bc7c:	4620      	mov	r0, r4
 800bc7e:	f000 f87f 	bl	800bd80 <ucdr_check_buffer_available_for>
 800bc82:	2800      	cmp	r0, #0
 800bc84:	d138      	bne.n	800bcf8 <ucdr_deserialize_int32_t+0x98>
 800bc86:	e9d4 7601 	ldrd	r7, r6, [r4, #4]
 800bc8a:	42b7      	cmp	r7, r6
 800bc8c:	d92f      	bls.n	800bcee <ucdr_deserialize_int32_t+0x8e>
 800bc8e:	6923      	ldr	r3, [r4, #16]
 800bc90:	60a7      	str	r7, [r4, #8]
 800bc92:	1bbf      	subs	r7, r7, r6
 800bc94:	443b      	add	r3, r7
 800bc96:	f1c7 0904 	rsb	r9, r7, #4
 800bc9a:	6123      	str	r3, [r4, #16]
 800bc9c:	4649      	mov	r1, r9
 800bc9e:	4620      	mov	r0, r4
 800bca0:	f000 f87a 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800bca4:	2800      	cmp	r0, #0
 800bca6:	d046      	beq.n	800bd36 <ucdr_deserialize_int32_t+0xd6>
 800bca8:	7d23      	ldrb	r3, [r4, #20]
 800bcaa:	2b01      	cmp	r3, #1
 800bcac:	d05c      	beq.n	800bd68 <ucdr_deserialize_int32_t+0x108>
 800bcae:	78f3      	ldrb	r3, [r6, #3]
 800bcb0:	702b      	strb	r3, [r5, #0]
 800bcb2:	2f00      	cmp	r7, #0
 800bcb4:	d04c      	beq.n	800bd50 <ucdr_deserialize_int32_t+0xf0>
 800bcb6:	78b3      	ldrb	r3, [r6, #2]
 800bcb8:	706b      	strb	r3, [r5, #1]
 800bcba:	2f01      	cmp	r7, #1
 800bcbc:	f105 0302 	add.w	r3, r5, #2
 800bcc0:	d04a      	beq.n	800bd58 <ucdr_deserialize_int32_t+0xf8>
 800bcc2:	7873      	ldrb	r3, [r6, #1]
 800bcc4:	70ab      	strb	r3, [r5, #2]
 800bcc6:	2f02      	cmp	r7, #2
 800bcc8:	f105 0303 	add.w	r3, r5, #3
 800bccc:	d048      	beq.n	800bd60 <ucdr_deserialize_int32_t+0x100>
 800bcce:	7833      	ldrb	r3, [r6, #0]
 800bcd0:	70eb      	strb	r3, [r5, #3]
 800bcd2:	6923      	ldr	r3, [r4, #16]
 800bcd4:	68a2      	ldr	r2, [r4, #8]
 800bcd6:	7da0      	ldrb	r0, [r4, #22]
 800bcd8:	2104      	movs	r1, #4
 800bcda:	3304      	adds	r3, #4
 800bcdc:	444a      	add	r2, r9
 800bcde:	1bdb      	subs	r3, r3, r7
 800bce0:	7561      	strb	r1, [r4, #21]
 800bce2:	60a2      	str	r2, [r4, #8]
 800bce4:	6123      	str	r3, [r4, #16]
 800bce6:	f080 0001 	eor.w	r0, r0, #1
 800bcea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcee:	2104      	movs	r1, #4
 800bcf0:	4620      	mov	r0, r4
 800bcf2:	f000 f851 	bl	800bd98 <ucdr_check_final_buffer_behavior>
 800bcf6:	b1b0      	cbz	r0, 800bd26 <ucdr_deserialize_int32_t+0xc6>
 800bcf8:	7d23      	ldrb	r3, [r4, #20]
 800bcfa:	2b01      	cmp	r3, #1
 800bcfc:	68a3      	ldr	r3, [r4, #8]
 800bcfe:	d017      	beq.n	800bd30 <ucdr_deserialize_int32_t+0xd0>
 800bd00:	78db      	ldrb	r3, [r3, #3]
 800bd02:	702b      	strb	r3, [r5, #0]
 800bd04:	68a3      	ldr	r3, [r4, #8]
 800bd06:	789b      	ldrb	r3, [r3, #2]
 800bd08:	706b      	strb	r3, [r5, #1]
 800bd0a:	68a3      	ldr	r3, [r4, #8]
 800bd0c:	785b      	ldrb	r3, [r3, #1]
 800bd0e:	70ab      	strb	r3, [r5, #2]
 800bd10:	68a3      	ldr	r3, [r4, #8]
 800bd12:	781b      	ldrb	r3, [r3, #0]
 800bd14:	70eb      	strb	r3, [r5, #3]
 800bd16:	68a2      	ldr	r2, [r4, #8]
 800bd18:	6923      	ldr	r3, [r4, #16]
 800bd1a:	3204      	adds	r2, #4
 800bd1c:	3304      	adds	r3, #4
 800bd1e:	2104      	movs	r1, #4
 800bd20:	60a2      	str	r2, [r4, #8]
 800bd22:	6123      	str	r3, [r4, #16]
 800bd24:	7561      	strb	r1, [r4, #21]
 800bd26:	7da0      	ldrb	r0, [r4, #22]
 800bd28:	f080 0001 	eor.w	r0, r0, #1
 800bd2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd30:	681b      	ldr	r3, [r3, #0]
 800bd32:	602b      	str	r3, [r5, #0]
 800bd34:	e7ef      	b.n	800bd16 <ucdr_deserialize_int32_t+0xb6>
 800bd36:	68a2      	ldr	r2, [r4, #8]
 800bd38:	6923      	ldr	r3, [r4, #16]
 800bd3a:	7da0      	ldrb	r0, [r4, #22]
 800bd3c:	f884 8015 	strb.w	r8, [r4, #21]
 800bd40:	1bd2      	subs	r2, r2, r7
 800bd42:	1bdb      	subs	r3, r3, r7
 800bd44:	60a2      	str	r2, [r4, #8]
 800bd46:	6123      	str	r3, [r4, #16]
 800bd48:	f080 0001 	eor.w	r0, r0, #1
 800bd4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bd50:	68a3      	ldr	r3, [r4, #8]
 800bd52:	789b      	ldrb	r3, [r3, #2]
 800bd54:	706b      	strb	r3, [r5, #1]
 800bd56:	1cab      	adds	r3, r5, #2
 800bd58:	68a2      	ldr	r2, [r4, #8]
 800bd5a:	7852      	ldrb	r2, [r2, #1]
 800bd5c:	f803 2b01 	strb.w	r2, [r3], #1
 800bd60:	68a2      	ldr	r2, [r4, #8]
 800bd62:	7812      	ldrb	r2, [r2, #0]
 800bd64:	701a      	strb	r2, [r3, #0]
 800bd66:	e7b4      	b.n	800bcd2 <ucdr_deserialize_int32_t+0x72>
 800bd68:	4631      	mov	r1, r6
 800bd6a:	463a      	mov	r2, r7
 800bd6c:	4628      	mov	r0, r5
 800bd6e:	f007 fc1d 	bl	80135ac <memcpy>
 800bd72:	68a1      	ldr	r1, [r4, #8]
 800bd74:	464a      	mov	r2, r9
 800bd76:	19e8      	adds	r0, r5, r7
 800bd78:	f007 fc18 	bl	80135ac <memcpy>
 800bd7c:	e7a9      	b.n	800bcd2 <ucdr_deserialize_int32_t+0x72>
 800bd7e:	bf00      	nop

0800bd80 <ucdr_check_buffer_available_for>:
 800bd80:	7d83      	ldrb	r3, [r0, #22]
 800bd82:	b93b      	cbnz	r3, 800bd94 <ucdr_check_buffer_available_for+0x14>
 800bd84:	e9d0 0301 	ldrd	r0, r3, [r0, #4]
 800bd88:	4419      	add	r1, r3
 800bd8a:	4288      	cmp	r0, r1
 800bd8c:	bf34      	ite	cc
 800bd8e:	2000      	movcc	r0, #0
 800bd90:	2001      	movcs	r0, #1
 800bd92:	4770      	bx	lr
 800bd94:	2000      	movs	r0, #0
 800bd96:	4770      	bx	lr

0800bd98 <ucdr_check_final_buffer_behavior>:
 800bd98:	7d83      	ldrb	r3, [r0, #22]
 800bd9a:	b943      	cbnz	r3, 800bdae <ucdr_check_final_buffer_behavior+0x16>
 800bd9c:	e9d0 2101 	ldrd	r2, r1, [r0, #4]
 800bda0:	4291      	cmp	r1, r2
 800bda2:	b510      	push	{r4, lr}
 800bda4:	4604      	mov	r4, r0
 800bda6:	d205      	bcs.n	800bdb4 <ucdr_check_final_buffer_behavior+0x1c>
 800bda8:	2301      	movs	r3, #1
 800bdaa:	4618      	mov	r0, r3
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	2300      	movs	r3, #0
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	4770      	bx	lr
 800bdb4:	6982      	ldr	r2, [r0, #24]
 800bdb6:	b13a      	cbz	r2, 800bdc8 <ucdr_check_final_buffer_behavior+0x30>
 800bdb8:	69c1      	ldr	r1, [r0, #28]
 800bdba:	4790      	blx	r2
 800bdbc:	f080 0301 	eor.w	r3, r0, #1
 800bdc0:	b2db      	uxtb	r3, r3
 800bdc2:	75a0      	strb	r0, [r4, #22]
 800bdc4:	4618      	mov	r0, r3
 800bdc6:	bd10      	pop	{r4, pc}
 800bdc8:	2001      	movs	r0, #1
 800bdca:	75a0      	strb	r0, [r4, #22]
 800bdcc:	e7fa      	b.n	800bdc4 <ucdr_check_final_buffer_behavior+0x2c>
 800bdce:	bf00      	nop

0800bdd0 <ucdr_set_on_full_buffer_callback>:
 800bdd0:	e9c0 1206 	strd	r1, r2, [r0, #24]
 800bdd4:	4770      	bx	lr
 800bdd6:	bf00      	nop

0800bdd8 <ucdr_init_buffer_origin_offset_endian>:
 800bdd8:	b410      	push	{r4}
 800bdda:	9c01      	ldr	r4, [sp, #4]
 800bddc:	6001      	str	r1, [r0, #0]
 800bdde:	440a      	add	r2, r1
 800bde0:	6042      	str	r2, [r0, #4]
 800bde2:	190a      	adds	r2, r1, r4
 800bde4:	441c      	add	r4, r3
 800bde6:	e9c0 3403 	strd	r3, r4, [r0, #12]
 800bdea:	6082      	str	r2, [r0, #8]
 800bdec:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800bdf0:	7503      	strb	r3, [r0, #20]
 800bdf2:	2200      	movs	r2, #0
 800bdf4:	e9c0 2206 	strd	r2, r2, [r0, #24]
 800bdf8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bdfc:	7542      	strb	r2, [r0, #21]
 800bdfe:	7582      	strb	r2, [r0, #22]
 800be00:	4770      	bx	lr
 800be02:	bf00      	nop

0800be04 <ucdr_init_buffer_origin_offset>:
 800be04:	b510      	push	{r4, lr}
 800be06:	b082      	sub	sp, #8
 800be08:	9c04      	ldr	r4, [sp, #16]
 800be0a:	9400      	str	r4, [sp, #0]
 800be0c:	2401      	movs	r4, #1
 800be0e:	9401      	str	r4, [sp, #4]
 800be10:	f7ff ffe2 	bl	800bdd8 <ucdr_init_buffer_origin_offset_endian>
 800be14:	b002      	add	sp, #8
 800be16:	bd10      	pop	{r4, pc}

0800be18 <ucdr_init_buffer_origin>:
 800be18:	b510      	push	{r4, lr}
 800be1a:	b082      	sub	sp, #8
 800be1c:	2400      	movs	r4, #0
 800be1e:	9400      	str	r4, [sp, #0]
 800be20:	f7ff fff0 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800be24:	b002      	add	sp, #8
 800be26:	bd10      	pop	{r4, pc}

0800be28 <ucdr_init_buffer>:
 800be28:	2300      	movs	r3, #0
 800be2a:	f7ff bff5 	b.w	800be18 <ucdr_init_buffer_origin>
 800be2e:	bf00      	nop

0800be30 <ucdr_alignment>:
 800be30:	fbb0 f3f1 	udiv	r3, r0, r1
 800be34:	fb03 0011 	mls	r0, r3, r1, r0
 800be38:	1a08      	subs	r0, r1, r0
 800be3a:	3901      	subs	r1, #1
 800be3c:	4008      	ands	r0, r1
 800be3e:	4770      	bx	lr

0800be40 <ucdr_buffer_alignment>:
 800be40:	7d43      	ldrb	r3, [r0, #21]
 800be42:	428b      	cmp	r3, r1
 800be44:	d208      	bcs.n	800be58 <ucdr_buffer_alignment+0x18>
 800be46:	6900      	ldr	r0, [r0, #16]
 800be48:	fbb0 f3f1 	udiv	r3, r0, r1
 800be4c:	fb01 0013 	mls	r0, r1, r3, r0
 800be50:	1a08      	subs	r0, r1, r0
 800be52:	3901      	subs	r1, #1
 800be54:	4008      	ands	r0, r1
 800be56:	4770      	bx	lr
 800be58:	2000      	movs	r0, #0
 800be5a:	4770      	bx	lr

0800be5c <ucdr_align_to>:
 800be5c:	b538      	push	{r3, r4, r5, lr}
 800be5e:	4604      	mov	r4, r0
 800be60:	460d      	mov	r5, r1
 800be62:	f7ff ffed 	bl	800be40 <ucdr_buffer_alignment>
 800be66:	68a3      	ldr	r3, [r4, #8]
 800be68:	6921      	ldr	r1, [r4, #16]
 800be6a:	7565      	strb	r5, [r4, #21]
 800be6c:	181a      	adds	r2, r3, r0
 800be6e:	6863      	ldr	r3, [r4, #4]
 800be70:	4293      	cmp	r3, r2
 800be72:	4408      	add	r0, r1
 800be74:	bf28      	it	cs
 800be76:	4613      	movcs	r3, r2
 800be78:	6120      	str	r0, [r4, #16]
 800be7a:	60a3      	str	r3, [r4, #8]
 800be7c:	bd38      	pop	{r3, r4, r5, pc}
 800be7e:	bf00      	nop

0800be80 <ucdr_buffer_length>:
 800be80:	6882      	ldr	r2, [r0, #8]
 800be82:	6800      	ldr	r0, [r0, #0]
 800be84:	1a10      	subs	r0, r2, r0
 800be86:	4770      	bx	lr

0800be88 <ucdr_buffer_remaining>:
 800be88:	e9d0 2001 	ldrd	r2, r0, [r0, #4]
 800be8c:	1a10      	subs	r0, r2, r0
 800be8e:	4770      	bx	lr

0800be90 <ucdr_check_final_buffer_behavior_array>:
 800be90:	b538      	push	{r3, r4, r5, lr}
 800be92:	7d83      	ldrb	r3, [r0, #22]
 800be94:	b963      	cbnz	r3, 800beb0 <ucdr_check_final_buffer_behavior_array+0x20>
 800be96:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 800be9a:	429a      	cmp	r2, r3
 800be9c:	4604      	mov	r4, r0
 800be9e:	460d      	mov	r5, r1
 800bea0:	d308      	bcc.n	800beb4 <ucdr_check_final_buffer_behavior_array+0x24>
 800bea2:	b139      	cbz	r1, 800beb4 <ucdr_check_final_buffer_behavior_array+0x24>
 800bea4:	6983      	ldr	r3, [r0, #24]
 800bea6:	b163      	cbz	r3, 800bec2 <ucdr_check_final_buffer_behavior_array+0x32>
 800bea8:	69c1      	ldr	r1, [r0, #28]
 800beaa:	4798      	blx	r3
 800beac:	75a0      	strb	r0, [r4, #22]
 800beae:	b108      	cbz	r0, 800beb4 <ucdr_check_final_buffer_behavior_array+0x24>
 800beb0:	2000      	movs	r0, #0
 800beb2:	bd38      	pop	{r3, r4, r5, pc}
 800beb4:	4620      	mov	r0, r4
 800beb6:	f7ff ffe7 	bl	800be88 <ucdr_buffer_remaining>
 800beba:	42a8      	cmp	r0, r5
 800bebc:	bf28      	it	cs
 800bebe:	4628      	movcs	r0, r5
 800bec0:	bd38      	pop	{r3, r4, r5, pc}
 800bec2:	2301      	movs	r3, #1
 800bec4:	7583      	strb	r3, [r0, #22]
 800bec6:	e7f3      	b.n	800beb0 <ucdr_check_final_buffer_behavior_array+0x20>

0800bec8 <ucdr_advance_buffer>:
 800bec8:	b538      	push	{r3, r4, r5, lr}
 800beca:	4604      	mov	r4, r0
 800becc:	460d      	mov	r5, r1
 800bece:	f7ff ff57 	bl	800bd80 <ucdr_check_buffer_available_for>
 800bed2:	b178      	cbz	r0, 800bef4 <ucdr_advance_buffer+0x2c>
 800bed4:	6923      	ldr	r3, [r4, #16]
 800bed6:	68a2      	ldr	r2, [r4, #8]
 800bed8:	442b      	add	r3, r5
 800beda:	6123      	str	r3, [r4, #16]
 800bedc:	2301      	movs	r3, #1
 800bede:	442a      	add	r2, r5
 800bee0:	7563      	strb	r3, [r4, #21]
 800bee2:	60a2      	str	r2, [r4, #8]
 800bee4:	bd38      	pop	{r3, r4, r5, pc}
 800bee6:	68a2      	ldr	r2, [r4, #8]
 800bee8:	6923      	ldr	r3, [r4, #16]
 800beea:	4402      	add	r2, r0
 800beec:	4403      	add	r3, r0
 800beee:	1a2d      	subs	r5, r5, r0
 800bef0:	60a2      	str	r2, [r4, #8]
 800bef2:	6123      	str	r3, [r4, #16]
 800bef4:	4629      	mov	r1, r5
 800bef6:	2201      	movs	r2, #1
 800bef8:	4620      	mov	r0, r4
 800befa:	f7ff ffc9 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 800befe:	2800      	cmp	r0, #0
 800bf00:	d1f1      	bne.n	800bee6 <ucdr_advance_buffer+0x1e>
 800bf02:	2301      	movs	r3, #1
 800bf04:	7563      	strb	r3, [r4, #21]
 800bf06:	bd38      	pop	{r3, r4, r5, pc}

0800bf08 <uxr_buffer_delete_entity>:
 800bf08:	b510      	push	{r4, lr}
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	b08e      	sub	sp, #56	; 0x38
 800bf0e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800bf12:	2303      	movs	r3, #3
 800bf14:	9300      	str	r3, [sp, #0]
 800bf16:	2204      	movs	r2, #4
 800bf18:	ab06      	add	r3, sp, #24
 800bf1a:	4604      	mov	r4, r0
 800bf1c:	9103      	str	r1, [sp, #12]
 800bf1e:	f001 f86f 	bl	800d000 <uxr_prepare_stream_to_write_submessage>
 800bf22:	b918      	cbnz	r0, 800bf2c <uxr_buffer_delete_entity+0x24>
 800bf24:	4604      	mov	r4, r0
 800bf26:	4620      	mov	r0, r4
 800bf28:	b00e      	add	sp, #56	; 0x38
 800bf2a:	bd10      	pop	{r4, pc}
 800bf2c:	9902      	ldr	r1, [sp, #8]
 800bf2e:	aa05      	add	r2, sp, #20
 800bf30:	4620      	mov	r0, r4
 800bf32:	f001 f99b 	bl	800d26c <uxr_init_base_object_request>
 800bf36:	a905      	add	r1, sp, #20
 800bf38:	4604      	mov	r4, r0
 800bf3a:	a806      	add	r0, sp, #24
 800bf3c:	f002 fb00 	bl	800e540 <uxr_serialize_DELETE_Payload>
 800bf40:	4620      	mov	r0, r4
 800bf42:	b00e      	add	sp, #56	; 0x38
 800bf44:	bd10      	pop	{r4, pc}
 800bf46:	bf00      	nop

0800bf48 <uxr_common_create_entity>:
 800bf48:	b510      	push	{r4, lr}
 800bf4a:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800bf4e:	b08c      	sub	sp, #48	; 0x30
 800bf50:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800bf54:	f1bc 0f01 	cmp.w	ip, #1
 800bf58:	bf0c      	ite	eq
 800bf5a:	f003 0201 	andeq.w	r2, r3, #1
 800bf5e:	2200      	movne	r2, #0
 800bf60:	330e      	adds	r3, #14
 800bf62:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
 800bf66:	9101      	str	r1, [sp, #4]
 800bf68:	441a      	add	r2, r3
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	9300      	str	r3, [sp, #0]
 800bf6e:	9903      	ldr	r1, [sp, #12]
 800bf70:	ab04      	add	r3, sp, #16
 800bf72:	b292      	uxth	r2, r2
 800bf74:	4604      	mov	r4, r0
 800bf76:	f001 f843 	bl	800d000 <uxr_prepare_stream_to_write_submessage>
 800bf7a:	b918      	cbnz	r0, 800bf84 <uxr_common_create_entity+0x3c>
 800bf7c:	4604      	mov	r4, r0
 800bf7e:	4620      	mov	r0, r4
 800bf80:	b00c      	add	sp, #48	; 0x30
 800bf82:	bd10      	pop	{r4, pc}
 800bf84:	9902      	ldr	r1, [sp, #8]
 800bf86:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bf88:	4620      	mov	r0, r4
 800bf8a:	f001 f96f 	bl	800d26c <uxr_init_base_object_request>
 800bf8e:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800bf90:	4604      	mov	r4, r0
 800bf92:	a804      	add	r0, sp, #16
 800bf94:	f002 fa30 	bl	800e3f8 <uxr_serialize_CREATE_Payload>
 800bf98:	4620      	mov	r0, r4
 800bf9a:	b00c      	add	sp, #48	; 0x30
 800bf9c:	bd10      	pop	{r4, pc}
 800bf9e:	bf00      	nop

0800bfa0 <uxr_buffer_create_participant_bin>:
 800bfa0:	b570      	push	{r4, r5, r6, lr}
 800bfa2:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 800bfa6:	ac11      	add	r4, sp, #68	; 0x44
 800bfa8:	f8ad 3254 	strh.w	r3, [sp, #596]	; 0x254
 800bfac:	2303      	movs	r3, #3
 800bfae:	e9cd 2102 	strd	r2, r1, [sp, #8]
 800bfb2:	7223      	strb	r3, [r4, #8]
 800bfb4:	9b9a      	ldr	r3, [sp, #616]	; 0x268
 800bfb6:	f89d 626c 	ldrb.w	r6, [sp, #620]	; 0x26c
 800bfba:	2201      	movs	r2, #1
 800bfbc:	2100      	movs	r1, #0
 800bfbe:	4605      	mov	r5, r0
 800bfc0:	7122      	strb	r2, [r4, #4]
 800bfc2:	f88d 1014 	strb.w	r1, [sp, #20]
 800bfc6:	b1cb      	cbz	r3, 800bffc <uxr_buffer_create_participant_bin+0x5c>
 800bfc8:	f88d 201c 	strb.w	r2, [sp, #28]
 800bfcc:	9308      	str	r3, [sp, #32]
 800bfce:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bfd2:	a915      	add	r1, sp, #84	; 0x54
 800bfd4:	a809      	add	r0, sp, #36	; 0x24
 800bfd6:	f7ff ff27 	bl	800be28 <ucdr_init_buffer>
 800bfda:	a905      	add	r1, sp, #20
 800bfdc:	a809      	add	r0, sp, #36	; 0x24
 800bfde:	f001 fed9 	bl	800dd94 <uxr_serialize_OBJK_DomainParticipant_Binary>
 800bfe2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800bfe4:	9600      	str	r6, [sp, #0]
 800bfe6:	9401      	str	r4, [sp, #4]
 800bfe8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bfec:	60e3      	str	r3, [r4, #12]
 800bfee:	4628      	mov	r0, r5
 800bff0:	b29b      	uxth	r3, r3
 800bff2:	f7ff ffa9 	bl	800bf48 <uxr_common_create_entity>
 800bff6:	f50d 7d16 	add.w	sp, sp, #600	; 0x258
 800bffa:	bd70      	pop	{r4, r5, r6, pc}
 800bffc:	f88d 301c 	strb.w	r3, [sp, #28]
 800c000:	e7e5      	b.n	800bfce <uxr_buffer_create_participant_bin+0x2e>
 800c002:	bf00      	nop

0800c004 <uxr_buffer_create_topic_bin>:
 800c004:	b570      	push	{r4, r5, r6, lr}
 800c006:	f5ad 7d18 	sub.w	sp, sp, #608	; 0x260
 800c00a:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c00e:	9105      	str	r1, [sp, #20]
 800c010:	4605      	mov	r5, r0
 800c012:	a997      	add	r1, sp, #604	; 0x25c
 800c014:	4618      	mov	r0, r3
 800c016:	2302      	movs	r3, #2
 800c018:	f89d 6278 	ldrb.w	r6, [sp, #632]	; 0x278
 800c01c:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
 800c020:	f000 f8ee 	bl	800c200 <uxr_object_id_to_raw>
 800c024:	9b9c      	ldr	r3, [sp, #624]	; 0x270
 800c026:	9306      	str	r3, [sp, #24]
 800c028:	9b9d      	ldr	r3, [sp, #628]	; 0x274
 800c02a:	930a      	str	r3, [sp, #40]	; 0x28
 800c02c:	2303      	movs	r3, #3
 800c02e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c032:	2301      	movs	r3, #1
 800c034:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c038:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 800c03c:	a917      	add	r1, sp, #92	; 0x5c
 800c03e:	2300      	movs	r3, #0
 800c040:	a80b      	add	r0, sp, #44	; 0x2c
 800c042:	f88d 301c 	strb.w	r3, [sp, #28]
 800c046:	f7ff feef 	bl	800be28 <ucdr_init_buffer>
 800c04a:	a906      	add	r1, sp, #24
 800c04c:	a80b      	add	r0, sp, #44	; 0x2c
 800c04e:	f001 fec3 	bl	800ddd8 <uxr_serialize_OBJK_Topic_Binary>
 800c052:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c054:	9316      	str	r3, [sp, #88]	; 0x58
 800c056:	ac13      	add	r4, sp, #76	; 0x4c
 800c058:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c05c:	9600      	str	r6, [sp, #0]
 800c05e:	9401      	str	r4, [sp, #4]
 800c060:	b29b      	uxth	r3, r3
 800c062:	4628      	mov	r0, r5
 800c064:	f7ff ff70 	bl	800bf48 <uxr_common_create_entity>
 800c068:	f50d 7d18 	add.w	sp, sp, #608	; 0x260
 800c06c:	bd70      	pop	{r4, r5, r6, pc}
 800c06e:	bf00      	nop

0800c070 <uxr_buffer_create_publisher_bin>:
 800c070:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c072:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 800c076:	4605      	mov	r5, r0
 800c078:	9105      	str	r1, [sp, #20]
 800c07a:	4618      	mov	r0, r3
 800c07c:	2603      	movs	r6, #3
 800c07e:	a992      	add	r1, sp, #584	; 0x248
 800c080:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c084:	f89d 74a0 	ldrb.w	r7, [sp, #1184]	; 0x4a0
 800c088:	f88d 603c 	strb.w	r6, [sp, #60]	; 0x3c
 800c08c:	f000 f8b8 	bl	800c200 <uxr_object_id_to_raw>
 800c090:	2300      	movs	r3, #0
 800c092:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c096:	a912      	add	r1, sp, #72	; 0x48
 800c098:	a806      	add	r0, sp, #24
 800c09a:	f88d 324c 	strb.w	r3, [sp, #588]	; 0x24c
 800c09e:	f88d 3254 	strb.w	r3, [sp, #596]	; 0x254
 800c0a2:	f88d 6040 	strb.w	r6, [sp, #64]	; 0x40
 800c0a6:	f7ff febf 	bl	800be28 <ucdr_init_buffer>
 800c0aa:	a993      	add	r1, sp, #588	; 0x24c
 800c0ac:	a806      	add	r0, sp, #24
 800c0ae:	f001 ff47 	bl	800df40 <uxr_serialize_OBJK_Publisher_Binary>
 800c0b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0b4:	9311      	str	r3, [sp, #68]	; 0x44
 800c0b6:	ac0e      	add	r4, sp, #56	; 0x38
 800c0b8:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c0bc:	9700      	str	r7, [sp, #0]
 800c0be:	9401      	str	r4, [sp, #4]
 800c0c0:	b29b      	uxth	r3, r3
 800c0c2:	4628      	mov	r0, r5
 800c0c4:	f7ff ff40 	bl	800bf48 <uxr_common_create_entity>
 800c0c8:	f20d 4d8c 	addw	sp, sp, #1164	; 0x48c
 800c0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c0ce:	bf00      	nop

0800c0d0 <uxr_buffer_create_datawriter_bin>:
 800c0d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0d4:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800c0d8:	ac1d      	add	r4, sp, #116	; 0x74
 800c0da:	e9cd 3203 	strd	r3, r2, [sp, #12]
 800c0de:	f8bd 52a8 	ldrh.w	r5, [sp, #680]	; 0x2a8
 800c0e2:	9105      	str	r1, [sp, #20]
 800c0e4:	4606      	mov	r6, r0
 800c0e6:	a9a1      	add	r1, sp, #644	; 0x284
 800c0e8:	4618      	mov	r0, r3
 800c0ea:	2305      	movs	r3, #5
 800c0ec:	7123      	strb	r3, [r4, #4]
 800c0ee:	f89d 82ac 	ldrb.w	r8, [sp, #684]	; 0x2ac
 800c0f2:	2703      	movs	r7, #3
 800c0f4:	f000 f884 	bl	800c200 <uxr_object_id_to_raw>
 800c0f8:	98a8      	ldr	r0, [sp, #672]	; 0x2a0
 800c0fa:	7227      	strb	r7, [r4, #8]
 800c0fc:	a90e      	add	r1, sp, #56	; 0x38
 800c0fe:	f000 f87f 	bl	800c200 <uxr_object_id_to_raw>
 800c102:	2300      	movs	r3, #0
 800c104:	f8ad 5044 	strh.w	r5, [sp, #68]	; 0x44
 800c108:	f89d 22a5 	ldrb.w	r2, [sp, #677]	; 0x2a5
 800c10c:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
 800c110:	3d00      	subs	r5, #0
 800c112:	bf18      	it	ne
 800c114:	2501      	movne	r5, #1
 800c116:	f88d 3046 	strb.w	r3, [sp, #70]	; 0x46
 800c11a:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
 800c11e:	f88d 3054 	strb.w	r3, [sp, #84]	; 0x54
 800c122:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c126:	2301      	movs	r3, #1
 800c128:	f88d 5042 	strb.w	r5, [sp, #66]	; 0x42
 800c12c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
 800c130:	bb8a      	cbnz	r2, 800c196 <uxr_buffer_create_datawriter_bin+0xc6>
 800c132:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c136:	f04f 0e23 	mov.w	lr, #35	; 0x23
 800c13a:	f04f 0c13 	mov.w	ip, #19
 800c13e:	250b      	movs	r5, #11
 800c140:	2221      	movs	r2, #33	; 0x21
 800c142:	2111      	movs	r1, #17
 800c144:	2009      	movs	r0, #9
 800c146:	f89d 32a6 	ldrb.w	r3, [sp, #678]	; 0x2a6
 800c14a:	b923      	cbnz	r3, 800c156 <uxr_buffer_create_datawriter_bin+0x86>
 800c14c:	f8ad 7040 	strh.w	r7, [sp, #64]	; 0x40
 800c150:	4672      	mov	r2, lr
 800c152:	4661      	mov	r1, ip
 800c154:	4628      	mov	r0, r5
 800c156:	f89d 32a4 	ldrb.w	r3, [sp, #676]	; 0x2a4
 800c15a:	2b01      	cmp	r3, #1
 800c15c:	d025      	beq.n	800c1aa <uxr_buffer_create_datawriter_bin+0xda>
 800c15e:	2b03      	cmp	r3, #3
 800c160:	d029      	beq.n	800c1b6 <uxr_buffer_create_datawriter_bin+0xe6>
 800c162:	b32b      	cbz	r3, 800c1b0 <uxr_buffer_create_datawriter_bin+0xe0>
 800c164:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c168:	a921      	add	r1, sp, #132	; 0x84
 800c16a:	a806      	add	r0, sp, #24
 800c16c:	f7ff fe5c 	bl	800be28 <ucdr_init_buffer>
 800c170:	a90e      	add	r1, sp, #56	; 0x38
 800c172:	a806      	add	r0, sp, #24
 800c174:	f001 ff5a 	bl	800e02c <uxr_serialize_OBJK_DataWriter_Binary>
 800c178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c17a:	f8cd 8000 	str.w	r8, [sp]
 800c17e:	9401      	str	r4, [sp, #4]
 800c180:	e9dd 2104 	ldrd	r2, r1, [sp, #16]
 800c184:	60e3      	str	r3, [r4, #12]
 800c186:	4630      	mov	r0, r6
 800c188:	b29b      	uxth	r3, r3
 800c18a:	f7ff fedd 	bl	800bf48 <uxr_common_create_entity>
 800c18e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800c192:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c196:	f04f 0e22 	mov.w	lr, #34	; 0x22
 800c19a:	f04f 0c12 	mov.w	ip, #18
 800c19e:	250a      	movs	r5, #10
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	2110      	movs	r1, #16
 800c1a4:	2008      	movs	r0, #8
 800c1a6:	2702      	movs	r7, #2
 800c1a8:	e7cd      	b.n	800c146 <uxr_buffer_create_datawriter_bin+0x76>
 800c1aa:	f8ad 1040 	strh.w	r1, [sp, #64]	; 0x40
 800c1ae:	e7d9      	b.n	800c164 <uxr_buffer_create_datawriter_bin+0x94>
 800c1b0:	f8ad 0040 	strh.w	r0, [sp, #64]	; 0x40
 800c1b4:	e7d6      	b.n	800c164 <uxr_buffer_create_datawriter_bin+0x94>
 800c1b6:	f8ad 2040 	strh.w	r2, [sp, #64]	; 0x40
 800c1ba:	e7d3      	b.n	800c164 <uxr_buffer_create_datawriter_bin+0x94>

0800c1bc <uxr_object_id>:
 800c1bc:	b082      	sub	sp, #8
 800c1be:	2300      	movs	r3, #0
 800c1c0:	f88d 1006 	strb.w	r1, [sp, #6]
 800c1c4:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c1c8:	f360 030f 	bfi	r3, r0, #0, #16
 800c1cc:	f362 431f 	bfi	r3, r2, #16, #16
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	b002      	add	sp, #8
 800c1d4:	4770      	bx	lr
 800c1d6:	bf00      	nop

0800c1d8 <uxr_object_id_from_raw>:
 800c1d8:	7843      	ldrb	r3, [r0, #1]
 800c1da:	7801      	ldrb	r1, [r0, #0]
 800c1dc:	b082      	sub	sp, #8
 800c1de:	f003 020f 	and.w	r2, r3, #15
 800c1e2:	f88d 2006 	strb.w	r2, [sp, #6]
 800c1e6:	091b      	lsrs	r3, r3, #4
 800c1e8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800c1ec:	eb03 1301 	add.w	r3, r3, r1, lsl #4
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	f363 000f 	bfi	r0, r3, #0, #16
 800c1f6:	f362 401f 	bfi	r0, r2, #16, #16
 800c1fa:	b002      	add	sp, #8
 800c1fc:	4770      	bx	lr
 800c1fe:	bf00      	nop

0800c200 <uxr_object_id_to_raw>:
 800c200:	4602      	mov	r2, r0
 800c202:	f3c0 4303 	ubfx	r3, r0, #16, #4
 800c206:	b082      	sub	sp, #8
 800c208:	f3c2 1c0b 	ubfx	ip, r2, #4, #12
 800c20c:	eb03 1002 	add.w	r0, r3, r2, lsl #4
 800c210:	f881 c000 	strb.w	ip, [r1]
 800c214:	7048      	strb	r0, [r1, #1]
 800c216:	b002      	add	sp, #8
 800c218:	4770      	bx	lr
 800c21a:	bf00      	nop

0800c21c <on_get_fragmentation_info>:
 800c21c:	b500      	push	{lr}
 800c21e:	b08b      	sub	sp, #44	; 0x2c
 800c220:	4601      	mov	r1, r0
 800c222:	2204      	movs	r2, #4
 800c224:	a802      	add	r0, sp, #8
 800c226:	f7ff fdff 	bl	800be28 <ucdr_init_buffer>
 800c22a:	f10d 0305 	add.w	r3, sp, #5
 800c22e:	f10d 0206 	add.w	r2, sp, #6
 800c232:	a901      	add	r1, sp, #4
 800c234:	a802      	add	r0, sp, #8
 800c236:	f001 f99b 	bl	800d570 <uxr_read_submessage_header>
 800c23a:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800c23e:	2b0d      	cmp	r3, #13
 800c240:	d003      	beq.n	800c24a <on_get_fragmentation_info+0x2e>
 800c242:	2000      	movs	r0, #0
 800c244:	b00b      	add	sp, #44	; 0x2c
 800c246:	f85d fb04 	ldr.w	pc, [sp], #4
 800c24a:	f89d 3005 	ldrb.w	r3, [sp, #5]
 800c24e:	f013 0f02 	tst.w	r3, #2
 800c252:	bf14      	ite	ne
 800c254:	2002      	movne	r0, #2
 800c256:	2001      	moveq	r0, #1
 800c258:	b00b      	add	sp, #44	; 0x2c
 800c25a:	f85d fb04 	ldr.w	pc, [sp], #4
 800c25e:	bf00      	nop

0800c260 <read_submessage_get_info>:
 800c260:	b570      	push	{r4, r5, r6, lr}
 800c262:	2500      	movs	r5, #0
 800c264:	f5ad 7d34 	sub.w	sp, sp, #720	; 0x2d0
 800c268:	4604      	mov	r4, r0
 800c26a:	f44f 7224 	mov.w	r2, #656	; 0x290
 800c26e:	460e      	mov	r6, r1
 800c270:	a810      	add	r0, sp, #64	; 0x40
 800c272:	4629      	mov	r1, r5
 800c274:	e9cd 5503 	strd	r5, r5, [sp, #12]
 800c278:	f007 f8d0 	bl	801341c <memset>
 800c27c:	a903      	add	r1, sp, #12
 800c27e:	4630      	mov	r0, r6
 800c280:	f002 f94a 	bl	800e518 <uxr_deserialize_GET_INFO_Payload>
 800c284:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 800c288:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 800c28c:	4620      	mov	r0, r4
 800c28e:	f000 ffe5 	bl	800d25c <uxr_session_header_offset>
 800c292:	462b      	mov	r3, r5
 800c294:	9000      	str	r0, [sp, #0]
 800c296:	220c      	movs	r2, #12
 800c298:	a905      	add	r1, sp, #20
 800c29a:	a808      	add	r0, sp, #32
 800c29c:	f7ff fdb2 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800c2a0:	a910      	add	r1, sp, #64	; 0x40
 800c2a2:	a808      	add	r0, sp, #32
 800c2a4:	f002 f9aa 	bl	800e5fc <uxr_serialize_INFO_Payload>
 800c2a8:	9b08      	ldr	r3, [sp, #32]
 800c2aa:	462a      	mov	r2, r5
 800c2ac:	4629      	mov	r1, r5
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 ff7e 	bl	800d1b0 <uxr_stamp_session_header>
 800c2b4:	a808      	add	r0, sp, #32
 800c2b6:	f7ff fde3 	bl	800be80 <ucdr_buffer_length>
 800c2ba:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c2bc:	4602      	mov	r2, r0
 800c2be:	a905      	add	r1, sp, #20
 800c2c0:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c2c4:	47a0      	blx	r4
 800c2c6:	f50d 7d34 	add.w	sp, sp, #720	; 0x2d0
 800c2ca:	bd70      	pop	{r4, r5, r6, pc}

0800c2cc <write_submessage_acknack.isra.0>:
 800c2cc:	b570      	push	{r4, r5, r6, lr}
 800c2ce:	b092      	sub	sp, #72	; 0x48
 800c2d0:	4605      	mov	r5, r0
 800c2d2:	460e      	mov	r6, r1
 800c2d4:	4614      	mov	r4, r2
 800c2d6:	f000 ffc1 	bl	800d25c <uxr_session_header_offset>
 800c2da:	a905      	add	r1, sp, #20
 800c2dc:	9000      	str	r0, [sp, #0]
 800c2de:	2300      	movs	r3, #0
 800c2e0:	a80a      	add	r0, sp, #40	; 0x28
 800c2e2:	2211      	movs	r2, #17
 800c2e4:	f7ff fd8e 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800c2e8:	2218      	movs	r2, #24
 800c2ea:	fb02 5404 	mla	r4, r2, r4, r5
 800c2ee:	2300      	movs	r3, #0
 800c2f0:	2205      	movs	r2, #5
 800c2f2:	3450      	adds	r4, #80	; 0x50
 800c2f4:	210a      	movs	r1, #10
 800c2f6:	a80a      	add	r0, sp, #40	; 0x28
 800c2f8:	f001 f920 	bl	800d53c <uxr_buffer_submessage_header>
 800c2fc:	a903      	add	r1, sp, #12
 800c2fe:	4620      	mov	r0, r4
 800c300:	f004 ff20 	bl	8011144 <uxr_compute_acknack>
 800c304:	ba40      	rev16	r0, r0
 800c306:	f8ad 000e 	strh.w	r0, [sp, #14]
 800c30a:	a903      	add	r1, sp, #12
 800c30c:	a80a      	add	r0, sp, #40	; 0x28
 800c30e:	f88d 6010 	strb.w	r6, [sp, #16]
 800c312:	f002 f9e3 	bl	800e6dc <uxr_serialize_ACKNACK_Payload>
 800c316:	2200      	movs	r2, #0
 800c318:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c31a:	4611      	mov	r1, r2
 800c31c:	4628      	mov	r0, r5
 800c31e:	f000 ff47 	bl	800d1b0 <uxr_stamp_session_header>
 800c322:	a80a      	add	r0, sp, #40	; 0x28
 800c324:	f7ff fdac 	bl	800be80 <ucdr_buffer_length>
 800c328:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800c32a:	4602      	mov	r2, r0
 800c32c:	a905      	add	r1, sp, #20
 800c32e:	e9d3 0400 	ldrd	r0, r4, [r3]
 800c332:	47a0      	blx	r4
 800c334:	b012      	add	sp, #72	; 0x48
 800c336:	bd70      	pop	{r4, r5, r6, pc}

0800c338 <uxr_init_session>:
 800c338:	b510      	push	{r4, lr}
 800c33a:	ed9f 7b0d 	vldr	d7, [pc, #52]	; 800c370 <uxr_init_session+0x38>
 800c33e:	2300      	movs	r3, #0
 800c340:	e9c0 131c 	strd	r1, r3, [r0, #112]	; 0x70
 800c344:	4604      	mov	r4, r0
 800c346:	e9c0 331e 	strd	r3, r3, [r0, #120]	; 0x78
 800c34a:	e9c0 3320 	strd	r3, r3, [r0, #128]	; 0x80
 800c34e:	e9c0 3322 	strd	r3, r3, [r0, #136]	; 0x88
 800c352:	e9c0 3324 	strd	r3, r3, [r0, #144]	; 0x90
 800c356:	ed80 7b26 	vstr	d7, [r0, #152]	; 0x98
 800c35a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
 800c35e:	2181      	movs	r1, #129	; 0x81
 800c360:	f000 fe92 	bl	800d088 <uxr_init_session_info>
 800c364:	f104 0008 	add.w	r0, r4, #8
 800c368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c36c:	f001 b802 	b.w	800d374 <uxr_init_stream_storage>
	...

0800c378 <uxr_set_status_callback>:
 800c378:	e9c0 1220 	strd	r1, r2, [r0, #128]	; 0x80
 800c37c:	4770      	bx	lr
 800c37e:	bf00      	nop

0800c380 <uxr_set_topic_callback>:
 800c380:	e9c0 1222 	strd	r1, r2, [r0, #136]	; 0x88
 800c384:	4770      	bx	lr
 800c386:	bf00      	nop

0800c388 <uxr_set_request_callback>:
 800c388:	e9c0 1229 	strd	r1, r2, [r0, #164]	; 0xa4
 800c38c:	4770      	bx	lr
 800c38e:	bf00      	nop

0800c390 <uxr_set_reply_callback>:
 800c390:	e9c0 122b 	strd	r1, r2, [r0, #172]	; 0xac
 800c394:	4770      	bx	lr
 800c396:	bf00      	nop

0800c398 <uxr_create_output_best_effort_stream>:
 800c398:	b510      	push	{r4, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	e9cd 2100 	strd	r2, r1, [sp]
 800c3a0:	4604      	mov	r4, r0
 800c3a2:	f000 ff5b 	bl	800d25c <uxr_session_header_offset>
 800c3a6:	e9dd 2100 	ldrd	r2, r1, [sp]
 800c3aa:	4603      	mov	r3, r0
 800c3ac:	f104 0008 	add.w	r0, r4, #8
 800c3b0:	b004      	add	sp, #16
 800c3b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c3b6:	f001 b827 	b.w	800d408 <uxr_add_output_best_effort_buffer>
 800c3ba:	bf00      	nop

0800c3bc <uxr_create_output_reliable_stream>:
 800c3bc:	b510      	push	{r4, lr}
 800c3be:	b088      	sub	sp, #32
 800c3c0:	e9cd 2104 	strd	r2, r1, [sp, #16]
 800c3c4:	4604      	mov	r4, r0
 800c3c6:	9303      	str	r3, [sp, #12]
 800c3c8:	f000 ff48 	bl	800d25c <uxr_session_header_offset>
 800c3cc:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800c3d0:	9000      	str	r0, [sp, #0]
 800c3d2:	9905      	ldr	r1, [sp, #20]
 800c3d4:	f104 0008 	add.w	r0, r4, #8
 800c3d8:	f001 f82a 	bl	800d430 <uxr_add_output_reliable_buffer>
 800c3dc:	2200      	movs	r2, #0
 800c3de:	b2c3      	uxtb	r3, r0
 800c3e0:	f363 0207 	bfi	r2, r3, #0, #8
 800c3e4:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c3e8:	f363 220f 	bfi	r2, r3, #8, #8
 800c3ec:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c3f0:	f363 4217 	bfi	r2, r3, #16, #8
 800c3f4:	0e03      	lsrs	r3, r0, #24
 800c3f6:	f363 621f 	bfi	r2, r3, #24, #8
 800c3fa:	4610      	mov	r0, r2
 800c3fc:	b008      	add	sp, #32
 800c3fe:	bd10      	pop	{r4, pc}

0800c400 <uxr_create_input_best_effort_stream>:
 800c400:	b082      	sub	sp, #8
 800c402:	3008      	adds	r0, #8
 800c404:	b002      	add	sp, #8
 800c406:	f001 b82d 	b.w	800d464 <uxr_add_input_best_effort_buffer>
 800c40a:	bf00      	nop

0800c40c <uxr_create_input_reliable_stream>:
 800c40c:	b510      	push	{r4, lr}
 800c40e:	b084      	sub	sp, #16
 800c410:	4c0b      	ldr	r4, [pc, #44]	; (800c440 <uxr_create_input_reliable_stream+0x34>)
 800c412:	9400      	str	r4, [sp, #0]
 800c414:	3008      	adds	r0, #8
 800c416:	f001 f83b 	bl	800d490 <uxr_add_input_reliable_buffer>
 800c41a:	2200      	movs	r2, #0
 800c41c:	b2c3      	uxtb	r3, r0
 800c41e:	f363 0207 	bfi	r2, r3, #0, #8
 800c422:	f3c0 2307 	ubfx	r3, r0, #8, #8
 800c426:	f363 220f 	bfi	r2, r3, #8, #8
 800c42a:	f3c0 4307 	ubfx	r3, r0, #16, #8
 800c42e:	f363 4217 	bfi	r2, r3, #16, #8
 800c432:	0e03      	lsrs	r3, r0, #24
 800c434:	f363 621f 	bfi	r2, r3, #24, #8
 800c438:	4610      	mov	r0, r2
 800c43a:	b004      	add	sp, #16
 800c43c:	bd10      	pop	{r4, pc}
 800c43e:	bf00      	nop
 800c440:	0800c21d 	.word	0x0800c21d

0800c444 <uxr_epoch_nanos>:
 800c444:	b510      	push	{r4, lr}
 800c446:	4604      	mov	r4, r0
 800c448:	f001 f8d8 	bl	800d5fc <uxr_nanos>
 800c44c:	e9d4 3226 	ldrd	r3, r2, [r4, #152]	; 0x98
 800c450:	1ac0      	subs	r0, r0, r3
 800c452:	eb61 0102 	sbc.w	r1, r1, r2
 800c456:	bd10      	pop	{r4, pc}

0800c458 <uxr_flash_output_streams>:
 800c458:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c45c:	7e03      	ldrb	r3, [r0, #24]
 800c45e:	b084      	sub	sp, #16
 800c460:	4604      	mov	r4, r0
 800c462:	2b00      	cmp	r3, #0
 800c464:	d035      	beq.n	800c4d2 <uxr_flash_output_streams+0x7a>
 800c466:	f04f 0900 	mov.w	r9, #0
 800c46a:	4648      	mov	r0, r9
 800c46c:	f10d 0802 	add.w	r8, sp, #2
 800c470:	af03      	add	r7, sp, #12
 800c472:	ae02      	add	r6, sp, #8
 800c474:	e006      	b.n	800c484 <uxr_flash_output_streams+0x2c>
 800c476:	7e23      	ldrb	r3, [r4, #24]
 800c478:	f109 0901 	add.w	r9, r9, #1
 800c47c:	fa5f f089 	uxtb.w	r0, r9
 800c480:	4283      	cmp	r3, r0
 800c482:	d926      	bls.n	800c4d2 <uxr_flash_output_streams+0x7a>
 800c484:	2201      	movs	r2, #1
 800c486:	4611      	mov	r1, r2
 800c488:	eb04 1500 	add.w	r5, r4, r0, lsl #4
 800c48c:	f000 ff1e 	bl	800d2cc <uxr_stream_id>
 800c490:	3508      	adds	r5, #8
 800c492:	4684      	mov	ip, r0
 800c494:	4643      	mov	r3, r8
 800c496:	463a      	mov	r2, r7
 800c498:	4631      	mov	r1, r6
 800c49a:	4628      	mov	r0, r5
 800c49c:	f8cd c004 	str.w	ip, [sp, #4]
 800c4a0:	f004 fed6 	bl	8011250 <uxr_prepare_best_effort_buffer_to_send>
 800c4a4:	2800      	cmp	r0, #0
 800c4a6:	d0e6      	beq.n	800c476 <uxr_flash_output_streams+0x1e>
 800c4a8:	9b02      	ldr	r3, [sp, #8]
 800c4aa:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c4ae:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c4b2:	4620      	mov	r0, r4
 800c4b4:	f000 fe7c 	bl	800d1b0 <uxr_stamp_session_header>
 800c4b8:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c4ba:	9a03      	ldr	r2, [sp, #12]
 800c4bc:	685d      	ldr	r5, [r3, #4]
 800c4be:	6818      	ldr	r0, [r3, #0]
 800c4c0:	9902      	ldr	r1, [sp, #8]
 800c4c2:	47a8      	blx	r5
 800c4c4:	f109 0901 	add.w	r9, r9, #1
 800c4c8:	7e23      	ldrb	r3, [r4, #24]
 800c4ca:	fa5f f089 	uxtb.w	r0, r9
 800c4ce:	4283      	cmp	r3, r0
 800c4d0:	d8d8      	bhi.n	800c484 <uxr_flash_output_streams+0x2c>
 800c4d2:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800c4d6:	b38b      	cbz	r3, 800c53c <uxr_flash_output_streams+0xe4>
 800c4d8:	f04f 0900 	mov.w	r9, #0
 800c4dc:	f10d 0802 	add.w	r8, sp, #2
 800c4e0:	af03      	add	r7, sp, #12
 800c4e2:	ae02      	add	r6, sp, #8
 800c4e4:	4648      	mov	r0, r9
 800c4e6:	2201      	movs	r2, #1
 800c4e8:	2102      	movs	r1, #2
 800c4ea:	eb00 0580 	add.w	r5, r0, r0, lsl #2
 800c4ee:	f000 feed 	bl	800d2cc <uxr_stream_id>
 800c4f2:	eb04 05c5 	add.w	r5, r4, r5, lsl #3
 800c4f6:	3520      	adds	r5, #32
 800c4f8:	9001      	str	r0, [sp, #4]
 800c4fa:	e00d      	b.n	800c518 <uxr_flash_output_streams+0xc0>
 800c4fc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800c500:	f89d 1004 	ldrb.w	r1, [sp, #4]
 800c504:	9b02      	ldr	r3, [sp, #8]
 800c506:	f000 fe53 	bl	800d1b0 <uxr_stamp_session_header>
 800c50a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c50c:	9a03      	ldr	r2, [sp, #12]
 800c50e:	f8d3 a004 	ldr.w	sl, [r3, #4]
 800c512:	9902      	ldr	r1, [sp, #8]
 800c514:	6818      	ldr	r0, [r3, #0]
 800c516:	47d0      	blx	sl
 800c518:	4643      	mov	r3, r8
 800c51a:	463a      	mov	r2, r7
 800c51c:	4631      	mov	r1, r6
 800c51e:	4628      	mov	r0, r5
 800c520:	f005 f8b4 	bl	801168c <uxr_prepare_next_reliable_buffer_to_send>
 800c524:	4603      	mov	r3, r0
 800c526:	4620      	mov	r0, r4
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d1e7      	bne.n	800c4fc <uxr_flash_output_streams+0xa4>
 800c52c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
 800c530:	f109 0901 	add.w	r9, r9, #1
 800c534:	fa5f f089 	uxtb.w	r0, r9
 800c538:	4283      	cmp	r3, r0
 800c53a:	d8d4      	bhi.n	800c4e6 <uxr_flash_output_streams+0x8e>
 800c53c:	b004      	add	sp, #16
 800c53e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c542:	bf00      	nop

0800c544 <read_submessage_info>:
 800c544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c548:	460d      	mov	r5, r1
 800c54a:	f5ad 7d24 	sub.w	sp, sp, #656	; 0x290
 800c54e:	4669      	mov	r1, sp
 800c550:	4607      	mov	r7, r0
 800c552:	4628      	mov	r0, r5
 800c554:	f001 feee 	bl	800e334 <uxr_deserialize_BaseObjectReply>
 800c558:	a902      	add	r1, sp, #8
 800c55a:	4604      	mov	r4, r0
 800c55c:	4628      	mov	r0, r5
 800c55e:	f89d 8005 	ldrb.w	r8, [sp, #5]
 800c562:	f7fe fc9d 	bl	800aea0 <ucdr_deserialize_bool>
 800c566:	f89d 3008 	ldrb.w	r3, [sp, #8]
 800c56a:	4004      	ands	r4, r0
 800c56c:	b2e4      	uxtb	r4, r4
 800c56e:	b95b      	cbnz	r3, 800c588 <read_submessage_info+0x44>
 800c570:	a987      	add	r1, sp, #540	; 0x21c
 800c572:	4628      	mov	r0, r5
 800c574:	f7fe fc94 	bl	800aea0 <ucdr_deserialize_bool>
 800c578:	f89d 321c 	ldrb.w	r3, [sp, #540]	; 0x21c
 800c57c:	4606      	mov	r6, r0
 800c57e:	b94b      	cbnz	r3, 800c594 <read_submessage_info+0x50>
 800c580:	f50d 7d24 	add.w	sp, sp, #656	; 0x290
 800c584:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c588:	a903      	add	r1, sp, #12
 800c58a:	4628      	mov	r0, r5
 800c58c:	f001 fd7a 	bl	800e084 <uxr_deserialize_ObjectVariant>
 800c590:	4004      	ands	r4, r0
 800c592:	e7ed      	b.n	800c570 <read_submessage_info+0x2c>
 800c594:	a988      	add	r1, sp, #544	; 0x220
 800c596:	4628      	mov	r0, r5
 800c598:	f7fe fcb0 	bl	800aefc <ucdr_deserialize_uint8_t>
 800c59c:	4234      	tst	r4, r6
 800c59e:	d0ef      	beq.n	800c580 <read_submessage_info+0x3c>
 800c5a0:	2800      	cmp	r0, #0
 800c5a2:	d0ed      	beq.n	800c580 <read_submessage_info+0x3c>
 800c5a4:	f89d 3220 	ldrb.w	r3, [sp, #544]	; 0x220
 800c5a8:	2b0d      	cmp	r3, #13
 800c5aa:	d1e9      	bne.n	800c580 <read_submessage_info+0x3c>
 800c5ac:	a98a      	add	r1, sp, #552	; 0x228
 800c5ae:	4628      	mov	r0, r5
 800c5b0:	f7ff fa4a 	bl	800ba48 <ucdr_deserialize_int16_t>
 800c5b4:	b140      	cbz	r0, 800c5c8 <read_submessage_info+0x84>
 800c5b6:	f9bd 3228 	ldrsh.w	r3, [sp, #552]	; 0x228
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	dd07      	ble.n	800c5ce <read_submessage_info+0x8a>
 800c5be:	f1b8 0f00 	cmp.w	r8, #0
 800c5c2:	bf14      	ite	ne
 800c5c4:	2001      	movne	r0, #1
 800c5c6:	2002      	moveq	r0, #2
 800c5c8:	f887 00b5 	strb.w	r0, [r7, #181]	; 0xb5
 800c5cc:	e7d8      	b.n	800c580 <read_submessage_info+0x3c>
 800c5ce:	2000      	movs	r0, #0
 800c5d0:	e7fa      	b.n	800c5c8 <read_submessage_info+0x84>
 800c5d2:	bf00      	nop

0800c5d4 <read_submessage_list>:
 800c5d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d8:	b097      	sub	sp, #92	; 0x5c
 800c5da:	4ec1      	ldr	r6, [pc, #772]	; (800c8e0 <read_submessage_list+0x30c>)
 800c5dc:	9209      	str	r2, [sp, #36]	; 0x24
 800c5de:	4604      	mov	r4, r0
 800c5e0:	460d      	mov	r5, r1
 800c5e2:	f04f 0801 	mov.w	r8, #1
 800c5e6:	f10d 032f 	add.w	r3, sp, #47	; 0x2f
 800c5ea:	aa0c      	add	r2, sp, #48	; 0x30
 800c5ec:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
 800c5f0:	4628      	mov	r0, r5
 800c5f2:	f000 ffbd 	bl	800d570 <uxr_read_submessage_header>
 800c5f6:	2800      	cmp	r0, #0
 800c5f8:	f000 813e 	beq.w	800c878 <read_submessage_list+0x2a4>
 800c5fc:	f89d 302e 	ldrb.w	r3, [sp, #46]	; 0x2e
 800c600:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
 800c604:	3b02      	subs	r3, #2
 800c606:	2b0d      	cmp	r3, #13
 800c608:	d8ed      	bhi.n	800c5e6 <read_submessage_list+0x12>
 800c60a:	a101      	add	r1, pc, #4	; (adr r1, 800c610 <read_submessage_list+0x3c>)
 800c60c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c610:	0800c86f 	.word	0x0800c86f
 800c614:	0800c5e7 	.word	0x0800c5e7
 800c618:	0800c85f 	.word	0x0800c85f
 800c61c:	0800c7fd 	.word	0x0800c7fd
 800c620:	0800c7f3 	.word	0x0800c7f3
 800c624:	0800c5e7 	.word	0x0800c5e7
 800c628:	0800c5e7 	.word	0x0800c5e7
 800c62c:	0800c753 	.word	0x0800c753
 800c630:	0800c6e3 	.word	0x0800c6e3
 800c634:	0800c6a3 	.word	0x0800c6a3
 800c638:	0800c5e7 	.word	0x0800c5e7
 800c63c:	0800c5e7 	.word	0x0800c5e7
 800c640:	0800c5e7 	.word	0x0800c5e7
 800c644:	0800c649 	.word	0x0800c649
 800c648:	a910      	add	r1, sp, #64	; 0x40
 800c64a:	4628      	mov	r0, r5
 800c64c:	f002 f896 	bl	800e77c <uxr_deserialize_TIMESTAMP_REPLY_Payload>
 800c650:	f8d4 9090 	ldr.w	r9, [r4, #144]	; 0x90
 800c654:	f1b9 0f00 	cmp.w	r9, #0
 800c658:	f000 8116 	beq.w	800c888 <read_submessage_list+0x2b4>
 800c65c:	f000 ffce 	bl	800d5fc <uxr_nanos>
 800c660:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800c662:	4602      	mov	r2, r0
 800c664:	460b      	mov	r3, r1
 800c666:	9814      	ldr	r0, [sp, #80]	; 0x50
 800c668:	2100      	movs	r1, #0
 800c66a:	468c      	mov	ip, r1
 800c66c:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c670:	e9cd 7c04 	strd	r7, ip, [sp, #16]
 800c674:	9810      	ldr	r0, [sp, #64]	; 0x40
 800c676:	9f11      	ldr	r7, [sp, #68]	; 0x44
 800c678:	468c      	mov	ip, r1
 800c67a:	fbc0 7c06 	smlal	r7, ip, r0, r6
 800c67e:	46e2      	mov	sl, ip
 800c680:	46bc      	mov	ip, r7
 800c682:	e9dd 0712 	ldrd	r0, r7, [sp, #72]	; 0x48
 800c686:	fbc0 7106 	smlal	r7, r1, r0, r6
 800c68a:	e9cd ca02 	strd	ip, sl, [sp, #8]
 800c68e:	e9cd 7100 	strd	r7, r1, [sp]
 800c692:	f8d4 1094 	ldr.w	r1, [r4, #148]	; 0x94
 800c696:	9106      	str	r1, [sp, #24]
 800c698:	4620      	mov	r0, r4
 800c69a:	47c8      	blx	r9
 800c69c:	f884 80a0 	strb.w	r8, [r4, #160]	; 0xa0
 800c6a0:	e7a1      	b.n	800c5e6 <read_submessage_list+0x12>
 800c6a2:	a910      	add	r1, sp, #64	; 0x40
 800c6a4:	4628      	mov	r0, r5
 800c6a6:	f002 f857 	bl	800e758 <uxr_deserialize_HEARTBEAT_Payload>
 800c6aa:	2100      	movs	r1, #0
 800c6ac:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c6b0:	f000 fe36 	bl	800d320 <uxr_stream_id_from_raw>
 800c6b4:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800c6b8:	900f      	str	r0, [sp, #60]	; 0x3c
 800c6ba:	4639      	mov	r1, r7
 800c6bc:	f104 0008 	add.w	r0, r4, #8
 800c6c0:	f000 ff1c 	bl	800d4fc <uxr_get_input_reliable_stream>
 800c6c4:	2800      	cmp	r0, #0
 800c6c6:	d08e      	beq.n	800c5e6 <read_submessage_list+0x12>
 800c6c8:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 800c6cc:	f8bd 2042 	ldrh.w	r2, [sp, #66]	; 0x42
 800c6d0:	f004 fd2c 	bl	801112c <uxr_process_heartbeat>
 800c6d4:	f89d 103c 	ldrb.w	r1, [sp, #60]	; 0x3c
 800c6d8:	463a      	mov	r2, r7
 800c6da:	4620      	mov	r0, r4
 800c6dc:	f7ff fdf6 	bl	800c2cc <write_submessage_acknack.isra.0>
 800c6e0:	e781      	b.n	800c5e6 <read_submessage_list+0x12>
 800c6e2:	a910      	add	r1, sp, #64	; 0x40
 800c6e4:	4628      	mov	r0, r5
 800c6e6:	f002 f80f 	bl	800e708 <uxr_deserialize_ACKNACK_Payload>
 800c6ea:	2100      	movs	r1, #0
 800c6ec:	f89d 0044 	ldrb.w	r0, [sp, #68]	; 0x44
 800c6f0:	f000 fe16 	bl	800d320 <uxr_stream_id_from_raw>
 800c6f4:	900d      	str	r0, [sp, #52]	; 0x34
 800c6f6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 800c6fa:	f104 0008 	add.w	r0, r4, #8
 800c6fe:	f000 fee9 	bl	800d4d4 <uxr_get_output_reliable_stream>
 800c702:	4607      	mov	r7, r0
 800c704:	2800      	cmp	r0, #0
 800c706:	f43f af6e 	beq.w	800c5e6 <read_submessage_list+0x12>
 800c70a:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 800c70e:	f89d 1043 	ldrb.w	r1, [sp, #67]	; 0x43
 800c712:	f8bd 2040 	ldrh.w	r2, [sp, #64]	; 0x40
 800c716:	eb01 2103 	add.w	r1, r1, r3, lsl #8
 800c71a:	b289      	uxth	r1, r1
 800c71c:	f005 f860 	bl	80117e0 <uxr_process_acknack>
 800c720:	4638      	mov	r0, r7
 800c722:	f005 f81d 	bl	8011760 <uxr_begin_output_nack_buffer_it>
 800c726:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800c72a:	f8ad 0032 	strh.w	r0, [sp, #50]	; 0x32
 800c72e:	e006      	b.n	800c73e <read_submessage_list+0x16a>
 800c730:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800c732:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800c734:	f8d3 9004 	ldr.w	r9, [r3, #4]
 800c738:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c73a:	6818      	ldr	r0, [r3, #0]
 800c73c:	47c8      	blx	r9
 800c73e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
 800c742:	aa0f      	add	r2, sp, #60	; 0x3c
 800c744:	4651      	mov	r1, sl
 800c746:	4638      	mov	r0, r7
 800c748:	f005 f80c 	bl	8011764 <uxr_next_reliable_nack_buffer_to_send>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1ef      	bne.n	800c730 <read_submessage_list+0x15c>
 800c750:	e749      	b.n	800c5e6 <read_submessage_list+0x12>
 800c752:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800c756:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
 800c75a:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
 800c75e:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
 800c762:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
 800c766:	4651      	mov	r1, sl
 800c768:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c76c:	f8bd 7030 	ldrh.w	r7, [sp, #48]	; 0x30
 800c770:	f89d 902f 	ldrb.w	r9, [sp, #47]	; 0x2f
 800c774:	f88d 2036 	strb.w	r2, [sp, #54]	; 0x36
 800c778:	4628      	mov	r0, r5
 800c77a:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
 800c77e:	f001 fd23 	bl	800e1c8 <uxr_deserialize_BaseObjectRequest>
 800c782:	4650      	mov	r0, sl
 800c784:	a90f      	add	r1, sp, #60	; 0x3c
 800c786:	f10d 0232 	add.w	r2, sp, #50	; 0x32
 800c78a:	f000 fd8d 	bl	800d2a8 <uxr_parse_base_object_request>
 800c78e:	f8d4 b080 	ldr.w	fp, [r4, #128]	; 0x80
 800c792:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c794:	f8bd a032 	ldrh.w	sl, [sp, #50]	; 0x32
 800c798:	9110      	str	r1, [sp, #64]	; 0x40
 800c79a:	3f04      	subs	r7, #4
 800c79c:	f009 090e 	and.w	r9, r9, #14
 800c7a0:	b2bf      	uxth	r7, r7
 800c7a2:	f1bb 0f00 	cmp.w	fp, #0
 800c7a6:	d006      	beq.n	800c7b6 <read_submessage_list+0x1e2>
 800c7a8:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c7ac:	9300      	str	r3, [sp, #0]
 800c7ae:	4652      	mov	r2, sl
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	4620      	mov	r0, r4
 800c7b4:	47d8      	blx	fp
 800c7b6:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c7b8:	b16a      	cbz	r2, 800c7d6 <read_submessage_list+0x202>
 800c7ba:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c7bc:	2100      	movs	r1, #0
 800c7be:	3802      	subs	r0, #2
 800c7c0:	e002      	b.n	800c7c8 <read_submessage_list+0x1f4>
 800c7c2:	3101      	adds	r1, #1
 800c7c4:	4291      	cmp	r1, r2
 800c7c6:	d006      	beq.n	800c7d6 <read_submessage_list+0x202>
 800c7c8:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c7cc:	4553      	cmp	r3, sl
 800c7ce:	d1f8      	bne.n	800c7c2 <read_submessage_list+0x1ee>
 800c7d0:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	545a      	strb	r2, [r3, r1]
 800c7d6:	f8bd 1032 	ldrh.w	r1, [sp, #50]	; 0x32
 800c7da:	9102      	str	r1, [sp, #8]
 800c7dc:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800c7de:	9101      	str	r1, [sp, #4]
 800c7e0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c7e2:	9100      	str	r1, [sp, #0]
 800c7e4:	464b      	mov	r3, r9
 800c7e6:	463a      	mov	r2, r7
 800c7e8:	4629      	mov	r1, r5
 800c7ea:	4620      	mov	r0, r4
 800c7ec:	f005 f87c 	bl	80118e8 <read_submessage_format>
 800c7f0:	e6f9      	b.n	800c5e6 <read_submessage_list+0x12>
 800c7f2:	4629      	mov	r1, r5
 800c7f4:	4620      	mov	r0, r4
 800c7f6:	f7ff fea5 	bl	800c544 <read_submessage_info>
 800c7fa:	e6f4      	b.n	800c5e6 <read_submessage_list+0x12>
 800c7fc:	2a00      	cmp	r2, #0
 800c7fe:	d03e      	beq.n	800c87e <read_submessage_list+0x2aa>
 800c800:	a910      	add	r1, sp, #64	; 0x40
 800c802:	4628      	mov	r0, r5
 800c804:	f001 fedc 	bl	800e5c0 <uxr_deserialize_STATUS_Payload>
 800c808:	a90e      	add	r1, sp, #56	; 0x38
 800c80a:	aa0d      	add	r2, sp, #52	; 0x34
 800c80c:	a810      	add	r0, sp, #64	; 0x40
 800c80e:	f000 fd4b 	bl	800d2a8 <uxr_parse_base_object_request>
 800c812:	f8d4 a080 	ldr.w	sl, [r4, #128]	; 0x80
 800c816:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c818:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
 800c81c:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
 800c820:	910f      	str	r1, [sp, #60]	; 0x3c
 800c822:	f1ba 0f00 	cmp.w	sl, #0
 800c826:	d006      	beq.n	800c836 <read_submessage_list+0x262>
 800c828:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
 800c82c:	9300      	str	r3, [sp, #0]
 800c82e:	463a      	mov	r2, r7
 800c830:	464b      	mov	r3, r9
 800c832:	4620      	mov	r0, r4
 800c834:	47d0      	blx	sl
 800c836:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
 800c838:	2a00      	cmp	r2, #0
 800c83a:	f43f aed4 	beq.w	800c5e6 <read_submessage_list+0x12>
 800c83e:	6f60      	ldr	r0, [r4, #116]	; 0x74
 800c840:	2100      	movs	r1, #0
 800c842:	3802      	subs	r0, #2
 800c844:	e003      	b.n	800c84e <read_submessage_list+0x27a>
 800c846:	3101      	adds	r1, #1
 800c848:	4291      	cmp	r1, r2
 800c84a:	f43f aecc 	beq.w	800c5e6 <read_submessage_list+0x12>
 800c84e:	f830 3f02 	ldrh.w	r3, [r0, #2]!
 800c852:	42bb      	cmp	r3, r7
 800c854:	d1f7      	bne.n	800c846 <read_submessage_list+0x272>
 800c856:	6fa3      	ldr	r3, [r4, #120]	; 0x78
 800c858:	f803 9001 	strb.w	r9, [r3, r1]
 800c85c:	e6c3      	b.n	800c5e6 <read_submessage_list+0x12>
 800c85e:	2a00      	cmp	r2, #0
 800c860:	f47f aec1 	bne.w	800c5e6 <read_submessage_list+0x12>
 800c864:	4629      	mov	r1, r5
 800c866:	4620      	mov	r0, r4
 800c868:	f000 fc64 	bl	800d134 <uxr_read_create_session_status>
 800c86c:	e6bb      	b.n	800c5e6 <read_submessage_list+0x12>
 800c86e:	4629      	mov	r1, r5
 800c870:	4620      	mov	r0, r4
 800c872:	f7ff fcf5 	bl	800c260 <read_submessage_get_info>
 800c876:	e6b6      	b.n	800c5e6 <read_submessage_list+0x12>
 800c878:	b017      	add	sp, #92	; 0x5c
 800c87a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c87e:	4629      	mov	r1, r5
 800c880:	4620      	mov	r0, r4
 800c882:	f000 fc63 	bl	800d14c <uxr_read_delete_session_status>
 800c886:	e6ae      	b.n	800c5e6 <read_submessage_list+0x12>
 800c888:	f000 feb8 	bl	800d5fc <uxr_nanos>
 800c88c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c88e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c890:	464f      	mov	r7, r9
 800c892:	fbc3 2706 	smlal	r2, r7, r3, r6
 800c896:	1812      	adds	r2, r2, r0
 800c898:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c89a:	9813      	ldr	r0, [sp, #76]	; 0x4c
 800c89c:	eb47 0101 	adc.w	r1, r7, r1
 800c8a0:	464f      	mov	r7, r9
 800c8a2:	fbc3 0706 	smlal	r0, r7, r3, r6
 800c8a6:	463b      	mov	r3, r7
 800c8a8:	4684      	mov	ip, r0
 800c8aa:	e9dd 7010 	ldrd	r7, r0, [sp, #64]	; 0x40
 800c8ae:	fbc7 0906 	smlal	r0, r9, r7, r6
 800c8b2:	eb1c 0c00 	adds.w	ip, ip, r0
 800c8b6:	464f      	mov	r7, r9
 800c8b8:	eb43 0307 	adc.w	r3, r3, r7
 800c8bc:	ebb2 0c0c 	subs.w	ip, r2, ip
 800c8c0:	eb61 0303 	sbc.w	r3, r1, r3
 800c8c4:	0fda      	lsrs	r2, r3, #31
 800c8c6:	eb12 020c 	adds.w	r2, r2, ip
 800c8ca:	f143 0300 	adc.w	r3, r3, #0
 800c8ce:	0852      	lsrs	r2, r2, #1
 800c8d0:	ea42 72c3 	orr.w	r2, r2, r3, lsl #31
 800c8d4:	105b      	asrs	r3, r3, #1
 800c8d6:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
 800c8da:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
 800c8de:	e6dd      	b.n	800c69c <read_submessage_list+0xc8>
 800c8e0:	3b9aca00 	.word	0x3b9aca00

0800c8e4 <listen_message_reliably>:
 800c8e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e8:	1e0b      	subs	r3, r1, #0
 800c8ea:	b09d      	sub	sp, #116	; 0x74
 800c8ec:	bfb8      	it	lt
 800c8ee:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800c8f2:	4680      	mov	r8, r0
 800c8f4:	9305      	str	r3, [sp, #20]
 800c8f6:	f000 fe67 	bl	800d5c8 <uxr_millis>
 800c8fa:	f898 2048 	ldrb.w	r2, [r8, #72]	; 0x48
 800c8fe:	4681      	mov	r9, r0
 800c900:	2a00      	cmp	r2, #0
 800c902:	f000 80a1 	beq.w	800ca48 <listen_message_reliably+0x164>
 800c906:	2600      	movs	r6, #0
 800c908:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800c90c:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 800c910:	9303      	str	r3, [sp, #12]
 800c912:	4630      	mov	r0, r6
 800c914:	460f      	mov	r7, r1
 800c916:	e00f      	b.n	800c938 <listen_message_reliably+0x54>
 800c918:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 800c91c:	9903      	ldr	r1, [sp, #12]
 800c91e:	455a      	cmp	r2, fp
 800c920:	f106 0601 	add.w	r6, r6, #1
 800c924:	eb73 0101 	sbcs.w	r1, r3, r1
 800c928:	b2f0      	uxtb	r0, r6
 800c92a:	da01      	bge.n	800c930 <listen_message_reliably+0x4c>
 800c92c:	4693      	mov	fp, r2
 800c92e:	9303      	str	r3, [sp, #12]
 800c930:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800c934:	4283      	cmp	r3, r0
 800c936:	d960      	bls.n	800c9fa <listen_message_reliably+0x116>
 800c938:	eb00 0480 	add.w	r4, r0, r0, lsl #2
 800c93c:	2102      	movs	r1, #2
 800c93e:	2201      	movs	r2, #1
 800c940:	f000 fcc4 	bl	800d2cc <uxr_stream_id>
 800c944:	00e4      	lsls	r4, r4, #3
 800c946:	f104 0520 	add.w	r5, r4, #32
 800c94a:	4445      	add	r5, r8
 800c94c:	4601      	mov	r1, r0
 800c94e:	463b      	mov	r3, r7
 800c950:	464a      	mov	r2, r9
 800c952:	4628      	mov	r0, r5
 800c954:	9109      	str	r1, [sp, #36]	; 0x24
 800c956:	f004 fed9 	bl	801170c <uxr_update_output_stream_heartbeat_timestamp>
 800c95a:	eb08 0304 	add.w	r3, r8, r4
 800c95e:	2800      	cmp	r0, #0
 800c960:	d0da      	beq.n	800c918 <listen_message_reliably+0x34>
 800c962:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800c966:	f89d 5025 	ldrb.w	r5, [sp, #37]	; 0x25
 800c96a:	9304      	str	r3, [sp, #16]
 800c96c:	4640      	mov	r0, r8
 800c96e:	f000 fc75 	bl	800d25c <uxr_session_header_offset>
 800c972:	3501      	adds	r5, #1
 800c974:	f10d 0a50 	add.w	sl, sp, #80	; 0x50
 800c978:	eb05 0585 	add.w	r5, r5, r5, lsl #2
 800c97c:	eb08 05c5 	add.w	r5, r8, r5, lsl #3
 800c980:	2300      	movs	r3, #0
 800c982:	2211      	movs	r2, #17
 800c984:	9000      	str	r0, [sp, #0]
 800c986:	a90c      	add	r1, sp, #48	; 0x30
 800c988:	4650      	mov	r0, sl
 800c98a:	f7ff fa3b 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800c98e:	2300      	movs	r3, #0
 800c990:	2205      	movs	r2, #5
 800c992:	210b      	movs	r1, #11
 800c994:	4650      	mov	r0, sl
 800c996:	f000 fdd1 	bl	800d53c <uxr_buffer_submessage_header>
 800c99a:	8968      	ldrh	r0, [r5, #10]
 800c99c:	2101      	movs	r1, #1
 800c99e:	f005 f86d 	bl	8011a7c <uxr_seq_num_add>
 800c9a2:	892b      	ldrh	r3, [r5, #8]
 800c9a4:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
 800c9a8:	4602      	mov	r2, r0
 800c9aa:	9b04      	ldr	r3, [sp, #16]
 800c9ac:	f8ad 2028 	strh.w	r2, [sp, #40]	; 0x28
 800c9b0:	a90a      	add	r1, sp, #40	; 0x28
 800c9b2:	4650      	mov	r0, sl
 800c9b4:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
 800c9b8:	f001 feba 	bl	800e730 <uxr_serialize_HEARTBEAT_Payload>
 800c9bc:	2200      	movs	r2, #0
 800c9be:	4611      	mov	r1, r2
 800c9c0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c9c2:	4640      	mov	r0, r8
 800c9c4:	f000 fbf4 	bl	800d1b0 <uxr_stamp_session_header>
 800c9c8:	4650      	mov	r0, sl
 800c9ca:	f7ff fa59 	bl	800be80 <ucdr_buffer_length>
 800c9ce:	f8d8 3070 	ldr.w	r3, [r8, #112]	; 0x70
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	a90c      	add	r1, sp, #48	; 0x30
 800c9d6:	e9d3 0500 	ldrd	r0, r5, [r3]
 800c9da:	4444      	add	r4, r8
 800c9dc:	47a8      	blx	r5
 800c9de:	e9d4 230e 	ldrd	r2, r3, [r4, #56]	; 0x38
 800c9e2:	9903      	ldr	r1, [sp, #12]
 800c9e4:	455a      	cmp	r2, fp
 800c9e6:	f106 0601 	add.w	r6, r6, #1
 800c9ea:	eb73 0101 	sbcs.w	r1, r3, r1
 800c9ee:	b2f0      	uxtb	r0, r6
 800c9f0:	db9c      	blt.n	800c92c <listen_message_reliably+0x48>
 800c9f2:	f898 3048 	ldrb.w	r3, [r8, #72]	; 0x48
 800c9f6:	4283      	cmp	r3, r0
 800c9f8:	d89e      	bhi.n	800c938 <listen_message_reliably+0x54>
 800c9fa:	9a03      	ldr	r2, [sp, #12]
 800c9fc:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800ca00:	429a      	cmp	r2, r3
 800ca02:	bf08      	it	eq
 800ca04:	f1bb 3fff 	cmpeq.w	fp, #4294967295	; 0xffffffff
 800ca08:	d01e      	beq.n	800ca48 <listen_message_reliably+0x164>
 800ca0a:	ebab 0309 	sub.w	r3, fp, r9
 800ca0e:	9905      	ldr	r1, [sp, #20]
 800ca10:	f8d8 2070 	ldr.w	r2, [r8, #112]	; 0x70
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	bf08      	it	eq
 800ca18:	2301      	moveq	r3, #1
 800ca1a:	4299      	cmp	r1, r3
 800ca1c:	bfa8      	it	ge
 800ca1e:	4619      	movge	r1, r3
 800ca20:	6894      	ldr	r4, [r2, #8]
 800ca22:	6810      	ldr	r0, [r2, #0]
 800ca24:	4689      	mov	r9, r1
 800ca26:	460b      	mov	r3, r1
 800ca28:	aa08      	add	r2, sp, #32
 800ca2a:	a907      	add	r1, sp, #28
 800ca2c:	47a0      	blx	r4
 800ca2e:	b968      	cbnz	r0, 800ca4c <listen_message_reliably+0x168>
 800ca30:	9b05      	ldr	r3, [sp, #20]
 800ca32:	eba3 0309 	sub.w	r3, r3, r9
 800ca36:	2b00      	cmp	r3, #0
 800ca38:	9305      	str	r3, [sp, #20]
 800ca3a:	f73f af5c 	bgt.w	800c8f6 <listen_message_reliably+0x12>
 800ca3e:	4604      	mov	r4, r0
 800ca40:	4620      	mov	r0, r4
 800ca42:	b01d      	add	sp, #116	; 0x74
 800ca44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca48:	9b05      	ldr	r3, [sp, #20]
 800ca4a:	e7e0      	b.n	800ca0e <listen_message_reliably+0x12a>
 800ca4c:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ca50:	4604      	mov	r4, r0
 800ca52:	a80c      	add	r0, sp, #48	; 0x30
 800ca54:	f7ff f9e8 	bl	800be28 <ucdr_init_buffer>
 800ca58:	2500      	movs	r5, #0
 800ca5a:	f10d 031a 	add.w	r3, sp, #26
 800ca5e:	aa06      	add	r2, sp, #24
 800ca60:	a90c      	add	r1, sp, #48	; 0x30
 800ca62:	4640      	mov	r0, r8
 800ca64:	f88d 5018 	strb.w	r5, [sp, #24]
 800ca68:	f000 fbb6 	bl	800d1d8 <uxr_read_session_header>
 800ca6c:	b918      	cbnz	r0, 800ca76 <listen_message_reliably+0x192>
 800ca6e:	4620      	mov	r0, r4
 800ca70:	b01d      	add	sp, #116	; 0x74
 800ca72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca76:	4629      	mov	r1, r5
 800ca78:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800ca7c:	f000 fc50 	bl	800d320 <uxr_stream_id_from_raw>
 800ca80:	f3c0 4507 	ubfx	r5, r0, #16, #8
 800ca84:	2d01      	cmp	r5, #1
 800ca86:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800ca8a:	f8bd a01a 	ldrh.w	sl, [sp, #26]
 800ca8e:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ca92:	d04b      	beq.n	800cb2c <listen_message_reliably+0x248>
 800ca94:	2d02      	cmp	r5, #2
 800ca96:	d00f      	beq.n	800cab8 <listen_message_reliably+0x1d4>
 800ca98:	2d00      	cmp	r5, #0
 800ca9a:	d1e8      	bne.n	800ca6e <listen_message_reliably+0x18a>
 800ca9c:	4629      	mov	r1, r5
 800ca9e:	4628      	mov	r0, r5
 800caa0:	f000 fc3e 	bl	800d320 <uxr_stream_id_from_raw>
 800caa4:	a90c      	add	r1, sp, #48	; 0x30
 800caa6:	4602      	mov	r2, r0
 800caa8:	4640      	mov	r0, r8
 800caaa:	920a      	str	r2, [sp, #40]	; 0x28
 800caac:	f7ff fd92 	bl	800c5d4 <read_submessage_list>
 800cab0:	4620      	mov	r0, r4
 800cab2:	b01d      	add	sp, #116	; 0x74
 800cab4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cab8:	4631      	mov	r1, r6
 800caba:	f108 0008 	add.w	r0, r8, #8
 800cabe:	f89d 9024 	ldrb.w	r9, [sp, #36]	; 0x24
 800cac2:	f000 fd1b 	bl	800d4fc <uxr_get_input_reliable_stream>
 800cac6:	4607      	mov	r7, r0
 800cac8:	b338      	cbz	r0, 800cb1a <listen_message_reliably+0x236>
 800caca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cacc:	9203      	str	r2, [sp, #12]
 800cace:	a80c      	add	r0, sp, #48	; 0x30
 800cad0:	f7ff f9da 	bl	800be88 <ucdr_buffer_remaining>
 800cad4:	4603      	mov	r3, r0
 800cad6:	f10d 0019 	add.w	r0, sp, #25
 800cada:	9000      	str	r0, [sp, #0]
 800cadc:	9a03      	ldr	r2, [sp, #12]
 800cade:	4651      	mov	r1, sl
 800cae0:	4638      	mov	r0, r7
 800cae2:	f004 fa29 	bl	8010f38 <uxr_receive_reliable_message>
 800cae6:	b1c0      	cbz	r0, 800cb1a <listen_message_reliably+0x236>
 800cae8:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800caec:	b393      	cbz	r3, 800cb54 <listen_message_reliably+0x270>
 800caee:	ad14      	add	r5, sp, #80	; 0x50
 800caf0:	f04f 0a02 	mov.w	sl, #2
 800caf4:	e00a      	b.n	800cb0c <listen_message_reliably+0x228>
 800caf6:	f88d 9028 	strb.w	r9, [sp, #40]	; 0x28
 800cafa:	f88d 6029 	strb.w	r6, [sp, #41]	; 0x29
 800cafe:	f88d a02a 	strb.w	sl, [sp, #42]	; 0x2a
 800cb02:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb04:	4629      	mov	r1, r5
 800cb06:	4640      	mov	r0, r8
 800cb08:	f7ff fd64 	bl	800c5d4 <read_submessage_list>
 800cb0c:	2204      	movs	r2, #4
 800cb0e:	4629      	mov	r1, r5
 800cb10:	4638      	mov	r0, r7
 800cb12:	f004 fa91 	bl	8011038 <uxr_next_input_reliable_buffer_available>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	d1ed      	bne.n	800caf6 <listen_message_reliably+0x212>
 800cb1a:	4640      	mov	r0, r8
 800cb1c:	4632      	mov	r2, r6
 800cb1e:	4649      	mov	r1, r9
 800cb20:	f7ff fbd4 	bl	800c2cc <write_submessage_acknack.isra.0>
 800cb24:	4620      	mov	r0, r4
 800cb26:	b01d      	add	sp, #116	; 0x74
 800cb28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb2c:	4631      	mov	r1, r6
 800cb2e:	f108 0008 	add.w	r0, r8, #8
 800cb32:	f000 fcd9 	bl	800d4e8 <uxr_get_input_best_effort_stream>
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d099      	beq.n	800ca6e <listen_message_reliably+0x18a>
 800cb3a:	4651      	mov	r1, sl
 800cb3c:	f004 f968 	bl	8010e10 <uxr_receive_best_effort_message>
 800cb40:	2800      	cmp	r0, #0
 800cb42:	d094      	beq.n	800ca6e <listen_message_reliably+0x18a>
 800cb44:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800cb48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb4a:	a90c      	add	r1, sp, #48	; 0x30
 800cb4c:	4640      	mov	r0, r8
 800cb4e:	f7ff fd41 	bl	800c5d4 <read_submessage_list>
 800cb52:	e78c      	b.n	800ca6e <listen_message_reliably+0x18a>
 800cb54:	f88d 502a 	strb.w	r5, [sp, #42]	; 0x2a
 800cb58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb5a:	a90c      	add	r1, sp, #48	; 0x30
 800cb5c:	4640      	mov	r0, r8
 800cb5e:	f7ff fd39 	bl	800c5d4 <read_submessage_list>
 800cb62:	e7c4      	b.n	800caee <listen_message_reliably+0x20a>

0800cb64 <uxr_run_session_until_confirm_delivery>:
 800cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb68:	4606      	mov	r6, r0
 800cb6a:	460d      	mov	r5, r1
 800cb6c:	f000 fd2c 	bl	800d5c8 <uxr_millis>
 800cb70:	4607      	mov	r7, r0
 800cb72:	4630      	mov	r0, r6
 800cb74:	f7ff fc70 	bl	800c458 <uxr_flash_output_streams>
 800cb78:	2d00      	cmp	r5, #0
 800cb7a:	f106 0808 	add.w	r8, r6, #8
 800cb7e:	bfa8      	it	ge
 800cb80:	462c      	movge	r4, r5
 800cb82:	da07      	bge.n	800cb94 <uxr_run_session_until_confirm_delivery+0x30>
 800cb84:	e00e      	b.n	800cba4 <uxr_run_session_until_confirm_delivery+0x40>
 800cb86:	f7ff fead 	bl	800c8e4 <listen_message_reliably>
 800cb8a:	f000 fd1d 	bl	800d5c8 <uxr_millis>
 800cb8e:	1bc3      	subs	r3, r0, r7
 800cb90:	1aec      	subs	r4, r5, r3
 800cb92:	d407      	bmi.n	800cba4 <uxr_run_session_until_confirm_delivery+0x40>
 800cb94:	4640      	mov	r0, r8
 800cb96:	f000 fcbb 	bl	800d510 <uxr_output_streams_confirmed>
 800cb9a:	4603      	mov	r3, r0
 800cb9c:	4621      	mov	r1, r4
 800cb9e:	4630      	mov	r0, r6
 800cba0:	2b00      	cmp	r3, #0
 800cba2:	d0f0      	beq.n	800cb86 <uxr_run_session_until_confirm_delivery+0x22>
 800cba4:	4640      	mov	r0, r8
 800cba6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cbaa:	f000 bcb1 	b.w	800d510 <uxr_output_streams_confirmed>
 800cbae:	bf00      	nop

0800cbb0 <uxr_run_session_until_all_status>:
 800cbb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbb4:	9c08      	ldr	r4, [sp, #32]
 800cbb6:	4606      	mov	r6, r0
 800cbb8:	460f      	mov	r7, r1
 800cbba:	4691      	mov	r9, r2
 800cbbc:	461d      	mov	r5, r3
 800cbbe:	f7ff fc4b 	bl	800c458 <uxr_flash_output_streams>
 800cbc2:	b124      	cbz	r4, 800cbce <uxr_run_session_until_all_status+0x1e>
 800cbc4:	4622      	mov	r2, r4
 800cbc6:	21ff      	movs	r1, #255	; 0xff
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f006 fc27 	bl	801341c <memset>
 800cbce:	e9c6 951d 	strd	r9, r5, [r6, #116]	; 0x74
 800cbd2:	67f4      	str	r4, [r6, #124]	; 0x7c
 800cbd4:	f000 fcf8 	bl	800d5c8 <uxr_millis>
 800cbd8:	3d01      	subs	r5, #1
 800cbda:	f1a9 0902 	sub.w	r9, r9, #2
 800cbde:	4680      	mov	r8, r0
 800cbe0:	4639      	mov	r1, r7
 800cbe2:	4630      	mov	r0, r6
 800cbe4:	f7ff fe7e 	bl	800c8e4 <listen_message_reliably>
 800cbe8:	f000 fcee 	bl	800d5c8 <uxr_millis>
 800cbec:	eba0 0008 	sub.w	r0, r0, r8
 800cbf0:	1a39      	subs	r1, r7, r0
 800cbf2:	b344      	cbz	r4, 800cc46 <uxr_run_session_until_all_status+0x96>
 800cbf4:	4628      	mov	r0, r5
 800cbf6:	46ac      	mov	ip, r5
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e002      	b.n	800cc02 <uxr_run_session_until_all_status+0x52>
 800cbfc:	42a3      	cmp	r3, r4
 800cbfe:	d20d      	bcs.n	800cc1c <uxr_run_session_until_all_status+0x6c>
 800cc00:	3301      	adds	r3, #1
 800cc02:	f81c ef01 	ldrb.w	lr, [ip, #1]!
 800cc06:	f1be 0fff 	cmp.w	lr, #255	; 0xff
 800cc0a:	d1f7      	bne.n	800cbfc <uxr_run_session_until_all_status+0x4c>
 800cc0c:	42a3      	cmp	r3, r4
 800cc0e:	f839 2013 	ldrh.w	r2, [r9, r3, lsl #1]
 800cc12:	d213      	bcs.n	800cc3c <uxr_run_session_until_all_status+0x8c>
 800cc14:	2a00      	cmp	r2, #0
 800cc16:	d0f3      	beq.n	800cc00 <uxr_run_session_until_all_status+0x50>
 800cc18:	2900      	cmp	r1, #0
 800cc1a:	dce2      	bgt.n	800cbe2 <uxr_run_session_until_all_status+0x32>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	67f3      	str	r3, [r6, #124]	; 0x7c
 800cc20:	442c      	add	r4, r5
 800cc22:	e001      	b.n	800cc28 <uxr_run_session_until_all_status+0x78>
 800cc24:	2b01      	cmp	r3, #1
 800cc26:	d812      	bhi.n	800cc4e <uxr_run_session_until_all_status+0x9e>
 800cc28:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 800cc2c:	4284      	cmp	r4, r0
 800cc2e:	d1f9      	bne.n	800cc24 <uxr_run_session_until_all_status+0x74>
 800cc30:	2b01      	cmp	r3, #1
 800cc32:	bf8c      	ite	hi
 800cc34:	2000      	movhi	r0, #0
 800cc36:	2001      	movls	r0, #1
 800cc38:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc3c:	2900      	cmp	r1, #0
 800cc3e:	dded      	ble.n	800cc1c <uxr_run_session_until_all_status+0x6c>
 800cc40:	2a00      	cmp	r2, #0
 800cc42:	d1ce      	bne.n	800cbe2 <uxr_run_session_until_all_status+0x32>
 800cc44:	e7ea      	b.n	800cc1c <uxr_run_session_until_all_status+0x6c>
 800cc46:	67f4      	str	r4, [r6, #124]	; 0x7c
 800cc48:	2001      	movs	r0, #1
 800cc4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0800cc54 <wait_session_status>:
 800cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc58:	4604      	mov	r4, r0
 800cc5a:	b09d      	sub	sp, #116	; 0x74
 800cc5c:	20ff      	movs	r0, #255	; 0xff
 800cc5e:	7160      	strb	r0, [r4, #5]
 800cc60:	9303      	str	r3, [sp, #12]
 800cc62:	2b00      	cmp	r3, #0
 800cc64:	f000 80b6 	beq.w	800cdd4 <wait_session_status+0x180>
 800cc68:	468a      	mov	sl, r1
 800cc6a:	4691      	mov	r9, r2
 800cc6c:	f04f 0b00 	mov.w	fp, #0
 800cc70:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cc72:	464a      	mov	r2, r9
 800cc74:	e9d3 0500 	ldrd	r0, r5, [r3]
 800cc78:	4651      	mov	r1, sl
 800cc7a:	47a8      	blx	r5
 800cc7c:	f000 fca4 	bl	800d5c8 <uxr_millis>
 800cc80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cc84:	4605      	mov	r5, r0
 800cc86:	e009      	b.n	800cc9c <wait_session_status+0x48>
 800cc88:	f000 fc9e 	bl	800d5c8 <uxr_millis>
 800cc8c:	1b40      	subs	r0, r0, r5
 800cc8e:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	dd40      	ble.n	800cd18 <wait_session_status+0xc4>
 800cc96:	7960      	ldrb	r0, [r4, #5]
 800cc98:	28ff      	cmp	r0, #255	; 0xff
 800cc9a:	d145      	bne.n	800cd28 <wait_session_status+0xd4>
 800cc9c:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800cc9e:	a908      	add	r1, sp, #32
 800cca0:	6896      	ldr	r6, [r2, #8]
 800cca2:	6810      	ldr	r0, [r2, #0]
 800cca4:	aa09      	add	r2, sp, #36	; 0x24
 800cca6:	47b0      	blx	r6
 800cca8:	2800      	cmp	r0, #0
 800ccaa:	d0ed      	beq.n	800cc88 <wait_session_status+0x34>
 800ccac:	e9dd 1208 	ldrd	r1, r2, [sp, #32]
 800ccb0:	a80c      	add	r0, sp, #48	; 0x30
 800ccb2:	f7ff f8b9 	bl	800be28 <ucdr_init_buffer>
 800ccb6:	2600      	movs	r6, #0
 800ccb8:	f10d 031e 	add.w	r3, sp, #30
 800ccbc:	aa07      	add	r2, sp, #28
 800ccbe:	a90c      	add	r1, sp, #48	; 0x30
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	f88d 601c 	strb.w	r6, [sp, #28]
 800ccc6:	f000 fa87 	bl	800d1d8 <uxr_read_session_header>
 800ccca:	2800      	cmp	r0, #0
 800cccc:	d0dc      	beq.n	800cc88 <wait_session_status+0x34>
 800ccce:	4631      	mov	r1, r6
 800ccd0:	f89d 001c 	ldrb.w	r0, [sp, #28]
 800ccd4:	f000 fb24 	bl	800d320 <uxr_stream_id_from_raw>
 800ccd8:	f3c0 4707 	ubfx	r7, r0, #16, #8
 800ccdc:	f8bd 301e 	ldrh.w	r3, [sp, #30]
 800cce0:	9302      	str	r3, [sp, #8]
 800cce2:	2f01      	cmp	r7, #1
 800cce4:	e9cd 000a 	strd	r0, r0, [sp, #40]	; 0x28
 800cce8:	f3c0 2607 	ubfx	r6, r0, #8, #8
 800ccec:	d05c      	beq.n	800cda8 <wait_session_status+0x154>
 800ccee:	2f02      	cmp	r7, #2
 800ccf0:	d020      	beq.n	800cd34 <wait_session_status+0xe0>
 800ccf2:	2f00      	cmp	r7, #0
 800ccf4:	d1c8      	bne.n	800cc88 <wait_session_status+0x34>
 800ccf6:	4639      	mov	r1, r7
 800ccf8:	4638      	mov	r0, r7
 800ccfa:	f000 fb11 	bl	800d320 <uxr_stream_id_from_raw>
 800ccfe:	a90c      	add	r1, sp, #48	; 0x30
 800cd00:	4602      	mov	r2, r0
 800cd02:	900b      	str	r0, [sp, #44]	; 0x2c
 800cd04:	4620      	mov	r0, r4
 800cd06:	f7ff fc65 	bl	800c5d4 <read_submessage_list>
 800cd0a:	f000 fc5d 	bl	800d5c8 <uxr_millis>
 800cd0e:	1b40      	subs	r0, r0, r5
 800cd10:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	dcbe      	bgt.n	800cc96 <wait_session_status+0x42>
 800cd18:	9b03      	ldr	r3, [sp, #12]
 800cd1a:	7960      	ldrb	r0, [r4, #5]
 800cd1c:	f10b 0b01 	add.w	fp, fp, #1
 800cd20:	455b      	cmp	r3, fp
 800cd22:	d001      	beq.n	800cd28 <wait_session_status+0xd4>
 800cd24:	28ff      	cmp	r0, #255	; 0xff
 800cd26:	d0a3      	beq.n	800cc70 <wait_session_status+0x1c>
 800cd28:	38ff      	subs	r0, #255	; 0xff
 800cd2a:	bf18      	it	ne
 800cd2c:	2001      	movne	r0, #1
 800cd2e:	b01d      	add	sp, #116	; 0x74
 800cd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd34:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 800cd38:	9304      	str	r3, [sp, #16]
 800cd3a:	4631      	mov	r1, r6
 800cd3c:	f104 0008 	add.w	r0, r4, #8
 800cd40:	f000 fbdc 	bl	800d4fc <uxr_get_input_reliable_stream>
 800cd44:	4680      	mov	r8, r0
 800cd46:	b348      	cbz	r0, 800cd9c <wait_session_status+0x148>
 800cd48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd4a:	9205      	str	r2, [sp, #20]
 800cd4c:	a80c      	add	r0, sp, #48	; 0x30
 800cd4e:	f7ff f89b 	bl	800be88 <ucdr_buffer_remaining>
 800cd52:	4603      	mov	r3, r0
 800cd54:	f10d 001d 	add.w	r0, sp, #29
 800cd58:	9000      	str	r0, [sp, #0]
 800cd5a:	9a05      	ldr	r2, [sp, #20]
 800cd5c:	9902      	ldr	r1, [sp, #8]
 800cd5e:	4640      	mov	r0, r8
 800cd60:	f004 f8ea 	bl	8010f38 <uxr_receive_reliable_message>
 800cd64:	b1d0      	cbz	r0, 800cd9c <wait_session_status+0x148>
 800cd66:	f89d 301d 	ldrb.w	r3, [sp, #29]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d03a      	beq.n	800cde4 <wait_session_status+0x190>
 800cd6e:	9f04      	ldr	r7, [sp, #16]
 800cd70:	e00a      	b.n	800cd88 <wait_session_status+0x134>
 800cd72:	f04f 0302 	mov.w	r3, #2
 800cd76:	f88d 702c 	strb.w	r7, [sp, #44]	; 0x2c
 800cd7a:	f88d 602d 	strb.w	r6, [sp, #45]	; 0x2d
 800cd7e:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
 800cd82:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cd84:	f7ff fc26 	bl	800c5d4 <read_submessage_list>
 800cd88:	a914      	add	r1, sp, #80	; 0x50
 800cd8a:	2204      	movs	r2, #4
 800cd8c:	4640      	mov	r0, r8
 800cd8e:	f004 f953 	bl	8011038 <uxr_next_input_reliable_buffer_available>
 800cd92:	4603      	mov	r3, r0
 800cd94:	a914      	add	r1, sp, #80	; 0x50
 800cd96:	4620      	mov	r0, r4
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d1ea      	bne.n	800cd72 <wait_session_status+0x11e>
 800cd9c:	9904      	ldr	r1, [sp, #16]
 800cd9e:	4632      	mov	r2, r6
 800cda0:	4620      	mov	r0, r4
 800cda2:	f7ff fa93 	bl	800c2cc <write_submessage_acknack.isra.0>
 800cda6:	e76f      	b.n	800cc88 <wait_session_status+0x34>
 800cda8:	4631      	mov	r1, r6
 800cdaa:	f104 0008 	add.w	r0, r4, #8
 800cdae:	f000 fb9b 	bl	800d4e8 <uxr_get_input_best_effort_stream>
 800cdb2:	2800      	cmp	r0, #0
 800cdb4:	f43f af68 	beq.w	800cc88 <wait_session_status+0x34>
 800cdb8:	9902      	ldr	r1, [sp, #8]
 800cdba:	f004 f829 	bl	8010e10 <uxr_receive_best_effort_message>
 800cdbe:	2800      	cmp	r0, #0
 800cdc0:	f43f af62 	beq.w	800cc88 <wait_session_status+0x34>
 800cdc4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800cdc8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdca:	a90c      	add	r1, sp, #48	; 0x30
 800cdcc:	4620      	mov	r0, r4
 800cdce:	f7ff fc01 	bl	800c5d4 <read_submessage_list>
 800cdd2:	e759      	b.n	800cc88 <wait_session_status+0x34>
 800cdd4:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800cdd6:	e9d3 0400 	ldrd	r0, r4, [r3]
 800cdda:	47a0      	blx	r4
 800cddc:	2001      	movs	r0, #1
 800cdde:	b01d      	add	sp, #116	; 0x74
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	f88d 702e 	strb.w	r7, [sp, #46]	; 0x2e
 800cde8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800cdea:	a90c      	add	r1, sp, #48	; 0x30
 800cdec:	4620      	mov	r0, r4
 800cdee:	f7ff fbf1 	bl	800c5d4 <read_submessage_list>
 800cdf2:	e7bc      	b.n	800cd6e <wait_session_status+0x11a>

0800cdf4 <uxr_delete_session_retries>:
 800cdf4:	b530      	push	{r4, r5, lr}
 800cdf6:	b08f      	sub	sp, #60	; 0x3c
 800cdf8:	4604      	mov	r4, r0
 800cdfa:	460d      	mov	r5, r1
 800cdfc:	f000 fa2e 	bl	800d25c <uxr_session_header_offset>
 800ce00:	2300      	movs	r3, #0
 800ce02:	2210      	movs	r2, #16
 800ce04:	9000      	str	r0, [sp, #0]
 800ce06:	a902      	add	r1, sp, #8
 800ce08:	a806      	add	r0, sp, #24
 800ce0a:	f7fe fffb 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800ce0e:	a906      	add	r1, sp, #24
 800ce10:	4620      	mov	r0, r4
 800ce12:	f000 f973 	bl	800d0fc <uxr_buffer_delete_session>
 800ce16:	2200      	movs	r2, #0
 800ce18:	4611      	mov	r1, r2
 800ce1a:	9b06      	ldr	r3, [sp, #24]
 800ce1c:	4620      	mov	r0, r4
 800ce1e:	f000 f9c7 	bl	800d1b0 <uxr_stamp_session_header>
 800ce22:	a806      	add	r0, sp, #24
 800ce24:	f7ff f82c 	bl	800be80 <ucdr_buffer_length>
 800ce28:	462b      	mov	r3, r5
 800ce2a:	4602      	mov	r2, r0
 800ce2c:	a902      	add	r1, sp, #8
 800ce2e:	4620      	mov	r0, r4
 800ce30:	f7ff ff10 	bl	800cc54 <wait_session_status>
 800ce34:	b118      	cbz	r0, 800ce3e <uxr_delete_session_retries+0x4a>
 800ce36:	7960      	ldrb	r0, [r4, #5]
 800ce38:	fab0 f080 	clz	r0, r0
 800ce3c:	0940      	lsrs	r0, r0, #5
 800ce3e:	b00f      	add	sp, #60	; 0x3c
 800ce40:	bd30      	pop	{r4, r5, pc}
 800ce42:	bf00      	nop

0800ce44 <uxr_create_session>:
 800ce44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce48:	f100 0b08 	add.w	fp, r0, #8
 800ce4c:	b0ab      	sub	sp, #172	; 0xac
 800ce4e:	4604      	mov	r4, r0
 800ce50:	4658      	mov	r0, fp
 800ce52:	f000 fa99 	bl	800d388 <uxr_reset_stream_storage>
 800ce56:	4620      	mov	r0, r4
 800ce58:	f000 fa00 	bl	800d25c <uxr_session_header_offset>
 800ce5c:	2300      	movs	r3, #0
 800ce5e:	9000      	str	r0, [sp, #0]
 800ce60:	221c      	movs	r2, #28
 800ce62:	a90b      	add	r1, sp, #44	; 0x2c
 800ce64:	a812      	add	r0, sp, #72	; 0x48
 800ce66:	f7fe ffcd 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800ce6a:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ce6c:	8a1a      	ldrh	r2, [r3, #16]
 800ce6e:	3a04      	subs	r2, #4
 800ce70:	b292      	uxth	r2, r2
 800ce72:	a912      	add	r1, sp, #72	; 0x48
 800ce74:	4620      	mov	r0, r4
 800ce76:	f000 f917 	bl	800d0a8 <uxr_buffer_create_session>
 800ce7a:	9912      	ldr	r1, [sp, #72]	; 0x48
 800ce7c:	4620      	mov	r0, r4
 800ce7e:	f000 f983 	bl	800d188 <uxr_stamp_create_session_header>
 800ce82:	a812      	add	r0, sp, #72	; 0x48
 800ce84:	f7fe fffc 	bl	800be80 <ucdr_buffer_length>
 800ce88:	23ff      	movs	r3, #255	; 0xff
 800ce8a:	7163      	strb	r3, [r4, #5]
 800ce8c:	230a      	movs	r3, #10
 800ce8e:	46da      	mov	sl, fp
 800ce90:	9303      	str	r3, [sp, #12]
 800ce92:	4683      	mov	fp, r0
 800ce94:	6f23      	ldr	r3, [r4, #112]	; 0x70
 800ce96:	465a      	mov	r2, fp
 800ce98:	e9d3 0500 	ldrd	r0, r5, [r3]
 800ce9c:	a90b      	add	r1, sp, #44	; 0x2c
 800ce9e:	47a8      	blx	r5
 800cea0:	f000 fb92 	bl	800d5c8 <uxr_millis>
 800cea4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cea8:	4605      	mov	r5, r0
 800ceaa:	e009      	b.n	800cec0 <uxr_create_session+0x7c>
 800ceac:	f000 fb8c 	bl	800d5c8 <uxr_millis>
 800ceb0:	1b40      	subs	r0, r0, r5
 800ceb2:	f5c0 737a 	rsb	r3, r0, #1000	; 0x3e8
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	7962      	ldrb	r2, [r4, #5]
 800ceba:	dd38      	ble.n	800cf2e <uxr_create_session+0xea>
 800cebc:	2aff      	cmp	r2, #255	; 0xff
 800cebe:	d13c      	bne.n	800cf3a <uxr_create_session+0xf6>
 800cec0:	6f22      	ldr	r2, [r4, #112]	; 0x70
 800cec2:	a907      	add	r1, sp, #28
 800cec4:	6896      	ldr	r6, [r2, #8]
 800cec6:	6810      	ldr	r0, [r2, #0]
 800cec8:	aa08      	add	r2, sp, #32
 800ceca:	47b0      	blx	r6
 800cecc:	2800      	cmp	r0, #0
 800cece:	d0ed      	beq.n	800ceac <uxr_create_session+0x68>
 800ced0:	e9dd 1207 	ldrd	r1, r2, [sp, #28]
 800ced4:	a81a      	add	r0, sp, #104	; 0x68
 800ced6:	f7fe ffa7 	bl	800be28 <ucdr_init_buffer>
 800ceda:	2600      	movs	r6, #0
 800cedc:	f10d 031a 	add.w	r3, sp, #26
 800cee0:	aa06      	add	r2, sp, #24
 800cee2:	a91a      	add	r1, sp, #104	; 0x68
 800cee4:	4620      	mov	r0, r4
 800cee6:	f88d 6018 	strb.w	r6, [sp, #24]
 800ceea:	f000 f975 	bl	800d1d8 <uxr_read_session_header>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d0dc      	beq.n	800ceac <uxr_create_session+0x68>
 800cef2:	4631      	mov	r1, r6
 800cef4:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800cef8:	f000 fa12 	bl	800d320 <uxr_stream_id_from_raw>
 800cefc:	f3c0 4607 	ubfx	r6, r0, #16, #8
 800cf00:	2e01      	cmp	r6, #1
 800cf02:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
 800cf06:	f8bd 901a 	ldrh.w	r9, [sp, #26]
 800cf0a:	f3c0 2707 	ubfx	r7, r0, #8, #8
 800cf0e:	d053      	beq.n	800cfb8 <uxr_create_session+0x174>
 800cf10:	2e02      	cmp	r6, #2
 800cf12:	d018      	beq.n	800cf46 <uxr_create_session+0x102>
 800cf14:	2e00      	cmp	r6, #0
 800cf16:	d1c9      	bne.n	800ceac <uxr_create_session+0x68>
 800cf18:	4631      	mov	r1, r6
 800cf1a:	4630      	mov	r0, r6
 800cf1c:	f000 fa00 	bl	800d320 <uxr_stream_id_from_raw>
 800cf20:	a91a      	add	r1, sp, #104	; 0x68
 800cf22:	4602      	mov	r2, r0
 800cf24:	900a      	str	r0, [sp, #40]	; 0x28
 800cf26:	4620      	mov	r0, r4
 800cf28:	f7ff fb54 	bl	800c5d4 <read_submessage_list>
 800cf2c:	e7be      	b.n	800ceac <uxr_create_session+0x68>
 800cf2e:	9b03      	ldr	r3, [sp, #12]
 800cf30:	3b01      	subs	r3, #1
 800cf32:	9303      	str	r3, [sp, #12]
 800cf34:	d001      	beq.n	800cf3a <uxr_create_session+0xf6>
 800cf36:	2aff      	cmp	r2, #255	; 0xff
 800cf38:	d0ac      	beq.n	800ce94 <uxr_create_session+0x50>
 800cf3a:	2a00      	cmp	r2, #0
 800cf3c:	d051      	beq.n	800cfe2 <uxr_create_session+0x19e>
 800cf3e:	2000      	movs	r0, #0
 800cf40:	b02b      	add	sp, #172	; 0xac
 800cf42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf46:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800cf4a:	9304      	str	r3, [sp, #16]
 800cf4c:	4639      	mov	r1, r7
 800cf4e:	4650      	mov	r0, sl
 800cf50:	f000 fad4 	bl	800d4fc <uxr_get_input_reliable_stream>
 800cf54:	4680      	mov	r8, r0
 800cf56:	b348      	cbz	r0, 800cfac <uxr_create_session+0x168>
 800cf58:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cf5a:	9205      	str	r2, [sp, #20]
 800cf5c:	a81a      	add	r0, sp, #104	; 0x68
 800cf5e:	f7fe ff93 	bl	800be88 <ucdr_buffer_remaining>
 800cf62:	4603      	mov	r3, r0
 800cf64:	f10d 0019 	add.w	r0, sp, #25
 800cf68:	9000      	str	r0, [sp, #0]
 800cf6a:	9a05      	ldr	r2, [sp, #20]
 800cf6c:	4649      	mov	r1, r9
 800cf6e:	4640      	mov	r0, r8
 800cf70:	f003 ffe2 	bl	8010f38 <uxr_receive_reliable_message>
 800cf74:	b1d0      	cbz	r0, 800cfac <uxr_create_session+0x168>
 800cf76:	f89d 3019 	ldrb.w	r3, [sp, #25]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d038      	beq.n	800cff0 <uxr_create_session+0x1ac>
 800cf7e:	9e04      	ldr	r6, [sp, #16]
 800cf80:	e00a      	b.n	800cf98 <uxr_create_session+0x154>
 800cf82:	f04f 0302 	mov.w	r3, #2
 800cf86:	f88d 6028 	strb.w	r6, [sp, #40]	; 0x28
 800cf8a:	f88d 7029 	strb.w	r7, [sp, #41]	; 0x29
 800cf8e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf92:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf94:	f7ff fb1e 	bl	800c5d4 <read_submessage_list>
 800cf98:	a922      	add	r1, sp, #136	; 0x88
 800cf9a:	2204      	movs	r2, #4
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	f004 f84b 	bl	8011038 <uxr_next_input_reliable_buffer_available>
 800cfa2:	4603      	mov	r3, r0
 800cfa4:	a922      	add	r1, sp, #136	; 0x88
 800cfa6:	4620      	mov	r0, r4
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1ea      	bne.n	800cf82 <uxr_create_session+0x13e>
 800cfac:	9904      	ldr	r1, [sp, #16]
 800cfae:	463a      	mov	r2, r7
 800cfb0:	4620      	mov	r0, r4
 800cfb2:	f7ff f98b 	bl	800c2cc <write_submessage_acknack.isra.0>
 800cfb6:	e779      	b.n	800ceac <uxr_create_session+0x68>
 800cfb8:	4639      	mov	r1, r7
 800cfba:	4650      	mov	r0, sl
 800cfbc:	f000 fa94 	bl	800d4e8 <uxr_get_input_best_effort_stream>
 800cfc0:	2800      	cmp	r0, #0
 800cfc2:	f43f af73 	beq.w	800ceac <uxr_create_session+0x68>
 800cfc6:	4649      	mov	r1, r9
 800cfc8:	f003 ff22 	bl	8010e10 <uxr_receive_best_effort_message>
 800cfcc:	2800      	cmp	r0, #0
 800cfce:	f43f af6d 	beq.w	800ceac <uxr_create_session+0x68>
 800cfd2:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800cfd6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cfd8:	a91a      	add	r1, sp, #104	; 0x68
 800cfda:	4620      	mov	r0, r4
 800cfdc:	f7ff fafa 	bl	800c5d4 <read_submessage_list>
 800cfe0:	e764      	b.n	800ceac <uxr_create_session+0x68>
 800cfe2:	4650      	mov	r0, sl
 800cfe4:	f000 f9d0 	bl	800d388 <uxr_reset_stream_storage>
 800cfe8:	2001      	movs	r0, #1
 800cfea:	b02b      	add	sp, #172	; 0xac
 800cfec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cff0:	f88d 602a 	strb.w	r6, [sp, #42]	; 0x2a
 800cff4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cff6:	a91a      	add	r1, sp, #104	; 0x68
 800cff8:	4620      	mov	r0, r4
 800cffa:	f7ff faeb 	bl	800c5d4 <read_submessage_list>
 800cffe:	e7be      	b.n	800cf7e <uxr_create_session+0x13a>

0800d000 <uxr_prepare_stream_to_write_submessage>:
 800d000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d004:	b082      	sub	sp, #8
 800d006:	4682      	mov	sl, r0
 800d008:	4610      	mov	r0, r2
 800d00a:	4615      	mov	r5, r2
 800d00c:	461e      	mov	r6, r3
 800d00e:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 800d012:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800d016:	9101      	str	r1, [sp, #4]
 800d018:	f3c1 2407 	ubfx	r4, r1, #8, #8
 800d01c:	f000 face 	bl	800d5bc <uxr_submessage_padding>
 800d020:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800d024:	f105 0904 	add.w	r9, r5, #4
 800d028:	2b01      	cmp	r3, #1
 800d02a:	4481      	add	r9, r0
 800d02c:	d01d      	beq.n	800d06a <uxr_prepare_stream_to_write_submessage+0x6a>
 800d02e:	2b02      	cmp	r3, #2
 800d030:	d116      	bne.n	800d060 <uxr_prepare_stream_to_write_submessage+0x60>
 800d032:	4621      	mov	r1, r4
 800d034:	f10a 0008 	add.w	r0, sl, #8
 800d038:	f000 fa4c 	bl	800d4d4 <uxr_get_output_reliable_stream>
 800d03c:	4604      	mov	r4, r0
 800d03e:	b158      	cbz	r0, 800d058 <uxr_prepare_stream_to_write_submessage+0x58>
 800d040:	4649      	mov	r1, r9
 800d042:	4632      	mov	r2, r6
 800d044:	f004 f9b4 	bl	80113b0 <uxr_prepare_reliable_buffer_to_write>
 800d048:	4604      	mov	r4, r0
 800d04a:	b12c      	cbz	r4, 800d058 <uxr_prepare_stream_to_write_submessage+0x58>
 800d04c:	4643      	mov	r3, r8
 800d04e:	b2aa      	uxth	r2, r5
 800d050:	4639      	mov	r1, r7
 800d052:	4630      	mov	r0, r6
 800d054:	f000 fa72 	bl	800d53c <uxr_buffer_submessage_header>
 800d058:	4620      	mov	r0, r4
 800d05a:	b002      	add	sp, #8
 800d05c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d060:	2400      	movs	r4, #0
 800d062:	4620      	mov	r0, r4
 800d064:	b002      	add	sp, #8
 800d066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d06a:	4621      	mov	r1, r4
 800d06c:	f10a 0008 	add.w	r0, sl, #8
 800d070:	f000 fa28 	bl	800d4c4 <uxr_get_output_best_effort_stream>
 800d074:	4604      	mov	r4, r0
 800d076:	2800      	cmp	r0, #0
 800d078:	d0ee      	beq.n	800d058 <uxr_prepare_stream_to_write_submessage+0x58>
 800d07a:	4649      	mov	r1, r9
 800d07c:	4632      	mov	r2, r6
 800d07e:	f004 f8c7 	bl	8011210 <uxr_prepare_best_effort_buffer_to_write>
 800d082:	4604      	mov	r4, r0
 800d084:	e7e1      	b.n	800d04a <uxr_prepare_stream_to_write_submessage+0x4a>
 800d086:	bf00      	nop

0800d088 <uxr_init_session_info>:
 800d088:	0e13      	lsrs	r3, r2, #24
 800d08a:	7043      	strb	r3, [r0, #1]
 800d08c:	f3c2 2307 	ubfx	r3, r2, #8, #8
 800d090:	f3c2 4c07 	ubfx	ip, r2, #16, #8
 800d094:	7001      	strb	r1, [r0, #0]
 800d096:	70c3      	strb	r3, [r0, #3]
 800d098:	2109      	movs	r1, #9
 800d09a:	23ff      	movs	r3, #255	; 0xff
 800d09c:	f880 c002 	strb.w	ip, [r0, #2]
 800d0a0:	7102      	strb	r2, [r0, #4]
 800d0a2:	80c1      	strh	r1, [r0, #6]
 800d0a4:	7143      	strb	r3, [r0, #5]
 800d0a6:	4770      	bx	lr

0800d0a8 <uxr_buffer_create_session>:
 800d0a8:	b530      	push	{r4, r5, lr}
 800d0aa:	b089      	sub	sp, #36	; 0x24
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	4d12      	ldr	r5, [pc, #72]	; (800d0f8 <uxr_buffer_create_session+0x50>)
 800d0b0:	9307      	str	r3, [sp, #28]
 800d0b2:	f8ad 201c 	strh.w	r2, [sp, #28]
 800d0b6:	2201      	movs	r2, #1
 800d0b8:	9301      	str	r3, [sp, #4]
 800d0ba:	80c2      	strh	r2, [r0, #6]
 800d0bc:	f88d 2004 	strb.w	r2, [sp, #4]
 800d0c0:	682a      	ldr	r2, [r5, #0]
 800d0c2:	9200      	str	r2, [sp, #0]
 800d0c4:	88aa      	ldrh	r2, [r5, #4]
 800d0c6:	f8ad 2006 	strh.w	r2, [sp, #6]
 800d0ca:	f8d0 2001 	ldr.w	r2, [r0, #1]
 800d0ce:	9202      	str	r2, [sp, #8]
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	7802      	ldrb	r2, [r0, #0]
 800d0d4:	9303      	str	r3, [sp, #12]
 800d0d6:	4619      	mov	r1, r3
 800d0d8:	f88d 200c 	strb.w	r2, [sp, #12]
 800d0dc:	4620      	mov	r0, r4
 800d0de:	2210      	movs	r2, #16
 800d0e0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800d0e4:	9306      	str	r3, [sp, #24]
 800d0e6:	f000 fa29 	bl	800d53c <uxr_buffer_submessage_header>
 800d0ea:	4669      	mov	r1, sp
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	f001 f981 	bl	800e3f4 <uxr_serialize_CREATE_CLIENT_Payload>
 800d0f2:	b009      	add	sp, #36	; 0x24
 800d0f4:	bd30      	pop	{r4, r5, pc}
 800d0f6:	bf00      	nop
 800d0f8:	08014460 	.word	0x08014460

0800d0fc <uxr_buffer_delete_session>:
 800d0fc:	b510      	push	{r4, lr}
 800d0fe:	4b0c      	ldr	r3, [pc, #48]	; (800d130 <uxr_buffer_delete_session+0x34>)
 800d100:	b082      	sub	sp, #8
 800d102:	f8b3 c008 	ldrh.w	ip, [r3, #8]
 800d106:	f8ad c006 	strh.w	ip, [sp, #6]
 800d10a:	460c      	mov	r4, r1
 800d10c:	2202      	movs	r2, #2
 800d10e:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d112:	80c2      	strh	r2, [r0, #6]
 800d114:	f8ad 3004 	strh.w	r3, [sp, #4]
 800d118:	2204      	movs	r2, #4
 800d11a:	2300      	movs	r3, #0
 800d11c:	2103      	movs	r1, #3
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 fa0c 	bl	800d53c <uxr_buffer_submessage_header>
 800d124:	a901      	add	r1, sp, #4
 800d126:	4620      	mov	r0, r4
 800d128:	f001 fa0a 	bl	800e540 <uxr_serialize_DELETE_Payload>
 800d12c:	b002      	add	sp, #8
 800d12e:	bd10      	pop	{r4, pc}
 800d130:	08014460 	.word	0x08014460

0800d134 <uxr_read_create_session_status>:
 800d134:	b510      	push	{r4, lr}
 800d136:	b088      	sub	sp, #32
 800d138:	4604      	mov	r4, r0
 800d13a:	4608      	mov	r0, r1
 800d13c:	a901      	add	r1, sp, #4
 800d13e:	f001 fa0f 	bl	800e560 <uxr_deserialize_STATUS_AGENT_Payload>
 800d142:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800d146:	7163      	strb	r3, [r4, #5]
 800d148:	b008      	add	sp, #32
 800d14a:	bd10      	pop	{r4, pc}

0800d14c <uxr_read_delete_session_status>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	4604      	mov	r4, r0
 800d150:	b084      	sub	sp, #16
 800d152:	4608      	mov	r0, r1
 800d154:	a902      	add	r1, sp, #8
 800d156:	f001 fa33 	bl	800e5c0 <uxr_deserialize_STATUS_Payload>
 800d15a:	88e3      	ldrh	r3, [r4, #6]
 800d15c:	2b02      	cmp	r3, #2
 800d15e:	d001      	beq.n	800d164 <uxr_read_delete_session_status+0x18>
 800d160:	b004      	add	sp, #16
 800d162:	bd10      	pop	{r4, pc}
 800d164:	f10d 000a 	add.w	r0, sp, #10
 800d168:	f7ff f836 	bl	800c1d8 <uxr_object_id_from_raw>
 800d16c:	f89d 2008 	ldrb.w	r2, [sp, #8]
 800d170:	f89d 3009 	ldrb.w	r3, [sp, #9]
 800d174:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d178:	b29b      	uxth	r3, r3
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	bf04      	itt	eq
 800d17e:	f89d 300c 	ldrbeq.w	r3, [sp, #12]
 800d182:	7163      	strbeq	r3, [r4, #5]
 800d184:	b004      	add	sp, #16
 800d186:	bd10      	pop	{r4, pc}

0800d188 <uxr_stamp_create_session_header>:
 800d188:	b510      	push	{r4, lr}
 800d18a:	2208      	movs	r2, #8
 800d18c:	b08a      	sub	sp, #40	; 0x28
 800d18e:	4604      	mov	r4, r0
 800d190:	eb0d 0002 	add.w	r0, sp, r2
 800d194:	f7fe fe48 	bl	800be28 <ucdr_init_buffer>
 800d198:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d19c:	9400      	str	r4, [sp, #0]
 800d19e:	2300      	movs	r3, #0
 800d1a0:	461a      	mov	r2, r3
 800d1a2:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800d1a6:	a802      	add	r0, sp, #8
 800d1a8:	f000 fbc2 	bl	800d930 <uxr_serialize_message_header>
 800d1ac:	b00a      	add	sp, #40	; 0x28
 800d1ae:	bd10      	pop	{r4, pc}

0800d1b0 <uxr_stamp_session_header>:
 800d1b0:	b530      	push	{r4, r5, lr}
 800d1b2:	b08d      	sub	sp, #52	; 0x34
 800d1b4:	4604      	mov	r4, r0
 800d1b6:	460d      	mov	r5, r1
 800d1b8:	9203      	str	r2, [sp, #12]
 800d1ba:	4619      	mov	r1, r3
 800d1bc:	a804      	add	r0, sp, #16
 800d1be:	2208      	movs	r2, #8
 800d1c0:	f7fe fe32 	bl	800be28 <ucdr_init_buffer>
 800d1c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1c8:	9b03      	ldr	r3, [sp, #12]
 800d1ca:	9400      	str	r4, [sp, #0]
 800d1cc:	462a      	mov	r2, r5
 800d1ce:	a804      	add	r0, sp, #16
 800d1d0:	f000 fbae 	bl	800d930 <uxr_serialize_message_header>
 800d1d4:	b00d      	add	sp, #52	; 0x34
 800d1d6:	bd30      	pop	{r4, r5, pc}

0800d1d8 <uxr_read_session_header>:
 800d1d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1dc:	4607      	mov	r7, r0
 800d1de:	b084      	sub	sp, #16
 800d1e0:	4608      	mov	r0, r1
 800d1e2:	460c      	mov	r4, r1
 800d1e4:	4615      	mov	r5, r2
 800d1e6:	461e      	mov	r6, r3
 800d1e8:	f7fe fe4e 	bl	800be88 <ucdr_buffer_remaining>
 800d1ec:	2808      	cmp	r0, #8
 800d1ee:	d803      	bhi.n	800d1f8 <uxr_read_session_header+0x20>
 800d1f0:	2000      	movs	r0, #0
 800d1f2:	b004      	add	sp, #16
 800d1f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1f8:	f10d 080c 	add.w	r8, sp, #12
 800d1fc:	4633      	mov	r3, r6
 800d1fe:	462a      	mov	r2, r5
 800d200:	f8cd 8000 	str.w	r8, [sp]
 800d204:	4620      	mov	r0, r4
 800d206:	f10d 010b 	add.w	r1, sp, #11
 800d20a:	f000 fbaf 	bl	800d96c <uxr_deserialize_message_header>
 800d20e:	783a      	ldrb	r2, [r7, #0]
 800d210:	f89d 300b 	ldrb.w	r3, [sp, #11]
 800d214:	4293      	cmp	r3, r2
 800d216:	d1eb      	bne.n	800d1f0 <uxr_read_session_header+0x18>
 800d218:	061b      	lsls	r3, r3, #24
 800d21a:	d41c      	bmi.n	800d256 <uxr_read_session_header+0x7e>
 800d21c:	f89d 200c 	ldrb.w	r2, [sp, #12]
 800d220:	787b      	ldrb	r3, [r7, #1]
 800d222:	429a      	cmp	r2, r3
 800d224:	d003      	beq.n	800d22e <uxr_read_session_header+0x56>
 800d226:	2001      	movs	r0, #1
 800d228:	f080 0001 	eor.w	r0, r0, #1
 800d22c:	e7e1      	b.n	800d1f2 <uxr_read_session_header+0x1a>
 800d22e:	f89d 200d 	ldrb.w	r2, [sp, #13]
 800d232:	78bb      	ldrb	r3, [r7, #2]
 800d234:	429a      	cmp	r2, r3
 800d236:	f107 0102 	add.w	r1, r7, #2
 800d23a:	d1f4      	bne.n	800d226 <uxr_read_session_header+0x4e>
 800d23c:	f89d 200e 	ldrb.w	r2, [sp, #14]
 800d240:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800d244:	429a      	cmp	r2, r3
 800d246:	d1ee      	bne.n	800d226 <uxr_read_session_header+0x4e>
 800d248:	f89d 200f 	ldrb.w	r2, [sp, #15]
 800d24c:	784b      	ldrb	r3, [r1, #1]
 800d24e:	429a      	cmp	r2, r3
 800d250:	d1e9      	bne.n	800d226 <uxr_read_session_header+0x4e>
 800d252:	2000      	movs	r0, #0
 800d254:	e7e8      	b.n	800d228 <uxr_read_session_header+0x50>
 800d256:	2001      	movs	r0, #1
 800d258:	e7cb      	b.n	800d1f2 <uxr_read_session_header+0x1a>
 800d25a:	bf00      	nop

0800d25c <uxr_session_header_offset>:
 800d25c:	f990 3000 	ldrsb.w	r3, [r0]
 800d260:	2b00      	cmp	r3, #0
 800d262:	bfac      	ite	ge
 800d264:	2008      	movge	r0, #8
 800d266:	2004      	movlt	r0, #4
 800d268:	4770      	bx	lr
 800d26a:	bf00      	nop

0800d26c <uxr_init_base_object_request>:
 800d26c:	b510      	push	{r4, lr}
 800d26e:	88c3      	ldrh	r3, [r0, #6]
 800d270:	b082      	sub	sp, #8
 800d272:	f64f 74f4 	movw	r4, #65524	; 0xfff4
 800d276:	9101      	str	r1, [sp, #4]
 800d278:	f1a3 010a 	sub.w	r1, r3, #10
 800d27c:	b289      	uxth	r1, r1
 800d27e:	42a1      	cmp	r1, r4
 800d280:	d80e      	bhi.n	800d2a0 <uxr_init_base_object_request+0x34>
 800d282:	3301      	adds	r3, #1
 800d284:	b29c      	uxth	r4, r3
 800d286:	f3c3 2107 	ubfx	r1, r3, #8, #8
 800d28a:	b2db      	uxtb	r3, r3
 800d28c:	80c4      	strh	r4, [r0, #6]
 800d28e:	9801      	ldr	r0, [sp, #4]
 800d290:	7011      	strb	r1, [r2, #0]
 800d292:	7053      	strb	r3, [r2, #1]
 800d294:	1c91      	adds	r1, r2, #2
 800d296:	f7fe ffb3 	bl	800c200 <uxr_object_id_to_raw>
 800d29a:	4620      	mov	r0, r4
 800d29c:	b002      	add	sp, #8
 800d29e:	bd10      	pop	{r4, pc}
 800d2a0:	230a      	movs	r3, #10
 800d2a2:	2100      	movs	r1, #0
 800d2a4:	461c      	mov	r4, r3
 800d2a6:	e7f1      	b.n	800d28c <uxr_init_base_object_request+0x20>

0800d2a8 <uxr_parse_base_object_request>:
 800d2a8:	b570      	push	{r4, r5, r6, lr}
 800d2aa:	4604      	mov	r4, r0
 800d2ac:	3002      	adds	r0, #2
 800d2ae:	460d      	mov	r5, r1
 800d2b0:	4616      	mov	r6, r2
 800d2b2:	f7fe ff91 	bl	800c1d8 <uxr_object_id_from_raw>
 800d2b6:	f3c0 430f 	ubfx	r3, r0, #16, #16
 800d2ba:	8028      	strh	r0, [r5, #0]
 800d2bc:	806b      	strh	r3, [r5, #2]
 800d2be:	7822      	ldrb	r2, [r4, #0]
 800d2c0:	7863      	ldrb	r3, [r4, #1]
 800d2c2:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800d2c6:	8033      	strh	r3, [r6, #0]
 800d2c8:	bd70      	pop	{r4, r5, r6, pc}
 800d2ca:	bf00      	nop

0800d2cc <uxr_stream_id>:
 800d2cc:	2901      	cmp	r1, #1
 800d2ce:	b082      	sub	sp, #8
 800d2d0:	d01d      	beq.n	800d30e <uxr_stream_id+0x42>
 800d2d2:	2902      	cmp	r1, #2
 800d2d4:	f04f 0c00 	mov.w	ip, #0
 800d2d8:	d01e      	beq.n	800d318 <uxr_stream_id+0x4c>
 800d2da:	2300      	movs	r3, #0
 800d2dc:	f36c 0307 	bfi	r3, ip, #0, #8
 800d2e0:	f360 230f 	bfi	r3, r0, #8, #8
 800d2e4:	f361 4317 	bfi	r3, r1, #16, #8
 800d2e8:	f362 631f 	bfi	r3, r2, #24, #8
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	2000      	movs	r0, #0
 800d2f0:	f362 0007 	bfi	r0, r2, #0, #8
 800d2f4:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d2f8:	f362 200f 	bfi	r0, r2, #8, #8
 800d2fc:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d300:	f362 4017 	bfi	r0, r2, #16, #8
 800d304:	0e1b      	lsrs	r3, r3, #24
 800d306:	f363 601f 	bfi	r0, r3, #24, #8
 800d30a:	b002      	add	sp, #8
 800d30c:	4770      	bx	lr
 800d30e:	f100 0c01 	add.w	ip, r0, #1
 800d312:	fa5f fc8c 	uxtb.w	ip, ip
 800d316:	e7e0      	b.n	800d2da <uxr_stream_id+0xe>
 800d318:	f080 0c80 	eor.w	ip, r0, #128	; 0x80
 800d31c:	e7dd      	b.n	800d2da <uxr_stream_id+0xe>
 800d31e:	bf00      	nop

0800d320 <uxr_stream_id_from_raw>:
 800d320:	b082      	sub	sp, #8
 800d322:	b130      	cbz	r0, 800d332 <uxr_stream_id_from_raw+0x12>
 800d324:	0603      	lsls	r3, r0, #24
 800d326:	d420      	bmi.n	800d36a <uxr_stream_id_from_raw+0x4a>
 800d328:	1e42      	subs	r2, r0, #1
 800d32a:	b2d2      	uxtb	r2, r2
 800d32c:	f04f 0c01 	mov.w	ip, #1
 800d330:	e001      	b.n	800d336 <uxr_stream_id_from_raw+0x16>
 800d332:	4684      	mov	ip, r0
 800d334:	4602      	mov	r2, r0
 800d336:	2300      	movs	r3, #0
 800d338:	f360 0307 	bfi	r3, r0, #0, #8
 800d33c:	f362 230f 	bfi	r3, r2, #8, #8
 800d340:	f36c 4317 	bfi	r3, ip, #16, #8
 800d344:	f361 631f 	bfi	r3, r1, #24, #8
 800d348:	b2da      	uxtb	r2, r3
 800d34a:	2000      	movs	r0, #0
 800d34c:	f362 0007 	bfi	r0, r2, #0, #8
 800d350:	f3c3 2207 	ubfx	r2, r3, #8, #8
 800d354:	f362 200f 	bfi	r0, r2, #8, #8
 800d358:	f3c3 4207 	ubfx	r2, r3, #16, #8
 800d35c:	f362 4017 	bfi	r0, r2, #16, #8
 800d360:	0e1b      	lsrs	r3, r3, #24
 800d362:	f363 601f 	bfi	r0, r3, #24, #8
 800d366:	b002      	add	sp, #8
 800d368:	4770      	bx	lr
 800d36a:	f080 0280 	eor.w	r2, r0, #128	; 0x80
 800d36e:	f04f 0c02 	mov.w	ip, #2
 800d372:	e7e0      	b.n	800d336 <uxr_stream_id_from_raw+0x16>

0800d374 <uxr_init_stream_storage>:
 800d374:	2300      	movs	r3, #0
 800d376:	7403      	strb	r3, [r0, #16]
 800d378:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 800d37c:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
 800d380:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
 800d384:	4770      	bx	lr
 800d386:	bf00      	nop

0800d388 <uxr_reset_stream_storage>:
 800d388:	b570      	push	{r4, r5, r6, lr}
 800d38a:	7c03      	ldrb	r3, [r0, #16]
 800d38c:	4604      	mov	r4, r0
 800d38e:	b153      	cbz	r3, 800d3a6 <uxr_reset_stream_storage+0x1e>
 800d390:	4606      	mov	r6, r0
 800d392:	2500      	movs	r5, #0
 800d394:	4630      	mov	r0, r6
 800d396:	f003 ff35 	bl	8011204 <uxr_reset_output_best_effort_stream>
 800d39a:	7c23      	ldrb	r3, [r4, #16]
 800d39c:	3501      	adds	r5, #1
 800d39e:	42ab      	cmp	r3, r5
 800d3a0:	f106 0610 	add.w	r6, r6, #16
 800d3a4:	d8f6      	bhi.n	800d394 <uxr_reset_stream_storage+0xc>
 800d3a6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d3aa:	b163      	cbz	r3, 800d3c6 <uxr_reset_stream_storage+0x3e>
 800d3ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800d3b0:	2500      	movs	r5, #0
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f003 fd28 	bl	8010e08 <uxr_reset_input_best_effort_stream>
 800d3b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800d3bc:	3501      	adds	r5, #1
 800d3be:	42ab      	cmp	r3, r5
 800d3c0:	f106 0602 	add.w	r6, r6, #2
 800d3c4:	d8f5      	bhi.n	800d3b2 <uxr_reset_stream_storage+0x2a>
 800d3c6:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d3ca:	b163      	cbz	r3, 800d3e6 <uxr_reset_stream_storage+0x5e>
 800d3cc:	f104 0618 	add.w	r6, r4, #24
 800d3d0:	2500      	movs	r5, #0
 800d3d2:	4630      	mov	r0, r6
 800d3d4:	f003 ffc2 	bl	801135c <uxr_reset_output_reliable_stream>
 800d3d8:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800d3dc:	3501      	adds	r5, #1
 800d3de:	42ab      	cmp	r3, r5
 800d3e0:	f106 0628 	add.w	r6, r6, #40	; 0x28
 800d3e4:	d8f5      	bhi.n	800d3d2 <uxr_reset_stream_storage+0x4a>
 800d3e6:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800d3ea:	b163      	cbz	r3, 800d406 <uxr_reset_stream_storage+0x7e>
 800d3ec:	f104 0648 	add.w	r6, r4, #72	; 0x48
 800d3f0:	2500      	movs	r5, #0
 800d3f2:	4630      	mov	r0, r6
 800d3f4:	f003 fd7c 	bl	8010ef0 <uxr_reset_input_reliable_stream>
 800d3f8:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
 800d3fc:	3501      	adds	r5, #1
 800d3fe:	42ab      	cmp	r3, r5
 800d400:	f106 0618 	add.w	r6, r6, #24
 800d404:	d8f5      	bhi.n	800d3f2 <uxr_reset_stream_storage+0x6a>
 800d406:	bd70      	pop	{r4, r5, r6, pc}

0800d408 <uxr_add_output_best_effort_buffer>:
 800d408:	b510      	push	{r4, lr}
 800d40a:	7c04      	ldrb	r4, [r0, #16]
 800d40c:	f104 0c01 	add.w	ip, r4, #1
 800d410:	b082      	sub	sp, #8
 800d412:	f880 c010 	strb.w	ip, [r0, #16]
 800d416:	eb00 1004 	add.w	r0, r0, r4, lsl #4
 800d41a:	f003 fee9 	bl	80111f0 <uxr_init_output_best_effort_stream>
 800d41e:	2201      	movs	r2, #1
 800d420:	4611      	mov	r1, r2
 800d422:	4620      	mov	r0, r4
 800d424:	b002      	add	sp, #8
 800d426:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d42a:	f7ff bf4f 	b.w	800d2cc <uxr_stream_id>
 800d42e:	bf00      	nop

0800d430 <uxr_add_output_reliable_buffer>:
 800d430:	b510      	push	{r4, lr}
 800d432:	b084      	sub	sp, #16
 800d434:	4684      	mov	ip, r0
 800d436:	f89d 0018 	ldrb.w	r0, [sp, #24]
 800d43a:	9000      	str	r0, [sp, #0]
 800d43c:	f89c 4040 	ldrb.w	r4, [ip, #64]	; 0x40
 800d440:	2028      	movs	r0, #40	; 0x28
 800d442:	fb00 c004 	mla	r0, r0, r4, ip
 800d446:	f104 0e01 	add.w	lr, r4, #1
 800d44a:	3018      	adds	r0, #24
 800d44c:	f88c e040 	strb.w	lr, [ip, #64]	; 0x40
 800d450:	f003 ff4c 	bl	80112ec <uxr_init_output_reliable_stream>
 800d454:	2201      	movs	r2, #1
 800d456:	2102      	movs	r1, #2
 800d458:	4620      	mov	r0, r4
 800d45a:	b004      	add	sp, #16
 800d45c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d460:	f7ff bf34 	b.w	800d2cc <uxr_stream_id>

0800d464 <uxr_add_input_best_effort_buffer>:
 800d464:	b510      	push	{r4, lr}
 800d466:	f890 4044 	ldrb.w	r4, [r0, #68]	; 0x44
 800d46a:	4603      	mov	r3, r0
 800d46c:	1c62      	adds	r2, r4, #1
 800d46e:	f104 0021 	add.w	r0, r4, #33	; 0x21
 800d472:	b082      	sub	sp, #8
 800d474:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 800d478:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d47c:	f003 fcc0 	bl	8010e00 <uxr_init_input_best_effort_stream>
 800d480:	2200      	movs	r2, #0
 800d482:	2101      	movs	r1, #1
 800d484:	4620      	mov	r0, r4
 800d486:	b002      	add	sp, #8
 800d488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d48c:	f7ff bf1e 	b.w	800d2cc <uxr_stream_id>

0800d490 <uxr_add_input_reliable_buffer>:
 800d490:	b510      	push	{r4, lr}
 800d492:	b084      	sub	sp, #16
 800d494:	4684      	mov	ip, r0
 800d496:	9806      	ldr	r0, [sp, #24]
 800d498:	9000      	str	r0, [sp, #0]
 800d49a:	f89c 4060 	ldrb.w	r4, [ip, #96]	; 0x60
 800d49e:	2018      	movs	r0, #24
 800d4a0:	fb00 c004 	mla	r0, r0, r4, ip
 800d4a4:	f104 0e01 	add.w	lr, r4, #1
 800d4a8:	3048      	adds	r0, #72	; 0x48
 800d4aa:	f88c e060 	strb.w	lr, [ip, #96]	; 0x60
 800d4ae:	f003 fcf3 	bl	8010e98 <uxr_init_input_reliable_stream>
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	2102      	movs	r1, #2
 800d4b6:	4620      	mov	r0, r4
 800d4b8:	b004      	add	sp, #16
 800d4ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d4be:	f7ff bf05 	b.w	800d2cc <uxr_stream_id>
 800d4c2:	bf00      	nop

0800d4c4 <uxr_get_output_best_effort_stream>:
 800d4c4:	7c03      	ldrb	r3, [r0, #16]
 800d4c6:	428b      	cmp	r3, r1
 800d4c8:	bf8c      	ite	hi
 800d4ca:	eb00 1001 	addhi.w	r0, r0, r1, lsl #4
 800d4ce:	2000      	movls	r0, #0
 800d4d0:	4770      	bx	lr
 800d4d2:	bf00      	nop

0800d4d4 <uxr_get_output_reliable_stream>:
 800d4d4:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d4d8:	428b      	cmp	r3, r1
 800d4da:	bf83      	ittte	hi
 800d4dc:	2328      	movhi	r3, #40	; 0x28
 800d4de:	fb03 0001 	mlahi	r0, r3, r1, r0
 800d4e2:	3018      	addhi	r0, #24
 800d4e4:	2000      	movls	r0, #0
 800d4e6:	4770      	bx	lr

0800d4e8 <uxr_get_input_best_effort_stream>:
 800d4e8:	f890 3044 	ldrb.w	r3, [r0, #68]	; 0x44
 800d4ec:	428b      	cmp	r3, r1
 800d4ee:	bf86      	itte	hi
 800d4f0:	3121      	addhi	r1, #33	; 0x21
 800d4f2:	eb00 0041 	addhi.w	r0, r0, r1, lsl #1
 800d4f6:	2000      	movls	r0, #0
 800d4f8:	4770      	bx	lr
 800d4fa:	bf00      	nop

0800d4fc <uxr_get_input_reliable_stream>:
 800d4fc:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
 800d500:	428b      	cmp	r3, r1
 800d502:	bf83      	ittte	hi
 800d504:	2318      	movhi	r3, #24
 800d506:	fb03 0001 	mlahi	r0, r3, r1, r0
 800d50a:	3048      	addhi	r0, #72	; 0x48
 800d50c:	2000      	movls	r0, #0
 800d50e:	4770      	bx	lr

0800d510 <uxr_output_streams_confirmed>:
 800d510:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800d514:	b183      	cbz	r3, 800d538 <uxr_output_streams_confirmed+0x28>
 800d516:	b570      	push	{r4, r5, r6, lr}
 800d518:	4606      	mov	r6, r0
 800d51a:	f100 0518 	add.w	r5, r0, #24
 800d51e:	2400      	movs	r4, #0
 800d520:	e001      	b.n	800d526 <uxr_output_streams_confirmed+0x16>
 800d522:	3528      	adds	r5, #40	; 0x28
 800d524:	b138      	cbz	r0, 800d536 <uxr_output_streams_confirmed+0x26>
 800d526:	4628      	mov	r0, r5
 800d528:	f004 f988 	bl	801183c <uxr_is_output_up_to_date>
 800d52c:	f896 3040 	ldrb.w	r3, [r6, #64]	; 0x40
 800d530:	3401      	adds	r4, #1
 800d532:	42a3      	cmp	r3, r4
 800d534:	d8f5      	bhi.n	800d522 <uxr_output_streams_confirmed+0x12>
 800d536:	bd70      	pop	{r4, r5, r6, pc}
 800d538:	2001      	movs	r0, #1
 800d53a:	4770      	bx	lr

0800d53c <uxr_buffer_submessage_header>:
 800d53c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d53e:	4604      	mov	r4, r0
 800d540:	460e      	mov	r6, r1
 800d542:	2104      	movs	r1, #4
 800d544:	4615      	mov	r5, r2
 800d546:	461f      	mov	r7, r3
 800d548:	f7fe fc88 	bl	800be5c <ucdr_align_to>
 800d54c:	2301      	movs	r3, #1
 800d54e:	ea47 0203 	orr.w	r2, r7, r3
 800d552:	4631      	mov	r1, r6
 800d554:	7523      	strb	r3, [r4, #20]
 800d556:	4620      	mov	r0, r4
 800d558:	462b      	mov	r3, r5
 800d55a:	f000 fa27 	bl	800d9ac <uxr_serialize_submessage_header>
 800d55e:	4620      	mov	r0, r4
 800d560:	f7fe fc92 	bl	800be88 <ucdr_buffer_remaining>
 800d564:	42a8      	cmp	r0, r5
 800d566:	bf34      	ite	cc
 800d568:	2000      	movcc	r0, #0
 800d56a:	2001      	movcs	r0, #1
 800d56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d56e:	bf00      	nop

0800d570 <uxr_read_submessage_header>:
 800d570:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d574:	4604      	mov	r4, r0
 800d576:	460d      	mov	r5, r1
 800d578:	2104      	movs	r1, #4
 800d57a:	4616      	mov	r6, r2
 800d57c:	4698      	mov	r8, r3
 800d57e:	f7fe fc6d 	bl	800be5c <ucdr_align_to>
 800d582:	4620      	mov	r0, r4
 800d584:	f7fe fc80 	bl	800be88 <ucdr_buffer_remaining>
 800d588:	2803      	cmp	r0, #3
 800d58a:	bf8c      	ite	hi
 800d58c:	2701      	movhi	r7, #1
 800d58e:	2700      	movls	r7, #0
 800d590:	d802      	bhi.n	800d598 <uxr_read_submessage_header+0x28>
 800d592:	4638      	mov	r0, r7
 800d594:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d598:	4633      	mov	r3, r6
 800d59a:	4642      	mov	r2, r8
 800d59c:	4620      	mov	r0, r4
 800d59e:	4629      	mov	r1, r5
 800d5a0:	f000 fa18 	bl	800d9d4 <uxr_deserialize_submessage_header>
 800d5a4:	f898 3000 	ldrb.w	r3, [r8]
 800d5a8:	f003 0201 	and.w	r2, r3, #1
 800d5ac:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800d5b0:	f888 3000 	strb.w	r3, [r8]
 800d5b4:	7522      	strb	r2, [r4, #20]
 800d5b6:	4638      	mov	r0, r7
 800d5b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800d5bc <uxr_submessage_padding>:
 800d5bc:	f010 0003 	ands.w	r0, r0, #3
 800d5c0:	bf18      	it	ne
 800d5c2:	f1c0 0004 	rsbne	r0, r0, #4
 800d5c6:	4770      	bx	lr

0800d5c8 <uxr_millis>:
 800d5c8:	b510      	push	{r4, lr}
 800d5ca:	b084      	sub	sp, #16
 800d5cc:	4669      	mov	r1, sp
 800d5ce:	2001      	movs	r0, #1
 800d5d0:	f7f4 fc1e 	bl	8001e10 <clock_gettime>
 800d5d4:	e89d 0015 	ldmia.w	sp, {r0, r2, r4}
 800d5d8:	4906      	ldr	r1, [pc, #24]	; (800d5f4 <uxr_millis+0x2c>)
 800d5da:	fba0 0301 	umull	r0, r3, r0, r1
 800d5de:	1900      	adds	r0, r0, r4
 800d5e0:	fb01 3102 	mla	r1, r1, r2, r3
 800d5e4:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800d5e8:	4a03      	ldr	r2, [pc, #12]	; (800d5f8 <uxr_millis+0x30>)
 800d5ea:	2300      	movs	r3, #0
 800d5ec:	f7f2 fe58 	bl	80002a0 <__aeabi_ldivmod>
 800d5f0:	b004      	add	sp, #16
 800d5f2:	bd10      	pop	{r4, pc}
 800d5f4:	3b9aca00 	.word	0x3b9aca00
 800d5f8:	000f4240 	.word	0x000f4240

0800d5fc <uxr_nanos>:
 800d5fc:	b510      	push	{r4, lr}
 800d5fe:	b084      	sub	sp, #16
 800d600:	4669      	mov	r1, sp
 800d602:	2001      	movs	r0, #1
 800d604:	f7f4 fc04 	bl	8001e10 <clock_gettime>
 800d608:	4a06      	ldr	r2, [pc, #24]	; (800d624 <uxr_nanos+0x28>)
 800d60a:	9800      	ldr	r0, [sp, #0]
 800d60c:	9902      	ldr	r1, [sp, #8]
 800d60e:	9c01      	ldr	r4, [sp, #4]
 800d610:	fba0 0302 	umull	r0, r3, r0, r2
 800d614:	1840      	adds	r0, r0, r1
 800d616:	fb02 3304 	mla	r3, r2, r4, r3
 800d61a:	eb43 71e1 	adc.w	r1, r3, r1, asr #31
 800d61e:	b004      	add	sp, #16
 800d620:	bd10      	pop	{r4, pc}
 800d622:	bf00      	nop
 800d624:	3b9aca00 	.word	0x3b9aca00

0800d628 <on_full_output_buffer_fragmented>:
 800d628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d62c:	460c      	mov	r4, r1
 800d62e:	b08a      	sub	sp, #40	; 0x28
 800d630:	f891 10c1 	ldrb.w	r1, [r1, #193]	; 0xc1
 800d634:	4606      	mov	r6, r0
 800d636:	f104 0008 	add.w	r0, r4, #8
 800d63a:	f7ff ff4b 	bl	800d4d4 <uxr_get_output_reliable_stream>
 800d63e:	4605      	mov	r5, r0
 800d640:	f004 f906 	bl	8011850 <get_available_free_slots>
 800d644:	b968      	cbnz	r0, 800d662 <on_full_output_buffer_fragmented+0x3a>
 800d646:	e9d4 312e 	ldrd	r3, r1, [r4, #184]	; 0xb8
 800d64a:	4620      	mov	r0, r4
 800d64c:	4798      	blx	r3
 800d64e:	b918      	cbnz	r0, 800d658 <on_full_output_buffer_fragmented+0x30>
 800d650:	2001      	movs	r0, #1
 800d652:	b00a      	add	sp, #40	; 0x28
 800d654:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d658:	4628      	mov	r0, r5
 800d65a:	f004 f8f9 	bl	8011850 <get_available_free_slots>
 800d65e:	2800      	cmp	r0, #0
 800d660:	d0f6      	beq.n	800d650 <on_full_output_buffer_fragmented+0x28>
 800d662:	8929      	ldrh	r1, [r5, #8]
 800d664:	89eb      	ldrh	r3, [r5, #14]
 800d666:	7b28      	ldrb	r0, [r5, #12]
 800d668:	686a      	ldr	r2, [r5, #4]
 800d66a:	fbb2 f8f1 	udiv	r8, r2, r1
 800d66e:	fbb3 f2f1 	udiv	r2, r3, r1
 800d672:	fb01 3112 	mls	r1, r1, r2, r3
 800d676:	f5c0 407f 	rsb	r0, r0, #65280	; 0xff00
 800d67a:	b289      	uxth	r1, r1
 800d67c:	fb08 f101 	mul.w	r1, r8, r1
 800d680:	30fc      	adds	r0, #252	; 0xfc
 800d682:	f1a8 0804 	sub.w	r8, r8, #4
 800d686:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
 800d68a:	4440      	add	r0, r8
 800d68c:	b287      	uxth	r7, r0
 800d68e:	1bdb      	subs	r3, r3, r7
 800d690:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
 800d694:	682b      	ldr	r3, [r5, #0]
 800d696:	3104      	adds	r1, #4
 800d698:	4419      	add	r1, r3
 800d69a:	4642      	mov	r2, r8
 800d69c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d6a0:	9300      	str	r3, [sp, #0]
 800d6a2:	a802      	add	r0, sp, #8
 800d6a4:	2300      	movs	r3, #0
 800d6a6:	f7fe fbad 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800d6aa:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800d6ae:	f102 0308 	add.w	r3, r2, #8
 800d6b2:	4543      	cmp	r3, r8
 800d6b4:	d928      	bls.n	800d708 <on_full_output_buffer_fragmented+0xe0>
 800d6b6:	463a      	mov	r2, r7
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	210d      	movs	r1, #13
 800d6bc:	a802      	add	r0, sp, #8
 800d6be:	f7ff ff3d 	bl	800d53c <uxr_buffer_submessage_header>
 800d6c2:	8929      	ldrh	r1, [r5, #8]
 800d6c4:	89eb      	ldrh	r3, [r5, #14]
 800d6c6:	fbb3 f2f1 	udiv	r2, r3, r1
 800d6ca:	fb01 3312 	mls	r3, r1, r2, r3
 800d6ce:	b29b      	uxth	r3, r3
 800d6d0:	686a      	ldr	r2, [r5, #4]
 800d6d2:	fbb2 f2f1 	udiv	r2, r2, r1
 800d6d6:	fb02 f303 	mul.w	r3, r2, r3
 800d6da:	682a      	ldr	r2, [r5, #0]
 800d6dc:	f842 8003 	str.w	r8, [r2, r3]
 800d6e0:	89e8      	ldrh	r0, [r5, #14]
 800d6e2:	2101      	movs	r1, #1
 800d6e4:	f004 f9ca 	bl	8011a7c <uxr_seq_num_add>
 800d6e8:	9904      	ldr	r1, [sp, #16]
 800d6ea:	9a03      	ldr	r2, [sp, #12]
 800d6ec:	81e8      	strh	r0, [r5, #14]
 800d6ee:	1a52      	subs	r2, r2, r1
 800d6f0:	4630      	mov	r0, r6
 800d6f2:	f7fe fb99 	bl	800be28 <ucdr_init_buffer>
 800d6f6:	4630      	mov	r0, r6
 800d6f8:	490f      	ldr	r1, [pc, #60]	; (800d738 <on_full_output_buffer_fragmented+0x110>)
 800d6fa:	4622      	mov	r2, r4
 800d6fc:	f7fe fb68 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 800d700:	2000      	movs	r0, #0
 800d702:	b00a      	add	sp, #40	; 0x28
 800d704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d708:	b292      	uxth	r2, r2
 800d70a:	2302      	movs	r3, #2
 800d70c:	210d      	movs	r1, #13
 800d70e:	a802      	add	r0, sp, #8
 800d710:	f7ff ff14 	bl	800d53c <uxr_buffer_submessage_header>
 800d714:	8928      	ldrh	r0, [r5, #8]
 800d716:	89eb      	ldrh	r3, [r5, #14]
 800d718:	fbb3 f1f0 	udiv	r1, r3, r0
 800d71c:	fb00 3311 	mls	r3, r0, r1, r3
 800d720:	f8d4 20c4 	ldr.w	r2, [r4, #196]	; 0xc4
 800d724:	6869      	ldr	r1, [r5, #4]
 800d726:	fbb1 f1f0 	udiv	r1, r1, r0
 800d72a:	b29b      	uxth	r3, r3
 800d72c:	fb01 f303 	mul.w	r3, r1, r3
 800d730:	6829      	ldr	r1, [r5, #0]
 800d732:	3208      	adds	r2, #8
 800d734:	50ca      	str	r2, [r1, r3]
 800d736:	e7d3      	b.n	800d6e0 <on_full_output_buffer_fragmented+0xb8>
 800d738:	0800d629 	.word	0x0800d629

0800d73c <uxr_prepare_output_stream>:
 800d73c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d73e:	b087      	sub	sp, #28
 800d740:	2707      	movs	r7, #7
 800d742:	9202      	str	r2, [sp, #8]
 800d744:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d746:	9103      	str	r1, [sp, #12]
 800d748:	2500      	movs	r5, #0
 800d74a:	3204      	adds	r2, #4
 800d74c:	e9cd 7500 	strd	r7, r5, [sp]
 800d750:	461c      	mov	r4, r3
 800d752:	4606      	mov	r6, r0
 800d754:	f7ff fc54 	bl	800d000 <uxr_prepare_stream_to_write_submessage>
 800d758:	f080 0201 	eor.w	r2, r0, #1
 800d75c:	b2d2      	uxtb	r2, r2
 800d75e:	75a2      	strb	r2, [r4, #22]
 800d760:	b112      	cbz	r2, 800d768 <uxr_prepare_output_stream+0x2c>
 800d762:	4628      	mov	r0, r5
 800d764:	b007      	add	sp, #28
 800d766:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d768:	aa05      	add	r2, sp, #20
 800d76a:	9902      	ldr	r1, [sp, #8]
 800d76c:	4630      	mov	r0, r6
 800d76e:	f7ff fd7d 	bl	800d26c <uxr_init_base_object_request>
 800d772:	a905      	add	r1, sp, #20
 800d774:	4605      	mov	r5, r0
 800d776:	4620      	mov	r0, r4
 800d778:	f000 ffa0 	bl	800e6bc <uxr_serialize_WRITE_DATA_Payload_Data>
 800d77c:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
 800d780:	69a6      	ldr	r6, [r4, #24]
 800d782:	69e7      	ldr	r7, [r4, #28]
 800d784:	1a52      	subs	r2, r2, r1
 800d786:	4620      	mov	r0, r4
 800d788:	f7fe fb4e 	bl	800be28 <ucdr_init_buffer>
 800d78c:	4620      	mov	r0, r4
 800d78e:	463a      	mov	r2, r7
 800d790:	4631      	mov	r1, r6
 800d792:	f7fe fb1d 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 800d796:	4628      	mov	r0, r5
 800d798:	b007      	add	sp, #28
 800d79a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d79c <uxr_prepare_output_stream_fragmented>:
 800d79c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7a0:	b091      	sub	sp, #68	; 0x44
 800d7a2:	4605      	mov	r5, r0
 800d7a4:	9105      	str	r1, [sp, #20]
 800d7a6:	3008      	adds	r0, #8
 800d7a8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800d7ac:	461e      	mov	r6, r3
 800d7ae:	9204      	str	r2, [sp, #16]
 800d7b0:	f7ff fe90 	bl	800d4d4 <uxr_get_output_reliable_stream>
 800d7b4:	f89d 3016 	ldrb.w	r3, [sp, #22]
 800d7b8:	2b01      	cmp	r3, #1
 800d7ba:	f000 8091 	beq.w	800d8e0 <uxr_prepare_output_stream_fragmented+0x144>
 800d7be:	4604      	mov	r4, r0
 800d7c0:	2800      	cmp	r0, #0
 800d7c2:	f000 808d 	beq.w	800d8e0 <uxr_prepare_output_stream_fragmented+0x144>
 800d7c6:	f004 f843 	bl	8011850 <get_available_free_slots>
 800d7ca:	2800      	cmp	r0, #0
 800d7cc:	f000 8083 	beq.w	800d8d6 <uxr_prepare_output_stream_fragmented+0x13a>
 800d7d0:	8922      	ldrh	r2, [r4, #8]
 800d7d2:	89e7      	ldrh	r7, [r4, #14]
 800d7d4:	fbb7 f9f2 	udiv	r9, r7, r2
 800d7d8:	fb02 7919 	mls	r9, r2, r9, r7
 800d7dc:	fa1f f989 	uxth.w	r9, r9
 800d7e0:	6863      	ldr	r3, [r4, #4]
 800d7e2:	fbb3 f2f2 	udiv	r2, r3, r2
 800d7e6:	6823      	ldr	r3, [r4, #0]
 800d7e8:	9203      	str	r2, [sp, #12]
 800d7ea:	fb02 f909 	mul.w	r9, r2, r9
 800d7ee:	f109 0904 	add.w	r9, r9, #4
 800d7f2:	4499      	add	r9, r3
 800d7f4:	7b23      	ldrb	r3, [r4, #12]
 800d7f6:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d7fa:	4543      	cmp	r3, r8
 800d7fc:	f1a2 0b04 	sub.w	fp, r2, #4
 800d800:	d37a      	bcc.n	800d8f8 <uxr_prepare_output_stream_fragmented+0x15c>
 800d802:	f1ab 0a04 	sub.w	sl, fp, #4
 800d806:	ebaa 0a03 	sub.w	sl, sl, r3
 800d80a:	465a      	mov	r2, fp
 800d80c:	2300      	movs	r3, #0
 800d80e:	4649      	mov	r1, r9
 800d810:	a808      	add	r0, sp, #32
 800d812:	f8cd 8000 	str.w	r8, [sp]
 800d816:	f7fe faf5 	bl	800be04 <ucdr_init_buffer_origin_offset>
 800d81a:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d81c:	fa1f fa8a 	uxth.w	sl, sl
 800d820:	4652      	mov	r2, sl
 800d822:	f103 0a08 	add.w	sl, r3, #8
 800d826:	45da      	cmp	sl, fp
 800d828:	bf34      	ite	cc
 800d82a:	2302      	movcc	r3, #2
 800d82c:	2300      	movcs	r3, #0
 800d82e:	210d      	movs	r1, #13
 800d830:	a808      	add	r0, sp, #32
 800d832:	f7ff fe83 	bl	800d53c <uxr_buffer_submessage_header>
 800d836:	8921      	ldrh	r1, [r4, #8]
 800d838:	fbb7 f2f1 	udiv	r2, r7, r1
 800d83c:	fb01 7212 	mls	r2, r1, r2, r7
 800d840:	b292      	uxth	r2, r2
 800d842:	6863      	ldr	r3, [r4, #4]
 800d844:	fbb3 f3f1 	udiv	r3, r3, r1
 800d848:	fb02 f303 	mul.w	r3, r2, r3
 800d84c:	6822      	ldr	r2, [r4, #0]
 800d84e:	4638      	mov	r0, r7
 800d850:	f842 b003 	str.w	fp, [r2, r3]
 800d854:	2101      	movs	r1, #1
 800d856:	f004 f911 	bl	8011a7c <uxr_seq_num_add>
 800d85a:	9b03      	ldr	r3, [sp, #12]
 800d85c:	f108 0104 	add.w	r1, r8, #4
 800d860:	f1a3 0208 	sub.w	r2, r3, #8
 800d864:	eba2 0208 	sub.w	r2, r2, r8
 800d868:	4449      	add	r1, r9
 800d86a:	4607      	mov	r7, r0
 800d86c:	4630      	mov	r0, r6
 800d86e:	f7fe fadb 	bl	800be28 <ucdr_init_buffer>
 800d872:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800d874:	81e7      	strh	r7, [r4, #14]
 800d876:	1d1a      	adds	r2, r3, #4
 800d878:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800d87c:	bf28      	it	cs
 800d87e:	2200      	movcs	r2, #0
 800d880:	2300      	movs	r3, #0
 800d882:	b292      	uxth	r2, r2
 800d884:	2107      	movs	r1, #7
 800d886:	4630      	mov	r0, r6
 800d888:	f7ff fe58 	bl	800d53c <uxr_buffer_submessage_header>
 800d88c:	9904      	ldr	r1, [sp, #16]
 800d88e:	aa07      	add	r2, sp, #28
 800d890:	4628      	mov	r0, r5
 800d892:	f7ff fceb 	bl	800d26c <uxr_init_base_object_request>
 800d896:	4604      	mov	r4, r0
 800d898:	b318      	cbz	r0, 800d8e2 <uxr_prepare_output_stream_fragmented+0x146>
 800d89a:	a907      	add	r1, sp, #28
 800d89c:	4630      	mov	r0, r6
 800d89e:	f000 ff0d 	bl	800e6bc <uxr_serialize_WRITE_DATA_Payload_Data>
 800d8a2:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	1a52      	subs	r2, r2, r1
 800d8aa:	f7fe fabd 	bl	800be28 <ucdr_init_buffer>
 800d8ae:	9b05      	ldr	r3, [sp, #20]
 800d8b0:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
 800d8b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8b6:	f8c5 30b8 	str.w	r3, [r5, #184]	; 0xb8
 800d8ba:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800d8bc:	491b      	ldr	r1, [pc, #108]	; (800d92c <uxr_prepare_output_stream_fragmented+0x190>)
 800d8be:	f8c5 a0c4 	str.w	sl, [r5, #196]	; 0xc4
 800d8c2:	4630      	mov	r0, r6
 800d8c4:	f8c5 30bc 	str.w	r3, [r5, #188]	; 0xbc
 800d8c8:	462a      	mov	r2, r5
 800d8ca:	f7fe fa81 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 800d8ce:	4620      	mov	r0, r4
 800d8d0:	b011      	add	sp, #68	; 0x44
 800d8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8d6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800d8d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800d8da:	4628      	mov	r0, r5
 800d8dc:	4798      	blx	r3
 800d8de:	b920      	cbnz	r0, 800d8ea <uxr_prepare_output_stream_fragmented+0x14e>
 800d8e0:	2400      	movs	r4, #0
 800d8e2:	4620      	mov	r0, r4
 800d8e4:	b011      	add	sp, #68	; 0x44
 800d8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ea:	4620      	mov	r0, r4
 800d8ec:	f003 ffb0 	bl	8011850 <get_available_free_slots>
 800d8f0:	2800      	cmp	r0, #0
 800d8f2:	f47f af6d 	bne.w	800d7d0 <uxr_prepare_output_stream_fragmented+0x34>
 800d8f6:	e7f3      	b.n	800d8e0 <uxr_prepare_output_stream_fragmented+0x144>
 800d8f8:	4638      	mov	r0, r7
 800d8fa:	2101      	movs	r1, #1
 800d8fc:	f004 f8be 	bl	8011a7c <uxr_seq_num_add>
 800d900:	8921      	ldrh	r1, [r4, #8]
 800d902:	fbb0 f2f1 	udiv	r2, r0, r1
 800d906:	fb01 0912 	mls	r9, r1, r2, r0
 800d90a:	fa1f f289 	uxth.w	r2, r9
 800d90e:	6863      	ldr	r3, [r4, #4]
 800d910:	fbb3 f9f1 	udiv	r9, r3, r1
 800d914:	6823      	ldr	r3, [r4, #0]
 800d916:	fb02 f909 	mul.w	r9, r2, r9
 800d91a:	f109 0904 	add.w	r9, r9, #4
 800d91e:	4499      	add	r9, r3
 800d920:	4607      	mov	r7, r0
 800d922:	7b23      	ldrb	r3, [r4, #12]
 800d924:	f859 8c04 	ldr.w	r8, [r9, #-4]
 800d928:	e76b      	b.n	800d802 <uxr_prepare_output_stream_fragmented+0x66>
 800d92a:	bf00      	nop
 800d92c:	0800d629 	.word	0x0800d629

0800d930 <uxr_serialize_message_header>:
 800d930:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d932:	b083      	sub	sp, #12
 800d934:	4616      	mov	r6, r2
 800d936:	4604      	mov	r4, r0
 800d938:	9301      	str	r3, [sp, #4]
 800d93a:	460d      	mov	r5, r1
 800d93c:	9f08      	ldr	r7, [sp, #32]
 800d93e:	f7fd fac7 	bl	800aed0 <ucdr_serialize_uint8_t>
 800d942:	4631      	mov	r1, r6
 800d944:	4620      	mov	r0, r4
 800d946:	f7fd fac3 	bl	800aed0 <ucdr_serialize_uint8_t>
 800d94a:	9a01      	ldr	r2, [sp, #4]
 800d94c:	2101      	movs	r1, #1
 800d94e:	4620      	mov	r0, r4
 800d950:	f7fd fb6a 	bl	800b028 <ucdr_serialize_endian_uint16_t>
 800d954:	062b      	lsls	r3, r5, #24
 800d956:	d501      	bpl.n	800d95c <uxr_serialize_message_header+0x2c>
 800d958:	b003      	add	sp, #12
 800d95a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d95c:	2204      	movs	r2, #4
 800d95e:	4639      	mov	r1, r7
 800d960:	4620      	mov	r0, r4
 800d962:	b003      	add	sp, #12
 800d964:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d968:	f003 b850 	b.w	8010a0c <ucdr_serialize_array_uint8_t>

0800d96c <uxr_deserialize_message_header>:
 800d96c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d96e:	b083      	sub	sp, #12
 800d970:	4616      	mov	r6, r2
 800d972:	4604      	mov	r4, r0
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	460d      	mov	r5, r1
 800d978:	9f08      	ldr	r7, [sp, #32]
 800d97a:	f7fd fabf 	bl	800aefc <ucdr_deserialize_uint8_t>
 800d97e:	4631      	mov	r1, r6
 800d980:	4620      	mov	r0, r4
 800d982:	f7fd fabb 	bl	800aefc <ucdr_deserialize_uint8_t>
 800d986:	9a01      	ldr	r2, [sp, #4]
 800d988:	2101      	movs	r1, #1
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7fd fc40 	bl	800b210 <ucdr_deserialize_endian_uint16_t>
 800d990:	f995 3000 	ldrsb.w	r3, [r5]
 800d994:	2b00      	cmp	r3, #0
 800d996:	da01      	bge.n	800d99c <uxr_deserialize_message_header+0x30>
 800d998:	b003      	add	sp, #12
 800d99a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d99c:	2204      	movs	r2, #4
 800d99e:	4639      	mov	r1, r7
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	b003      	add	sp, #12
 800d9a4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800d9a8:	f003 b894 	b.w	8010ad4 <ucdr_deserialize_array_uint8_t>

0800d9ac <uxr_serialize_submessage_header>:
 800d9ac:	b530      	push	{r4, r5, lr}
 800d9ae:	b083      	sub	sp, #12
 800d9b0:	4615      	mov	r5, r2
 800d9b2:	4604      	mov	r4, r0
 800d9b4:	9301      	str	r3, [sp, #4]
 800d9b6:	f7fd fa8b 	bl	800aed0 <ucdr_serialize_uint8_t>
 800d9ba:	4629      	mov	r1, r5
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f7fd fa87 	bl	800aed0 <ucdr_serialize_uint8_t>
 800d9c2:	9a01      	ldr	r2, [sp, #4]
 800d9c4:	2101      	movs	r1, #1
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	b003      	add	sp, #12
 800d9ca:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9ce:	f7fd bb2b 	b.w	800b028 <ucdr_serialize_endian_uint16_t>
 800d9d2:	bf00      	nop

0800d9d4 <uxr_deserialize_submessage_header>:
 800d9d4:	b530      	push	{r4, r5, lr}
 800d9d6:	b083      	sub	sp, #12
 800d9d8:	4615      	mov	r5, r2
 800d9da:	4604      	mov	r4, r0
 800d9dc:	9301      	str	r3, [sp, #4]
 800d9de:	f7fd fa8d 	bl	800aefc <ucdr_deserialize_uint8_t>
 800d9e2:	4629      	mov	r1, r5
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f7fd fa89 	bl	800aefc <ucdr_deserialize_uint8_t>
 800d9ea:	9a01      	ldr	r2, [sp, #4]
 800d9ec:	2101      	movs	r1, #1
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	b003      	add	sp, #12
 800d9f2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d9f6:	f7fd bc0b 	b.w	800b210 <ucdr_deserialize_endian_uint16_t>
 800d9fa:	bf00      	nop

0800d9fc <uxr_serialize_CLIENT_Representation>:
 800d9fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da00:	2204      	movs	r2, #4
 800da02:	460e      	mov	r6, r1
 800da04:	4605      	mov	r5, r0
 800da06:	f003 f801 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800da0a:	2202      	movs	r2, #2
 800da0c:	4607      	mov	r7, r0
 800da0e:	1d31      	adds	r1, r6, #4
 800da10:	4628      	mov	r0, r5
 800da12:	f002 fffb 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800da16:	4038      	ands	r0, r7
 800da18:	2202      	movs	r2, #2
 800da1a:	1db1      	adds	r1, r6, #6
 800da1c:	b2c7      	uxtb	r7, r0
 800da1e:	4628      	mov	r0, r5
 800da20:	f002 fff4 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800da24:	2204      	movs	r2, #4
 800da26:	4007      	ands	r7, r0
 800da28:	f106 0108 	add.w	r1, r6, #8
 800da2c:	4628      	mov	r0, r5
 800da2e:	f002 ffed 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800da32:	7b31      	ldrb	r1, [r6, #12]
 800da34:	4007      	ands	r7, r0
 800da36:	4628      	mov	r0, r5
 800da38:	f7fd fa4a 	bl	800aed0 <ucdr_serialize_uint8_t>
 800da3c:	7b71      	ldrb	r1, [r6, #13]
 800da3e:	4007      	ands	r7, r0
 800da40:	4628      	mov	r0, r5
 800da42:	f7fd fa17 	bl	800ae74 <ucdr_serialize_bool>
 800da46:	7b73      	ldrb	r3, [r6, #13]
 800da48:	ea07 0800 	and.w	r8, r7, r0
 800da4c:	b93b      	cbnz	r3, 800da5e <uxr_serialize_CLIENT_Representation+0x62>
 800da4e:	8bb1      	ldrh	r1, [r6, #28]
 800da50:	4628      	mov	r0, r5
 800da52:	f7fd fa69 	bl	800af28 <ucdr_serialize_uint16_t>
 800da56:	ea08 0000 	and.w	r0, r8, r0
 800da5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da5e:	6931      	ldr	r1, [r6, #16]
 800da60:	4628      	mov	r0, r5
 800da62:	f7fd fc4b 	bl	800b2fc <ucdr_serialize_uint32_t>
 800da66:	6933      	ldr	r3, [r6, #16]
 800da68:	b1e3      	cbz	r3, 800daa4 <uxr_serialize_CLIENT_Representation+0xa8>
 800da6a:	b1c0      	cbz	r0, 800da9e <uxr_serialize_CLIENT_Representation+0xa2>
 800da6c:	4637      	mov	r7, r6
 800da6e:	f04f 0900 	mov.w	r9, #0
 800da72:	e001      	b.n	800da78 <uxr_serialize_CLIENT_Representation+0x7c>
 800da74:	3708      	adds	r7, #8
 800da76:	b194      	cbz	r4, 800da9e <uxr_serialize_CLIENT_Representation+0xa2>
 800da78:	6979      	ldr	r1, [r7, #20]
 800da7a:	4628      	mov	r0, r5
 800da7c:	f003 f8e6 	bl	8010c4c <ucdr_serialize_string>
 800da80:	69b9      	ldr	r1, [r7, #24]
 800da82:	4604      	mov	r4, r0
 800da84:	4628      	mov	r0, r5
 800da86:	f003 f8e1 	bl	8010c4c <ucdr_serialize_string>
 800da8a:	6933      	ldr	r3, [r6, #16]
 800da8c:	f109 0901 	add.w	r9, r9, #1
 800da90:	4004      	ands	r4, r0
 800da92:	4599      	cmp	r9, r3
 800da94:	b2e4      	uxtb	r4, r4
 800da96:	d3ed      	bcc.n	800da74 <uxr_serialize_CLIENT_Representation+0x78>
 800da98:	ea08 0804 	and.w	r8, r8, r4
 800da9c:	e7d7      	b.n	800da4e <uxr_serialize_CLIENT_Representation+0x52>
 800da9e:	f04f 0800 	mov.w	r8, #0
 800daa2:	e7d4      	b.n	800da4e <uxr_serialize_CLIENT_Representation+0x52>
 800daa4:	ea08 0800 	and.w	r8, r8, r0
 800daa8:	e7d1      	b.n	800da4e <uxr_serialize_CLIENT_Representation+0x52>
 800daaa:	bf00      	nop

0800daac <uxr_deserialize_CLIENT_Representation>:
 800daac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dab0:	2204      	movs	r2, #4
 800dab2:	460c      	mov	r4, r1
 800dab4:	4605      	mov	r5, r0
 800dab6:	f003 f80d 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800daba:	2202      	movs	r2, #2
 800dabc:	4607      	mov	r7, r0
 800dabe:	1d21      	adds	r1, r4, #4
 800dac0:	4628      	mov	r0, r5
 800dac2:	f003 f807 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800dac6:	4038      	ands	r0, r7
 800dac8:	2202      	movs	r2, #2
 800daca:	1da1      	adds	r1, r4, #6
 800dacc:	b2c6      	uxtb	r6, r0
 800dace:	4628      	mov	r0, r5
 800dad0:	f003 f800 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800dad4:	2204      	movs	r2, #4
 800dad6:	4006      	ands	r6, r0
 800dad8:	f104 0108 	add.w	r1, r4, #8
 800dadc:	4628      	mov	r0, r5
 800dade:	f002 fff9 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800dae2:	f104 010c 	add.w	r1, r4, #12
 800dae6:	4006      	ands	r6, r0
 800dae8:	4628      	mov	r0, r5
 800daea:	f7fd fa07 	bl	800aefc <ucdr_deserialize_uint8_t>
 800daee:	f104 010d 	add.w	r1, r4, #13
 800daf2:	ea06 0700 	and.w	r7, r6, r0
 800daf6:	4628      	mov	r0, r5
 800daf8:	f7fd f9d2 	bl	800aea0 <ucdr_deserialize_bool>
 800dafc:	7b63      	ldrb	r3, [r4, #13]
 800dafe:	4007      	ands	r7, r0
 800db00:	b93b      	cbnz	r3, 800db12 <uxr_deserialize_CLIENT_Representation+0x66>
 800db02:	f104 011c 	add.w	r1, r4, #28
 800db06:	4628      	mov	r0, r5
 800db08:	f7fd fb0e 	bl	800b128 <ucdr_deserialize_uint16_t>
 800db0c:	4038      	ands	r0, r7
 800db0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db12:	f104 0110 	add.w	r1, r4, #16
 800db16:	4628      	mov	r0, r5
 800db18:	f7fd fd20 	bl	800b55c <ucdr_deserialize_uint32_t>
 800db1c:	6923      	ldr	r3, [r4, #16]
 800db1e:	2b01      	cmp	r3, #1
 800db20:	d903      	bls.n	800db2a <uxr_deserialize_CLIENT_Representation+0x7e>
 800db22:	2301      	movs	r3, #1
 800db24:	75ab      	strb	r3, [r5, #22]
 800db26:	2700      	movs	r7, #0
 800db28:	e7eb      	b.n	800db02 <uxr_deserialize_CLIENT_Representation+0x56>
 800db2a:	b30b      	cbz	r3, 800db70 <uxr_deserialize_CLIENT_Representation+0xc4>
 800db2c:	2800      	cmp	r0, #0
 800db2e:	d0fa      	beq.n	800db26 <uxr_deserialize_CLIENT_Representation+0x7a>
 800db30:	46a0      	mov	r8, r4
 800db32:	f04f 0900 	mov.w	r9, #0
 800db36:	e001      	b.n	800db3c <uxr_deserialize_CLIENT_Representation+0x90>
 800db38:	2e00      	cmp	r6, #0
 800db3a:	d0f4      	beq.n	800db26 <uxr_deserialize_CLIENT_Representation+0x7a>
 800db3c:	f8d8 1014 	ldr.w	r1, [r8, #20]
 800db40:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db44:	4628      	mov	r0, r5
 800db46:	f003 f891 	bl	8010c6c <ucdr_deserialize_string>
 800db4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800db4e:	4606      	mov	r6, r0
 800db50:	f8d8 1018 	ldr.w	r1, [r8, #24]
 800db54:	4628      	mov	r0, r5
 800db56:	f003 f889 	bl	8010c6c <ucdr_deserialize_string>
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	f109 0901 	add.w	r9, r9, #1
 800db60:	4006      	ands	r6, r0
 800db62:	4599      	cmp	r9, r3
 800db64:	f108 0808 	add.w	r8, r8, #8
 800db68:	b2f6      	uxtb	r6, r6
 800db6a:	d3e5      	bcc.n	800db38 <uxr_deserialize_CLIENT_Representation+0x8c>
 800db6c:	4037      	ands	r7, r6
 800db6e:	e7c8      	b.n	800db02 <uxr_deserialize_CLIENT_Representation+0x56>
 800db70:	4007      	ands	r7, r0
 800db72:	e7c6      	b.n	800db02 <uxr_deserialize_CLIENT_Representation+0x56>

0800db74 <uxr_serialize_AGENT_Representation>:
 800db74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db78:	2204      	movs	r2, #4
 800db7a:	460f      	mov	r7, r1
 800db7c:	4605      	mov	r5, r0
 800db7e:	f002 ff45 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800db82:	2202      	movs	r2, #2
 800db84:	4604      	mov	r4, r0
 800db86:	1d39      	adds	r1, r7, #4
 800db88:	4628      	mov	r0, r5
 800db8a:	f002 ff3f 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800db8e:	4020      	ands	r0, r4
 800db90:	2202      	movs	r2, #2
 800db92:	1db9      	adds	r1, r7, #6
 800db94:	b2c4      	uxtb	r4, r0
 800db96:	4628      	mov	r0, r5
 800db98:	f002 ff38 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800db9c:	7a39      	ldrb	r1, [r7, #8]
 800db9e:	4004      	ands	r4, r0
 800dba0:	4628      	mov	r0, r5
 800dba2:	f7fd f967 	bl	800ae74 <ucdr_serialize_bool>
 800dba6:	7a3b      	ldrb	r3, [r7, #8]
 800dba8:	ea00 0804 	and.w	r8, r0, r4
 800dbac:	b913      	cbnz	r3, 800dbb4 <uxr_serialize_AGENT_Representation+0x40>
 800dbae:	4640      	mov	r0, r8
 800dbb0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbb4:	68f9      	ldr	r1, [r7, #12]
 800dbb6:	4628      	mov	r0, r5
 800dbb8:	f7fd fba0 	bl	800b2fc <ucdr_serialize_uint32_t>
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	b303      	cbz	r3, 800dc02 <uxr_serialize_AGENT_Representation+0x8e>
 800dbc0:	b1d0      	cbz	r0, 800dbf8 <uxr_serialize_AGENT_Representation+0x84>
 800dbc2:	463e      	mov	r6, r7
 800dbc4:	f04f 0900 	mov.w	r9, #0
 800dbc8:	e001      	b.n	800dbce <uxr_serialize_AGENT_Representation+0x5a>
 800dbca:	3608      	adds	r6, #8
 800dbcc:	b1a4      	cbz	r4, 800dbf8 <uxr_serialize_AGENT_Representation+0x84>
 800dbce:	6931      	ldr	r1, [r6, #16]
 800dbd0:	4628      	mov	r0, r5
 800dbd2:	f003 f83b 	bl	8010c4c <ucdr_serialize_string>
 800dbd6:	6971      	ldr	r1, [r6, #20]
 800dbd8:	4604      	mov	r4, r0
 800dbda:	4628      	mov	r0, r5
 800dbdc:	f003 f836 	bl	8010c4c <ucdr_serialize_string>
 800dbe0:	68fb      	ldr	r3, [r7, #12]
 800dbe2:	f109 0901 	add.w	r9, r9, #1
 800dbe6:	4004      	ands	r4, r0
 800dbe8:	4599      	cmp	r9, r3
 800dbea:	b2e4      	uxtb	r4, r4
 800dbec:	d3ed      	bcc.n	800dbca <uxr_serialize_AGENT_Representation+0x56>
 800dbee:	ea08 0804 	and.w	r8, r8, r4
 800dbf2:	4640      	mov	r0, r8
 800dbf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dbf8:	f04f 0800 	mov.w	r8, #0
 800dbfc:	4640      	mov	r0, r8
 800dbfe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc02:	ea08 0800 	and.w	r8, r8, r0
 800dc06:	e7d2      	b.n	800dbae <uxr_serialize_AGENT_Representation+0x3a>

0800dc08 <uxr_serialize_DATAWRITER_Representation>:
 800dc08:	b570      	push	{r4, r5, r6, lr}
 800dc0a:	460d      	mov	r5, r1
 800dc0c:	7809      	ldrb	r1, [r1, #0]
 800dc0e:	4606      	mov	r6, r0
 800dc10:	f7fd f95e 	bl	800aed0 <ucdr_serialize_uint8_t>
 800dc14:	4604      	mov	r4, r0
 800dc16:	b130      	cbz	r0, 800dc26 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dc18:	782b      	ldrb	r3, [r5, #0]
 800dc1a:	2b02      	cmp	r3, #2
 800dc1c:	d00c      	beq.n	800dc38 <uxr_serialize_DATAWRITER_Representation+0x30>
 800dc1e:	2b03      	cmp	r3, #3
 800dc20:	d010      	beq.n	800dc44 <uxr_serialize_DATAWRITER_Representation+0x3c>
 800dc22:	2b01      	cmp	r3, #1
 800dc24:	d008      	beq.n	800dc38 <uxr_serialize_DATAWRITER_Representation+0x30>
 800dc26:	2202      	movs	r2, #2
 800dc28:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800dc2c:	4630      	mov	r0, r6
 800dc2e:	f002 feed 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800dc32:	4020      	ands	r0, r4
 800dc34:	b2c0      	uxtb	r0, r0
 800dc36:	bd70      	pop	{r4, r5, r6, pc}
 800dc38:	6869      	ldr	r1, [r5, #4]
 800dc3a:	4630      	mov	r0, r6
 800dc3c:	f003 f806 	bl	8010c4c <ucdr_serialize_string>
 800dc40:	4604      	mov	r4, r0
 800dc42:	e7f0      	b.n	800dc26 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dc44:	4629      	mov	r1, r5
 800dc46:	4630      	mov	r0, r6
 800dc48:	f851 2f04 	ldr.w	r2, [r1, #4]!
 800dc4c:	3104      	adds	r1, #4
 800dc4e:	f002 ffd1 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800dc52:	4604      	mov	r4, r0
 800dc54:	e7e7      	b.n	800dc26 <uxr_serialize_DATAWRITER_Representation+0x1e>
 800dc56:	bf00      	nop

0800dc58 <uxr_serialize_ObjectVariant.part.0>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	780b      	ldrb	r3, [r1, #0]
 800dc5c:	3b01      	subs	r3, #1
 800dc5e:	460c      	mov	r4, r1
 800dc60:	4605      	mov	r5, r0
 800dc62:	2b0d      	cmp	r3, #13
 800dc64:	d854      	bhi.n	800dd10 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800dc66:	e8df f003 	tbb	[pc, r3]
 800dc6a:	0730      	.short	0x0730
 800dc6c:	07071b1b 	.word	0x07071b1b
 800dc70:	0c530707 	.word	0x0c530707
 800dc74:	494e0c0c 	.word	0x494e0c0c
 800dc78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc7c:	3104      	adds	r1, #4
 800dc7e:	f7ff bfc3 	b.w	800dc08 <uxr_serialize_DATAWRITER_Representation>
 800dc82:	7909      	ldrb	r1, [r1, #4]
 800dc84:	f7fd f924 	bl	800aed0 <ucdr_serialize_uint8_t>
 800dc88:	b1e8      	cbz	r0, 800dcc6 <uxr_serialize_ObjectVariant.part.0+0x6e>
 800dc8a:	7923      	ldrb	r3, [r4, #4]
 800dc8c:	2b01      	cmp	r3, #1
 800dc8e:	d001      	beq.n	800dc94 <uxr_serialize_ObjectVariant.part.0+0x3c>
 800dc90:	2b02      	cmp	r3, #2
 800dc92:	d13d      	bne.n	800dd10 <uxr_serialize_ObjectVariant.part.0+0xb8>
 800dc94:	68a1      	ldr	r1, [r4, #8]
 800dc96:	4628      	mov	r0, r5
 800dc98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dc9c:	f002 bfd6 	b.w	8010c4c <ucdr_serialize_string>
 800dca0:	7909      	ldrb	r1, [r1, #4]
 800dca2:	f7fd f915 	bl	800aed0 <ucdr_serialize_uint8_t>
 800dca6:	4606      	mov	r6, r0
 800dca8:	b120      	cbz	r0, 800dcb4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800dcaa:	7923      	ldrb	r3, [r4, #4]
 800dcac:	2b02      	cmp	r3, #2
 800dcae:	d039      	beq.n	800dd24 <uxr_serialize_ObjectVariant.part.0+0xcc>
 800dcb0:	2b03      	cmp	r3, #3
 800dcb2:	d02f      	beq.n	800dd14 <uxr_serialize_ObjectVariant.part.0+0xbc>
 800dcb4:	2202      	movs	r2, #2
 800dcb6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800dcba:	4628      	mov	r0, r5
 800dcbc:	f002 fea6 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800dcc0:	4030      	ands	r0, r6
 800dcc2:	b2c0      	uxtb	r0, r0
 800dcc4:	bd70      	pop	{r4, r5, r6, pc}
 800dcc6:	2000      	movs	r0, #0
 800dcc8:	bd70      	pop	{r4, r5, r6, pc}
 800dcca:	7909      	ldrb	r1, [r1, #4]
 800dccc:	f7fd f900 	bl	800aed0 <ucdr_serialize_uint8_t>
 800dcd0:	4606      	mov	r6, r0
 800dcd2:	b158      	cbz	r0, 800dcec <uxr_serialize_ObjectVariant.part.0+0x94>
 800dcd4:	7923      	ldrb	r3, [r4, #4]
 800dcd6:	2b02      	cmp	r3, #2
 800dcd8:	d003      	beq.n	800dce2 <uxr_serialize_ObjectVariant.part.0+0x8a>
 800dcda:	2b03      	cmp	r3, #3
 800dcdc:	d028      	beq.n	800dd30 <uxr_serialize_ObjectVariant.part.0+0xd8>
 800dcde:	2b01      	cmp	r3, #1
 800dce0:	d104      	bne.n	800dcec <uxr_serialize_ObjectVariant.part.0+0x94>
 800dce2:	68a1      	ldr	r1, [r4, #8]
 800dce4:	4628      	mov	r0, r5
 800dce6:	f002 ffb1 	bl	8010c4c <ucdr_serialize_string>
 800dcea:	4606      	mov	r6, r0
 800dcec:	f9b4 120c 	ldrsh.w	r1, [r4, #524]	; 0x20c
 800dcf0:	4628      	mov	r0, r5
 800dcf2:	f7fd fe29 	bl	800b948 <ucdr_serialize_int16_t>
 800dcf6:	4030      	ands	r0, r6
 800dcf8:	b2c0      	uxtb	r0, r0
 800dcfa:	bd70      	pop	{r4, r5, r6, pc}
 800dcfc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd00:	3104      	adds	r1, #4
 800dd02:	f7ff be7b 	b.w	800d9fc <uxr_serialize_CLIENT_Representation>
 800dd06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800dd0a:	3104      	adds	r1, #4
 800dd0c:	f7ff bf32 	b.w	800db74 <uxr_serialize_AGENT_Representation>
 800dd10:	2001      	movs	r0, #1
 800dd12:	bd70      	pop	{r4, r5, r6, pc}
 800dd14:	68a2      	ldr	r2, [r4, #8]
 800dd16:	f104 010c 	add.w	r1, r4, #12
 800dd1a:	4628      	mov	r0, r5
 800dd1c:	f002 ff6a 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800dd20:	4606      	mov	r6, r0
 800dd22:	e7c7      	b.n	800dcb4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800dd24:	68a1      	ldr	r1, [r4, #8]
 800dd26:	4628      	mov	r0, r5
 800dd28:	f002 ff90 	bl	8010c4c <ucdr_serialize_string>
 800dd2c:	4606      	mov	r6, r0
 800dd2e:	e7c1      	b.n	800dcb4 <uxr_serialize_ObjectVariant.part.0+0x5c>
 800dd30:	68a2      	ldr	r2, [r4, #8]
 800dd32:	f104 010c 	add.w	r1, r4, #12
 800dd36:	4628      	mov	r0, r5
 800dd38:	f002 ff5c 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800dd3c:	4606      	mov	r6, r0
 800dd3e:	e7d5      	b.n	800dcec <uxr_serialize_ObjectVariant.part.0+0x94>

0800dd40 <uxr_deserialize_DATAWRITER_Representation>:
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	4606      	mov	r6, r0
 800dd44:	460d      	mov	r5, r1
 800dd46:	f7fd f8d9 	bl	800aefc <ucdr_deserialize_uint8_t>
 800dd4a:	4604      	mov	r4, r0
 800dd4c:	b130      	cbz	r0, 800dd5c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800dd4e:	782b      	ldrb	r3, [r5, #0]
 800dd50:	2b02      	cmp	r3, #2
 800dd52:	d00c      	beq.n	800dd6e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800dd54:	2b03      	cmp	r3, #3
 800dd56:	d012      	beq.n	800dd7e <uxr_deserialize_DATAWRITER_Representation+0x3e>
 800dd58:	2b01      	cmp	r3, #1
 800dd5a:	d008      	beq.n	800dd6e <uxr_deserialize_DATAWRITER_Representation+0x2e>
 800dd5c:	2202      	movs	r2, #2
 800dd5e:	f505 7102 	add.w	r1, r5, #520	; 0x208
 800dd62:	4630      	mov	r0, r6
 800dd64:	f002 feb6 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800dd68:	4020      	ands	r0, r4
 800dd6a:	b2c0      	uxtb	r0, r0
 800dd6c:	bd70      	pop	{r4, r5, r6, pc}
 800dd6e:	6869      	ldr	r1, [r5, #4]
 800dd70:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd74:	4630      	mov	r0, r6
 800dd76:	f002 ff79 	bl	8010c6c <ucdr_deserialize_string>
 800dd7a:	4604      	mov	r4, r0
 800dd7c:	e7ee      	b.n	800dd5c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800dd7e:	1d2b      	adds	r3, r5, #4
 800dd80:	f44f 7200 	mov.w	r2, #512	; 0x200
 800dd84:	f105 0108 	add.w	r1, r5, #8
 800dd88:	4630      	mov	r0, r6
 800dd8a:	f002 ff45 	bl	8010c18 <ucdr_deserialize_sequence_uint8_t>
 800dd8e:	4604      	mov	r4, r0
 800dd90:	e7e4      	b.n	800dd5c <uxr_deserialize_DATAWRITER_Representation+0x1c>
 800dd92:	bf00      	nop

0800dd94 <uxr_serialize_OBJK_DomainParticipant_Binary>:
 800dd94:	b570      	push	{r4, r5, r6, lr}
 800dd96:	460d      	mov	r5, r1
 800dd98:	7809      	ldrb	r1, [r1, #0]
 800dd9a:	4606      	mov	r6, r0
 800dd9c:	f7fd f86a 	bl	800ae74 <ucdr_serialize_bool>
 800dda0:	782b      	ldrb	r3, [r5, #0]
 800dda2:	4604      	mov	r4, r0
 800dda4:	b94b      	cbnz	r3, 800ddba <uxr_serialize_OBJK_DomainParticipant_Binary+0x26>
 800dda6:	7a29      	ldrb	r1, [r5, #8]
 800dda8:	4630      	mov	r0, r6
 800ddaa:	f7fd f863 	bl	800ae74 <ucdr_serialize_bool>
 800ddae:	7a2b      	ldrb	r3, [r5, #8]
 800ddb0:	4004      	ands	r4, r0
 800ddb2:	b2e4      	uxtb	r4, r4
 800ddb4:	b943      	cbnz	r3, 800ddc8 <uxr_serialize_OBJK_DomainParticipant_Binary+0x34>
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	bd70      	pop	{r4, r5, r6, pc}
 800ddba:	6869      	ldr	r1, [r5, #4]
 800ddbc:	4630      	mov	r0, r6
 800ddbe:	f002 ff45 	bl	8010c4c <ucdr_serialize_string>
 800ddc2:	4004      	ands	r4, r0
 800ddc4:	b2e4      	uxtb	r4, r4
 800ddc6:	e7ee      	b.n	800dda6 <uxr_serialize_OBJK_DomainParticipant_Binary+0x12>
 800ddc8:	68e9      	ldr	r1, [r5, #12]
 800ddca:	4630      	mov	r0, r6
 800ddcc:	f002 ff3e 	bl	8010c4c <ucdr_serialize_string>
 800ddd0:	4004      	ands	r4, r0
 800ddd2:	4620      	mov	r0, r4
 800ddd4:	bd70      	pop	{r4, r5, r6, pc}
 800ddd6:	bf00      	nop

0800ddd8 <uxr_serialize_OBJK_Topic_Binary>:
 800ddd8:	b570      	push	{r4, r5, r6, lr}
 800ddda:	460d      	mov	r5, r1
 800dddc:	6809      	ldr	r1, [r1, #0]
 800ddde:	4606      	mov	r6, r0
 800dde0:	f002 ff34 	bl	8010c4c <ucdr_serialize_string>
 800dde4:	7929      	ldrb	r1, [r5, #4]
 800dde6:	4604      	mov	r4, r0
 800dde8:	4630      	mov	r0, r6
 800ddea:	f7fd f843 	bl	800ae74 <ucdr_serialize_bool>
 800ddee:	792b      	ldrb	r3, [r5, #4]
 800ddf0:	4004      	ands	r4, r0
 800ddf2:	b2e4      	uxtb	r4, r4
 800ddf4:	b943      	cbnz	r3, 800de08 <uxr_serialize_OBJK_Topic_Binary+0x30>
 800ddf6:	7b29      	ldrb	r1, [r5, #12]
 800ddf8:	4630      	mov	r0, r6
 800ddfa:	f7fd f83b 	bl	800ae74 <ucdr_serialize_bool>
 800ddfe:	7b2b      	ldrb	r3, [r5, #12]
 800de00:	4004      	ands	r4, r0
 800de02:	b93b      	cbnz	r3, 800de14 <uxr_serialize_OBJK_Topic_Binary+0x3c>
 800de04:	4620      	mov	r0, r4
 800de06:	bd70      	pop	{r4, r5, r6, pc}
 800de08:	68a9      	ldr	r1, [r5, #8]
 800de0a:	4630      	mov	r0, r6
 800de0c:	f002 ff1e 	bl	8010c4c <ucdr_serialize_string>
 800de10:	4004      	ands	r4, r0
 800de12:	e7f0      	b.n	800ddf6 <uxr_serialize_OBJK_Topic_Binary+0x1e>
 800de14:	6929      	ldr	r1, [r5, #16]
 800de16:	4630      	mov	r0, r6
 800de18:	f002 ff18 	bl	8010c4c <ucdr_serialize_string>
 800de1c:	4004      	ands	r4, r0
 800de1e:	b2e4      	uxtb	r4, r4
 800de20:	4620      	mov	r0, r4
 800de22:	bd70      	pop	{r4, r5, r6, pc}

0800de24 <uxr_serialize_OBJK_Publisher_Binary_Qos>:
 800de24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de28:	460c      	mov	r4, r1
 800de2a:	7809      	ldrb	r1, [r1, #0]
 800de2c:	4606      	mov	r6, r0
 800de2e:	f7fd f821 	bl	800ae74 <ucdr_serialize_bool>
 800de32:	7823      	ldrb	r3, [r4, #0]
 800de34:	4605      	mov	r5, r0
 800de36:	b96b      	cbnz	r3, 800de54 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x30>
 800de38:	f894 1028 	ldrb.w	r1, [r4, #40]	; 0x28
 800de3c:	4630      	mov	r0, r6
 800de3e:	f7fd f819 	bl	800ae74 <ucdr_serialize_bool>
 800de42:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 800de46:	4005      	ands	r5, r0
 800de48:	b2ed      	uxtb	r5, r5
 800de4a:	2b00      	cmp	r3, #0
 800de4c:	d169      	bne.n	800df22 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xfe>
 800de4e:	4628      	mov	r0, r5
 800de50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de54:	6861      	ldr	r1, [r4, #4]
 800de56:	4630      	mov	r0, r6
 800de58:	f7fd fa50 	bl	800b2fc <ucdr_serialize_uint32_t>
 800de5c:	6863      	ldr	r3, [r4, #4]
 800de5e:	2b00      	cmp	r3, #0
 800de60:	d06b      	beq.n	800df3a <uxr_serialize_OBJK_Publisher_Binary_Qos+0x116>
 800de62:	2800      	cmp	r0, #0
 800de64:	d067      	beq.n	800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800de66:	68a1      	ldr	r1, [r4, #8]
 800de68:	4630      	mov	r0, r6
 800de6a:	f002 feef 	bl	8010c4c <ucdr_serialize_string>
 800de6e:	6863      	ldr	r3, [r4, #4]
 800de70:	2b01      	cmp	r3, #1
 800de72:	d953      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800de74:	2800      	cmp	r0, #0
 800de76:	d05e      	beq.n	800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800de78:	68e1      	ldr	r1, [r4, #12]
 800de7a:	4630      	mov	r0, r6
 800de7c:	f002 fee6 	bl	8010c4c <ucdr_serialize_string>
 800de80:	6863      	ldr	r3, [r4, #4]
 800de82:	2b02      	cmp	r3, #2
 800de84:	d94a      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800de86:	2800      	cmp	r0, #0
 800de88:	d055      	beq.n	800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800de8a:	6921      	ldr	r1, [r4, #16]
 800de8c:	4630      	mov	r0, r6
 800de8e:	f002 fedd 	bl	8010c4c <ucdr_serialize_string>
 800de92:	6863      	ldr	r3, [r4, #4]
 800de94:	2b03      	cmp	r3, #3
 800de96:	d941      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800de98:	2800      	cmp	r0, #0
 800de9a:	d04c      	beq.n	800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800de9c:	6961      	ldr	r1, [r4, #20]
 800de9e:	4630      	mov	r0, r6
 800dea0:	f002 fed4 	bl	8010c4c <ucdr_serialize_string>
 800dea4:	6863      	ldr	r3, [r4, #4]
 800dea6:	2b04      	cmp	r3, #4
 800dea8:	d938      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800deaa:	2800      	cmp	r0, #0
 800deac:	d043      	beq.n	800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800deae:	69a1      	ldr	r1, [r4, #24]
 800deb0:	4630      	mov	r0, r6
 800deb2:	f002 fecb 	bl	8010c4c <ucdr_serialize_string>
 800deb6:	6863      	ldr	r3, [r4, #4]
 800deb8:	2b05      	cmp	r3, #5
 800deba:	d92f      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800debc:	2800      	cmp	r0, #0
 800debe:	d03a      	beq.n	800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800dec0:	69e1      	ldr	r1, [r4, #28]
 800dec2:	4630      	mov	r0, r6
 800dec4:	f002 fec2 	bl	8010c4c <ucdr_serialize_string>
 800dec8:	6863      	ldr	r3, [r4, #4]
 800deca:	2b06      	cmp	r3, #6
 800decc:	d926      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800dece:	b390      	cbz	r0, 800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800ded0:	6a21      	ldr	r1, [r4, #32]
 800ded2:	4630      	mov	r0, r6
 800ded4:	f002 feba 	bl	8010c4c <ucdr_serialize_string>
 800ded8:	6863      	ldr	r3, [r4, #4]
 800deda:	2b07      	cmp	r3, #7
 800dedc:	d91e      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800dede:	b350      	cbz	r0, 800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800dee0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800dee2:	4630      	mov	r0, r6
 800dee4:	f002 feb2 	bl	8010c4c <ucdr_serialize_string>
 800dee8:	6863      	ldr	r3, [r4, #4]
 800deea:	2b08      	cmp	r3, #8
 800deec:	d916      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800deee:	b310      	cbz	r0, 800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800def0:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 800def2:	4630      	mov	r0, r6
 800def4:	f002 feaa 	bl	8010c4c <ucdr_serialize_string>
 800def8:	6863      	ldr	r3, [r4, #4]
 800defa:	2b09      	cmp	r3, #9
 800defc:	d90e      	bls.n	800df1c <uxr_serialize_OBJK_Publisher_Binary_Qos+0xf8>
 800defe:	b1d0      	cbz	r0, 800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800df00:	f104 082c 	add.w	r8, r4, #44	; 0x2c
 800df04:	2709      	movs	r7, #9
 800df06:	e000      	b.n	800df0a <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe6>
 800df08:	b1a8      	cbz	r0, 800df36 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x112>
 800df0a:	f858 1b04 	ldr.w	r1, [r8], #4
 800df0e:	4630      	mov	r0, r6
 800df10:	f002 fe9c 	bl	8010c4c <ucdr_serialize_string>
 800df14:	6862      	ldr	r2, [r4, #4]
 800df16:	3701      	adds	r7, #1
 800df18:	4297      	cmp	r7, r2
 800df1a:	d3f5      	bcc.n	800df08 <uxr_serialize_OBJK_Publisher_Binary_Qos+0xe4>
 800df1c:	4005      	ands	r5, r0
 800df1e:	b2ed      	uxtb	r5, r5
 800df20:	e78a      	b.n	800de38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800df22:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800df24:	f104 0130 	add.w	r1, r4, #48	; 0x30
 800df28:	4630      	mov	r0, r6
 800df2a:	f002 fe63 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800df2e:	4005      	ands	r5, r0
 800df30:	4628      	mov	r0, r5
 800df32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800df36:	2500      	movs	r5, #0
 800df38:	e77e      	b.n	800de38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>
 800df3a:	4028      	ands	r0, r5
 800df3c:	b2c5      	uxtb	r5, r0
 800df3e:	e77b      	b.n	800de38 <uxr_serialize_OBJK_Publisher_Binary_Qos+0x14>

0800df40 <uxr_serialize_OBJK_Publisher_Binary>:
 800df40:	b570      	push	{r4, r5, r6, lr}
 800df42:	460d      	mov	r5, r1
 800df44:	7809      	ldrb	r1, [r1, #0]
 800df46:	4606      	mov	r6, r0
 800df48:	f7fc ff94 	bl	800ae74 <ucdr_serialize_bool>
 800df4c:	782b      	ldrb	r3, [r5, #0]
 800df4e:	4604      	mov	r4, r0
 800df50:	b94b      	cbnz	r3, 800df66 <uxr_serialize_OBJK_Publisher_Binary+0x26>
 800df52:	7a29      	ldrb	r1, [r5, #8]
 800df54:	4630      	mov	r0, r6
 800df56:	f7fc ff8d 	bl	800ae74 <ucdr_serialize_bool>
 800df5a:	7a2b      	ldrb	r3, [r5, #8]
 800df5c:	4004      	ands	r4, r0
 800df5e:	b2e4      	uxtb	r4, r4
 800df60:	b943      	cbnz	r3, 800df74 <uxr_serialize_OBJK_Publisher_Binary+0x34>
 800df62:	4620      	mov	r0, r4
 800df64:	bd70      	pop	{r4, r5, r6, pc}
 800df66:	6869      	ldr	r1, [r5, #4]
 800df68:	4630      	mov	r0, r6
 800df6a:	f002 fe6f 	bl	8010c4c <ucdr_serialize_string>
 800df6e:	4004      	ands	r4, r0
 800df70:	b2e4      	uxtb	r4, r4
 800df72:	e7ee      	b.n	800df52 <uxr_serialize_OBJK_Publisher_Binary+0x12>
 800df74:	f105 010c 	add.w	r1, r5, #12
 800df78:	4630      	mov	r0, r6
 800df7a:	f7ff ff53 	bl	800de24 <uxr_serialize_OBJK_Publisher_Binary_Qos>
 800df7e:	4004      	ands	r4, r0
 800df80:	4620      	mov	r0, r4
 800df82:	bd70      	pop	{r4, r5, r6, pc}

0800df84 <uxr_serialize_OBJK_Endpoint_QosBinary>:
 800df84:	e92d 4368 	stmdb	sp!, {r3, r5, r6, r8, r9, lr}
 800df88:	4688      	mov	r8, r1
 800df8a:	8809      	ldrh	r1, [r1, #0]
 800df8c:	4681      	mov	r9, r0
 800df8e:	f7fc ffcb 	bl	800af28 <ucdr_serialize_uint16_t>
 800df92:	f898 1002 	ldrb.w	r1, [r8, #2]
 800df96:	4606      	mov	r6, r0
 800df98:	4648      	mov	r0, r9
 800df9a:	f7fc ff6b 	bl	800ae74 <ucdr_serialize_bool>
 800df9e:	f898 3002 	ldrb.w	r3, [r8, #2]
 800dfa2:	4006      	ands	r6, r0
 800dfa4:	b2f5      	uxtb	r5, r6
 800dfa6:	b9eb      	cbnz	r3, 800dfe4 <uxr_serialize_OBJK_Endpoint_QosBinary+0x60>
 800dfa8:	f898 1006 	ldrb.w	r1, [r8, #6]
 800dfac:	4648      	mov	r0, r9
 800dfae:	f7fc ff61 	bl	800ae74 <ucdr_serialize_bool>
 800dfb2:	f898 3006 	ldrb.w	r3, [r8, #6]
 800dfb6:	4005      	ands	r5, r0
 800dfb8:	bb7b      	cbnz	r3, 800e01a <uxr_serialize_OBJK_Endpoint_QosBinary+0x96>
 800dfba:	f898 100c 	ldrb.w	r1, [r8, #12]
 800dfbe:	4648      	mov	r0, r9
 800dfc0:	f7fc ff58 	bl	800ae74 <ucdr_serialize_bool>
 800dfc4:	f898 300c 	ldrb.w	r3, [r8, #12]
 800dfc8:	4005      	ands	r5, r0
 800dfca:	b9f3      	cbnz	r3, 800e00a <uxr_serialize_OBJK_Endpoint_QosBinary+0x86>
 800dfcc:	f898 1014 	ldrb.w	r1, [r8, #20]
 800dfd0:	4648      	mov	r0, r9
 800dfd2:	f7fc ff4f 	bl	800ae74 <ucdr_serialize_bool>
 800dfd6:	f898 3014 	ldrb.w	r3, [r8, #20]
 800dfda:	4005      	ands	r5, r0
 800dfdc:	b94b      	cbnz	r3, 800dff2 <uxr_serialize_OBJK_Endpoint_QosBinary+0x6e>
 800dfde:	4628      	mov	r0, r5
 800dfe0:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800dfe4:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 800dfe8:	4648      	mov	r0, r9
 800dfea:	f7fc ff9d 	bl	800af28 <ucdr_serialize_uint16_t>
 800dfee:	4005      	ands	r5, r0
 800dff0:	e7da      	b.n	800dfa8 <uxr_serialize_OBJK_Endpoint_QosBinary+0x24>
 800dff2:	f8d8 2018 	ldr.w	r2, [r8, #24]
 800dff6:	f108 011c 	add.w	r1, r8, #28
 800dffa:	4648      	mov	r0, r9
 800dffc:	f002 fdfa 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800e000:	4028      	ands	r0, r5
 800e002:	b2c5      	uxtb	r5, r0
 800e004:	4628      	mov	r0, r5
 800e006:	e8bd 8368 	ldmia.w	sp!, {r3, r5, r6, r8, r9, pc}
 800e00a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800e00e:	4648      	mov	r0, r9
 800e010:	f7fd f974 	bl	800b2fc <ucdr_serialize_uint32_t>
 800e014:	4028      	ands	r0, r5
 800e016:	b2c5      	uxtb	r5, r0
 800e018:	e7d8      	b.n	800dfcc <uxr_serialize_OBJK_Endpoint_QosBinary+0x48>
 800e01a:	f8d8 1008 	ldr.w	r1, [r8, #8]
 800e01e:	4648      	mov	r0, r9
 800e020:	f7fd f96c 	bl	800b2fc <ucdr_serialize_uint32_t>
 800e024:	4028      	ands	r0, r5
 800e026:	b2c5      	uxtb	r5, r0
 800e028:	e7c7      	b.n	800dfba <uxr_serialize_OBJK_Endpoint_QosBinary+0x36>
 800e02a:	bf00      	nop

0800e02c <uxr_serialize_OBJK_DataWriter_Binary>:
 800e02c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e02e:	2202      	movs	r2, #2
 800e030:	460d      	mov	r5, r1
 800e032:	4606      	mov	r6, r0
 800e034:	f002 fcea 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e038:	78a9      	ldrb	r1, [r5, #2]
 800e03a:	4604      	mov	r4, r0
 800e03c:	4630      	mov	r0, r6
 800e03e:	f7fc ff19 	bl	800ae74 <ucdr_serialize_bool>
 800e042:	78ab      	ldrb	r3, [r5, #2]
 800e044:	4004      	ands	r4, r0
 800e046:	b2e4      	uxtb	r4, r4
 800e048:	b90b      	cbnz	r3, 800e04e <uxr_serialize_OBJK_DataWriter_Binary+0x22>
 800e04a:	4620      	mov	r0, r4
 800e04c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e04e:	f105 0108 	add.w	r1, r5, #8
 800e052:	4630      	mov	r0, r6
 800e054:	f7ff ff96 	bl	800df84 <uxr_serialize_OBJK_Endpoint_QosBinary>
 800e058:	f895 102c 	ldrb.w	r1, [r5, #44]	; 0x2c
 800e05c:	4607      	mov	r7, r0
 800e05e:	4630      	mov	r0, r6
 800e060:	f7fc ff08 	bl	800ae74 <ucdr_serialize_bool>
 800e064:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800e068:	4038      	ands	r0, r7
 800e06a:	b2c7      	uxtb	r7, r0
 800e06c:	b913      	cbnz	r3, 800e074 <uxr_serialize_OBJK_DataWriter_Binary+0x48>
 800e06e:	403c      	ands	r4, r7
 800e070:	4620      	mov	r0, r4
 800e072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e074:	e9d5 230c 	ldrd	r2, r3, [r5, #48]	; 0x30
 800e078:	4630      	mov	r0, r6
 800e07a:	f7fd fb95 	bl	800b7a8 <ucdr_serialize_uint64_t>
 800e07e:	4007      	ands	r7, r0
 800e080:	e7f5      	b.n	800e06e <uxr_serialize_OBJK_DataWriter_Binary+0x42>
 800e082:	bf00      	nop

0800e084 <uxr_deserialize_ObjectVariant>:
 800e084:	b570      	push	{r4, r5, r6, lr}
 800e086:	4605      	mov	r5, r0
 800e088:	460e      	mov	r6, r1
 800e08a:	f7fc ff37 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e08e:	b168      	cbz	r0, 800e0ac <uxr_deserialize_ObjectVariant+0x28>
 800e090:	7833      	ldrb	r3, [r6, #0]
 800e092:	3b01      	subs	r3, #1
 800e094:	4604      	mov	r4, r0
 800e096:	2b0d      	cmp	r3, #13
 800e098:	d809      	bhi.n	800e0ae <uxr_deserialize_ObjectVariant+0x2a>
 800e09a:	e8df f003 	tbb	[pc, r3]
 800e09e:	0a41      	.short	0x0a41
 800e0a0:	0a0a2323 	.word	0x0a0a2323
 800e0a4:	10080a0a 	.word	0x10080a0a
 800e0a8:	565c1010 	.word	0x565c1010
 800e0ac:	2400      	movs	r4, #0
 800e0ae:	4620      	mov	r0, r4
 800e0b0:	bd70      	pop	{r4, r5, r6, pc}
 800e0b2:	1d31      	adds	r1, r6, #4
 800e0b4:	4628      	mov	r0, r5
 800e0b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0ba:	f7ff be41 	b.w	800dd40 <uxr_deserialize_DATAWRITER_Representation>
 800e0be:	1d31      	adds	r1, r6, #4
 800e0c0:	4628      	mov	r0, r5
 800e0c2:	f7fc ff1b 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e0c6:	2800      	cmp	r0, #0
 800e0c8:	d0f0      	beq.n	800e0ac <uxr_deserialize_ObjectVariant+0x28>
 800e0ca:	7933      	ldrb	r3, [r6, #4]
 800e0cc:	2b01      	cmp	r3, #1
 800e0ce:	d001      	beq.n	800e0d4 <uxr_deserialize_ObjectVariant+0x50>
 800e0d0:	2b02      	cmp	r3, #2
 800e0d2:	d1ec      	bne.n	800e0ae <uxr_deserialize_ObjectVariant+0x2a>
 800e0d4:	68b1      	ldr	r1, [r6, #8]
 800e0d6:	4628      	mov	r0, r5
 800e0d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e0dc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e0e0:	f002 bdc4 	b.w	8010c6c <ucdr_deserialize_string>
 800e0e4:	1d31      	adds	r1, r6, #4
 800e0e6:	4628      	mov	r0, r5
 800e0e8:	f7fc ff08 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e0ec:	4604      	mov	r4, r0
 800e0ee:	b170      	cbz	r0, 800e10e <uxr_deserialize_ObjectVariant+0x8a>
 800e0f0:	7933      	ldrb	r3, [r6, #4]
 800e0f2:	2b02      	cmp	r3, #2
 800e0f4:	d04c      	beq.n	800e190 <uxr_deserialize_ObjectVariant+0x10c>
 800e0f6:	2b03      	cmp	r3, #3
 800e0f8:	d109      	bne.n	800e10e <uxr_deserialize_ObjectVariant+0x8a>
 800e0fa:	f106 0308 	add.w	r3, r6, #8
 800e0fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e102:	f106 010c 	add.w	r1, r6, #12
 800e106:	4628      	mov	r0, r5
 800e108:	f002 fd86 	bl	8010c18 <ucdr_deserialize_sequence_uint8_t>
 800e10c:	4604      	mov	r4, r0
 800e10e:	2202      	movs	r2, #2
 800e110:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e114:	4628      	mov	r0, r5
 800e116:	f002 fcdd 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e11a:	4020      	ands	r0, r4
 800e11c:	b2c4      	uxtb	r4, r0
 800e11e:	e7c6      	b.n	800e0ae <uxr_deserialize_ObjectVariant+0x2a>
 800e120:	1d31      	adds	r1, r6, #4
 800e122:	4628      	mov	r0, r5
 800e124:	f7fc feea 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e128:	4604      	mov	r4, r0
 800e12a:	b130      	cbz	r0, 800e13a <uxr_deserialize_ObjectVariant+0xb6>
 800e12c:	7933      	ldrb	r3, [r6, #4]
 800e12e:	2b02      	cmp	r3, #2
 800e130:	d036      	beq.n	800e1a0 <uxr_deserialize_ObjectVariant+0x11c>
 800e132:	2b03      	cmp	r3, #3
 800e134:	d03c      	beq.n	800e1b0 <uxr_deserialize_ObjectVariant+0x12c>
 800e136:	2b01      	cmp	r3, #1
 800e138:	d032      	beq.n	800e1a0 <uxr_deserialize_ObjectVariant+0x11c>
 800e13a:	f506 7103 	add.w	r1, r6, #524	; 0x20c
 800e13e:	4628      	mov	r0, r5
 800e140:	f7fd fc82 	bl	800ba48 <ucdr_deserialize_int16_t>
 800e144:	4020      	ands	r0, r4
 800e146:	b2c4      	uxtb	r4, r0
 800e148:	e7b1      	b.n	800e0ae <uxr_deserialize_ObjectVariant+0x2a>
 800e14a:	1d31      	adds	r1, r6, #4
 800e14c:	4628      	mov	r0, r5
 800e14e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e152:	f7ff bcab 	b.w	800daac <uxr_deserialize_CLIENT_Representation>
 800e156:	2204      	movs	r2, #4
 800e158:	18b1      	adds	r1, r6, r2
 800e15a:	4628      	mov	r0, r5
 800e15c:	f002 fcba 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e160:	2202      	movs	r2, #2
 800e162:	f106 0108 	add.w	r1, r6, #8
 800e166:	4604      	mov	r4, r0
 800e168:	4628      	mov	r0, r5
 800e16a:	f002 fcb3 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e16e:	2202      	movs	r2, #2
 800e170:	4004      	ands	r4, r0
 800e172:	f106 010a 	add.w	r1, r6, #10
 800e176:	4628      	mov	r0, r5
 800e178:	f002 fcac 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e17c:	b2e4      	uxtb	r4, r4
 800e17e:	4603      	mov	r3, r0
 800e180:	f106 010c 	add.w	r1, r6, #12
 800e184:	4628      	mov	r0, r5
 800e186:	401c      	ands	r4, r3
 800e188:	f7fc fe8a 	bl	800aea0 <ucdr_deserialize_bool>
 800e18c:	4004      	ands	r4, r0
 800e18e:	e78e      	b.n	800e0ae <uxr_deserialize_ObjectVariant+0x2a>
 800e190:	68b1      	ldr	r1, [r6, #8]
 800e192:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e196:	4628      	mov	r0, r5
 800e198:	f002 fd68 	bl	8010c6c <ucdr_deserialize_string>
 800e19c:	4604      	mov	r4, r0
 800e19e:	e7b6      	b.n	800e10e <uxr_deserialize_ObjectVariant+0x8a>
 800e1a0:	68b1      	ldr	r1, [r6, #8]
 800e1a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1a6:	4628      	mov	r0, r5
 800e1a8:	f002 fd60 	bl	8010c6c <ucdr_deserialize_string>
 800e1ac:	4604      	mov	r4, r0
 800e1ae:	e7c4      	b.n	800e13a <uxr_deserialize_ObjectVariant+0xb6>
 800e1b0:	f106 0308 	add.w	r3, r6, #8
 800e1b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e1b8:	f106 010c 	add.w	r1, r6, #12
 800e1bc:	4628      	mov	r0, r5
 800e1be:	f002 fd2b 	bl	8010c18 <ucdr_deserialize_sequence_uint8_t>
 800e1c2:	4604      	mov	r4, r0
 800e1c4:	e7b9      	b.n	800e13a <uxr_deserialize_ObjectVariant+0xb6>
 800e1c6:	bf00      	nop

0800e1c8 <uxr_deserialize_BaseObjectRequest>:
 800e1c8:	b570      	push	{r4, r5, r6, lr}
 800e1ca:	2202      	movs	r2, #2
 800e1cc:	4605      	mov	r5, r0
 800e1ce:	460e      	mov	r6, r1
 800e1d0:	f002 fc80 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e1d4:	2202      	movs	r2, #2
 800e1d6:	4604      	mov	r4, r0
 800e1d8:	18b1      	adds	r1, r6, r2
 800e1da:	4628      	mov	r0, r5
 800e1dc:	f002 fc7a 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e1e0:	4020      	ands	r0, r4
 800e1e2:	b2c0      	uxtb	r0, r0
 800e1e4:	bd70      	pop	{r4, r5, r6, pc}
 800e1e6:	bf00      	nop

0800e1e8 <uxr_serialize_ActivityInfoVariant>:
 800e1e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1ec:	460d      	mov	r5, r1
 800e1ee:	7809      	ldrb	r1, [r1, #0]
 800e1f0:	4607      	mov	r7, r0
 800e1f2:	f7fc fe6d 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e1f6:	4681      	mov	r9, r0
 800e1f8:	b138      	cbz	r0, 800e20a <uxr_serialize_ActivityInfoVariant+0x22>
 800e1fa:	782b      	ldrb	r3, [r5, #0]
 800e1fc:	2b06      	cmp	r3, #6
 800e1fe:	f000 8082 	beq.w	800e306 <uxr_serialize_ActivityInfoVariant+0x11e>
 800e202:	2b0d      	cmp	r3, #13
 800e204:	d016      	beq.n	800e234 <uxr_serialize_ActivityInfoVariant+0x4c>
 800e206:	2b05      	cmp	r3, #5
 800e208:	d002      	beq.n	800e210 <uxr_serialize_ActivityInfoVariant+0x28>
 800e20a:	4648      	mov	r0, r9
 800e20c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e210:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e214:	4638      	mov	r0, r7
 800e216:	f7fd fb97 	bl	800b948 <ucdr_serialize_int16_t>
 800e21a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
 800e21e:	4681      	mov	r9, r0
 800e220:	4638      	mov	r0, r7
 800e222:	f7fd fac1 	bl	800b7a8 <ucdr_serialize_uint64_t>
 800e226:	ea09 0000 	and.w	r0, r9, r0
 800e22a:	fa5f f980 	uxtb.w	r9, r0
 800e22e:	4648      	mov	r0, r9
 800e230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e234:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e238:	4638      	mov	r0, r7
 800e23a:	f7fd fb85 	bl	800b948 <ucdr_serialize_int16_t>
 800e23e:	68e9      	ldr	r1, [r5, #12]
 800e240:	4681      	mov	r9, r0
 800e242:	4638      	mov	r0, r7
 800e244:	f7fd f85a 	bl	800b2fc <ucdr_serialize_uint32_t>
 800e248:	68eb      	ldr	r3, [r5, #12]
 800e24a:	2b00      	cmp	r3, #0
 800e24c:	d0eb      	beq.n	800e226 <uxr_serialize_ActivityInfoVariant+0x3e>
 800e24e:	b320      	cbz	r0, 800e29a <uxr_serialize_ActivityInfoVariant+0xb2>
 800e250:	f105 080c 	add.w	r8, r5, #12
 800e254:	2600      	movs	r6, #0
 800e256:	eb06 0a46 	add.w	sl, r6, r6, lsl #1
 800e25a:	eb05 0aca 	add.w	sl, r5, sl, lsl #3
 800e25e:	f89a 1010 	ldrb.w	r1, [sl, #16]
 800e262:	4638      	mov	r0, r7
 800e264:	f7fc fe34 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e268:	2800      	cmp	r0, #0
 800e26a:	d053      	beq.n	800e314 <uxr_serialize_ActivityInfoVariant+0x12c>
 800e26c:	f89a 3010 	ldrb.w	r3, [sl, #16]
 800e270:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 800e274:	0074      	lsls	r4, r6, #1
 800e276:	00c9      	lsls	r1, r1, #3
 800e278:	2b03      	cmp	r3, #3
 800e27a:	d854      	bhi.n	800e326 <uxr_serialize_ActivityInfoVariant+0x13e>
 800e27c:	e8df f003 	tbb	[pc, r3]
 800e280:	02102132 	.word	0x02102132
 800e284:	4441      	add	r1, r8
 800e286:	4638      	mov	r0, r7
 800e288:	6889      	ldr	r1, [r1, #8]
 800e28a:	f002 fcdf 	bl	8010c4c <ucdr_serialize_string>
 800e28e:	68ea      	ldr	r2, [r5, #12]
 800e290:	3601      	adds	r6, #1
 800e292:	4296      	cmp	r6, r2
 800e294:	d242      	bcs.n	800e31c <uxr_serialize_ActivityInfoVariant+0x134>
 800e296:	2800      	cmp	r0, #0
 800e298:	d1dd      	bne.n	800e256 <uxr_serialize_ActivityInfoVariant+0x6e>
 800e29a:	f04f 0900 	mov.w	r9, #0
 800e29e:	e7b4      	b.n	800e20a <uxr_serialize_ActivityInfoVariant+0x22>
 800e2a0:	3108      	adds	r1, #8
 800e2a2:	4441      	add	r1, r8
 800e2a4:	2210      	movs	r2, #16
 800e2a6:	4638      	mov	r0, r7
 800e2a8:	f002 fbb0 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e2ac:	4434      	add	r4, r6
 800e2ae:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e2b2:	4604      	mov	r4, r0
 800e2b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800e2b6:	4638      	mov	r0, r7
 800e2b8:	f7fd f820 	bl	800b2fc <ucdr_serialize_uint32_t>
 800e2bc:	4020      	ands	r0, r4
 800e2be:	b2c0      	uxtb	r0, r0
 800e2c0:	e7e5      	b.n	800e28e <uxr_serialize_ActivityInfoVariant+0xa6>
 800e2c2:	3108      	adds	r1, #8
 800e2c4:	4441      	add	r1, r8
 800e2c6:	2204      	movs	r2, #4
 800e2c8:	4638      	mov	r0, r7
 800e2ca:	f002 fb9f 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e2ce:	4434      	add	r4, r6
 800e2d0:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e2d4:	4604      	mov	r4, r0
 800e2d6:	8b19      	ldrh	r1, [r3, #24]
 800e2d8:	4638      	mov	r0, r7
 800e2da:	f7fc fe25 	bl	800af28 <ucdr_serialize_uint16_t>
 800e2de:	4020      	ands	r0, r4
 800e2e0:	b2c0      	uxtb	r0, r0
 800e2e2:	e7d4      	b.n	800e28e <uxr_serialize_ActivityInfoVariant+0xa6>
 800e2e4:	3108      	adds	r1, #8
 800e2e6:	4441      	add	r1, r8
 800e2e8:	2202      	movs	r2, #2
 800e2ea:	4638      	mov	r0, r7
 800e2ec:	f002 fb8e 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e2f0:	4434      	add	r4, r6
 800e2f2:	eb05 03c4 	add.w	r3, r5, r4, lsl #3
 800e2f6:	4604      	mov	r4, r0
 800e2f8:	7d99      	ldrb	r1, [r3, #22]
 800e2fa:	4638      	mov	r0, r7
 800e2fc:	f7fc fde8 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e300:	4020      	ands	r0, r4
 800e302:	b2c0      	uxtb	r0, r0
 800e304:	e7c3      	b.n	800e28e <uxr_serialize_ActivityInfoVariant+0xa6>
 800e306:	f9b5 1008 	ldrsh.w	r1, [r5, #8]
 800e30a:	4638      	mov	r0, r7
 800e30c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e310:	f7fd bb1a 	b.w	800b948 <ucdr_serialize_int16_t>
 800e314:	68ea      	ldr	r2, [r5, #12]
 800e316:	3601      	adds	r6, #1
 800e318:	42b2      	cmp	r2, r6
 800e31a:	d8be      	bhi.n	800e29a <uxr_serialize_ActivityInfoVariant+0xb2>
 800e31c:	ea09 0900 	and.w	r9, r9, r0
 800e320:	fa5f f989 	uxtb.w	r9, r9
 800e324:	e771      	b.n	800e20a <uxr_serialize_ActivityInfoVariant+0x22>
 800e326:	68eb      	ldr	r3, [r5, #12]
 800e328:	3601      	adds	r6, #1
 800e32a:	429e      	cmp	r6, r3
 800e32c:	f10a 0a18 	add.w	sl, sl, #24
 800e330:	d395      	bcc.n	800e25e <uxr_serialize_ActivityInfoVariant+0x76>
 800e332:	e76a      	b.n	800e20a <uxr_serialize_ActivityInfoVariant+0x22>

0800e334 <uxr_deserialize_BaseObjectReply>:
 800e334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e338:	2202      	movs	r2, #2
 800e33a:	4606      	mov	r6, r0
 800e33c:	460f      	mov	r7, r1
 800e33e:	f002 fbc9 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e342:	2202      	movs	r2, #2
 800e344:	18b9      	adds	r1, r7, r2
 800e346:	4605      	mov	r5, r0
 800e348:	4630      	mov	r0, r6
 800e34a:	f002 fbc3 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e34e:	1d39      	adds	r1, r7, #4
 800e350:	4680      	mov	r8, r0
 800e352:	4630      	mov	r0, r6
 800e354:	f7fc fdd2 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e358:	1d79      	adds	r1, r7, #5
 800e35a:	4604      	mov	r4, r0
 800e35c:	4630      	mov	r0, r6
 800e35e:	f7fc fdcd 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e362:	ea05 0508 	and.w	r5, r5, r8
 800e366:	402c      	ands	r4, r5
 800e368:	4020      	ands	r0, r4
 800e36a:	b2c0      	uxtb	r0, r0
 800e36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e370 <uxr_serialize_ReadSpecification>:
 800e370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e374:	460e      	mov	r6, r1
 800e376:	7809      	ldrb	r1, [r1, #0]
 800e378:	4607      	mov	r7, r0
 800e37a:	f7fc fda9 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e37e:	7871      	ldrb	r1, [r6, #1]
 800e380:	4604      	mov	r4, r0
 800e382:	4638      	mov	r0, r7
 800e384:	f7fc fda4 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e388:	78b1      	ldrb	r1, [r6, #2]
 800e38a:	4004      	ands	r4, r0
 800e38c:	4638      	mov	r0, r7
 800e38e:	f7fc fd71 	bl	800ae74 <ucdr_serialize_bool>
 800e392:	78b3      	ldrb	r3, [r6, #2]
 800e394:	b2e4      	uxtb	r4, r4
 800e396:	4004      	ands	r4, r0
 800e398:	b94b      	cbnz	r3, 800e3ae <uxr_serialize_ReadSpecification+0x3e>
 800e39a:	7a31      	ldrb	r1, [r6, #8]
 800e39c:	4638      	mov	r0, r7
 800e39e:	f7fc fd69 	bl	800ae74 <ucdr_serialize_bool>
 800e3a2:	7a33      	ldrb	r3, [r6, #8]
 800e3a4:	4004      	ands	r4, r0
 800e3a6:	b943      	cbnz	r3, 800e3ba <uxr_serialize_ReadSpecification+0x4a>
 800e3a8:	4620      	mov	r0, r4
 800e3aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3ae:	6871      	ldr	r1, [r6, #4]
 800e3b0:	4638      	mov	r0, r7
 800e3b2:	f002 fc4b 	bl	8010c4c <ucdr_serialize_string>
 800e3b6:	4004      	ands	r4, r0
 800e3b8:	e7ef      	b.n	800e39a <uxr_serialize_ReadSpecification+0x2a>
 800e3ba:	8971      	ldrh	r1, [r6, #10]
 800e3bc:	4638      	mov	r0, r7
 800e3be:	f7fc fdb3 	bl	800af28 <ucdr_serialize_uint16_t>
 800e3c2:	89b1      	ldrh	r1, [r6, #12]
 800e3c4:	4605      	mov	r5, r0
 800e3c6:	4638      	mov	r0, r7
 800e3c8:	f7fc fdae 	bl	800af28 <ucdr_serialize_uint16_t>
 800e3cc:	89f1      	ldrh	r1, [r6, #14]
 800e3ce:	4005      	ands	r5, r0
 800e3d0:	4638      	mov	r0, r7
 800e3d2:	f7fc fda9 	bl	800af28 <ucdr_serialize_uint16_t>
 800e3d6:	8a31      	ldrh	r1, [r6, #16]
 800e3d8:	4680      	mov	r8, r0
 800e3da:	4638      	mov	r0, r7
 800e3dc:	f7fc fda4 	bl	800af28 <ucdr_serialize_uint16_t>
 800e3e0:	b2ed      	uxtb	r5, r5
 800e3e2:	4025      	ands	r5, r4
 800e3e4:	ea08 0505 	and.w	r5, r8, r5
 800e3e8:	ea00 0405 	and.w	r4, r0, r5
 800e3ec:	4620      	mov	r0, r4
 800e3ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3f2:	bf00      	nop

0800e3f4 <uxr_serialize_CREATE_CLIENT_Payload>:
 800e3f4:	f7ff bb02 	b.w	800d9fc <uxr_serialize_CLIENT_Representation>

0800e3f8 <uxr_serialize_CREATE_Payload>:
 800e3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fa:	2202      	movs	r2, #2
 800e3fc:	4607      	mov	r7, r0
 800e3fe:	460e      	mov	r6, r1
 800e400:	f002 fb04 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e404:	2202      	movs	r2, #2
 800e406:	18b1      	adds	r1, r6, r2
 800e408:	4605      	mov	r5, r0
 800e40a:	4638      	mov	r0, r7
 800e40c:	f002 fafe 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e410:	7931      	ldrb	r1, [r6, #4]
 800e412:	4604      	mov	r4, r0
 800e414:	4638      	mov	r0, r7
 800e416:	f7fc fd5b 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e41a:	b170      	cbz	r0, 800e43a <uxr_serialize_CREATE_Payload+0x42>
 800e41c:	7933      	ldrb	r3, [r6, #4]
 800e41e:	402c      	ands	r4, r5
 800e420:	3b01      	subs	r3, #1
 800e422:	b2e4      	uxtb	r4, r4
 800e424:	2b0d      	cmp	r3, #13
 800e426:	d809      	bhi.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e428:	e8df f003 	tbb	[pc, r3]
 800e42c:	23230a4c 	.word	0x23230a4c
 800e430:	0a0a0a0a 	.word	0x0a0a0a0a
 800e434:	12121208 	.word	0x12121208
 800e438:	3e45      	.short	0x3e45
 800e43a:	2400      	movs	r4, #0
 800e43c:	4620      	mov	r0, r4
 800e43e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e440:	f106 0108 	add.w	r1, r6, #8
 800e444:	4638      	mov	r0, r7
 800e446:	f7ff fbdf 	bl	800dc08 <uxr_serialize_DATAWRITER_Representation>
 800e44a:	4004      	ands	r4, r0
 800e44c:	4620      	mov	r0, r4
 800e44e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e450:	7a31      	ldrb	r1, [r6, #8]
 800e452:	4638      	mov	r0, r7
 800e454:	f7fc fd3c 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e458:	2800      	cmp	r0, #0
 800e45a:	d0ee      	beq.n	800e43a <uxr_serialize_CREATE_Payload+0x42>
 800e45c:	7a33      	ldrb	r3, [r6, #8]
 800e45e:	2b01      	cmp	r3, #1
 800e460:	d001      	beq.n	800e466 <uxr_serialize_CREATE_Payload+0x6e>
 800e462:	2b02      	cmp	r3, #2
 800e464:	d1ea      	bne.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e466:	68f1      	ldr	r1, [r6, #12]
 800e468:	4638      	mov	r0, r7
 800e46a:	f002 fbef 	bl	8010c4c <ucdr_serialize_string>
 800e46e:	4004      	ands	r4, r0
 800e470:	e7e4      	b.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e472:	7a31      	ldrb	r1, [r6, #8]
 800e474:	4638      	mov	r0, r7
 800e476:	f7fc fd2b 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e47a:	4605      	mov	r5, r0
 800e47c:	b158      	cbz	r0, 800e496 <uxr_serialize_CREATE_Payload+0x9e>
 800e47e:	7a33      	ldrb	r3, [r6, #8]
 800e480:	2b02      	cmp	r3, #2
 800e482:	d034      	beq.n	800e4ee <uxr_serialize_CREATE_Payload+0xf6>
 800e484:	2b03      	cmp	r3, #3
 800e486:	d106      	bne.n	800e496 <uxr_serialize_CREATE_Payload+0x9e>
 800e488:	68f2      	ldr	r2, [r6, #12]
 800e48a:	f106 0110 	add.w	r1, r6, #16
 800e48e:	4638      	mov	r0, r7
 800e490:	f002 fbb0 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800e494:	4605      	mov	r5, r0
 800e496:	2202      	movs	r2, #2
 800e498:	f506 7104 	add.w	r1, r6, #528	; 0x210
 800e49c:	4638      	mov	r0, r7
 800e49e:	f002 fab5 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e4a2:	4028      	ands	r0, r5
 800e4a4:	4004      	ands	r4, r0
 800e4a6:	e7c9      	b.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e4a8:	f106 0108 	add.w	r1, r6, #8
 800e4ac:	4638      	mov	r0, r7
 800e4ae:	f7ff faa5 	bl	800d9fc <uxr_serialize_CLIENT_Representation>
 800e4b2:	4004      	ands	r4, r0
 800e4b4:	e7c2      	b.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e4b6:	f106 0108 	add.w	r1, r6, #8
 800e4ba:	4638      	mov	r0, r7
 800e4bc:	f7ff fb5a 	bl	800db74 <uxr_serialize_AGENT_Representation>
 800e4c0:	4004      	ands	r4, r0
 800e4c2:	e7bb      	b.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e4c4:	7a31      	ldrb	r1, [r6, #8]
 800e4c6:	4638      	mov	r0, r7
 800e4c8:	f7fc fd02 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e4cc:	4605      	mov	r5, r0
 800e4ce:	b130      	cbz	r0, 800e4de <uxr_serialize_CREATE_Payload+0xe6>
 800e4d0:	7a33      	ldrb	r3, [r6, #8]
 800e4d2:	2b02      	cmp	r3, #2
 800e4d4:	d011      	beq.n	800e4fa <uxr_serialize_CREATE_Payload+0x102>
 800e4d6:	2b03      	cmp	r3, #3
 800e4d8:	d015      	beq.n	800e506 <uxr_serialize_CREATE_Payload+0x10e>
 800e4da:	2b01      	cmp	r3, #1
 800e4dc:	d00d      	beq.n	800e4fa <uxr_serialize_CREATE_Payload+0x102>
 800e4de:	f9b6 1210 	ldrsh.w	r1, [r6, #528]	; 0x210
 800e4e2:	4638      	mov	r0, r7
 800e4e4:	f7fd fa30 	bl	800b948 <ucdr_serialize_int16_t>
 800e4e8:	4028      	ands	r0, r5
 800e4ea:	4004      	ands	r4, r0
 800e4ec:	e7a6      	b.n	800e43c <uxr_serialize_CREATE_Payload+0x44>
 800e4ee:	68f1      	ldr	r1, [r6, #12]
 800e4f0:	4638      	mov	r0, r7
 800e4f2:	f002 fbab 	bl	8010c4c <ucdr_serialize_string>
 800e4f6:	4605      	mov	r5, r0
 800e4f8:	e7cd      	b.n	800e496 <uxr_serialize_CREATE_Payload+0x9e>
 800e4fa:	68f1      	ldr	r1, [r6, #12]
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f002 fba5 	bl	8010c4c <ucdr_serialize_string>
 800e502:	4605      	mov	r5, r0
 800e504:	e7eb      	b.n	800e4de <uxr_serialize_CREATE_Payload+0xe6>
 800e506:	68f2      	ldr	r2, [r6, #12]
 800e508:	f106 0110 	add.w	r1, r6, #16
 800e50c:	4638      	mov	r0, r7
 800e50e:	f002 fb71 	bl	8010bf4 <ucdr_serialize_sequence_uint8_t>
 800e512:	4605      	mov	r5, r0
 800e514:	e7e3      	b.n	800e4de <uxr_serialize_CREATE_Payload+0xe6>
 800e516:	bf00      	nop

0800e518 <uxr_deserialize_GET_INFO_Payload>:
 800e518:	b570      	push	{r4, r5, r6, lr}
 800e51a:	2202      	movs	r2, #2
 800e51c:	4605      	mov	r5, r0
 800e51e:	460e      	mov	r6, r1
 800e520:	f002 fad8 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e524:	2202      	movs	r2, #2
 800e526:	18b1      	adds	r1, r6, r2
 800e528:	4604      	mov	r4, r0
 800e52a:	4628      	mov	r0, r5
 800e52c:	f002 fad2 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e530:	1d31      	adds	r1, r6, #4
 800e532:	4004      	ands	r4, r0
 800e534:	4628      	mov	r0, r5
 800e536:	f7fd f811 	bl	800b55c <ucdr_deserialize_uint32_t>
 800e53a:	b2e4      	uxtb	r4, r4
 800e53c:	4020      	ands	r0, r4
 800e53e:	bd70      	pop	{r4, r5, r6, pc}

0800e540 <uxr_serialize_DELETE_Payload>:
 800e540:	b570      	push	{r4, r5, r6, lr}
 800e542:	2202      	movs	r2, #2
 800e544:	4605      	mov	r5, r0
 800e546:	460e      	mov	r6, r1
 800e548:	f002 fa60 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e54c:	2202      	movs	r2, #2
 800e54e:	4604      	mov	r4, r0
 800e550:	18b1      	adds	r1, r6, r2
 800e552:	4628      	mov	r0, r5
 800e554:	f002 fa5a 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e558:	4020      	ands	r0, r4
 800e55a:	b2c0      	uxtb	r0, r0
 800e55c:	bd70      	pop	{r4, r5, r6, pc}
 800e55e:	bf00      	nop

0800e560 <uxr_deserialize_STATUS_AGENT_Payload>:
 800e560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e564:	4605      	mov	r5, r0
 800e566:	460e      	mov	r6, r1
 800e568:	f7fc fcc8 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e56c:	1c71      	adds	r1, r6, #1
 800e56e:	4604      	mov	r4, r0
 800e570:	4628      	mov	r0, r5
 800e572:	f7fc fcc3 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e576:	2204      	movs	r2, #4
 800e578:	18b1      	adds	r1, r6, r2
 800e57a:	4680      	mov	r8, r0
 800e57c:	4628      	mov	r0, r5
 800e57e:	f002 faa9 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e582:	f106 0108 	add.w	r1, r6, #8
 800e586:	4607      	mov	r7, r0
 800e588:	2202      	movs	r2, #2
 800e58a:	4628      	mov	r0, r5
 800e58c:	f002 faa2 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e590:	ea04 0308 	and.w	r3, r4, r8
 800e594:	b2db      	uxtb	r3, r3
 800e596:	ea03 0407 	and.w	r4, r3, r7
 800e59a:	2202      	movs	r2, #2
 800e59c:	4607      	mov	r7, r0
 800e59e:	f106 010a 	add.w	r1, r6, #10
 800e5a2:	4628      	mov	r0, r5
 800e5a4:	f002 fa96 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e5a8:	f106 010c 	add.w	r1, r6, #12
 800e5ac:	4603      	mov	r3, r0
 800e5ae:	4628      	mov	r0, r5
 800e5b0:	461d      	mov	r5, r3
 800e5b2:	f7fc fc75 	bl	800aea0 <ucdr_deserialize_bool>
 800e5b6:	403c      	ands	r4, r7
 800e5b8:	4025      	ands	r5, r4
 800e5ba:	4028      	ands	r0, r5
 800e5bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5c0 <uxr_deserialize_STATUS_Payload>:
 800e5c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5c4:	2202      	movs	r2, #2
 800e5c6:	4606      	mov	r6, r0
 800e5c8:	460f      	mov	r7, r1
 800e5ca:	f002 fa83 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e5ce:	2202      	movs	r2, #2
 800e5d0:	18b9      	adds	r1, r7, r2
 800e5d2:	4605      	mov	r5, r0
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f002 fa7d 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e5da:	1d39      	adds	r1, r7, #4
 800e5dc:	4680      	mov	r8, r0
 800e5de:	4630      	mov	r0, r6
 800e5e0:	f7fc fc8c 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e5e4:	1d79      	adds	r1, r7, #5
 800e5e6:	4604      	mov	r4, r0
 800e5e8:	4630      	mov	r0, r6
 800e5ea:	f7fc fc87 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e5ee:	ea05 0508 	and.w	r5, r5, r8
 800e5f2:	402c      	ands	r4, r5
 800e5f4:	4020      	ands	r0, r4
 800e5f6:	b2c0      	uxtb	r0, r0
 800e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e5fc <uxr_serialize_INFO_Payload>:
 800e5fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e600:	2202      	movs	r2, #2
 800e602:	460c      	mov	r4, r1
 800e604:	4605      	mov	r5, r0
 800e606:	f002 fa01 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e60a:	2202      	movs	r2, #2
 800e60c:	18a1      	adds	r1, r4, r2
 800e60e:	4680      	mov	r8, r0
 800e610:	4628      	mov	r0, r5
 800e612:	f002 f9fb 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e616:	7921      	ldrb	r1, [r4, #4]
 800e618:	4607      	mov	r7, r0
 800e61a:	4628      	mov	r0, r5
 800e61c:	f7fc fc58 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e620:	7961      	ldrb	r1, [r4, #5]
 800e622:	4606      	mov	r6, r0
 800e624:	4628      	mov	r0, r5
 800e626:	f7fc fc53 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e62a:	ea08 0807 	and.w	r8, r8, r7
 800e62e:	ea06 0608 	and.w	r6, r6, r8
 800e632:	4006      	ands	r6, r0
 800e634:	7a21      	ldrb	r1, [r4, #8]
 800e636:	4628      	mov	r0, r5
 800e638:	f7fc fc1c 	bl	800ae74 <ucdr_serialize_bool>
 800e63c:	7a23      	ldrb	r3, [r4, #8]
 800e63e:	b2f7      	uxtb	r7, r6
 800e640:	4606      	mov	r6, r0
 800e642:	b96b      	cbnz	r3, 800e660 <uxr_serialize_INFO_Payload+0x64>
 800e644:	f894 121c 	ldrb.w	r1, [r4, #540]	; 0x21c
 800e648:	4628      	mov	r0, r5
 800e64a:	f7fc fc13 	bl	800ae74 <ucdr_serialize_bool>
 800e64e:	f894 321c 	ldrb.w	r3, [r4, #540]	; 0x21c
 800e652:	4030      	ands	r0, r6
 800e654:	b2c6      	uxtb	r6, r0
 800e656:	b983      	cbnz	r3, 800e67a <uxr_serialize_INFO_Payload+0x7e>
 800e658:	ea06 0007 	and.w	r0, r6, r7
 800e65c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e660:	7b21      	ldrb	r1, [r4, #12]
 800e662:	4628      	mov	r0, r5
 800e664:	f7fc fc34 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e668:	b188      	cbz	r0, 800e68e <uxr_serialize_INFO_Payload+0x92>
 800e66a:	f104 010c 	add.w	r1, r4, #12
 800e66e:	4628      	mov	r0, r5
 800e670:	f7ff faf2 	bl	800dc58 <uxr_serialize_ObjectVariant.part.0>
 800e674:	4030      	ands	r0, r6
 800e676:	b2c6      	uxtb	r6, r0
 800e678:	e7e4      	b.n	800e644 <uxr_serialize_INFO_Payload+0x48>
 800e67a:	f504 7108 	add.w	r1, r4, #544	; 0x220
 800e67e:	4628      	mov	r0, r5
 800e680:	f7ff fdb2 	bl	800e1e8 <uxr_serialize_ActivityInfoVariant>
 800e684:	4006      	ands	r6, r0
 800e686:	ea06 0007 	and.w	r0, r6, r7
 800e68a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e68e:	4606      	mov	r6, r0
 800e690:	e7d8      	b.n	800e644 <uxr_serialize_INFO_Payload+0x48>
 800e692:	bf00      	nop

0800e694 <uxr_serialize_READ_DATA_Payload>:
 800e694:	b570      	push	{r4, r5, r6, lr}
 800e696:	2202      	movs	r2, #2
 800e698:	4605      	mov	r5, r0
 800e69a:	460e      	mov	r6, r1
 800e69c:	f002 f9b6 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e6a0:	2202      	movs	r2, #2
 800e6a2:	18b1      	adds	r1, r6, r2
 800e6a4:	4604      	mov	r4, r0
 800e6a6:	4628      	mov	r0, r5
 800e6a8:	f002 f9b0 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e6ac:	1d31      	adds	r1, r6, #4
 800e6ae:	4004      	ands	r4, r0
 800e6b0:	4628      	mov	r0, r5
 800e6b2:	f7ff fe5d 	bl	800e370 <uxr_serialize_ReadSpecification>
 800e6b6:	b2e4      	uxtb	r4, r4
 800e6b8:	4020      	ands	r0, r4
 800e6ba:	bd70      	pop	{r4, r5, r6, pc}

0800e6bc <uxr_serialize_WRITE_DATA_Payload_Data>:
 800e6bc:	b570      	push	{r4, r5, r6, lr}
 800e6be:	2202      	movs	r2, #2
 800e6c0:	4605      	mov	r5, r0
 800e6c2:	460e      	mov	r6, r1
 800e6c4:	f002 f9a2 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e6c8:	2202      	movs	r2, #2
 800e6ca:	4604      	mov	r4, r0
 800e6cc:	18b1      	adds	r1, r6, r2
 800e6ce:	4628      	mov	r0, r5
 800e6d0:	f002 f99c 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e6d4:	4020      	ands	r0, r4
 800e6d6:	b2c0      	uxtb	r0, r0
 800e6d8:	bd70      	pop	{r4, r5, r6, pc}
 800e6da:	bf00      	nop

0800e6dc <uxr_serialize_ACKNACK_Payload>:
 800e6dc:	b570      	push	{r4, r5, r6, lr}
 800e6de:	460c      	mov	r4, r1
 800e6e0:	460e      	mov	r6, r1
 800e6e2:	f834 1b02 	ldrh.w	r1, [r4], #2
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	f7fc fc1e 	bl	800af28 <ucdr_serialize_uint16_t>
 800e6ec:	2202      	movs	r2, #2
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	4604      	mov	r4, r0
 800e6f2:	4628      	mov	r0, r5
 800e6f4:	f002 f98a 	bl	8010a0c <ucdr_serialize_array_uint8_t>
 800e6f8:	7931      	ldrb	r1, [r6, #4]
 800e6fa:	4004      	ands	r4, r0
 800e6fc:	4628      	mov	r0, r5
 800e6fe:	f7fc fbe7 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e702:	b2e4      	uxtb	r4, r4
 800e704:	4020      	ands	r0, r4
 800e706:	bd70      	pop	{r4, r5, r6, pc}

0800e708 <uxr_deserialize_ACKNACK_Payload>:
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	4605      	mov	r5, r0
 800e70c:	460e      	mov	r6, r1
 800e70e:	f7fc fd0b 	bl	800b128 <ucdr_deserialize_uint16_t>
 800e712:	2202      	movs	r2, #2
 800e714:	18b1      	adds	r1, r6, r2
 800e716:	4604      	mov	r4, r0
 800e718:	4628      	mov	r0, r5
 800e71a:	f002 f9db 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e71e:	1d31      	adds	r1, r6, #4
 800e720:	4004      	ands	r4, r0
 800e722:	4628      	mov	r0, r5
 800e724:	f7fc fbea 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e728:	b2e4      	uxtb	r4, r4
 800e72a:	4020      	ands	r0, r4
 800e72c:	bd70      	pop	{r4, r5, r6, pc}
 800e72e:	bf00      	nop

0800e730 <uxr_serialize_HEARTBEAT_Payload>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	460d      	mov	r5, r1
 800e734:	8809      	ldrh	r1, [r1, #0]
 800e736:	4606      	mov	r6, r0
 800e738:	f7fc fbf6 	bl	800af28 <ucdr_serialize_uint16_t>
 800e73c:	8869      	ldrh	r1, [r5, #2]
 800e73e:	4604      	mov	r4, r0
 800e740:	4630      	mov	r0, r6
 800e742:	f7fc fbf1 	bl	800af28 <ucdr_serialize_uint16_t>
 800e746:	7929      	ldrb	r1, [r5, #4]
 800e748:	4004      	ands	r4, r0
 800e74a:	4630      	mov	r0, r6
 800e74c:	f7fc fbc0 	bl	800aed0 <ucdr_serialize_uint8_t>
 800e750:	b2e4      	uxtb	r4, r4
 800e752:	4020      	ands	r0, r4
 800e754:	bd70      	pop	{r4, r5, r6, pc}
 800e756:	bf00      	nop

0800e758 <uxr_deserialize_HEARTBEAT_Payload>:
 800e758:	b570      	push	{r4, r5, r6, lr}
 800e75a:	4605      	mov	r5, r0
 800e75c:	460e      	mov	r6, r1
 800e75e:	f7fc fce3 	bl	800b128 <ucdr_deserialize_uint16_t>
 800e762:	1cb1      	adds	r1, r6, #2
 800e764:	4604      	mov	r4, r0
 800e766:	4628      	mov	r0, r5
 800e768:	f7fc fcde 	bl	800b128 <ucdr_deserialize_uint16_t>
 800e76c:	1d31      	adds	r1, r6, #4
 800e76e:	4004      	ands	r4, r0
 800e770:	4628      	mov	r0, r5
 800e772:	f7fc fbc3 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e776:	b2e4      	uxtb	r4, r4
 800e778:	4020      	ands	r0, r4
 800e77a:	bd70      	pop	{r4, r5, r6, pc}

0800e77c <uxr_deserialize_TIMESTAMP_REPLY_Payload>:
 800e77c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e780:	4605      	mov	r5, r0
 800e782:	460e      	mov	r6, r1
 800e784:	f7fd fa6c 	bl	800bc60 <ucdr_deserialize_int32_t>
 800e788:	1d31      	adds	r1, r6, #4
 800e78a:	4607      	mov	r7, r0
 800e78c:	4628      	mov	r0, r5
 800e78e:	f7fc fee5 	bl	800b55c <ucdr_deserialize_uint32_t>
 800e792:	f106 0108 	add.w	r1, r6, #8
 800e796:	4680      	mov	r8, r0
 800e798:	4628      	mov	r0, r5
 800e79a:	f7fd fa61 	bl	800bc60 <ucdr_deserialize_int32_t>
 800e79e:	f106 010c 	add.w	r1, r6, #12
 800e7a2:	4604      	mov	r4, r0
 800e7a4:	4628      	mov	r0, r5
 800e7a6:	f7fc fed9 	bl	800b55c <ucdr_deserialize_uint32_t>
 800e7aa:	ea07 0708 	and.w	r7, r7, r8
 800e7ae:	403c      	ands	r4, r7
 800e7b0:	f106 0110 	add.w	r1, r6, #16
 800e7b4:	4004      	ands	r4, r0
 800e7b6:	4628      	mov	r0, r5
 800e7b8:	f7fd fa52 	bl	800bc60 <ucdr_deserialize_int32_t>
 800e7bc:	f106 0114 	add.w	r1, r6, #20
 800e7c0:	4607      	mov	r7, r0
 800e7c2:	4628      	mov	r0, r5
 800e7c4:	f7fc feca 	bl	800b55c <ucdr_deserialize_uint32_t>
 800e7c8:	b2e4      	uxtb	r4, r4
 800e7ca:	403c      	ands	r4, r7
 800e7cc:	4020      	ands	r0, r4
 800e7ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7d2:	bf00      	nop

0800e7d4 <uxr_deserialize_SampleIdentity>:
 800e7d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7d8:	220c      	movs	r2, #12
 800e7da:	4604      	mov	r4, r0
 800e7dc:	460d      	mov	r5, r1
 800e7de:	f002 f979 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e7e2:	2203      	movs	r2, #3
 800e7e4:	f105 010c 	add.w	r1, r5, #12
 800e7e8:	4607      	mov	r7, r0
 800e7ea:	4620      	mov	r0, r4
 800e7ec:	f002 f972 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 800e7f0:	f105 010f 	add.w	r1, r5, #15
 800e7f4:	4680      	mov	r8, r0
 800e7f6:	4620      	mov	r0, r4
 800e7f8:	f7fc fb80 	bl	800aefc <ucdr_deserialize_uint8_t>
 800e7fc:	f105 0110 	add.w	r1, r5, #16
 800e800:	4606      	mov	r6, r0
 800e802:	4620      	mov	r0, r4
 800e804:	f7fd fa2c 	bl	800bc60 <ucdr_deserialize_int32_t>
 800e808:	f105 0114 	add.w	r1, r5, #20
 800e80c:	4603      	mov	r3, r0
 800e80e:	4620      	mov	r0, r4
 800e810:	ea07 0708 	and.w	r7, r7, r8
 800e814:	461c      	mov	r4, r3
 800e816:	f7fc fea1 	bl	800b55c <ucdr_deserialize_uint32_t>
 800e81a:	403e      	ands	r6, r7
 800e81c:	4034      	ands	r4, r6
 800e81e:	4020      	ands	r0, r4
 800e820:	b2c0      	uxtb	r0, r0
 800e822:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e826:	bf00      	nop

0800e828 <rcl_convert_rmw_ret_to_rcl_ret>:
 800e828:	280b      	cmp	r0, #11
 800e82a:	dc0d      	bgt.n	800e848 <rcl_convert_rmw_ret_to_rcl_ret+0x20>
 800e82c:	2800      	cmp	r0, #0
 800e82e:	db09      	blt.n	800e844 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e830:	280b      	cmp	r0, #11
 800e832:	d807      	bhi.n	800e844 <rcl_convert_rmw_ret_to_rcl_ret+0x1c>
 800e834:	e8df f000 	tbb	[pc, r0]
 800e838:	07060607 	.word	0x07060607
 800e83c:	06060606 	.word	0x06060606
 800e840:	07070606 	.word	0x07070606
 800e844:	2001      	movs	r0, #1
 800e846:	4770      	bx	lr
 800e848:	28cb      	cmp	r0, #203	; 0xcb
 800e84a:	bf18      	it	ne
 800e84c:	2001      	movne	r0, #1
 800e84e:	4770      	bx	lr

0800e850 <rcl_get_zero_initialized_context>:
 800e850:	4a03      	ldr	r2, [pc, #12]	; (800e860 <rcl_get_zero_initialized_context+0x10>)
 800e852:	4603      	mov	r3, r0
 800e854:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e858:	e883 0003 	stmia.w	r3, {r0, r1}
 800e85c:	4618      	mov	r0, r3
 800e85e:	4770      	bx	lr
 800e860:	0801470c 	.word	0x0801470c

0800e864 <rcl_context_is_valid>:
 800e864:	b118      	cbz	r0, 800e86e <rcl_context_is_valid+0xa>
 800e866:	6840      	ldr	r0, [r0, #4]
 800e868:	3800      	subs	r0, #0
 800e86a:	bf18      	it	ne
 800e86c:	2001      	movne	r0, #1
 800e86e:	4770      	bx	lr

0800e870 <__cleanup_context>:
 800e870:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e874:	4606      	mov	r6, r0
 800e876:	6800      	ldr	r0, [r0, #0]
 800e878:	2300      	movs	r3, #0
 800e87a:	6073      	str	r3, [r6, #4]
 800e87c:	2800      	cmp	r0, #0
 800e87e:	d049      	beq.n	800e914 <__cleanup_context+0xa4>
 800e880:	6947      	ldr	r7, [r0, #20]
 800e882:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800e886:	f8d0 9010 	ldr.w	r9, [r0, #16]
 800e88a:	b137      	cbz	r7, 800e89a <__cleanup_context+0x2a>
 800e88c:	3014      	adds	r0, #20
 800e88e:	f000 f9bb 	bl	800ec08 <rcl_init_options_fini>
 800e892:	4607      	mov	r7, r0
 800e894:	2800      	cmp	r0, #0
 800e896:	d144      	bne.n	800e922 <__cleanup_context+0xb2>
 800e898:	6830      	ldr	r0, [r6, #0]
 800e89a:	6b03      	ldr	r3, [r0, #48]	; 0x30
 800e89c:	b143      	cbz	r3, 800e8b0 <__cleanup_context+0x40>
 800e89e:	3028      	adds	r0, #40	; 0x28
 800e8a0:	f001 fd9a 	bl	80103d8 <rmw_context_fini>
 800e8a4:	b118      	cbz	r0, 800e8ae <__cleanup_context+0x3e>
 800e8a6:	2f00      	cmp	r7, #0
 800e8a8:	d03e      	beq.n	800e928 <__cleanup_context+0xb8>
 800e8aa:	f7fb fde5 	bl	800a478 <rcutils_reset_error>
 800e8ae:	6830      	ldr	r0, [r6, #0]
 800e8b0:	6a03      	ldr	r3, [r0, #32]
 800e8b2:	b1db      	cbz	r3, 800e8ec <__cleanup_context+0x7c>
 800e8b4:	e9d0 2c06 	ldrd	r2, ip, [r0, #24]
 800e8b8:	2a01      	cmp	r2, #1
 800e8ba:	f17c 0100 	sbcs.w	r1, ip, #0
 800e8be:	db11      	blt.n	800e8e4 <__cleanup_context+0x74>
 800e8c0:	2400      	movs	r4, #0
 800e8c2:	4625      	mov	r5, r4
 800e8c4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e8c8:	4649      	mov	r1, r9
 800e8ca:	b1b8      	cbz	r0, 800e8fc <__cleanup_context+0x8c>
 800e8cc:	47c0      	blx	r8
 800e8ce:	6833      	ldr	r3, [r6, #0]
 800e8d0:	e9d3 2c06 	ldrd	r2, ip, [r3, #24]
 800e8d4:	3401      	adds	r4, #1
 800e8d6:	f145 0500 	adc.w	r5, r5, #0
 800e8da:	4294      	cmp	r4, r2
 800e8dc:	eb75 010c 	sbcs.w	r1, r5, ip
 800e8e0:	6a1b      	ldr	r3, [r3, #32]
 800e8e2:	dbef      	blt.n	800e8c4 <__cleanup_context+0x54>
 800e8e4:	4618      	mov	r0, r3
 800e8e6:	4649      	mov	r1, r9
 800e8e8:	47c0      	blx	r8
 800e8ea:	6830      	ldr	r0, [r6, #0]
 800e8ec:	4649      	mov	r1, r9
 800e8ee:	47c0      	blx	r8
 800e8f0:	2300      	movs	r3, #0
 800e8f2:	e9c6 3300 	strd	r3, r3, [r6]
 800e8f6:	4638      	mov	r0, r7
 800e8f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8fc:	3401      	adds	r4, #1
 800e8fe:	f145 0500 	adc.w	r5, r5, #0
 800e902:	4294      	cmp	r4, r2
 800e904:	eb75 010c 	sbcs.w	r1, r5, ip
 800e908:	dbdc      	blt.n	800e8c4 <__cleanup_context+0x54>
 800e90a:	4618      	mov	r0, r3
 800e90c:	4649      	mov	r1, r9
 800e90e:	47c0      	blx	r8
 800e910:	6830      	ldr	r0, [r6, #0]
 800e912:	e7eb      	b.n	800e8ec <__cleanup_context+0x7c>
 800e914:	4607      	mov	r7, r0
 800e916:	2300      	movs	r3, #0
 800e918:	e9c6 3300 	strd	r3, r3, [r6]
 800e91c:	4638      	mov	r0, r7
 800e91e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e922:	f7fb fda9 	bl	800a478 <rcutils_reset_error>
 800e926:	e7b7      	b.n	800e898 <__cleanup_context+0x28>
 800e928:	f7ff ff7e 	bl	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 800e92c:	4607      	mov	r7, r0
 800e92e:	e7bc      	b.n	800e8aa <__cleanup_context+0x3a>

0800e930 <rcl_init>:
 800e930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e934:	1e05      	subs	r5, r0, #0
 800e936:	b09e      	sub	sp, #120	; 0x78
 800e938:	460e      	mov	r6, r1
 800e93a:	4690      	mov	r8, r2
 800e93c:	461f      	mov	r7, r3
 800e93e:	f340 809c 	ble.w	800ea7a <rcl_init+0x14a>
 800e942:	2900      	cmp	r1, #0
 800e944:	f000 809c 	beq.w	800ea80 <rcl_init+0x150>
 800e948:	f1a1 0e04 	sub.w	lr, r1, #4
 800e94c:	f04f 0c00 	mov.w	ip, #0
 800e950:	f85e 4f04 	ldr.w	r4, [lr, #4]!
 800e954:	f10c 0c01 	add.w	ip, ip, #1
 800e958:	2c00      	cmp	r4, #0
 800e95a:	f000 8091 	beq.w	800ea80 <rcl_init+0x150>
 800e95e:	4565      	cmp	r5, ip
 800e960:	d1f6      	bne.n	800e950 <rcl_init+0x20>
 800e962:	f1b8 0f00 	cmp.w	r8, #0
 800e966:	f000 808b 	beq.w	800ea80 <rcl_init+0x150>
 800e96a:	f8d8 4000 	ldr.w	r4, [r8]
 800e96e:	2c00      	cmp	r4, #0
 800e970:	f000 8086 	beq.w	800ea80 <rcl_init+0x150>
 800e974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e976:	f10d 0c64 	add.w	ip, sp, #100	; 0x64
 800e97a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e97e:	6823      	ldr	r3, [r4, #0]
 800e980:	f8cc 3000 	str.w	r3, [ip]
 800e984:	a819      	add	r0, sp, #100	; 0x64
 800e986:	f7fb fd53 	bl	800a430 <rcutils_allocator_is_valid>
 800e98a:	2800      	cmp	r0, #0
 800e98c:	d078      	beq.n	800ea80 <rcl_init+0x150>
 800e98e:	2f00      	cmp	r7, #0
 800e990:	d076      	beq.n	800ea80 <rcl_init+0x150>
 800e992:	683b      	ldr	r3, [r7, #0]
 800e994:	2b00      	cmp	r3, #0
 800e996:	d178      	bne.n	800ea8a <rcl_init+0x15a>
 800e998:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800e99c:	2178      	movs	r1, #120	; 0x78
 800e99e:	2001      	movs	r0, #1
 800e9a0:	4798      	blx	r3
 800e9a2:	4604      	mov	r4, r0
 800e9a4:	6038      	str	r0, [r7, #0]
 800e9a6:	2800      	cmp	r0, #0
 800e9a8:	f000 80b6 	beq.w	800eb18 <rcl_init+0x1e8>
 800e9ac:	a802      	add	r0, sp, #8
 800e9ae:	f001 f957 	bl	800fc60 <rmw_get_zero_initialized_context>
 800e9b2:	a902      	add	r1, sp, #8
 800e9b4:	f104 0028 	add.w	r0, r4, #40	; 0x28
 800e9b8:	2250      	movs	r2, #80	; 0x50
 800e9ba:	ac19      	add	r4, sp, #100	; 0x64
 800e9bc:	f004 fdf6 	bl	80135ac <memcpy>
 800e9c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800e9c2:	f8d7 e000 	ldr.w	lr, [r7]
 800e9c6:	46f4      	mov	ip, lr
 800e9c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800e9cc:	6823      	ldr	r3, [r4, #0]
 800e9ce:	f8cc 3000 	str.w	r3, [ip]
 800e9d2:	f10e 0114 	add.w	r1, lr, #20
 800e9d6:	4640      	mov	r0, r8
 800e9d8:	f000 f940 	bl	800ec5c <rcl_init_options_copy>
 800e9dc:	4604      	mov	r4, r0
 800e9de:	2800      	cmp	r0, #0
 800e9e0:	d144      	bne.n	800ea6c <rcl_init+0x13c>
 800e9e2:	f8d7 9000 	ldr.w	r9, [r7]
 800e9e6:	ea4f 78e5 	mov.w	r8, r5, asr #31
 800e9ea:	f8c9 0020 	str.w	r0, [r9, #32]
 800e9ee:	f8c9 5018 	str.w	r5, [r9, #24]
 800e9f2:	f8c9 801c 	str.w	r8, [r9, #28]
 800e9f6:	2d00      	cmp	r5, #0
 800e9f8:	d04e      	beq.n	800ea98 <rcl_init+0x168>
 800e9fa:	2e00      	cmp	r6, #0
 800e9fc:	d04c      	beq.n	800ea98 <rcl_init+0x168>
 800e9fe:	e9dd 321c 	ldrd	r3, r2, [sp, #112]	; 0x70
 800ea02:	2104      	movs	r1, #4
 800ea04:	4628      	mov	r0, r5
 800ea06:	4798      	blx	r3
 800ea08:	f8c9 0020 	str.w	r0, [r9, #32]
 800ea0c:	f8d7 9000 	ldr.w	r9, [r7]
 800ea10:	f8d9 3020 	ldr.w	r3, [r9, #32]
 800ea14:	46ca      	mov	sl, r9
 800ea16:	b343      	cbz	r3, 800ea6a <rcl_init+0x13a>
 800ea18:	2d01      	cmp	r5, #1
 800ea1a:	f178 0300 	sbcs.w	r3, r8, #0
 800ea1e:	db3b      	blt.n	800ea98 <rcl_init+0x168>
 800ea20:	2400      	movs	r4, #0
 800ea22:	3e04      	subs	r6, #4
 800ea24:	46a1      	mov	r9, r4
 800ea26:	e00b      	b.n	800ea40 <rcl_init+0x110>
 800ea28:	6831      	ldr	r1, [r6, #0]
 800ea2a:	f004 fdbf 	bl	80135ac <memcpy>
 800ea2e:	3401      	adds	r4, #1
 800ea30:	f149 0900 	adc.w	r9, r9, #0
 800ea34:	45c8      	cmp	r8, r9
 800ea36:	bf08      	it	eq
 800ea38:	42a5      	cmpeq	r5, r4
 800ea3a:	d02b      	beq.n	800ea94 <rcl_init+0x164>
 800ea3c:	f8d7 a000 	ldr.w	sl, [r7]
 800ea40:	f856 0f04 	ldr.w	r0, [r6, #4]!
 800ea44:	f7f1 fbce 	bl	80001e4 <strlen>
 800ea48:	1c42      	adds	r2, r0, #1
 800ea4a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800ea4c:	991d      	ldr	r1, [sp, #116]	; 0x74
 800ea4e:	f8da a020 	ldr.w	sl, [sl, #32]
 800ea52:	9201      	str	r2, [sp, #4]
 800ea54:	4610      	mov	r0, r2
 800ea56:	4798      	blx	r3
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	f84a 0024 	str.w	r0, [sl, r4, lsl #2]
 800ea5e:	6a1b      	ldr	r3, [r3, #32]
 800ea60:	9a01      	ldr	r2, [sp, #4]
 800ea62:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800ea66:	2800      	cmp	r0, #0
 800ea68:	d1de      	bne.n	800ea28 <rcl_init+0xf8>
 800ea6a:	240a      	movs	r4, #10
 800ea6c:	4638      	mov	r0, r7
 800ea6e:	f7ff feff 	bl	800e870 <__cleanup_context>
 800ea72:	4620      	mov	r0, r4
 800ea74:	b01e      	add	sp, #120	; 0x78
 800ea76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea7a:	2900      	cmp	r1, #0
 800ea7c:	f43f af71 	beq.w	800e962 <rcl_init+0x32>
 800ea80:	240b      	movs	r4, #11
 800ea82:	4620      	mov	r0, r4
 800ea84:	b01e      	add	sp, #120	; 0x78
 800ea86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea8a:	2464      	movs	r4, #100	; 0x64
 800ea8c:	4620      	mov	r0, r4
 800ea8e:	b01e      	add	sp, #120	; 0x78
 800ea90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea94:	f8d7 9000 	ldr.w	r9, [r7]
 800ea98:	4926      	ldr	r1, [pc, #152]	; (800eb34 <rcl_init+0x204>)
 800ea9a:	680b      	ldr	r3, [r1, #0]
 800ea9c:	3301      	adds	r3, #1
 800ea9e:	d036      	beq.n	800eb0e <rcl_init+0x1de>
 800eaa0:	600b      	str	r3, [r1, #0]
 800eaa2:	461a      	mov	r2, r3
 800eaa4:	2400      	movs	r4, #0
 800eaa6:	f8d9 0014 	ldr.w	r0, [r9, #20]
 800eaaa:	607b      	str	r3, [r7, #4]
 800eaac:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800eaae:	3301      	adds	r3, #1
 800eab0:	e9c0 2406 	strd	r2, r4, [r0, #24]
 800eab4:	d034      	beq.n	800eb20 <rcl_init+0x1f0>
 800eab6:	f890 3030 	ldrb.w	r3, [r0, #48]	; 0x30
 800eaba:	b93b      	cbnz	r3, 800eacc <rcl_init+0x19c>
 800eabc:	3030      	adds	r0, #48	; 0x30
 800eabe:	f000 f939 	bl	800ed34 <rcl_get_localhost_only>
 800eac2:	4604      	mov	r4, r0
 800eac4:	2800      	cmp	r0, #0
 800eac6:	d1d1      	bne.n	800ea6c <rcl_init+0x13c>
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	6958      	ldr	r0, [r3, #20]
 800eacc:	6b40      	ldr	r0, [r0, #52]	; 0x34
 800eace:	aa18      	add	r2, sp, #96	; 0x60
 800ead0:	a917      	add	r1, sp, #92	; 0x5c
 800ead2:	f000 fd81 	bl	800f5d8 <rcl_validate_enclave_name>
 800ead6:	4604      	mov	r4, r0
 800ead8:	2800      	cmp	r0, #0
 800eada:	d1c7      	bne.n	800ea6c <rcl_init+0x13c>
 800eadc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800eade:	b9eb      	cbnz	r3, 800eb1c <rcl_init+0x1ec>
 800eae0:	6839      	ldr	r1, [r7, #0]
 800eae2:	694b      	ldr	r3, [r1, #20]
 800eae4:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800eae6:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800eaea:	f000 fc3d 	bl	800f368 <rcl_get_security_options_from_environment>
 800eaee:	4604      	mov	r4, r0
 800eaf0:	2800      	cmp	r0, #0
 800eaf2:	d1bb      	bne.n	800ea6c <rcl_init+0x13c>
 800eaf4:	6839      	ldr	r1, [r7, #0]
 800eaf6:	6948      	ldr	r0, [r1, #20]
 800eaf8:	3128      	adds	r1, #40	; 0x28
 800eafa:	3018      	adds	r0, #24
 800eafc:	f001 fb36 	bl	801016c <rmw_init>
 800eb00:	4604      	mov	r4, r0
 800eb02:	2800      	cmp	r0, #0
 800eb04:	d0bd      	beq.n	800ea82 <rcl_init+0x152>
 800eb06:	f7ff fe8f 	bl	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 800eb0a:	4604      	mov	r4, r0
 800eb0c:	e7ae      	b.n	800ea6c <rcl_init+0x13c>
 800eb0e:	2201      	movs	r2, #1
 800eb10:	461c      	mov	r4, r3
 800eb12:	600a      	str	r2, [r1, #0]
 800eb14:	4613      	mov	r3, r2
 800eb16:	e7c6      	b.n	800eaa6 <rcl_init+0x176>
 800eb18:	240a      	movs	r4, #10
 800eb1a:	e7b2      	b.n	800ea82 <rcl_init+0x152>
 800eb1c:	2401      	movs	r4, #1
 800eb1e:	e7a5      	b.n	800ea6c <rcl_init+0x13c>
 800eb20:	3024      	adds	r0, #36	; 0x24
 800eb22:	f003 fc5d 	bl	80123e0 <rcl_get_default_domain_id>
 800eb26:	4604      	mov	r4, r0
 800eb28:	2800      	cmp	r0, #0
 800eb2a:	d19f      	bne.n	800ea6c <rcl_init+0x13c>
 800eb2c:	683b      	ldr	r3, [r7, #0]
 800eb2e:	6958      	ldr	r0, [r3, #20]
 800eb30:	e7c1      	b.n	800eab6 <rcl_init+0x186>
 800eb32:	bf00      	nop
 800eb34:	20015954 	.word	0x20015954

0800eb38 <rcl_get_zero_initialized_init_options>:
 800eb38:	2000      	movs	r0, #0
 800eb3a:	4770      	bx	lr

0800eb3c <rcl_init_options_init>:
 800eb3c:	b084      	sub	sp, #16
 800eb3e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb40:	b097      	sub	sp, #92	; 0x5c
 800eb42:	ae1d      	add	r6, sp, #116	; 0x74
 800eb44:	e886 000e 	stmia.w	r6, {r1, r2, r3}
 800eb48:	2800      	cmp	r0, #0
 800eb4a:	d058      	beq.n	800ebfe <rcl_init_options_init+0xc2>
 800eb4c:	6803      	ldr	r3, [r0, #0]
 800eb4e:	4605      	mov	r5, r0
 800eb50:	b133      	cbz	r3, 800eb60 <rcl_init_options_init+0x24>
 800eb52:	2464      	movs	r4, #100	; 0x64
 800eb54:	4620      	mov	r0, r4
 800eb56:	b017      	add	sp, #92	; 0x5c
 800eb58:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800eb5c:	b004      	add	sp, #16
 800eb5e:	4770      	bx	lr
 800eb60:	4630      	mov	r0, r6
 800eb62:	f7fb fc65 	bl	800a430 <rcutils_allocator_is_valid>
 800eb66:	2800      	cmp	r0, #0
 800eb68:	d049      	beq.n	800ebfe <rcl_init_options_init+0xc2>
 800eb6a:	46b4      	mov	ip, r6
 800eb6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb70:	ac11      	add	r4, sp, #68	; 0x44
 800eb72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eb74:	f8dc 3000 	ldr.w	r3, [ip]
 800eb78:	6023      	str	r3, [r4, #0]
 800eb7a:	9921      	ldr	r1, [sp, #132]	; 0x84
 800eb7c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800eb7e:	2050      	movs	r0, #80	; 0x50
 800eb80:	4798      	blx	r3
 800eb82:	4604      	mov	r4, r0
 800eb84:	6028      	str	r0, [r5, #0]
 800eb86:	2800      	cmp	r0, #0
 800eb88:	d03b      	beq.n	800ec02 <rcl_init_options_init+0xc6>
 800eb8a:	f10d 0c44 	add.w	ip, sp, #68	; 0x44
 800eb8e:	4686      	mov	lr, r0
 800eb90:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800eb94:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800eb98:	f8dc 3000 	ldr.w	r3, [ip]
 800eb9c:	f8ce 3000 	str.w	r3, [lr]
 800eba0:	a802      	add	r0, sp, #8
 800eba2:	f001 f86d 	bl	800fc80 <rmw_get_zero_initialized_init_options>
 800eba6:	f10d 0e08 	add.w	lr, sp, #8
 800ebaa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebae:	f104 0c18 	add.w	ip, r4, #24
 800ebb2:	682f      	ldr	r7, [r5, #0]
 800ebb4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebb8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebc0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ebc4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ebc8:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ebcc:	ac20      	add	r4, sp, #128	; 0x80
 800ebce:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ebd2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ebd6:	e88d 0003 	stmia.w	sp, {r0, r1}
 800ebda:	e896 000e 	ldmia.w	r6, {r1, r2, r3}
 800ebde:	f107 0018 	add.w	r0, r7, #24
 800ebe2:	f001 f9cb 	bl	800ff7c <rmw_init_options_init>
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	2800      	cmp	r0, #0
 800ebea:	d0b3      	beq.n	800eb54 <rcl_init_options_init+0x18>
 800ebec:	9921      	ldr	r1, [sp, #132]	; 0x84
 800ebee:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 800ebf0:	6828      	ldr	r0, [r5, #0]
 800ebf2:	4798      	blx	r3
 800ebf4:	4620      	mov	r0, r4
 800ebf6:	f7ff fe17 	bl	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 800ebfa:	4604      	mov	r4, r0
 800ebfc:	e7aa      	b.n	800eb54 <rcl_init_options_init+0x18>
 800ebfe:	240b      	movs	r4, #11
 800ec00:	e7a8      	b.n	800eb54 <rcl_init_options_init+0x18>
 800ec02:	240a      	movs	r4, #10
 800ec04:	e7a6      	b.n	800eb54 <rcl_init_options_init+0x18>
 800ec06:	bf00      	nop

0800ec08 <rcl_init_options_fini>:
 800ec08:	b530      	push	{r4, r5, lr}
 800ec0a:	b087      	sub	sp, #28
 800ec0c:	b1f0      	cbz	r0, 800ec4c <rcl_init_options_fini+0x44>
 800ec0e:	6803      	ldr	r3, [r0, #0]
 800ec10:	4604      	mov	r4, r0
 800ec12:	b1db      	cbz	r3, 800ec4c <rcl_init_options_fini+0x44>
 800ec14:	469c      	mov	ip, r3
 800ec16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec1a:	f10d 0e04 	add.w	lr, sp, #4
 800ec1e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ec22:	f8dc 3000 	ldr.w	r3, [ip]
 800ec26:	f8ce 3000 	str.w	r3, [lr]
 800ec2a:	a801      	add	r0, sp, #4
 800ec2c:	f7fb fc00 	bl	800a430 <rcutils_allocator_is_valid>
 800ec30:	b160      	cbz	r0, 800ec4c <rcl_init_options_fini+0x44>
 800ec32:	6820      	ldr	r0, [r4, #0]
 800ec34:	3018      	adds	r0, #24
 800ec36:	f001 fa51 	bl	80100dc <rmw_init_options_fini>
 800ec3a:	4605      	mov	r5, r0
 800ec3c:	b950      	cbnz	r0, 800ec54 <rcl_init_options_fini+0x4c>
 800ec3e:	6820      	ldr	r0, [r4, #0]
 800ec40:	9b02      	ldr	r3, [sp, #8]
 800ec42:	9905      	ldr	r1, [sp, #20]
 800ec44:	4798      	blx	r3
 800ec46:	4628      	mov	r0, r5
 800ec48:	b007      	add	sp, #28
 800ec4a:	bd30      	pop	{r4, r5, pc}
 800ec4c:	250b      	movs	r5, #11
 800ec4e:	4628      	mov	r0, r5
 800ec50:	b007      	add	sp, #28
 800ec52:	bd30      	pop	{r4, r5, pc}
 800ec54:	f7ff fde8 	bl	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 800ec58:	4605      	mov	r5, r0
 800ec5a:	e7f8      	b.n	800ec4e <rcl_init_options_fini+0x46>

0800ec5c <rcl_init_options_copy>:
 800ec5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec60:	b094      	sub	sp, #80	; 0x50
 800ec62:	2800      	cmp	r0, #0
 800ec64:	d058      	beq.n	800ed18 <rcl_init_options_copy+0xbc>
 800ec66:	4604      	mov	r4, r0
 800ec68:	6800      	ldr	r0, [r0, #0]
 800ec6a:	2800      	cmp	r0, #0
 800ec6c:	d054      	beq.n	800ed18 <rcl_init_options_copy+0xbc>
 800ec6e:	460e      	mov	r6, r1
 800ec70:	f7fb fbde 	bl	800a430 <rcutils_allocator_is_valid>
 800ec74:	2800      	cmp	r0, #0
 800ec76:	d04f      	beq.n	800ed18 <rcl_init_options_copy+0xbc>
 800ec78:	2e00      	cmp	r6, #0
 800ec7a:	d04d      	beq.n	800ed18 <rcl_init_options_copy+0xbc>
 800ec7c:	6833      	ldr	r3, [r6, #0]
 800ec7e:	b123      	cbz	r3, 800ec8a <rcl_init_options_copy+0x2e>
 800ec80:	2464      	movs	r4, #100	; 0x64
 800ec82:	4620      	mov	r0, r4
 800ec84:	b014      	add	sp, #80	; 0x50
 800ec86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec8a:	6827      	ldr	r7, [r4, #0]
 800ec8c:	46bc      	mov	ip, r7
 800ec8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ec92:	ad0f      	add	r5, sp, #60	; 0x3c
 800ec94:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ec96:	f8dc 3000 	ldr.w	r3, [ip]
 800ec9a:	f8d7 8000 	ldr.w	r8, [r7]
 800ec9e:	602b      	str	r3, [r5, #0]
 800eca0:	4619      	mov	r1, r3
 800eca2:	2050      	movs	r0, #80	; 0x50
 800eca4:	47c0      	blx	r8
 800eca6:	4605      	mov	r5, r0
 800eca8:	6030      	str	r0, [r6, #0]
 800ecaa:	b3d0      	cbz	r0, 800ed22 <rcl_init_options_copy+0xc6>
 800ecac:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
 800ecb0:	4686      	mov	lr, r0
 800ecb2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ecb6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800ecba:	f8dc 3000 	ldr.w	r3, [ip]
 800ecbe:	f8ce 3000 	str.w	r3, [lr]
 800ecc2:	4668      	mov	r0, sp
 800ecc4:	f000 ffdc 	bl	800fc80 <rmw_get_zero_initialized_init_options>
 800ecc8:	46ee      	mov	lr, sp
 800ecca:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ecce:	f105 0c18 	add.w	ip, r5, #24
 800ecd2:	6824      	ldr	r4, [r4, #0]
 800ecd4:	6835      	ldr	r5, [r6, #0]
 800ecd6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecda:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ecde:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ece2:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800ece6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ecea:	e89e 0003 	ldmia.w	lr, {r0, r1}
 800ecee:	e88c 0003 	stmia.w	ip, {r0, r1}
 800ecf2:	f104 0018 	add.w	r0, r4, #24
 800ecf6:	f105 0118 	add.w	r1, r5, #24
 800ecfa:	f001 f9a7 	bl	801004c <rmw_init_options_copy>
 800ecfe:	4604      	mov	r4, r0
 800ed00:	2800      	cmp	r0, #0
 800ed02:	d0be      	beq.n	800ec82 <rcl_init_options_copy+0x26>
 800ed04:	f7fb fba2 	bl	800a44c <rcutils_get_error_string>
 800ed08:	f7fb fbb6 	bl	800a478 <rcutils_reset_error>
 800ed0c:	4630      	mov	r0, r6
 800ed0e:	f7ff ff7b 	bl	800ec08 <rcl_init_options_fini>
 800ed12:	b140      	cbz	r0, 800ed26 <rcl_init_options_copy+0xca>
 800ed14:	4604      	mov	r4, r0
 800ed16:	e7b4      	b.n	800ec82 <rcl_init_options_copy+0x26>
 800ed18:	240b      	movs	r4, #11
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	b014      	add	sp, #80	; 0x50
 800ed1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ed22:	240a      	movs	r4, #10
 800ed24:	e7ad      	b.n	800ec82 <rcl_init_options_copy+0x26>
 800ed26:	4620      	mov	r0, r4
 800ed28:	b014      	add	sp, #80	; 0x50
 800ed2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ed2e:	f7ff bd7b 	b.w	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 800ed32:	bf00      	nop

0800ed34 <rcl_get_localhost_only>:
 800ed34:	b510      	push	{r4, lr}
 800ed36:	b082      	sub	sp, #8
 800ed38:	2300      	movs	r3, #0
 800ed3a:	9301      	str	r3, [sp, #4]
 800ed3c:	b1b8      	cbz	r0, 800ed6e <rcl_get_localhost_only+0x3a>
 800ed3e:	4604      	mov	r4, r0
 800ed40:	a901      	add	r1, sp, #4
 800ed42:	480c      	ldr	r0, [pc, #48]	; (800ed74 <rcl_get_localhost_only+0x40>)
 800ed44:	f000 fc90 	bl	800f668 <rcutils_get_env>
 800ed48:	b110      	cbz	r0, 800ed50 <rcl_get_localhost_only+0x1c>
 800ed4a:	2001      	movs	r0, #1
 800ed4c:	b002      	add	sp, #8
 800ed4e:	bd10      	pop	{r4, pc}
 800ed50:	9b01      	ldr	r3, [sp, #4]
 800ed52:	b113      	cbz	r3, 800ed5a <rcl_get_localhost_only+0x26>
 800ed54:	781a      	ldrb	r2, [r3, #0]
 800ed56:	2a31      	cmp	r2, #49	; 0x31
 800ed58:	d004      	beq.n	800ed64 <rcl_get_localhost_only+0x30>
 800ed5a:	2302      	movs	r3, #2
 800ed5c:	2000      	movs	r0, #0
 800ed5e:	7023      	strb	r3, [r4, #0]
 800ed60:	b002      	add	sp, #8
 800ed62:	bd10      	pop	{r4, pc}
 800ed64:	785b      	ldrb	r3, [r3, #1]
 800ed66:	2b00      	cmp	r3, #0
 800ed68:	d1f7      	bne.n	800ed5a <rcl_get_localhost_only+0x26>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	e7f6      	b.n	800ed5c <rcl_get_localhost_only+0x28>
 800ed6e:	200b      	movs	r0, #11
 800ed70:	b002      	add	sp, #8
 800ed72:	bd10      	pop	{r4, pc}
 800ed74:	08014714 	.word	0x08014714

0800ed78 <rcl_get_zero_initialized_node>:
 800ed78:	4a03      	ldr	r2, [pc, #12]	; (800ed88 <rcl_get_zero_initialized_node+0x10>)
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800ed80:	e883 0003 	stmia.w	r3, {r0, r1}
 800ed84:	4618      	mov	r0, r3
 800ed86:	4770      	bx	lr
 800ed88:	0801473c 	.word	0x0801473c

0800ed8c <rcl_node_init>:
 800ed8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed90:	b0a9      	sub	sp, #164	; 0xa4
 800ed92:	4604      	mov	r4, r0
 800ed94:	f8dd 80c8 	ldr.w	r8, [sp, #200]	; 0xc8
 800ed98:	a823      	add	r0, sp, #140	; 0x8c
 800ed9a:	460e      	mov	r6, r1
 800ed9c:	4615      	mov	r5, r2
 800ed9e:	461f      	mov	r7, r3
 800eda0:	f003 fd46 	bl	8012830 <rcl_guard_condition_get_default_options>
 800eda4:	f1b8 0f00 	cmp.w	r8, #0
 800eda8:	f000 80e6 	beq.w	800ef78 <rcl_node_init+0x1ec>
 800edac:	4640      	mov	r0, r8
 800edae:	f7fb fb3f 	bl	800a430 <rcutils_allocator_is_valid>
 800edb2:	2800      	cmp	r0, #0
 800edb4:	f000 80e0 	beq.w	800ef78 <rcl_node_init+0x1ec>
 800edb8:	2e00      	cmp	r6, #0
 800edba:	f000 80dd 	beq.w	800ef78 <rcl_node_init+0x1ec>
 800edbe:	2d00      	cmp	r5, #0
 800edc0:	f000 80da 	beq.w	800ef78 <rcl_node_init+0x1ec>
 800edc4:	2c00      	cmp	r4, #0
 800edc6:	f000 80d7 	beq.w	800ef78 <rcl_node_init+0x1ec>
 800edca:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800edce:	f1b9 0f00 	cmp.w	r9, #0
 800edd2:	f040 80fd 	bne.w	800efd0 <rcl_node_init+0x244>
 800edd6:	2f00      	cmp	r7, #0
 800edd8:	f000 80ce 	beq.w	800ef78 <rcl_node_init+0x1ec>
 800eddc:	4638      	mov	r0, r7
 800edde:	f7ff fd41 	bl	800e864 <rcl_context_is_valid>
 800ede2:	4682      	mov	sl, r0
 800ede4:	2800      	cmp	r0, #0
 800ede6:	f000 80cd 	beq.w	800ef84 <rcl_node_init+0x1f8>
 800edea:	464a      	mov	r2, r9
 800edec:	a922      	add	r1, sp, #136	; 0x88
 800edee:	4630      	mov	r0, r6
 800edf0:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800edf4:	f001 f83a 	bl	800fe6c <rmw_validate_node_name>
 800edf8:	4681      	mov	r9, r0
 800edfa:	2800      	cmp	r0, #0
 800edfc:	f040 80be 	bne.w	800ef7c <rcl_node_init+0x1f0>
 800ee00:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ee02:	2800      	cmp	r0, #0
 800ee04:	f040 80f0 	bne.w	800efe8 <rcl_node_init+0x25c>
 800ee08:	4628      	mov	r0, r5
 800ee0a:	f7f1 f9eb 	bl	80001e4 <strlen>
 800ee0e:	2800      	cmp	r0, #0
 800ee10:	f040 80bb 	bne.w	800ef8a <rcl_node_init+0x1fe>
 800ee14:	4d7c      	ldr	r5, [pc, #496]	; (800f008 <rcl_node_init+0x27c>)
 800ee16:	a922      	add	r1, sp, #136	; 0x88
 800ee18:	2200      	movs	r2, #0
 800ee1a:	4628      	mov	r0, r5
 800ee1c:	f001 f808 	bl	800fe30 <rmw_validate_namespace>
 800ee20:	4681      	mov	r9, r0
 800ee22:	2800      	cmp	r0, #0
 800ee24:	f040 80aa 	bne.w	800ef7c <rcl_node_init+0x1f0>
 800ee28:	4682      	mov	sl, r0
 800ee2a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800ee2c:	2800      	cmp	r0, #0
 800ee2e:	f040 80e0 	bne.w	800eff2 <rcl_node_init+0x266>
 800ee32:	f8d8 3000 	ldr.w	r3, [r8]
 800ee36:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ee3a:	2078      	movs	r0, #120	; 0x78
 800ee3c:	4798      	blx	r3
 800ee3e:	4681      	mov	r9, r0
 800ee40:	6060      	str	r0, [r4, #4]
 800ee42:	2800      	cmp	r0, #0
 800ee44:	f000 80ca 	beq.w	800efdc <rcl_node_init+0x250>
 800ee48:	2200      	movs	r2, #0
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	e9c9 231a 	strd	r2, r3, [r9, #104]	; 0x68
 800ee50:	e9c9 231c 	strd	r2, r3, [r9, #112]	; 0x70
 800ee54:	a808      	add	r0, sp, #32
 800ee56:	f000 f907 	bl	800f068 <rcl_node_get_default_options>
 800ee5a:	a908      	add	r1, sp, #32
 800ee5c:	4648      	mov	r0, r9
 800ee5e:	2268      	movs	r2, #104	; 0x68
 800ee60:	f004 fba4 	bl	80135ac <memcpy>
 800ee64:	6861      	ldr	r1, [r4, #4]
 800ee66:	6027      	str	r7, [r4, #0]
 800ee68:	4640      	mov	r0, r8
 800ee6a:	f000 f90b 	bl	800f084 <rcl_node_options_copy>
 800ee6e:	2800      	cmp	r0, #0
 800ee70:	d158      	bne.n	800ef24 <rcl_node_init+0x198>
 800ee72:	4628      	mov	r0, r5
 800ee74:	f7f1 f9b6 	bl	80001e4 <strlen>
 800ee78:	4428      	add	r0, r5
 800ee7a:	f810 3c01 	ldrb.w	r3, [r0, #-1]
 800ee7e:	e9cd 5603 	strd	r5, r6, [sp, #12]
 800ee82:	2b2f      	cmp	r3, #47	; 0x2f
 800ee84:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ee88:	9300      	str	r3, [sp, #0]
 800ee8a:	bf0c      	ite	eq
 800ee8c:	4b5f      	ldreq	r3, [pc, #380]	; (800f00c <rcl_node_init+0x280>)
 800ee8e:	4b60      	ldrne	r3, [pc, #384]	; (800f010 <rcl_node_init+0x284>)
 800ee90:	9302      	str	r3, [sp, #8]
 800ee92:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ee96:	9301      	str	r3, [sp, #4]
 800ee98:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800ee9c:	f8d4 9004 	ldr.w	r9, [r4, #4]
 800eea0:	f000 fc0a 	bl	800f6b8 <rcutils_format_string_limit>
 800eea4:	6823      	ldr	r3, [r4, #0]
 800eea6:	f8c9 0074 	str.w	r0, [r9, #116]	; 0x74
 800eeaa:	6818      	ldr	r0, [r3, #0]
 800eeac:	4631      	mov	r1, r6
 800eeae:	3028      	adds	r0, #40	; 0x28
 800eeb0:	462a      	mov	r2, r5
 800eeb2:	6866      	ldr	r6, [r4, #4]
 800eeb4:	f001 fbae 	bl	8010614 <rmw_create_node>
 800eeb8:	6863      	ldr	r3, [r4, #4]
 800eeba:	66b0      	str	r0, [r6, #104]	; 0x68
 800eebc:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800eebe:	2800      	cmp	r0, #0
 800eec0:	d032      	beq.n	800ef28 <rcl_node_init+0x19c>
 800eec2:	f001 fc3b 	bl	801073c <rmw_node_get_graph_guard_condition>
 800eec6:	4681      	mov	r9, r0
 800eec8:	b360      	cbz	r0, 800ef24 <rcl_node_init+0x198>
 800eeca:	f8d8 3000 	ldr.w	r3, [r8]
 800eece:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800eed2:	6866      	ldr	r6, [r4, #4]
 800eed4:	2008      	movs	r0, #8
 800eed6:	4798      	blx	r3
 800eed8:	6863      	ldr	r3, [r4, #4]
 800eeda:	66f0      	str	r0, [r6, #108]	; 0x6c
 800eedc:	f8d3 b06c 	ldr.w	fp, [r3, #108]	; 0x6c
 800eee0:	f1bb 0f00 	cmp.w	fp, #0
 800eee4:	d020      	beq.n	800ef28 <rcl_node_init+0x19c>
 800eee6:	a806      	add	r0, sp, #24
 800eee8:	f003 fc12 	bl	8012710 <rcl_get_zero_initialized_guard_condition>
 800eeec:	a806      	add	r0, sp, #24
 800eeee:	c803      	ldmia	r0, {r0, r1}
 800eef0:	6863      	ldr	r3, [r4, #4]
 800eef2:	46c4      	mov	ip, r8
 800eef4:	f8d3 e06c 	ldr.w	lr, [r3, #108]	; 0x6c
 800eef8:	e88b 0003 	stmia.w	fp, {r0, r1}
 800eefc:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800ef00:	ae23      	add	r6, sp, #140	; 0x8c
 800ef02:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 800ef04:	f8dc 3000 	ldr.w	r3, [ip]
 800ef08:	6033      	str	r3, [r6, #0]
 800ef0a:	ab28      	add	r3, sp, #160	; 0xa0
 800ef0c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
 800ef10:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
 800ef14:	4649      	mov	r1, r9
 800ef16:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800ef18:	463a      	mov	r2, r7
 800ef1a:	4670      	mov	r0, lr
 800ef1c:	f003 fc02 	bl	8012724 <rcl_guard_condition_init_from_rmw>
 800ef20:	4681      	mov	r9, r0
 800ef22:	b328      	cbz	r0, 800ef70 <rcl_node_init+0x1e4>
 800ef24:	6863      	ldr	r3, [r4, #4]
 800ef26:	b1f3      	cbz	r3, 800ef66 <rcl_node_init+0x1da>
 800ef28:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800ef2a:	b128      	cbz	r0, 800ef38 <rcl_node_init+0x1ac>
 800ef2c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef30:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ef34:	4798      	blx	r3
 800ef36:	6863      	ldr	r3, [r4, #4]
 800ef38:	6e98      	ldr	r0, [r3, #104]	; 0x68
 800ef3a:	b110      	cbz	r0, 800ef42 <rcl_node_init+0x1b6>
 800ef3c:	f001 fb82 	bl	8010644 <rmw_destroy_node>
 800ef40:	6863      	ldr	r3, [r4, #4]
 800ef42:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ef44:	b148      	cbz	r0, 800ef5a <rcl_node_init+0x1ce>
 800ef46:	f003 fc4d 	bl	80127e4 <rcl_guard_condition_fini>
 800ef4a:	6863      	ldr	r3, [r4, #4]
 800ef4c:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ef50:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 800ef52:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef56:	4798      	blx	r3
 800ef58:	6863      	ldr	r3, [r4, #4]
 800ef5a:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800ef5e:	4618      	mov	r0, r3
 800ef60:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800ef64:	4798      	blx	r3
 800ef66:	2300      	movs	r3, #0
 800ef68:	e9c4 3300 	strd	r3, r3, [r4]
 800ef6c:	f04f 0901 	mov.w	r9, #1
 800ef70:	f1ba 0f00 	cmp.w	sl, #0
 800ef74:	d125      	bne.n	800efc2 <rcl_node_init+0x236>
 800ef76:	e001      	b.n	800ef7c <rcl_node_init+0x1f0>
 800ef78:	f04f 090b 	mov.w	r9, #11
 800ef7c:	4648      	mov	r0, r9
 800ef7e:	b029      	add	sp, #164	; 0xa4
 800ef80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef84:	f04f 0965 	mov.w	r9, #101	; 0x65
 800ef88:	e7f8      	b.n	800ef7c <rcl_node_init+0x1f0>
 800ef8a:	782b      	ldrb	r3, [r5, #0]
 800ef8c:	2b2f      	cmp	r3, #47	; 0x2f
 800ef8e:	f43f af42 	beq.w	800ee16 <rcl_node_init+0x8a>
 800ef92:	9503      	str	r5, [sp, #12]
 800ef94:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800ef98:	9300      	str	r3, [sp, #0]
 800ef9a:	4b1e      	ldr	r3, [pc, #120]	; (800f014 <rcl_node_init+0x288>)
 800ef9c:	9302      	str	r3, [sp, #8]
 800ef9e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800efa2:	9301      	str	r3, [sp, #4]
 800efa4:	e898 000f 	ldmia.w	r8, {r0, r1, r2, r3}
 800efa8:	f000 fb86 	bl	800f6b8 <rcutils_format_string_limit>
 800efac:	4605      	mov	r5, r0
 800efae:	b340      	cbz	r0, 800f002 <rcl_node_init+0x276>
 800efb0:	2200      	movs	r2, #0
 800efb2:	a922      	add	r1, sp, #136	; 0x88
 800efb4:	9222      	str	r2, [sp, #136]	; 0x88
 800efb6:	f000 ff3b 	bl	800fe30 <rmw_validate_namespace>
 800efba:	4681      	mov	r9, r0
 800efbc:	2800      	cmp	r0, #0
 800efbe:	f43f af34 	beq.w	800ee2a <rcl_node_init+0x9e>
 800efc2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800efc6:	f8d8 1010 	ldr.w	r1, [r8, #16]
 800efca:	4628      	mov	r0, r5
 800efcc:	4798      	blx	r3
 800efce:	e7d5      	b.n	800ef7c <rcl_node_init+0x1f0>
 800efd0:	f04f 0964 	mov.w	r9, #100	; 0x64
 800efd4:	4648      	mov	r0, r9
 800efd6:	b029      	add	sp, #164	; 0xa4
 800efd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efdc:	f04f 090a 	mov.w	r9, #10
 800efe0:	f1ba 0f00 	cmp.w	sl, #0
 800efe4:	d1ed      	bne.n	800efc2 <rcl_node_init+0x236>
 800efe6:	e7c9      	b.n	800ef7c <rcl_node_init+0x1f0>
 800efe8:	f000 ff92 	bl	800ff10 <rmw_node_name_validation_result_string>
 800efec:	f04f 09c9 	mov.w	r9, #201	; 0xc9
 800eff0:	e7c4      	b.n	800ef7c <rcl_node_init+0x1f0>
 800eff2:	f000 ff2f 	bl	800fe54 <rmw_namespace_validation_result_string>
 800eff6:	f04f 09ca 	mov.w	r9, #202	; 0xca
 800effa:	f1ba 0f00 	cmp.w	sl, #0
 800effe:	d1e0      	bne.n	800efc2 <rcl_node_init+0x236>
 800f000:	e7bc      	b.n	800ef7c <rcl_node_init+0x1f0>
 800f002:	f04f 090a 	mov.w	r9, #10
 800f006:	e7b9      	b.n	800ef7c <rcl_node_init+0x1f0>
 800f008:	0801472c 	.word	0x0801472c
 800f00c:	080145b0 	.word	0x080145b0
 800f010:	08014734 	.word	0x08014734
 800f014:	08014730 	.word	0x08014730

0800f018 <rcl_node_is_valid>:
 800f018:	b130      	cbz	r0, 800f028 <rcl_node_is_valid+0x10>
 800f01a:	6843      	ldr	r3, [r0, #4]
 800f01c:	b123      	cbz	r3, 800f028 <rcl_node_is_valid+0x10>
 800f01e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f020:	b113      	cbz	r3, 800f028 <rcl_node_is_valid+0x10>
 800f022:	6800      	ldr	r0, [r0, #0]
 800f024:	f7ff bc1e 	b.w	800e864 <rcl_context_is_valid>
 800f028:	2000      	movs	r0, #0
 800f02a:	4770      	bx	lr

0800f02c <rcl_node_get_name>:
 800f02c:	b120      	cbz	r0, 800f038 <rcl_node_get_name+0xc>
 800f02e:	6840      	ldr	r0, [r0, #4]
 800f030:	b110      	cbz	r0, 800f038 <rcl_node_get_name+0xc>
 800f032:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f034:	b100      	cbz	r0, 800f038 <rcl_node_get_name+0xc>
 800f036:	6880      	ldr	r0, [r0, #8]
 800f038:	4770      	bx	lr
 800f03a:	bf00      	nop

0800f03c <rcl_node_get_namespace>:
 800f03c:	b120      	cbz	r0, 800f048 <rcl_node_get_namespace+0xc>
 800f03e:	6840      	ldr	r0, [r0, #4]
 800f040:	b110      	cbz	r0, 800f048 <rcl_node_get_namespace+0xc>
 800f042:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f044:	b100      	cbz	r0, 800f048 <rcl_node_get_namespace+0xc>
 800f046:	68c0      	ldr	r0, [r0, #12]
 800f048:	4770      	bx	lr
 800f04a:	bf00      	nop

0800f04c <rcl_node_get_options>:
 800f04c:	b128      	cbz	r0, 800f05a <rcl_node_get_options+0xe>
 800f04e:	6840      	ldr	r0, [r0, #4]
 800f050:	b118      	cbz	r0, 800f05a <rcl_node_get_options+0xe>
 800f052:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800f054:	2b00      	cmp	r3, #0
 800f056:	bf08      	it	eq
 800f058:	2000      	moveq	r0, #0
 800f05a:	4770      	bx	lr

0800f05c <rcl_node_get_rmw_handle>:
 800f05c:	b110      	cbz	r0, 800f064 <rcl_node_get_rmw_handle+0x8>
 800f05e:	6840      	ldr	r0, [r0, #4]
 800f060:	b100      	cbz	r0, 800f064 <rcl_node_get_rmw_handle+0x8>
 800f062:	6e80      	ldr	r0, [r0, #104]	; 0x68
 800f064:	4770      	bx	lr
 800f066:	bf00      	nop

0800f068 <rcl_node_get_default_options>:
 800f068:	b510      	push	{r4, lr}
 800f06a:	2268      	movs	r2, #104	; 0x68
 800f06c:	4604      	mov	r4, r0
 800f06e:	2100      	movs	r1, #0
 800f070:	f004 f9d4 	bl	801341c <memset>
 800f074:	4620      	mov	r0, r4
 800f076:	f7fb f9cd 	bl	800a414 <rcutils_get_default_allocator>
 800f07a:	2301      	movs	r3, #1
 800f07c:	7523      	strb	r3, [r4, #20]
 800f07e:	4620      	mov	r0, r4
 800f080:	bd10      	pop	{r4, pc}
 800f082:	bf00      	nop

0800f084 <rcl_node_options_copy>:
 800f084:	b1d0      	cbz	r0, 800f0bc <rcl_node_options_copy+0x38>
 800f086:	b570      	push	{r4, r5, r6, lr}
 800f088:	460c      	mov	r4, r1
 800f08a:	b1a9      	cbz	r1, 800f0b8 <rcl_node_options_copy+0x34>
 800f08c:	4288      	cmp	r0, r1
 800f08e:	4684      	mov	ip, r0
 800f090:	d012      	beq.n	800f0b8 <rcl_node_options_copy+0x34>
 800f092:	4605      	mov	r5, r0
 800f094:	8a86      	ldrh	r6, [r0, #20]
 800f096:	468e      	mov	lr, r1
 800f098:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f09a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800f09e:	682b      	ldr	r3, [r5, #0]
 800f0a0:	f8ce 3000 	str.w	r3, [lr]
 800f0a4:	f10c 0118 	add.w	r1, ip, #24
 800f0a8:	2250      	movs	r2, #80	; 0x50
 800f0aa:	82a6      	strh	r6, [r4, #20]
 800f0ac:	f104 0018 	add.w	r0, r4, #24
 800f0b0:	f004 fa7c 	bl	80135ac <memcpy>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	bd70      	pop	{r4, r5, r6, pc}
 800f0b8:	200b      	movs	r0, #11
 800f0ba:	bd70      	pop	{r4, r5, r6, pc}
 800f0bc:	200b      	movs	r0, #11
 800f0be:	4770      	bx	lr

0800f0c0 <rcl_node_resolve_name>:
 800f0c0:	b082      	sub	sp, #8
 800f0c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f0c6:	b091      	sub	sp, #68	; 0x44
 800f0c8:	ac1a      	add	r4, sp, #104	; 0x68
 800f0ca:	e884 000c 	stmia.w	r4, {r2, r3}
 800f0ce:	f89d 807c 	ldrb.w	r8, [sp, #124]	; 0x7c
 800f0d2:	2800      	cmp	r0, #0
 800f0d4:	d03b      	beq.n	800f14e <rcl_node_resolve_name+0x8e>
 800f0d6:	460c      	mov	r4, r1
 800f0d8:	4605      	mov	r5, r0
 800f0da:	f7ff ffb7 	bl	800f04c <rcl_node_get_options>
 800f0de:	2800      	cmp	r0, #0
 800f0e0:	d037      	beq.n	800f152 <rcl_node_resolve_name+0x92>
 800f0e2:	4628      	mov	r0, r5
 800f0e4:	f7ff ffa2 	bl	800f02c <rcl_node_get_name>
 800f0e8:	4606      	mov	r6, r0
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	f7ff ffa6 	bl	800f03c <rcl_node_get_namespace>
 800f0f0:	f10d 0e68 	add.w	lr, sp, #104	; 0x68
 800f0f4:	4681      	mov	r9, r0
 800f0f6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800f0fa:	ad0b      	add	r5, sp, #44	; 0x2c
 800f0fc:	46ac      	mov	ip, r5
 800f0fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f102:	f8de 3000 	ldr.w	r3, [lr]
 800f106:	f8cc 3000 	str.w	r3, [ip]
 800f10a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f10c:	b1fb      	cbz	r3, 800f14e <rcl_node_resolve_name+0x8e>
 800f10e:	468a      	mov	sl, r1
 800f110:	f8dd b078 	ldr.w	fp, [sp, #120]	; 0x78
 800f114:	f000 fc28 	bl	800f968 <rcutils_get_zero_initialized_string_map>
 800f118:	ab10      	add	r3, sp, #64	; 0x40
 800f11a:	9008      	str	r0, [sp, #32]
 800f11c:	e913 0007 	ldmdb	r3, {r0, r1, r2}
 800f120:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f124:	2100      	movs	r1, #0
 800f126:	e895 000c 	ldmia.w	r5, {r2, r3}
 800f12a:	a808      	add	r0, sp, #32
 800f12c:	f000 fc94 	bl	800fa58 <rcutils_string_map_init>
 800f130:	4607      	mov	r7, r0
 800f132:	b180      	cbz	r0, 800f156 <rcl_node_resolve_name+0x96>
 800f134:	f7fb f98a 	bl	800a44c <rcutils_get_error_string>
 800f138:	f7fb f99e 	bl	800a478 <rcutils_reset_error>
 800f13c:	2f0a      	cmp	r7, #10
 800f13e:	bf18      	it	ne
 800f140:	2701      	movne	r7, #1
 800f142:	4638      	mov	r0, r7
 800f144:	b011      	add	sp, #68	; 0x44
 800f146:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f14a:	b002      	add	sp, #8
 800f14c:	4770      	bx	lr
 800f14e:	270b      	movs	r7, #11
 800f150:	e7f7      	b.n	800f142 <rcl_node_resolve_name+0x82>
 800f152:	2701      	movs	r7, #1
 800f154:	e7f5      	b.n	800f142 <rcl_node_resolve_name+0x82>
 800f156:	9009      	str	r0, [sp, #36]	; 0x24
 800f158:	9007      	str	r0, [sp, #28]
 800f15a:	a808      	add	r0, sp, #32
 800f15c:	f003 fad2 	bl	8012704 <rcl_get_default_topic_name_substitutions>
 800f160:	4607      	mov	r7, r0
 800f162:	b1a8      	cbz	r0, 800f190 <rcl_node_resolve_name+0xd0>
 800f164:	280a      	cmp	r0, #10
 800f166:	9c07      	ldr	r4, [sp, #28]
 800f168:	d000      	beq.n	800f16c <rcl_node_resolve_name+0xac>
 800f16a:	2701      	movs	r7, #1
 800f16c:	a808      	add	r0, sp, #32
 800f16e:	f000 fcb3 	bl	800fad8 <rcutils_string_map_fini>
 800f172:	2800      	cmp	r0, #0
 800f174:	d13d      	bne.n	800f1f2 <rcl_node_resolve_name+0x132>
 800f176:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f178:	4659      	mov	r1, fp
 800f17a:	47d0      	blx	sl
 800f17c:	4659      	mov	r1, fp
 800f17e:	4620      	mov	r0, r4
 800f180:	47d0      	blx	sl
 800f182:	f1b8 0f00 	cmp.w	r8, #0
 800f186:	d0dc      	beq.n	800f142 <rcl_node_resolve_name+0x82>
 800f188:	2f67      	cmp	r7, #103	; 0x67
 800f18a:	bf08      	it	eq
 800f18c:	2768      	moveq	r7, #104	; 0x68
 800f18e:	e7d8      	b.n	800f142 <rcl_node_resolve_name+0x82>
 800f190:	ab09      	add	r3, sp, #36	; 0x24
 800f192:	9305      	str	r3, [sp, #20]
 800f194:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f196:	46ec      	mov	ip, sp
 800f198:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800f19c:	682b      	ldr	r3, [r5, #0]
 800f19e:	f8cc 3000 	str.w	r3, [ip]
 800f1a2:	464a      	mov	r2, r9
 800f1a4:	4631      	mov	r1, r6
 800f1a6:	4620      	mov	r0, r4
 800f1a8:	ab08      	add	r3, sp, #32
 800f1aa:	f003 f94d 	bl	8012448 <rcl_expand_topic_name>
 800f1ae:	4607      	mov	r7, r0
 800f1b0:	b9b8      	cbnz	r0, 800f1e2 <rcl_node_resolve_name+0x122>
 800f1b2:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800f1b4:	9009      	str	r0, [sp, #36]	; 0x24
 800f1b6:	4602      	mov	r2, r0
 800f1b8:	a90a      	add	r1, sp, #40	; 0x28
 800f1ba:	4620      	mov	r0, r4
 800f1bc:	f000 fd74 	bl	800fca8 <rmw_validate_full_topic_name>
 800f1c0:	b988      	cbnz	r0, 800f1e6 <rcl_node_resolve_name+0x126>
 800f1c2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800f1c4:	b9d5      	cbnz	r5, 800f1fc <rcl_node_resolve_name+0x13c>
 800f1c6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800f1c8:	a808      	add	r0, sp, #32
 800f1ca:	601c      	str	r4, [r3, #0]
 800f1cc:	f000 fc84 	bl	800fad8 <rcutils_string_map_fini>
 800f1d0:	4607      	mov	r7, r0
 800f1d2:	b1a8      	cbz	r0, 800f200 <rcl_node_resolve_name+0x140>
 800f1d4:	f7fb f93a 	bl	800a44c <rcutils_get_error_string>
 800f1d8:	462c      	mov	r4, r5
 800f1da:	f7fb f94d 	bl	800a478 <rcutils_reset_error>
 800f1de:	2701      	movs	r7, #1
 800f1e0:	e7c9      	b.n	800f176 <rcl_node_resolve_name+0xb6>
 800f1e2:	9c07      	ldr	r4, [sp, #28]
 800f1e4:	e7c2      	b.n	800f16c <rcl_node_resolve_name+0xac>
 800f1e6:	f7fb f931 	bl	800a44c <rcutils_get_error_string>
 800f1ea:	2701      	movs	r7, #1
 800f1ec:	f7fb f944 	bl	800a478 <rcutils_reset_error>
 800f1f0:	e7bc      	b.n	800f16c <rcl_node_resolve_name+0xac>
 800f1f2:	f7fb f92b 	bl	800a44c <rcutils_get_error_string>
 800f1f6:	f7fb f93f 	bl	800a478 <rcutils_reset_error>
 800f1fa:	e7bc      	b.n	800f176 <rcl_node_resolve_name+0xb6>
 800f1fc:	2767      	movs	r7, #103	; 0x67
 800f1fe:	e7b5      	b.n	800f16c <rcl_node_resolve_name+0xac>
 800f200:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f202:	4659      	mov	r1, fp
 800f204:	47d0      	blx	sl
 800f206:	4659      	mov	r1, fp
 800f208:	4638      	mov	r0, r7
 800f20a:	47d0      	blx	sl
 800f20c:	e799      	b.n	800f142 <rcl_node_resolve_name+0x82>
 800f20e:	bf00      	nop

0800f210 <exact_match_lookup>:
 800f210:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f212:	f102 0708 	add.w	r7, r2, #8
 800f216:	460b      	mov	r3, r1
 800f218:	4614      	mov	r4, r2
 800f21a:	4606      	mov	r6, r0
 800f21c:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f220:	b085      	sub	sp, #20
 800f222:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f226:	4618      	mov	r0, r3
 800f228:	4919      	ldr	r1, [pc, #100]	; (800f290 <exact_match_lookup+0x80>)
 800f22a:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f22e:	f000 fa35 	bl	800f69c <rcutils_join_path>
 800f232:	7833      	ldrb	r3, [r6, #0]
 800f234:	2b2f      	cmp	r3, #47	; 0x2f
 800f236:	4605      	mov	r5, r0
 800f238:	d023      	beq.n	800f282 <exact_match_lookup+0x72>
 800f23a:	f104 030c 	add.w	r3, r4, #12
 800f23e:	e893 0003 	ldmia.w	r3, {r0, r1}
 800f242:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f246:	1c70      	adds	r0, r6, #1
 800f248:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f24c:	f000 fa2c 	bl	800f6a8 <rcutils_to_native_path>
 800f250:	4606      	mov	r6, r0
 800f252:	e897 0007 	ldmia.w	r7, {r0, r1, r2}
 800f256:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 800f25a:	4631      	mov	r1, r6
 800f25c:	e894 000c 	ldmia.w	r4, {r2, r3}
 800f260:	4628      	mov	r0, r5
 800f262:	f000 fa1b 	bl	800f69c <rcutils_join_path>
 800f266:	6862      	ldr	r2, [r4, #4]
 800f268:	6921      	ldr	r1, [r4, #16]
 800f26a:	4603      	mov	r3, r0
 800f26c:	4630      	mov	r0, r6
 800f26e:	461e      	mov	r6, r3
 800f270:	4790      	blx	r2
 800f272:	4628      	mov	r0, r5
 800f274:	6863      	ldr	r3, [r4, #4]
 800f276:	6921      	ldr	r1, [r4, #16]
 800f278:	4798      	blx	r3
 800f27a:	4635      	mov	r5, r6
 800f27c:	4628      	mov	r0, r5
 800f27e:	b005      	add	sp, #20
 800f280:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f282:	7873      	ldrb	r3, [r6, #1]
 800f284:	2b00      	cmp	r3, #0
 800f286:	d1d8      	bne.n	800f23a <exact_match_lookup+0x2a>
 800f288:	4628      	mov	r0, r5
 800f28a:	b005      	add	sp, #20
 800f28c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f28e:	bf00      	nop
 800f290:	08014780 	.word	0x08014780

0800f294 <rcl_get_secure_root>:
 800f294:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f298:	b085      	sub	sp, #20
 800f29a:	b168      	cbz	r0, 800f2b8 <rcl_get_secure_root+0x24>
 800f29c:	4607      	mov	r7, r0
 800f29e:	4608      	mov	r0, r1
 800f2a0:	460c      	mov	r4, r1
 800f2a2:	f7fb f8c5 	bl	800a430 <rcutils_allocator_is_valid>
 800f2a6:	b138      	cbz	r0, 800f2b8 <rcl_get_secure_root+0x24>
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	482d      	ldr	r0, [pc, #180]	; (800f360 <rcl_get_secure_root+0xcc>)
 800f2ac:	9303      	str	r3, [sp, #12]
 800f2ae:	a903      	add	r1, sp, #12
 800f2b0:	f000 f9da 	bl	800f668 <rcutils_get_env>
 800f2b4:	4605      	mov	r5, r0
 800f2b6:	b120      	cbz	r0, 800f2c2 <rcl_get_secure_root+0x2e>
 800f2b8:	2500      	movs	r5, #0
 800f2ba:	4628      	mov	r0, r5
 800f2bc:	b005      	add	sp, #20
 800f2be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f2c2:	9b03      	ldr	r3, [sp, #12]
 800f2c4:	781a      	ldrb	r2, [r3, #0]
 800f2c6:	2a00      	cmp	r2, #0
 800f2c8:	d0f6      	beq.n	800f2b8 <rcl_get_secure_root+0x24>
 800f2ca:	f104 090c 	add.w	r9, r4, #12
 800f2ce:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f2d2:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f2dc:	f000 fb06 	bl	800f8ec <rcutils_strdup>
 800f2e0:	4680      	mov	r8, r0
 800f2e2:	2800      	cmp	r0, #0
 800f2e4:	d0e8      	beq.n	800f2b8 <rcl_get_secure_root+0x24>
 800f2e6:	481f      	ldr	r0, [pc, #124]	; (800f364 <rcl_get_secure_root+0xd0>)
 800f2e8:	9503      	str	r5, [sp, #12]
 800f2ea:	a903      	add	r1, sp, #12
 800f2ec:	f000 f9bc 	bl	800f668 <rcutils_get_env>
 800f2f0:	b160      	cbz	r0, 800f30c <rcl_get_secure_root+0x78>
 800f2f2:	2600      	movs	r6, #0
 800f2f4:	6863      	ldr	r3, [r4, #4]
 800f2f6:	6921      	ldr	r1, [r4, #16]
 800f2f8:	4630      	mov	r0, r6
 800f2fa:	4798      	blx	r3
 800f2fc:	4640      	mov	r0, r8
 800f2fe:	6863      	ldr	r3, [r4, #4]
 800f300:	6921      	ldr	r1, [r4, #16]
 800f302:	4798      	blx	r3
 800f304:	4628      	mov	r0, r5
 800f306:	b005      	add	sp, #20
 800f308:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f30c:	9b03      	ldr	r3, [sp, #12]
 800f30e:	781e      	ldrb	r6, [r3, #0]
 800f310:	b1f6      	cbz	r6, 800f350 <rcl_get_secure_root+0xbc>
 800f312:	e899 0003 	ldmia.w	r9, {r0, r1}
 800f316:	e88d 0003 	stmia.w	sp, {r0, r1}
 800f31a:	4618      	mov	r0, r3
 800f31c:	e894 000e 	ldmia.w	r4, {r1, r2, r3}
 800f320:	f000 fae4 	bl	800f8ec <rcutils_strdup>
 800f324:	4606      	mov	r6, r0
 800f326:	2800      	cmp	r0, #0
 800f328:	d0e3      	beq.n	800f2f2 <rcl_get_secure_root+0x5e>
 800f32a:	4622      	mov	r2, r4
 800f32c:	4641      	mov	r1, r8
 800f32e:	f7ff ff6f 	bl	800f210 <exact_match_lookup>
 800f332:	4605      	mov	r5, r0
 800f334:	2d00      	cmp	r5, #0
 800f336:	d0dd      	beq.n	800f2f4 <rcl_get_secure_root+0x60>
 800f338:	4628      	mov	r0, r5
 800f33a:	f000 f9ad 	bl	800f698 <rcutils_is_directory>
 800f33e:	4603      	mov	r3, r0
 800f340:	2800      	cmp	r0, #0
 800f342:	d1d7      	bne.n	800f2f4 <rcl_get_secure_root+0x60>
 800f344:	4628      	mov	r0, r5
 800f346:	6921      	ldr	r1, [r4, #16]
 800f348:	461d      	mov	r5, r3
 800f34a:	6863      	ldr	r3, [r4, #4]
 800f34c:	4798      	blx	r3
 800f34e:	e7d1      	b.n	800f2f4 <rcl_get_secure_root+0x60>
 800f350:	4622      	mov	r2, r4
 800f352:	4638      	mov	r0, r7
 800f354:	4641      	mov	r1, r8
 800f356:	f7ff ff5b 	bl	800f210 <exact_match_lookup>
 800f35a:	4605      	mov	r5, r0
 800f35c:	e7ea      	b.n	800f334 <rcl_get_secure_root+0xa0>
 800f35e:	bf00      	nop
 800f360:	0801478c 	.word	0x0801478c
 800f364:	080147a4 	.word	0x080147a4

0800f368 <rcl_get_security_options_from_environment>:
 800f368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f36c:	b082      	sub	sp, #8
 800f36e:	2300      	movs	r3, #0
 800f370:	4606      	mov	r6, r0
 800f372:	460f      	mov	r7, r1
 800f374:	4820      	ldr	r0, [pc, #128]	; (800f3f8 <rcl_get_security_options_from_environment+0x90>)
 800f376:	9301      	str	r3, [sp, #4]
 800f378:	a901      	add	r1, sp, #4
 800f37a:	4690      	mov	r8, r2
 800f37c:	f000 f974 	bl	800f668 <rcutils_get_env>
 800f380:	b120      	cbz	r0, 800f38c <rcl_get_security_options_from_environment+0x24>
 800f382:	2501      	movs	r5, #1
 800f384:	4628      	mov	r0, r5
 800f386:	b002      	add	sp, #8
 800f388:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f38c:	491b      	ldr	r1, [pc, #108]	; (800f3fc <rcl_get_security_options_from_environment+0x94>)
 800f38e:	4604      	mov	r4, r0
 800f390:	9801      	ldr	r0, [sp, #4]
 800f392:	f7f0 ff1d 	bl	80001d0 <strcmp>
 800f396:	4605      	mov	r5, r0
 800f398:	b9e8      	cbnz	r0, 800f3d6 <rcl_get_security_options_from_environment+0x6e>
 800f39a:	9001      	str	r0, [sp, #4]
 800f39c:	f1b8 0f00 	cmp.w	r8, #0
 800f3a0:	d020      	beq.n	800f3e4 <rcl_get_security_options_from_environment+0x7c>
 800f3a2:	4817      	ldr	r0, [pc, #92]	; (800f400 <rcl_get_security_options_from_environment+0x98>)
 800f3a4:	a901      	add	r1, sp, #4
 800f3a6:	f000 f95f 	bl	800f668 <rcutils_get_env>
 800f3aa:	2800      	cmp	r0, #0
 800f3ac:	d1e9      	bne.n	800f382 <rcl_get_security_options_from_environment+0x1a>
 800f3ae:	4915      	ldr	r1, [pc, #84]	; (800f404 <rcl_get_security_options_from_environment+0x9c>)
 800f3b0:	9801      	ldr	r0, [sp, #4]
 800f3b2:	f7f0 ff0d 	bl	80001d0 <strcmp>
 800f3b6:	fab0 f080 	clz	r0, r0
 800f3ba:	0940      	lsrs	r0, r0, #5
 800f3bc:	f888 0000 	strb.w	r0, [r8]
 800f3c0:	4639      	mov	r1, r7
 800f3c2:	4630      	mov	r0, r6
 800f3c4:	f7ff ff66 	bl	800f294 <rcl_get_secure_root>
 800f3c8:	b170      	cbz	r0, 800f3e8 <rcl_get_security_options_from_environment+0x80>
 800f3ca:	f8c8 0004 	str.w	r0, [r8, #4]
 800f3ce:	4628      	mov	r0, r5
 800f3d0:	b002      	add	sp, #8
 800f3d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3d6:	4625      	mov	r5, r4
 800f3d8:	4628      	mov	r0, r5
 800f3da:	f888 4000 	strb.w	r4, [r8]
 800f3de:	b002      	add	sp, #8
 800f3e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f3e4:	250b      	movs	r5, #11
 800f3e6:	e7cd      	b.n	800f384 <rcl_get_security_options_from_environment+0x1c>
 800f3e8:	f898 5000 	ldrb.w	r5, [r8]
 800f3ec:	f1a5 0501 	sub.w	r5, r5, #1
 800f3f0:	fab5 f585 	clz	r5, r5
 800f3f4:	096d      	lsrs	r5, r5, #5
 800f3f6:	e7c5      	b.n	800f384 <rcl_get_security_options_from_environment+0x1c>
 800f3f8:	08014744 	.word	0x08014744
 800f3fc:	08014758 	.word	0x08014758
 800f400:	08014760 	.word	0x08014760
 800f404:	08014778 	.word	0x08014778

0800f408 <rcl_get_system_time>:
 800f408:	4608      	mov	r0, r1
 800f40a:	f000 bbd9 	b.w	800fbc0 <rcutils_system_time_now>
 800f40e:	bf00      	nop

0800f410 <rcl_get_steady_time>:
 800f410:	4608      	mov	r0, r1
 800f412:	f000 bbfd 	b.w	800fc10 <rcutils_steady_time_now>
 800f416:	bf00      	nop

0800f418 <rcl_get_ros_time>:
 800f418:	7a03      	ldrb	r3, [r0, #8]
 800f41a:	b510      	push	{r4, lr}
 800f41c:	460c      	mov	r4, r1
 800f41e:	b133      	cbz	r3, 800f42e <rcl_get_ros_time+0x16>
 800f420:	2105      	movs	r1, #5
 800f422:	f000 f8eb 	bl	800f5fc <__atomic_load_8>
 800f426:	e9c4 0100 	strd	r0, r1, [r4]
 800f42a:	2000      	movs	r0, #0
 800f42c:	bd10      	pop	{r4, pc}
 800f42e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f432:	4608      	mov	r0, r1
 800f434:	f000 bbc4 	b.w	800fbc0 <rcutils_system_time_now>

0800f438 <rcl_clock_init>:
 800f438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f43a:	4605      	mov	r5, r0
 800f43c:	4610      	mov	r0, r2
 800f43e:	4614      	mov	r4, r2
 800f440:	460e      	mov	r6, r1
 800f442:	f7fa fff5 	bl	800a430 <rcutils_allocator_is_valid>
 800f446:	b128      	cbz	r0, 800f454 <rcl_clock_init+0x1c>
 800f448:	2d03      	cmp	r5, #3
 800f44a:	d803      	bhi.n	800f454 <rcl_clock_init+0x1c>
 800f44c:	e8df f005 	tbb	[pc, r5]
 800f450:	06532e1d 	.word	0x06532e1d
 800f454:	f04f 0c0b 	mov.w	ip, #11
 800f458:	4660      	mov	r0, ip
 800f45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f45c:	2e00      	cmp	r6, #0
 800f45e:	d0f9      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f460:	2c00      	cmp	r4, #0
 800f462:	d0f7      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f464:	2300      	movs	r3, #0
 800f466:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f46a:	f8df e0b4 	ldr.w	lr, [pc, #180]	; 800f520 <rcl_clock_init+0xe8>
 800f46e:	6133      	str	r3, [r6, #16]
 800f470:	f106 0514 	add.w	r5, r6, #20
 800f474:	469c      	mov	ip, r3
 800f476:	2703      	movs	r7, #3
 800f478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f47a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	602b      	str	r3, [r5, #0]
 800f480:	7037      	strb	r7, [r6, #0]
 800f482:	f8c6 e00c 	str.w	lr, [r6, #12]
 800f486:	4660      	mov	r0, ip
 800f488:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f48a:	2e00      	cmp	r6, #0
 800f48c:	d0e2      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f48e:	2300      	movs	r3, #0
 800f490:	7033      	strb	r3, [r6, #0]
 800f492:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f496:	e9c6 3303 	strd	r3, r3, [r6, #12]
 800f49a:	469c      	mov	ip, r3
 800f49c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f49e:	f106 0514 	add.w	r5, r6, #20
 800f4a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f4a4:	6823      	ldr	r3, [r4, #0]
 800f4a6:	602b      	str	r3, [r5, #0]
 800f4a8:	4660      	mov	r0, ip
 800f4aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4ac:	2e00      	cmp	r6, #0
 800f4ae:	d0d1      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f4b0:	2c00      	cmp	r4, #0
 800f4b2:	d0cf      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f4b4:	2700      	movs	r7, #0
 800f4b6:	7037      	strb	r7, [r6, #0]
 800f4b8:	46a4      	mov	ip, r4
 800f4ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800f4be:	f106 0514 	add.w	r5, r6, #20
 800f4c2:	e9c6 7701 	strd	r7, r7, [r6, #4]
 800f4c6:	e9c6 7703 	strd	r7, r7, [r6, #12]
 800f4ca:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f4cc:	f8dc 3000 	ldr.w	r3, [ip]
 800f4d0:	602b      	str	r3, [r5, #0]
 800f4d2:	6921      	ldr	r1, [r4, #16]
 800f4d4:	6823      	ldr	r3, [r4, #0]
 800f4d6:	2010      	movs	r0, #16
 800f4d8:	4798      	blx	r3
 800f4da:	6130      	str	r0, [r6, #16]
 800f4dc:	b1d0      	cbz	r0, 800f514 <rcl_clock_init+0xdc>
 800f4de:	2200      	movs	r2, #0
 800f4e0:	2300      	movs	r3, #0
 800f4e2:	e9c0 2300 	strd	r2, r3, [r0]
 800f4e6:	2301      	movs	r3, #1
 800f4e8:	7207      	strb	r7, [r0, #8]
 800f4ea:	4a0c      	ldr	r2, [pc, #48]	; (800f51c <rcl_clock_init+0xe4>)
 800f4ec:	7033      	strb	r3, [r6, #0]
 800f4ee:	46bc      	mov	ip, r7
 800f4f0:	60f2      	str	r2, [r6, #12]
 800f4f2:	4660      	mov	r0, ip
 800f4f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f4f6:	2e00      	cmp	r6, #0
 800f4f8:	d0ac      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f4fa:	2c00      	cmp	r4, #0
 800f4fc:	d0aa      	beq.n	800f454 <rcl_clock_init+0x1c>
 800f4fe:	2300      	movs	r3, #0
 800f500:	e9c6 3301 	strd	r3, r3, [r6, #4]
 800f504:	f8df e01c 	ldr.w	lr, [pc, #28]	; 800f524 <rcl_clock_init+0xec>
 800f508:	6133      	str	r3, [r6, #16]
 800f50a:	f106 0514 	add.w	r5, r6, #20
 800f50e:	469c      	mov	ip, r3
 800f510:	2702      	movs	r7, #2
 800f512:	e7b1      	b.n	800f478 <rcl_clock_init+0x40>
 800f514:	f04f 0c0a 	mov.w	ip, #10
 800f518:	e79e      	b.n	800f458 <rcl_clock_init+0x20>
 800f51a:	bf00      	nop
 800f51c:	0800f419 	.word	0x0800f419
 800f520:	0800f411 	.word	0x0800f411
 800f524:	0800f409 	.word	0x0800f409

0800f528 <rcl_validate_enclave_name_with_size>:
 800f528:	b378      	cbz	r0, 800f58a <rcl_validate_enclave_name_with_size+0x62>
 800f52a:	b570      	push	{r4, r5, r6, lr}
 800f52c:	4615      	mov	r5, r2
 800f52e:	b0c2      	sub	sp, #264	; 0x108
 800f530:	b302      	cbz	r2, 800f574 <rcl_validate_enclave_name_with_size+0x4c>
 800f532:	461e      	mov	r6, r3
 800f534:	466a      	mov	r2, sp
 800f536:	ab01      	add	r3, sp, #4
 800f538:	460c      	mov	r4, r1
 800f53a:	f000 fc2b 	bl	800fd94 <rmw_validate_namespace_with_size>
 800f53e:	4684      	mov	ip, r0
 800f540:	b9e8      	cbnz	r0, 800f57e <rcl_validate_enclave_name_with_size+0x56>
 800f542:	9b00      	ldr	r3, [sp, #0]
 800f544:	b923      	cbnz	r3, 800f550 <rcl_validate_enclave_name_with_size+0x28>
 800f546:	2300      	movs	r3, #0
 800f548:	602b      	str	r3, [r5, #0]
 800f54a:	4660      	mov	r0, ip
 800f54c:	b042      	add	sp, #264	; 0x108
 800f54e:	bd70      	pop	{r4, r5, r6, pc}
 800f550:	2b07      	cmp	r3, #7
 800f552:	d007      	beq.n	800f564 <rcl_validate_enclave_name_with_size+0x3c>
 800f554:	1e5a      	subs	r2, r3, #1
 800f556:	2a05      	cmp	r2, #5
 800f558:	d833      	bhi.n	800f5c2 <rcl_validate_enclave_name_with_size+0x9a>
 800f55a:	e8df f002 	tbb	[pc, r2]
 800f55e:	2c2f      	.short	0x2c2f
 800f560:	1a232629 	.word	0x1a232629
 800f564:	2cff      	cmp	r4, #255	; 0xff
 800f566:	d9ee      	bls.n	800f546 <rcl_validate_enclave_name_with_size+0x1e>
 800f568:	602b      	str	r3, [r5, #0]
 800f56a:	2e00      	cmp	r6, #0
 800f56c:	d0ed      	beq.n	800f54a <rcl_validate_enclave_name_with_size+0x22>
 800f56e:	23fe      	movs	r3, #254	; 0xfe
 800f570:	6033      	str	r3, [r6, #0]
 800f572:	e7ea      	b.n	800f54a <rcl_validate_enclave_name_with_size+0x22>
 800f574:	f04f 0c0b 	mov.w	ip, #11
 800f578:	4660      	mov	r0, ip
 800f57a:	b042      	add	sp, #264	; 0x108
 800f57c:	bd70      	pop	{r4, r5, r6, pc}
 800f57e:	f7ff f953 	bl	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 800f582:	4684      	mov	ip, r0
 800f584:	4660      	mov	r0, ip
 800f586:	b042      	add	sp, #264	; 0x108
 800f588:	bd70      	pop	{r4, r5, r6, pc}
 800f58a:	f04f 0c0b 	mov.w	ip, #11
 800f58e:	4660      	mov	r0, ip
 800f590:	4770      	bx	lr
 800f592:	2306      	movs	r3, #6
 800f594:	602b      	str	r3, [r5, #0]
 800f596:	2e00      	cmp	r6, #0
 800f598:	d0d7      	beq.n	800f54a <rcl_validate_enclave_name_with_size+0x22>
 800f59a:	9b01      	ldr	r3, [sp, #4]
 800f59c:	6033      	str	r3, [r6, #0]
 800f59e:	4660      	mov	r0, ip
 800f5a0:	b042      	add	sp, #264	; 0x108
 800f5a2:	bd70      	pop	{r4, r5, r6, pc}
 800f5a4:	2305      	movs	r3, #5
 800f5a6:	602b      	str	r3, [r5, #0]
 800f5a8:	e7f5      	b.n	800f596 <rcl_validate_enclave_name_with_size+0x6e>
 800f5aa:	2304      	movs	r3, #4
 800f5ac:	602b      	str	r3, [r5, #0]
 800f5ae:	e7f2      	b.n	800f596 <rcl_validate_enclave_name_with_size+0x6e>
 800f5b0:	2303      	movs	r3, #3
 800f5b2:	602b      	str	r3, [r5, #0]
 800f5b4:	e7ef      	b.n	800f596 <rcl_validate_enclave_name_with_size+0x6e>
 800f5b6:	2302      	movs	r3, #2
 800f5b8:	602b      	str	r3, [r5, #0]
 800f5ba:	e7ec      	b.n	800f596 <rcl_validate_enclave_name_with_size+0x6e>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	602b      	str	r3, [r5, #0]
 800f5c0:	e7e9      	b.n	800f596 <rcl_validate_enclave_name_with_size+0x6e>
 800f5c2:	4a04      	ldr	r2, [pc, #16]	; (800f5d4 <rcl_validate_enclave_name_with_size+0xac>)
 800f5c4:	f44f 7180 	mov.w	r1, #256	; 0x100
 800f5c8:	a802      	add	r0, sp, #8
 800f5ca:	f000 f963 	bl	800f894 <rcutils_snprintf>
 800f5ce:	f04f 0c01 	mov.w	ip, #1
 800f5d2:	e7ba      	b.n	800f54a <rcl_validate_enclave_name_with_size+0x22>
 800f5d4:	080147c4 	.word	0x080147c4

0800f5d8 <rcl_validate_enclave_name>:
 800f5d8:	b168      	cbz	r0, 800f5f6 <rcl_validate_enclave_name+0x1e>
 800f5da:	b570      	push	{r4, r5, r6, lr}
 800f5dc:	460d      	mov	r5, r1
 800f5de:	4616      	mov	r6, r2
 800f5e0:	4604      	mov	r4, r0
 800f5e2:	f7f0 fdff 	bl	80001e4 <strlen>
 800f5e6:	4633      	mov	r3, r6
 800f5e8:	4601      	mov	r1, r0
 800f5ea:	462a      	mov	r2, r5
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f5f2:	f7ff bf99 	b.w	800f528 <rcl_validate_enclave_name_with_size>
 800f5f6:	200b      	movs	r0, #11
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop

0800f5fc <__atomic_load_8>:
 800f5fc:	ea80 4110 	eor.w	r1, r0, r0, lsr #16
 800f600:	f081 013d 	eor.w	r1, r1, #61	; 0x3d
 800f604:	4a15      	ldr	r2, [pc, #84]	; (800f65c <__atomic_load_8+0x60>)
 800f606:	4b16      	ldr	r3, [pc, #88]	; (800f660 <__atomic_load_8+0x64>)
 800f608:	eb01 01c1 	add.w	r1, r1, r1, lsl #3
 800f60c:	ea81 1111 	eor.w	r1, r1, r1, lsr #4
 800f610:	fb02 f101 	mul.w	r1, r2, r1
 800f614:	ea81 31d1 	eor.w	r1, r1, r1, lsr #15
 800f618:	fba3 2301 	umull	r2, r3, r3, r1
 800f61c:	091b      	lsrs	r3, r3, #4
 800f61e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800f622:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
 800f626:	b4d0      	push	{r4, r6, r7}
 800f628:	4c0e      	ldr	r4, [pc, #56]	; (800f664 <__atomic_load_8+0x68>)
 800f62a:	1ac9      	subs	r1, r1, r3
 800f62c:	1862      	adds	r2, r4, r1
 800f62e:	f04f 0c01 	mov.w	ip, #1
 800f632:	e8d2 3f4f 	ldrexb	r3, [r2]
 800f636:	e8c2 cf46 	strexb	r6, ip, [r2]
 800f63a:	2e00      	cmp	r6, #0
 800f63c:	d1f9      	bne.n	800f632 <__atomic_load_8+0x36>
 800f63e:	f3bf 8f5b 	dmb	ish
 800f642:	b2db      	uxtb	r3, r3
 800f644:	2b00      	cmp	r3, #0
 800f646:	d1f4      	bne.n	800f632 <__atomic_load_8+0x36>
 800f648:	e9d0 6700 	ldrd	r6, r7, [r0]
 800f64c:	f3bf 8f5b 	dmb	ish
 800f650:	5463      	strb	r3, [r4, r1]
 800f652:	4630      	mov	r0, r6
 800f654:	4639      	mov	r1, r7
 800f656:	bcd0      	pop	{r4, r6, r7}
 800f658:	4770      	bx	lr
 800f65a:	bf00      	nop
 800f65c:	27d4eb2d 	.word	0x27d4eb2d
 800f660:	b21642c9 	.word	0xb21642c9
 800f664:	20015958 	.word	0x20015958

0800f668 <rcutils_get_env>:
 800f668:	b168      	cbz	r0, 800f686 <rcutils_get_env+0x1e>
 800f66a:	b510      	push	{r4, lr}
 800f66c:	460c      	mov	r4, r1
 800f66e:	b129      	cbz	r1, 800f67c <rcutils_get_env+0x14>
 800f670:	f003 fb3e 	bl	8012cf0 <getenv>
 800f674:	b120      	cbz	r0, 800f680 <rcutils_get_env+0x18>
 800f676:	6020      	str	r0, [r4, #0]
 800f678:	2000      	movs	r0, #0
 800f67a:	bd10      	pop	{r4, pc}
 800f67c:	4803      	ldr	r0, [pc, #12]	; (800f68c <rcutils_get_env+0x24>)
 800f67e:	bd10      	pop	{r4, pc}
 800f680:	4b03      	ldr	r3, [pc, #12]	; (800f690 <rcutils_get_env+0x28>)
 800f682:	6023      	str	r3, [r4, #0]
 800f684:	bd10      	pop	{r4, pc}
 800f686:	4803      	ldr	r0, [pc, #12]	; (800f694 <rcutils_get_env+0x2c>)
 800f688:	4770      	bx	lr
 800f68a:	bf00      	nop
 800f68c:	08014840 	.word	0x08014840
 800f690:	08014964 	.word	0x08014964
 800f694:	08014824 	.word	0x08014824

0800f698 <rcutils_is_directory>:
 800f698:	2000      	movs	r0, #0
 800f69a:	4770      	bx	lr

0800f69c <rcutils_join_path>:
 800f69c:	b082      	sub	sp, #8
 800f69e:	e88d 000c 	stmia.w	sp, {r2, r3}
 800f6a2:	2000      	movs	r0, #0
 800f6a4:	b002      	add	sp, #8
 800f6a6:	4770      	bx	lr

0800f6a8 <rcutils_to_native_path>:
 800f6a8:	b084      	sub	sp, #16
 800f6aa:	a801      	add	r0, sp, #4
 800f6ac:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800f6b0:	b004      	add	sp, #16
 800f6b2:	2000      	movs	r0, #0
 800f6b4:	4770      	bx	lr
 800f6b6:	bf00      	nop

0800f6b8 <rcutils_format_string_limit>:
 800f6b8:	b40f      	push	{r0, r1, r2, r3}
 800f6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f6bc:	b083      	sub	sp, #12
 800f6be:	ac08      	add	r4, sp, #32
 800f6c0:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 800f6c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800f6c6:	b34e      	cbz	r6, 800f71c <rcutils_format_string_limit+0x64>
 800f6c8:	a808      	add	r0, sp, #32
 800f6ca:	f7fa feb1 	bl	800a430 <rcutils_allocator_is_valid>
 800f6ce:	b328      	cbz	r0, 800f71c <rcutils_format_string_limit+0x64>
 800f6d0:	2100      	movs	r1, #0
 800f6d2:	ab0f      	add	r3, sp, #60	; 0x3c
 800f6d4:	4632      	mov	r2, r6
 800f6d6:	4608      	mov	r0, r1
 800f6d8:	e9cd 3300 	strd	r3, r3, [sp]
 800f6dc:	f000 f8f4 	bl	800f8c8 <rcutils_vsnprintf>
 800f6e0:	1c43      	adds	r3, r0, #1
 800f6e2:	4605      	mov	r5, r0
 800f6e4:	d01a      	beq.n	800f71c <rcutils_format_string_limit+0x64>
 800f6e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f6e8:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f6ea:	1c47      	adds	r7, r0, #1
 800f6ec:	429f      	cmp	r7, r3
 800f6ee:	bf84      	itt	hi
 800f6f0:	461f      	movhi	r7, r3
 800f6f2:	f103 35ff 	addhi.w	r5, r3, #4294967295	; 0xffffffff
 800f6f6:	4638      	mov	r0, r7
 800f6f8:	9b08      	ldr	r3, [sp, #32]
 800f6fa:	4798      	blx	r3
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	b168      	cbz	r0, 800f71c <rcutils_format_string_limit+0x64>
 800f700:	9b01      	ldr	r3, [sp, #4]
 800f702:	4632      	mov	r2, r6
 800f704:	4639      	mov	r1, r7
 800f706:	f000 f8df 	bl	800f8c8 <rcutils_vsnprintf>
 800f70a:	2800      	cmp	r0, #0
 800f70c:	db02      	blt.n	800f714 <rcutils_format_string_limit+0x5c>
 800f70e:	2300      	movs	r3, #0
 800f710:	5563      	strb	r3, [r4, r5]
 800f712:	e004      	b.n	800f71e <rcutils_format_string_limit+0x66>
 800f714:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f716:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f718:	4620      	mov	r0, r4
 800f71a:	4798      	blx	r3
 800f71c:	2400      	movs	r4, #0
 800f71e:	4620      	mov	r0, r4
 800f720:	b003      	add	sp, #12
 800f722:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800f726:	b004      	add	sp, #16
 800f728:	4770      	bx	lr
 800f72a:	bf00      	nop

0800f72c <rcutils_repl_str>:
 800f72c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f730:	ed2d 8b02 	vpush	{d8}
 800f734:	b087      	sub	sp, #28
 800f736:	4680      	mov	r8, r0
 800f738:	4608      	mov	r0, r1
 800f73a:	f8cd 8004 	str.w	r8, [sp, #4]
 800f73e:	ee08 2a10 	vmov	s16, r2
 800f742:	468a      	mov	sl, r1
 800f744:	4699      	mov	r9, r3
 800f746:	f7f0 fd4d 	bl	80001e4 <strlen>
 800f74a:	2600      	movs	r6, #0
 800f74c:	4647      	mov	r7, r8
 800f74e:	9002      	str	r0, [sp, #8]
 800f750:	46b3      	mov	fp, r6
 800f752:	2510      	movs	r5, #16
 800f754:	46b0      	mov	r8, r6
 800f756:	e01d      	b.n	800f794 <rcutils_repl_str+0x68>
 800f758:	f10b 0b01 	add.w	fp, fp, #1
 800f75c:	455e      	cmp	r6, fp
 800f75e:	d211      	bcs.n	800f784 <rcutils_repl_str+0x58>
 800f760:	442e      	add	r6, r5
 800f762:	f8d9 3008 	ldr.w	r3, [r9, #8]
 800f766:	f8d9 2010 	ldr.w	r2, [r9, #16]
 800f76a:	00b1      	lsls	r1, r6, #2
 800f76c:	4798      	blx	r3
 800f76e:	2800      	cmp	r0, #0
 800f770:	f000 8088 	beq.w	800f884 <rcutils_repl_str+0x158>
 800f774:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f778:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800f77c:	4680      	mov	r8, r0
 800f77e:	bf28      	it	cs
 800f780:	f44f 1580 	movcs.w	r5, #1048576	; 0x100000
 800f784:	9a01      	ldr	r2, [sp, #4]
 800f786:	eb08 038b 	add.w	r3, r8, fp, lsl #2
 800f78a:	1aa2      	subs	r2, r4, r2
 800f78c:	f843 2c04 	str.w	r2, [r3, #-4]
 800f790:	9b02      	ldr	r3, [sp, #8]
 800f792:	18e7      	adds	r7, r4, r3
 800f794:	4651      	mov	r1, sl
 800f796:	4638      	mov	r0, r7
 800f798:	f003 fe67 	bl	801346a <strstr>
 800f79c:	4604      	mov	r4, r0
 800f79e:	4640      	mov	r0, r8
 800f7a0:	2c00      	cmp	r4, #0
 800f7a2:	d1d9      	bne.n	800f758 <rcutils_repl_str+0x2c>
 800f7a4:	46b8      	mov	r8, r7
 800f7a6:	4607      	mov	r7, r0
 800f7a8:	4640      	mov	r0, r8
 800f7aa:	f7f0 fd1b 	bl	80001e4 <strlen>
 800f7ae:	9b01      	ldr	r3, [sp, #4]
 800f7b0:	eba8 0303 	sub.w	r3, r8, r3
 800f7b4:	181c      	adds	r4, r3, r0
 800f7b6:	9404      	str	r4, [sp, #16]
 800f7b8:	f1bb 0f00 	cmp.w	fp, #0
 800f7bc:	d04a      	beq.n	800f854 <rcutils_repl_str+0x128>
 800f7be:	ee18 0a10 	vmov	r0, s16
 800f7c2:	f7f0 fd0f 	bl	80001e4 <strlen>
 800f7c6:	9b02      	ldr	r3, [sp, #8]
 800f7c8:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f7cc:	1ac3      	subs	r3, r0, r3
 800f7ce:	fb0b 4303 	mla	r3, fp, r3, r4
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	9305      	str	r3, [sp, #20]
 800f7d6:	4606      	mov	r6, r0
 800f7d8:	f8d9 3000 	ldr.w	r3, [r9]
 800f7dc:	1c50      	adds	r0, r2, #1
 800f7de:	4798      	blx	r3
 800f7e0:	9003      	str	r0, [sp, #12]
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d04f      	beq.n	800f886 <rcutils_repl_str+0x15a>
 800f7e6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800f7ea:	683a      	ldr	r2, [r7, #0]
 800f7ec:	4641      	mov	r1, r8
 800f7ee:	f003 fedd 	bl	80135ac <memcpy>
 800f7f2:	683d      	ldr	r5, [r7, #0]
 800f7f4:	9b03      	ldr	r3, [sp, #12]
 800f7f6:	9701      	str	r7, [sp, #4]
 800f7f8:	46ba      	mov	sl, r7
 800f7fa:	441d      	add	r5, r3
 800f7fc:	9f02      	ldr	r7, [sp, #8]
 800f7fe:	f8cd 9008 	str.w	r9, [sp, #8]
 800f802:	2401      	movs	r4, #1
 800f804:	46d1      	mov	r9, sl
 800f806:	ee18 aa10 	vmov	sl, s16
 800f80a:	e00a      	b.n	800f822 <rcutils_repl_str+0xf6>
 800f80c:	f8d9 5000 	ldr.w	r5, [r9]
 800f810:	1aaa      	subs	r2, r5, r2
 800f812:	1885      	adds	r5, r0, r2
 800f814:	f003 feca 	bl	80135ac <memcpy>
 800f818:	45a3      	cmp	fp, r4
 800f81a:	f104 0201 	add.w	r2, r4, #1
 800f81e:	d935      	bls.n	800f88c <rcutils_repl_str+0x160>
 800f820:	4614      	mov	r4, r2
 800f822:	4632      	mov	r2, r6
 800f824:	4651      	mov	r1, sl
 800f826:	4628      	mov	r0, r5
 800f828:	f003 fec0 	bl	80135ac <memcpy>
 800f82c:	f859 2b04 	ldr.w	r2, [r9], #4
 800f830:	45a3      	cmp	fp, r4
 800f832:	443a      	add	r2, r7
 800f834:	eb05 0006 	add.w	r0, r5, r6
 800f838:	eb08 0102 	add.w	r1, r8, r2
 800f83c:	d1e6      	bne.n	800f80c <rcutils_repl_str+0xe0>
 800f83e:	9b04      	ldr	r3, [sp, #16]
 800f840:	1a9a      	subs	r2, r3, r2
 800f842:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f846:	f003 feb1 	bl	80135ac <memcpy>
 800f84a:	9a03      	ldr	r2, [sp, #12]
 800f84c:	9905      	ldr	r1, [sp, #20]
 800f84e:	2300      	movs	r3, #0
 800f850:	5453      	strb	r3, [r2, r1]
 800f852:	e00b      	b.n	800f86c <rcutils_repl_str+0x140>
 800f854:	4620      	mov	r0, r4
 800f856:	f8d9 3000 	ldr.w	r3, [r9]
 800f85a:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f85e:	3001      	adds	r0, #1
 800f860:	4798      	blx	r3
 800f862:	9003      	str	r0, [sp, #12]
 800f864:	b110      	cbz	r0, 800f86c <rcutils_repl_str+0x140>
 800f866:	9901      	ldr	r1, [sp, #4]
 800f868:	f003 fe98 	bl	801359c <strcpy>
 800f86c:	4638      	mov	r0, r7
 800f86e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800f872:	f8d9 1010 	ldr.w	r1, [r9, #16]
 800f876:	4798      	blx	r3
 800f878:	9803      	ldr	r0, [sp, #12]
 800f87a:	b007      	add	sp, #28
 800f87c:	ecbd 8b02 	vpop	{d8}
 800f880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f884:	4647      	mov	r7, r8
 800f886:	2300      	movs	r3, #0
 800f888:	9303      	str	r3, [sp, #12]
 800f88a:	e7ef      	b.n	800f86c <rcutils_repl_str+0x140>
 800f88c:	e9dd 7901 	ldrd	r7, r9, [sp, #4]
 800f890:	e7db      	b.n	800f84a <rcutils_repl_str+0x11e>
 800f892:	bf00      	nop

0800f894 <rcutils_snprintf>:
 800f894:	b40c      	push	{r2, r3}
 800f896:	b530      	push	{r4, r5, lr}
 800f898:	b083      	sub	sp, #12
 800f89a:	ab06      	add	r3, sp, #24
 800f89c:	f853 2b04 	ldr.w	r2, [r3], #4
 800f8a0:	9301      	str	r3, [sp, #4]
 800f8a2:	b152      	cbz	r2, 800f8ba <rcutils_snprintf+0x26>
 800f8a4:	b138      	cbz	r0, 800f8b6 <rcutils_snprintf+0x22>
 800f8a6:	b141      	cbz	r1, 800f8ba <rcutils_snprintf+0x26>
 800f8a8:	f003 fdaa 	bl	8013400 <vsniprintf>
 800f8ac:	b003      	add	sp, #12
 800f8ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f8b2:	b002      	add	sp, #8
 800f8b4:	4770      	bx	lr
 800f8b6:	2900      	cmp	r1, #0
 800f8b8:	d0f6      	beq.n	800f8a8 <rcutils_snprintf+0x14>
 800f8ba:	f003 fe43 	bl	8013544 <__errno>
 800f8be:	2316      	movs	r3, #22
 800f8c0:	6003      	str	r3, [r0, #0]
 800f8c2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8c6:	e7f1      	b.n	800f8ac <rcutils_snprintf+0x18>

0800f8c8 <rcutils_vsnprintf>:
 800f8c8:	b570      	push	{r4, r5, r6, lr}
 800f8ca:	b13a      	cbz	r2, 800f8dc <rcutils_vsnprintf+0x14>
 800f8cc:	b120      	cbz	r0, 800f8d8 <rcutils_vsnprintf+0x10>
 800f8ce:	b129      	cbz	r1, 800f8dc <rcutils_vsnprintf+0x14>
 800f8d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f8d4:	f003 bd94 	b.w	8013400 <vsniprintf>
 800f8d8:	2900      	cmp	r1, #0
 800f8da:	d0f9      	beq.n	800f8d0 <rcutils_vsnprintf+0x8>
 800f8dc:	f003 fe32 	bl	8013544 <__errno>
 800f8e0:	2316      	movs	r3, #22
 800f8e2:	6003      	str	r3, [r0, #0]
 800f8e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800f8e8:	bd70      	pop	{r4, r5, r6, pc}
 800f8ea:	bf00      	nop

0800f8ec <rcutils_strdup>:
 800f8ec:	b084      	sub	sp, #16
 800f8ee:	b570      	push	{r4, r5, r6, lr}
 800f8f0:	b082      	sub	sp, #8
 800f8f2:	ac07      	add	r4, sp, #28
 800f8f4:	e884 000e 	stmia.w	r4, {r1, r2, r3}
 800f8f8:	4605      	mov	r5, r0
 800f8fa:	b1b0      	cbz	r0, 800f92a <rcutils_strdup+0x3e>
 800f8fc:	f7f0 fc72 	bl	80001e4 <strlen>
 800f900:	1c42      	adds	r2, r0, #1
 800f902:	9b07      	ldr	r3, [sp, #28]
 800f904:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f906:	9201      	str	r2, [sp, #4]
 800f908:	4606      	mov	r6, r0
 800f90a:	4610      	mov	r0, r2
 800f90c:	4798      	blx	r3
 800f90e:	4604      	mov	r4, r0
 800f910:	b128      	cbz	r0, 800f91e <rcutils_strdup+0x32>
 800f912:	9a01      	ldr	r2, [sp, #4]
 800f914:	4629      	mov	r1, r5
 800f916:	f003 fe49 	bl	80135ac <memcpy>
 800f91a:	2300      	movs	r3, #0
 800f91c:	55a3      	strb	r3, [r4, r6]
 800f91e:	4620      	mov	r0, r4
 800f920:	b002      	add	sp, #8
 800f922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f926:	b004      	add	sp, #16
 800f928:	4770      	bx	lr
 800f92a:	4604      	mov	r4, r0
 800f92c:	e7f7      	b.n	800f91e <rcutils_strdup+0x32>
 800f92e:	bf00      	nop

0800f930 <rcutils_strndup>:
 800f930:	b082      	sub	sp, #8
 800f932:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f934:	ac06      	add	r4, sp, #24
 800f936:	e884 000c 	stmia.w	r4, {r2, r3}
 800f93a:	4605      	mov	r5, r0
 800f93c:	b188      	cbz	r0, 800f962 <rcutils_strndup+0x32>
 800f93e:	1c4f      	adds	r7, r1, #1
 800f940:	460e      	mov	r6, r1
 800f942:	4638      	mov	r0, r7
 800f944:	990a      	ldr	r1, [sp, #40]	; 0x28
 800f946:	4790      	blx	r2
 800f948:	4604      	mov	r4, r0
 800f94a:	b128      	cbz	r0, 800f958 <rcutils_strndup+0x28>
 800f94c:	463a      	mov	r2, r7
 800f94e:	4629      	mov	r1, r5
 800f950:	f003 fe2c 	bl	80135ac <memcpy>
 800f954:	2300      	movs	r3, #0
 800f956:	55a3      	strb	r3, [r4, r6]
 800f958:	4620      	mov	r0, r4
 800f95a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f95e:	b002      	add	sp, #8
 800f960:	4770      	bx	lr
 800f962:	4604      	mov	r4, r0
 800f964:	e7f8      	b.n	800f958 <rcutils_strndup+0x28>
 800f966:	bf00      	nop

0800f968 <rcutils_get_zero_initialized_string_map>:
 800f968:	4b01      	ldr	r3, [pc, #4]	; (800f970 <rcutils_get_zero_initialized_string_map+0x8>)
 800f96a:	2000      	movs	r0, #0
 800f96c:	6018      	str	r0, [r3, #0]
 800f96e:	4770      	bx	lr
 800f970:	20015970 	.word	0x20015970

0800f974 <rcutils_string_map_reserve>:
 800f974:	2800      	cmp	r0, #0
 800f976:	d05f      	beq.n	800fa38 <rcutils_string_map_reserve+0xc4>
 800f978:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f97c:	460c      	mov	r4, r1
 800f97e:	6801      	ldr	r1, [r0, #0]
 800f980:	b082      	sub	sp, #8
 800f982:	4605      	mov	r5, r0
 800f984:	b129      	cbz	r1, 800f992 <rcutils_string_map_reserve+0x1e>
 800f986:	68cb      	ldr	r3, [r1, #12]
 800f988:	42a3      	cmp	r3, r4
 800f98a:	d906      	bls.n	800f99a <rcutils_string_map_reserve+0x26>
 800f98c:	461c      	mov	r4, r3
 800f98e:	2900      	cmp	r1, #0
 800f990:	d1f9      	bne.n	800f986 <rcutils_string_map_reserve+0x12>
 800f992:	201f      	movs	r0, #31
 800f994:	b002      	add	sp, #8
 800f996:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f99a:	688b      	ldr	r3, [r1, #8]
 800f99c:	42a3      	cmp	r3, r4
 800f99e:	d047      	beq.n	800fa30 <rcutils_string_map_reserve+0xbc>
 800f9a0:	6a0e      	ldr	r6, [r1, #32]
 800f9a2:	2c00      	cmp	r4, #0
 800f9a4:	d034      	beq.n	800fa10 <rcutils_string_map_reserve+0x9c>
 800f9a6:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 800f9aa:	d243      	bcs.n	800fa34 <rcutils_string_map_reserve+0xc0>
 800f9ac:	00a7      	lsls	r7, r4, #2
 800f9ae:	f8d1 8018 	ldr.w	r8, [r1, #24]
 800f9b2:	6808      	ldr	r0, [r1, #0]
 800f9b4:	4632      	mov	r2, r6
 800f9b6:	4639      	mov	r1, r7
 800f9b8:	47c0      	blx	r8
 800f9ba:	2800      	cmp	r0, #0
 800f9bc:	d03a      	beq.n	800fa34 <rcutils_string_map_reserve+0xc0>
 800f9be:	682b      	ldr	r3, [r5, #0]
 800f9c0:	4632      	mov	r2, r6
 800f9c2:	6018      	str	r0, [r3, #0]
 800f9c4:	4639      	mov	r1, r7
 800f9c6:	6858      	ldr	r0, [r3, #4]
 800f9c8:	47c0      	blx	r8
 800f9ca:	2800      	cmp	r0, #0
 800f9cc:	d032      	beq.n	800fa34 <rcutils_string_map_reserve+0xc0>
 800f9ce:	682d      	ldr	r5, [r5, #0]
 800f9d0:	68ab      	ldr	r3, [r5, #8]
 800f9d2:	6068      	str	r0, [r5, #4]
 800f9d4:	42a3      	cmp	r3, r4
 800f9d6:	d226      	bcs.n	800fa26 <rcutils_string_map_reserve+0xb2>
 800f9d8:	682a      	ldr	r2, [r5, #0]
 800f9da:	eb00 0c07 	add.w	ip, r0, r7
 800f9de:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800f9e2:	45e6      	cmp	lr, ip
 800f9e4:	ea4f 0183 	mov.w	r1, r3, lsl #2
 800f9e8:	eb00 0683 	add.w	r6, r0, r3, lsl #2
 800f9ec:	d203      	bcs.n	800f9f6 <rcutils_string_map_reserve+0x82>
 800f9ee:	eb02 0c07 	add.w	ip, r2, r7
 800f9f2:	4566      	cmp	r6, ip
 800f9f4:	d322      	bcc.n	800fa3c <rcutils_string_map_reserve+0xc8>
 800f9f6:	1ae3      	subs	r3, r4, r3
 800f9f8:	009a      	lsls	r2, r3, #2
 800f9fa:	4670      	mov	r0, lr
 800f9fc:	2100      	movs	r1, #0
 800f9fe:	9201      	str	r2, [sp, #4]
 800fa00:	f003 fd0c 	bl	801341c <memset>
 800fa04:	9a01      	ldr	r2, [sp, #4]
 800fa06:	2100      	movs	r1, #0
 800fa08:	4630      	mov	r0, r6
 800fa0a:	f003 fd07 	bl	801341c <memset>
 800fa0e:	e00a      	b.n	800fa26 <rcutils_string_map_reserve+0xb2>
 800fa10:	694f      	ldr	r7, [r1, #20]
 800fa12:	6808      	ldr	r0, [r1, #0]
 800fa14:	4631      	mov	r1, r6
 800fa16:	47b8      	blx	r7
 800fa18:	682b      	ldr	r3, [r5, #0]
 800fa1a:	4631      	mov	r1, r6
 800fa1c:	6858      	ldr	r0, [r3, #4]
 800fa1e:	601c      	str	r4, [r3, #0]
 800fa20:	47b8      	blx	r7
 800fa22:	682d      	ldr	r5, [r5, #0]
 800fa24:	606c      	str	r4, [r5, #4]
 800fa26:	2000      	movs	r0, #0
 800fa28:	60ac      	str	r4, [r5, #8]
 800fa2a:	b002      	add	sp, #8
 800fa2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa30:	2000      	movs	r0, #0
 800fa32:	e7af      	b.n	800f994 <rcutils_string_map_reserve+0x20>
 800fa34:	200a      	movs	r0, #10
 800fa36:	e7ad      	b.n	800f994 <rcutils_string_map_reserve+0x20>
 800fa38:	200b      	movs	r0, #11
 800fa3a:	4770      	bx	lr
 800fa3c:	1f0b      	subs	r3, r1, #4
 800fa3e:	4418      	add	r0, r3
 800fa40:	4413      	add	r3, r2
 800fa42:	3a04      	subs	r2, #4
 800fa44:	4417      	add	r7, r2
 800fa46:	2200      	movs	r2, #0
 800fa48:	f843 2f04 	str.w	r2, [r3, #4]!
 800fa4c:	42bb      	cmp	r3, r7
 800fa4e:	f840 2f04 	str.w	r2, [r0, #4]!
 800fa52:	d1f9      	bne.n	800fa48 <rcutils_string_map_reserve+0xd4>
 800fa54:	e7e7      	b.n	800fa26 <rcutils_string_map_reserve+0xb2>
 800fa56:	bf00      	nop

0800fa58 <rcutils_string_map_init>:
 800fa58:	b082      	sub	sp, #8
 800fa5a:	b570      	push	{r4, r5, r6, lr}
 800fa5c:	ac04      	add	r4, sp, #16
 800fa5e:	e884 000c 	stmia.w	r4, {r2, r3}
 800fa62:	b380      	cbz	r0, 800fac6 <rcutils_string_map_init+0x6e>
 800fa64:	6806      	ldr	r6, [r0, #0]
 800fa66:	4604      	mov	r4, r0
 800fa68:	b12e      	cbz	r6, 800fa76 <rcutils_string_map_init+0x1e>
 800fa6a:	251e      	movs	r5, #30
 800fa6c:	4628      	mov	r0, r5
 800fa6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fa72:	b002      	add	sp, #8
 800fa74:	4770      	bx	lr
 800fa76:	a804      	add	r0, sp, #16
 800fa78:	460d      	mov	r5, r1
 800fa7a:	f7fa fcd9 	bl	800a430 <rcutils_allocator_is_valid>
 800fa7e:	b310      	cbz	r0, 800fac6 <rcutils_string_map_init+0x6e>
 800fa80:	9b04      	ldr	r3, [sp, #16]
 800fa82:	9908      	ldr	r1, [sp, #32]
 800fa84:	2024      	movs	r0, #36	; 0x24
 800fa86:	4798      	blx	r3
 800fa88:	6020      	str	r0, [r4, #0]
 800fa8a:	b310      	cbz	r0, 800fad2 <rcutils_string_map_init+0x7a>
 800fa8c:	f10d 0e10 	add.w	lr, sp, #16
 800fa90:	e9c0 6600 	strd	r6, r6, [r0]
 800fa94:	e9c0 6602 	strd	r6, r6, [r0, #8]
 800fa98:	f100 0c10 	add.w	ip, r0, #16
 800fa9c:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 800faa0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800faa4:	f8de 3000 	ldr.w	r3, [lr]
 800faa8:	f8cc 3000 	str.w	r3, [ip]
 800faac:	4629      	mov	r1, r5
 800faae:	4620      	mov	r0, r4
 800fab0:	f7ff ff60 	bl	800f974 <rcutils_string_map_reserve>
 800fab4:	4605      	mov	r5, r0
 800fab6:	2800      	cmp	r0, #0
 800fab8:	d0d8      	beq.n	800fa6c <rcutils_string_map_init+0x14>
 800faba:	9b05      	ldr	r3, [sp, #20]
 800fabc:	9908      	ldr	r1, [sp, #32]
 800fabe:	6820      	ldr	r0, [r4, #0]
 800fac0:	4798      	blx	r3
 800fac2:	6026      	str	r6, [r4, #0]
 800fac4:	e7d2      	b.n	800fa6c <rcutils_string_map_init+0x14>
 800fac6:	250b      	movs	r5, #11
 800fac8:	4628      	mov	r0, r5
 800faca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800face:	b002      	add	sp, #8
 800fad0:	4770      	bx	lr
 800fad2:	250a      	movs	r5, #10
 800fad4:	e7ca      	b.n	800fa6c <rcutils_string_map_init+0x14>
 800fad6:	bf00      	nop

0800fad8 <rcutils_string_map_fini>:
 800fad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fadc:	b082      	sub	sp, #8
 800fade:	2800      	cmp	r0, #0
 800fae0:	d03a      	beq.n	800fb58 <rcutils_string_map_fini+0x80>
 800fae2:	6804      	ldr	r4, [r0, #0]
 800fae4:	4606      	mov	r6, r0
 800fae6:	2c00      	cmp	r4, #0
 800fae8:	d032      	beq.n	800fb50 <rcutils_string_map_fini+0x78>
 800faea:	68a3      	ldr	r3, [r4, #8]
 800faec:	b32b      	cbz	r3, 800fb3a <rcutils_string_map_fini+0x62>
 800faee:	2500      	movs	r5, #0
 800faf0:	6822      	ldr	r2, [r4, #0]
 800faf2:	462f      	mov	r7, r5
 800faf4:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800faf8:	b1e0      	cbz	r0, 800fb34 <rcutils_string_map_fini+0x5c>
 800fafa:	6a21      	ldr	r1, [r4, #32]
 800fafc:	f8d4 8014 	ldr.w	r8, [r4, #20]
 800fb00:	9101      	str	r1, [sp, #4]
 800fb02:	47c0      	blx	r8
 800fb04:	e9d4 2300 	ldrd	r2, r3, [r4]
 800fb08:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800fb0c:	9901      	ldr	r1, [sp, #4]
 800fb0e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fb12:	47c0      	blx	r8
 800fb14:	68e3      	ldr	r3, [r4, #12]
 800fb16:	6862      	ldr	r2, [r4, #4]
 800fb18:	3b01      	subs	r3, #1
 800fb1a:	f842 7025 	str.w	r7, [r2, r5, lsl #2]
 800fb1e:	60e3      	str	r3, [r4, #12]
 800fb20:	6834      	ldr	r4, [r6, #0]
 800fb22:	68a3      	ldr	r3, [r4, #8]
 800fb24:	3501      	adds	r5, #1
 800fb26:	429d      	cmp	r5, r3
 800fb28:	d207      	bcs.n	800fb3a <rcutils_string_map_fini+0x62>
 800fb2a:	6822      	ldr	r2, [r4, #0]
 800fb2c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d1e2      	bne.n	800fafa <rcutils_string_map_fini+0x22>
 800fb34:	3501      	adds	r5, #1
 800fb36:	429d      	cmp	r5, r3
 800fb38:	d3dc      	bcc.n	800faf4 <rcutils_string_map_fini+0x1c>
 800fb3a:	2100      	movs	r1, #0
 800fb3c:	4630      	mov	r0, r6
 800fb3e:	f7ff ff19 	bl	800f974 <rcutils_string_map_reserve>
 800fb42:	4604      	mov	r4, r0
 800fb44:	b920      	cbnz	r0, 800fb50 <rcutils_string_map_fini+0x78>
 800fb46:	6830      	ldr	r0, [r6, #0]
 800fb48:	6943      	ldr	r3, [r0, #20]
 800fb4a:	6a01      	ldr	r1, [r0, #32]
 800fb4c:	4798      	blx	r3
 800fb4e:	6034      	str	r4, [r6, #0]
 800fb50:	4620      	mov	r0, r4
 800fb52:	b002      	add	sp, #8
 800fb54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb58:	240b      	movs	r4, #11
 800fb5a:	4620      	mov	r0, r4
 800fb5c:	b002      	add	sp, #8
 800fb5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb62:	bf00      	nop

0800fb64 <rcutils_string_map_getn>:
 800fb64:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb68:	b300      	cbz	r0, 800fbac <rcutils_string_map_getn+0x48>
 800fb6a:	6807      	ldr	r7, [r0, #0]
 800fb6c:	b1ff      	cbz	r7, 800fbae <rcutils_string_map_getn+0x4a>
 800fb6e:	4688      	mov	r8, r1
 800fb70:	b1e1      	cbz	r1, 800fbac <rcutils_string_map_getn+0x48>
 800fb72:	f8d7 a008 	ldr.w	sl, [r7, #8]
 800fb76:	683e      	ldr	r6, [r7, #0]
 800fb78:	f1ba 0f00 	cmp.w	sl, #0
 800fb7c:	d016      	beq.n	800fbac <rcutils_string_map_getn+0x48>
 800fb7e:	4691      	mov	r9, r2
 800fb80:	3e04      	subs	r6, #4
 800fb82:	2400      	movs	r4, #0
 800fb84:	f856 5f04 	ldr.w	r5, [r6, #4]!
 800fb88:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800fb8c:	4628      	mov	r0, r5
 800fb8e:	3401      	adds	r4, #1
 800fb90:	b155      	cbz	r5, 800fba8 <rcutils_string_map_getn+0x44>
 800fb92:	f7f0 fb27 	bl	80001e4 <strlen>
 800fb96:	4548      	cmp	r0, r9
 800fb98:	4602      	mov	r2, r0
 800fb9a:	4629      	mov	r1, r5
 800fb9c:	bf38      	it	cc
 800fb9e:	464a      	movcc	r2, r9
 800fba0:	4640      	mov	r0, r8
 800fba2:	f003 fc50 	bl	8013446 <strncmp>
 800fba6:	b128      	cbz	r0, 800fbb4 <rcutils_string_map_getn+0x50>
 800fba8:	45a2      	cmp	sl, r4
 800fbaa:	d1eb      	bne.n	800fb84 <rcutils_string_map_getn+0x20>
 800fbac:	2700      	movs	r7, #0
 800fbae:	4638      	mov	r0, r7
 800fbb0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fbb4:	687b      	ldr	r3, [r7, #4]
 800fbb6:	f853 700b 	ldr.w	r7, [r3, fp]
 800fbba:	4638      	mov	r0, r7
 800fbbc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fbc0 <rcutils_system_time_now>:
 800fbc0:	b308      	cbz	r0, 800fc06 <rcutils_system_time_now+0x46>
 800fbc2:	b570      	push	{r4, r5, r6, lr}
 800fbc4:	b084      	sub	sp, #16
 800fbc6:	4604      	mov	r4, r0
 800fbc8:	4669      	mov	r1, sp
 800fbca:	2001      	movs	r0, #1
 800fbcc:	f7f2 f920 	bl	8001e10 <clock_gettime>
 800fbd0:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fbd4:	2d00      	cmp	r5, #0
 800fbd6:	db13      	blt.n	800fc00 <rcutils_system_time_now+0x40>
 800fbd8:	9902      	ldr	r1, [sp, #8]
 800fbda:	2900      	cmp	r1, #0
 800fbdc:	db0d      	blt.n	800fbfa <rcutils_system_time_now+0x3a>
 800fbde:	4e0b      	ldr	r6, [pc, #44]	; (800fc0c <rcutils_system_time_now+0x4c>)
 800fbe0:	fba3 3206 	umull	r3, r2, r3, r6
 800fbe4:	185b      	adds	r3, r3, r1
 800fbe6:	fb06 2205 	mla	r2, r6, r5, r2
 800fbea:	f04f 0000 	mov.w	r0, #0
 800fbee:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fbf2:	e9c4 3200 	strd	r3, r2, [r4]
 800fbf6:	b004      	add	sp, #16
 800fbf8:	bd70      	pop	{r4, r5, r6, pc}
 800fbfa:	ea53 0205 	orrs.w	r2, r3, r5
 800fbfe:	d1ee      	bne.n	800fbde <rcutils_system_time_now+0x1e>
 800fc00:	2002      	movs	r0, #2
 800fc02:	b004      	add	sp, #16
 800fc04:	bd70      	pop	{r4, r5, r6, pc}
 800fc06:	200b      	movs	r0, #11
 800fc08:	4770      	bx	lr
 800fc0a:	bf00      	nop
 800fc0c:	3b9aca00 	.word	0x3b9aca00

0800fc10 <rcutils_steady_time_now>:
 800fc10:	b308      	cbz	r0, 800fc56 <rcutils_steady_time_now+0x46>
 800fc12:	b570      	push	{r4, r5, r6, lr}
 800fc14:	b084      	sub	sp, #16
 800fc16:	4604      	mov	r4, r0
 800fc18:	4669      	mov	r1, sp
 800fc1a:	2000      	movs	r0, #0
 800fc1c:	f7f2 f8f8 	bl	8001e10 <clock_gettime>
 800fc20:	e9dd 3500 	ldrd	r3, r5, [sp]
 800fc24:	2d00      	cmp	r5, #0
 800fc26:	db13      	blt.n	800fc50 <rcutils_steady_time_now+0x40>
 800fc28:	9902      	ldr	r1, [sp, #8]
 800fc2a:	2900      	cmp	r1, #0
 800fc2c:	db0d      	blt.n	800fc4a <rcutils_steady_time_now+0x3a>
 800fc2e:	4e0b      	ldr	r6, [pc, #44]	; (800fc5c <rcutils_steady_time_now+0x4c>)
 800fc30:	fba3 3206 	umull	r3, r2, r3, r6
 800fc34:	185b      	adds	r3, r3, r1
 800fc36:	fb06 2205 	mla	r2, r6, r5, r2
 800fc3a:	f04f 0000 	mov.w	r0, #0
 800fc3e:	eb42 72e1 	adc.w	r2, r2, r1, asr #31
 800fc42:	e9c4 3200 	strd	r3, r2, [r4]
 800fc46:	b004      	add	sp, #16
 800fc48:	bd70      	pop	{r4, r5, r6, pc}
 800fc4a:	ea53 0205 	orrs.w	r2, r3, r5
 800fc4e:	d1ee      	bne.n	800fc2e <rcutils_steady_time_now+0x1e>
 800fc50:	2002      	movs	r0, #2
 800fc52:	b004      	add	sp, #16
 800fc54:	bd70      	pop	{r4, r5, r6, pc}
 800fc56:	200b      	movs	r0, #11
 800fc58:	4770      	bx	lr
 800fc5a:	bf00      	nop
 800fc5c:	3b9aca00 	.word	0x3b9aca00

0800fc60 <rmw_get_zero_initialized_context>:
 800fc60:	b510      	push	{r4, lr}
 800fc62:	4604      	mov	r4, r0
 800fc64:	3010      	adds	r0, #16
 800fc66:	f000 f80b 	bl	800fc80 <rmw_get_zero_initialized_init_options>
 800fc6a:	2300      	movs	r3, #0
 800fc6c:	2000      	movs	r0, #0
 800fc6e:	2100      	movs	r1, #0
 800fc70:	e9c4 0100 	strd	r0, r1, [r4]
 800fc74:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800fc78:	60a3      	str	r3, [r4, #8]
 800fc7a:	4620      	mov	r0, r4
 800fc7c:	bd10      	pop	{r4, pc}
 800fc7e:	bf00      	nop

0800fc80 <rmw_get_zero_initialized_init_options>:
 800fc80:	b510      	push	{r4, lr}
 800fc82:	2238      	movs	r2, #56	; 0x38
 800fc84:	4604      	mov	r4, r0
 800fc86:	2100      	movs	r1, #0
 800fc88:	f003 fbc8 	bl	801341c <memset>
 800fc8c:	f104 0010 	add.w	r0, r4, #16
 800fc90:	f000 f806 	bl	800fca0 <rmw_get_default_security_options>
 800fc94:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fc98:	60e3      	str	r3, [r4, #12]
 800fc9a:	4620      	mov	r0, r4
 800fc9c:	bd10      	pop	{r4, pc}
 800fc9e:	bf00      	nop

0800fca0 <rmw_get_default_security_options>:
 800fca0:	2200      	movs	r2, #0
 800fca2:	7002      	strb	r2, [r0, #0]
 800fca4:	6042      	str	r2, [r0, #4]
 800fca6:	4770      	bx	lr

0800fca8 <rmw_validate_full_topic_name>:
 800fca8:	2800      	cmp	r0, #0
 800fcaa:	d057      	beq.n	800fd5c <rmw_validate_full_topic_name+0xb4>
 800fcac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcb0:	460d      	mov	r5, r1
 800fcb2:	2900      	cmp	r1, #0
 800fcb4:	d054      	beq.n	800fd60 <rmw_validate_full_topic_name+0xb8>
 800fcb6:	4616      	mov	r6, r2
 800fcb8:	4604      	mov	r4, r0
 800fcba:	f7f0 fa93 	bl	80001e4 <strlen>
 800fcbe:	b148      	cbz	r0, 800fcd4 <rmw_validate_full_topic_name+0x2c>
 800fcc0:	7823      	ldrb	r3, [r4, #0]
 800fcc2:	2b2f      	cmp	r3, #47	; 0x2f
 800fcc4:	d00d      	beq.n	800fce2 <rmw_validate_full_topic_name+0x3a>
 800fcc6:	2302      	movs	r3, #2
 800fcc8:	602b      	str	r3, [r5, #0]
 800fcca:	b13e      	cbz	r6, 800fcdc <rmw_validate_full_topic_name+0x34>
 800fccc:	2000      	movs	r0, #0
 800fcce:	6030      	str	r0, [r6, #0]
 800fcd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcd4:	2301      	movs	r3, #1
 800fcd6:	602b      	str	r3, [r5, #0]
 800fcd8:	2e00      	cmp	r6, #0
 800fcda:	d1f7      	bne.n	800fccc <rmw_validate_full_topic_name+0x24>
 800fcdc:	2000      	movs	r0, #0
 800fcde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fce2:	1e43      	subs	r3, r0, #1
 800fce4:	5ce2      	ldrb	r2, [r4, r3]
 800fce6:	2a2f      	cmp	r2, #47	; 0x2f
 800fce8:	d03c      	beq.n	800fd64 <rmw_validate_full_topic_name+0xbc>
 800fcea:	1e63      	subs	r3, r4, #1
 800fcec:	eb03 0800 	add.w	r8, r3, r0
 800fcf0:	f1c4 0e01 	rsb	lr, r4, #1
 800fcf4:	eb0e 0703 	add.w	r7, lr, r3
 800fcf8:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800fcfc:	f021 0220 	bic.w	r2, r1, #32
 800fd00:	3a41      	subs	r2, #65	; 0x41
 800fd02:	2a19      	cmp	r2, #25
 800fd04:	f1a1 0c2f 	sub.w	ip, r1, #47	; 0x2f
 800fd08:	d90b      	bls.n	800fd22 <rmw_validate_full_topic_name+0x7a>
 800fd0a:	295f      	cmp	r1, #95	; 0x5f
 800fd0c:	d009      	beq.n	800fd22 <rmw_validate_full_topic_name+0x7a>
 800fd0e:	f1bc 0f0a 	cmp.w	ip, #10
 800fd12:	d906      	bls.n	800fd22 <rmw_validate_full_topic_name+0x7a>
 800fd14:	2304      	movs	r3, #4
 800fd16:	602b      	str	r3, [r5, #0]
 800fd18:	2e00      	cmp	r6, #0
 800fd1a:	d0df      	beq.n	800fcdc <rmw_validate_full_topic_name+0x34>
 800fd1c:	6037      	str	r7, [r6, #0]
 800fd1e:	2000      	movs	r0, #0
 800fd20:	e7d6      	b.n	800fcd0 <rmw_validate_full_topic_name+0x28>
 800fd22:	4543      	cmp	r3, r8
 800fd24:	d1e6      	bne.n	800fcf4 <rmw_validate_full_topic_name+0x4c>
 800fd26:	4f1a      	ldr	r7, [pc, #104]	; (800fd90 <rmw_validate_full_topic_name+0xe8>)
 800fd28:	2301      	movs	r3, #1
 800fd2a:	e004      	b.n	800fd36 <rmw_validate_full_topic_name+0x8e>
 800fd2c:	4298      	cmp	r0, r3
 800fd2e:	f104 0401 	add.w	r4, r4, #1
 800fd32:	d91c      	bls.n	800fd6e <rmw_validate_full_topic_name+0xc6>
 800fd34:	4613      	mov	r3, r2
 800fd36:	4298      	cmp	r0, r3
 800fd38:	f103 0201 	add.w	r2, r3, #1
 800fd3c:	d0f6      	beq.n	800fd2c <rmw_validate_full_topic_name+0x84>
 800fd3e:	7821      	ldrb	r1, [r4, #0]
 800fd40:	292f      	cmp	r1, #47	; 0x2f
 800fd42:	d1f3      	bne.n	800fd2c <rmw_validate_full_topic_name+0x84>
 800fd44:	7861      	ldrb	r1, [r4, #1]
 800fd46:	292f      	cmp	r1, #47	; 0x2f
 800fd48:	d01c      	beq.n	800fd84 <rmw_validate_full_topic_name+0xdc>
 800fd4a:	5dc9      	ldrb	r1, [r1, r7]
 800fd4c:	0749      	lsls	r1, r1, #29
 800fd4e:	d5ed      	bpl.n	800fd2c <rmw_validate_full_topic_name+0x84>
 800fd50:	2206      	movs	r2, #6
 800fd52:	602a      	str	r2, [r5, #0]
 800fd54:	2e00      	cmp	r6, #0
 800fd56:	d0c1      	beq.n	800fcdc <rmw_validate_full_topic_name+0x34>
 800fd58:	6033      	str	r3, [r6, #0]
 800fd5a:	e7bf      	b.n	800fcdc <rmw_validate_full_topic_name+0x34>
 800fd5c:	200b      	movs	r0, #11
 800fd5e:	4770      	bx	lr
 800fd60:	200b      	movs	r0, #11
 800fd62:	e7b5      	b.n	800fcd0 <rmw_validate_full_topic_name+0x28>
 800fd64:	2203      	movs	r2, #3
 800fd66:	602a      	str	r2, [r5, #0]
 800fd68:	2e00      	cmp	r6, #0
 800fd6a:	d1f5      	bne.n	800fd58 <rmw_validate_full_topic_name+0xb0>
 800fd6c:	e7b6      	b.n	800fcdc <rmw_validate_full_topic_name+0x34>
 800fd6e:	28f7      	cmp	r0, #247	; 0xf7
 800fd70:	d802      	bhi.n	800fd78 <rmw_validate_full_topic_name+0xd0>
 800fd72:	2000      	movs	r0, #0
 800fd74:	6028      	str	r0, [r5, #0]
 800fd76:	e7ab      	b.n	800fcd0 <rmw_validate_full_topic_name+0x28>
 800fd78:	2307      	movs	r3, #7
 800fd7a:	602b      	str	r3, [r5, #0]
 800fd7c:	2e00      	cmp	r6, #0
 800fd7e:	d0ad      	beq.n	800fcdc <rmw_validate_full_topic_name+0x34>
 800fd80:	23f6      	movs	r3, #246	; 0xf6
 800fd82:	e7e9      	b.n	800fd58 <rmw_validate_full_topic_name+0xb0>
 800fd84:	2205      	movs	r2, #5
 800fd86:	602a      	str	r2, [r5, #0]
 800fd88:	2e00      	cmp	r6, #0
 800fd8a:	d1e5      	bne.n	800fd58 <rmw_validate_full_topic_name+0xb0>
 800fd8c:	e7a6      	b.n	800fcdc <rmw_validate_full_topic_name+0x34>
 800fd8e:	bf00      	nop
 800fd90:	08014e54 	.word	0x08014e54

0800fd94 <rmw_validate_namespace_with_size>:
 800fd94:	b340      	cbz	r0, 800fde8 <rmw_validate_namespace_with_size+0x54>
 800fd96:	b570      	push	{r4, r5, r6, lr}
 800fd98:	4614      	mov	r4, r2
 800fd9a:	b0c2      	sub	sp, #264	; 0x108
 800fd9c:	b332      	cbz	r2, 800fdec <rmw_validate_namespace_with_size+0x58>
 800fd9e:	2901      	cmp	r1, #1
 800fda0:	460d      	mov	r5, r1
 800fda2:	461e      	mov	r6, r3
 800fda4:	d102      	bne.n	800fdac <rmw_validate_namespace_with_size+0x18>
 800fda6:	7803      	ldrb	r3, [r0, #0]
 800fda8:	2b2f      	cmp	r3, #47	; 0x2f
 800fdaa:	d012      	beq.n	800fdd2 <rmw_validate_namespace_with_size+0x3e>
 800fdac:	aa01      	add	r2, sp, #4
 800fdae:	4669      	mov	r1, sp
 800fdb0:	f7ff ff7a 	bl	800fca8 <rmw_validate_full_topic_name>
 800fdb4:	b978      	cbnz	r0, 800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fdb6:	9b00      	ldr	r3, [sp, #0]
 800fdb8:	b14b      	cbz	r3, 800fdce <rmw_validate_namespace_with_size+0x3a>
 800fdba:	2b07      	cmp	r3, #7
 800fdbc:	d007      	beq.n	800fdce <rmw_validate_namespace_with_size+0x3a>
 800fdbe:	1e5a      	subs	r2, r3, #1
 800fdc0:	2a05      	cmp	r2, #5
 800fdc2:	d82b      	bhi.n	800fe1c <rmw_validate_namespace_with_size+0x88>
 800fdc4:	e8df f002 	tbb	[pc, r2]
 800fdc8:	1e212427 	.word	0x1e212427
 800fdcc:	141b      	.short	0x141b
 800fdce:	2df5      	cmp	r5, #245	; 0xf5
 800fdd0:	d803      	bhi.n	800fdda <rmw_validate_namespace_with_size+0x46>
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	6020      	str	r0, [r4, #0]
 800fdd6:	b042      	add	sp, #264	; 0x108
 800fdd8:	bd70      	pop	{r4, r5, r6, pc}
 800fdda:	2307      	movs	r3, #7
 800fddc:	6023      	str	r3, [r4, #0]
 800fdde:	2e00      	cmp	r6, #0
 800fde0:	d0f9      	beq.n	800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fde2:	23f4      	movs	r3, #244	; 0xf4
 800fde4:	6033      	str	r3, [r6, #0]
 800fde6:	e7f6      	b.n	800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fde8:	200b      	movs	r0, #11
 800fdea:	4770      	bx	lr
 800fdec:	200b      	movs	r0, #11
 800fdee:	e7f2      	b.n	800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fdf0:	2306      	movs	r3, #6
 800fdf2:	6023      	str	r3, [r4, #0]
 800fdf4:	2e00      	cmp	r6, #0
 800fdf6:	d0ee      	beq.n	800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fdf8:	9b01      	ldr	r3, [sp, #4]
 800fdfa:	6033      	str	r3, [r6, #0]
 800fdfc:	e7eb      	b.n	800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fdfe:	2305      	movs	r3, #5
 800fe00:	6023      	str	r3, [r4, #0]
 800fe02:	e7f7      	b.n	800fdf4 <rmw_validate_namespace_with_size+0x60>
 800fe04:	2304      	movs	r3, #4
 800fe06:	6023      	str	r3, [r4, #0]
 800fe08:	e7f4      	b.n	800fdf4 <rmw_validate_namespace_with_size+0x60>
 800fe0a:	2303      	movs	r3, #3
 800fe0c:	6023      	str	r3, [r4, #0]
 800fe0e:	e7f1      	b.n	800fdf4 <rmw_validate_namespace_with_size+0x60>
 800fe10:	2302      	movs	r3, #2
 800fe12:	6023      	str	r3, [r4, #0]
 800fe14:	e7ee      	b.n	800fdf4 <rmw_validate_namespace_with_size+0x60>
 800fe16:	2301      	movs	r3, #1
 800fe18:	6023      	str	r3, [r4, #0]
 800fe1a:	e7eb      	b.n	800fdf4 <rmw_validate_namespace_with_size+0x60>
 800fe1c:	4a03      	ldr	r2, [pc, #12]	; (800fe2c <rmw_validate_namespace_with_size+0x98>)
 800fe1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 800fe22:	a802      	add	r0, sp, #8
 800fe24:	f7ff fd36 	bl	800f894 <rcutils_snprintf>
 800fe28:	2001      	movs	r0, #1
 800fe2a:	e7d4      	b.n	800fdd6 <rmw_validate_namespace_with_size+0x42>
 800fe2c:	0801485c 	.word	0x0801485c

0800fe30 <rmw_validate_namespace>:
 800fe30:	b168      	cbz	r0, 800fe4e <rmw_validate_namespace+0x1e>
 800fe32:	b570      	push	{r4, r5, r6, lr}
 800fe34:	460d      	mov	r5, r1
 800fe36:	4616      	mov	r6, r2
 800fe38:	4604      	mov	r4, r0
 800fe3a:	f7f0 f9d3 	bl	80001e4 <strlen>
 800fe3e:	4633      	mov	r3, r6
 800fe40:	4601      	mov	r1, r0
 800fe42:	462a      	mov	r2, r5
 800fe44:	4620      	mov	r0, r4
 800fe46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe4a:	f7ff bfa3 	b.w	800fd94 <rmw_validate_namespace_with_size>
 800fe4e:	200b      	movs	r0, #11
 800fe50:	4770      	bx	lr
 800fe52:	bf00      	nop

0800fe54 <rmw_namespace_validation_result_string>:
 800fe54:	2807      	cmp	r0, #7
 800fe56:	bf9a      	itte	ls
 800fe58:	4b02      	ldrls	r3, [pc, #8]	; (800fe64 <rmw_namespace_validation_result_string+0x10>)
 800fe5a:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800fe5e:	4802      	ldrhi	r0, [pc, #8]	; (800fe68 <rmw_namespace_validation_result_string+0x14>)
 800fe60:	4770      	bx	lr
 800fe62:	bf00      	nop
 800fe64:	08014a54 	.word	0x08014a54
 800fe68:	080148ac 	.word	0x080148ac

0800fe6c <rmw_validate_node_name>:
 800fe6c:	2800      	cmp	r0, #0
 800fe6e:	d03b      	beq.n	800fee8 <rmw_validate_node_name+0x7c>
 800fe70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fe74:	460d      	mov	r5, r1
 800fe76:	2900      	cmp	r1, #0
 800fe78:	d038      	beq.n	800feec <rmw_validate_node_name+0x80>
 800fe7a:	4616      	mov	r6, r2
 800fe7c:	4604      	mov	r4, r0
 800fe7e:	f7f0 f9b1 	bl	80001e4 <strlen>
 800fe82:	b1e0      	cbz	r0, 800febe <rmw_validate_node_name+0x52>
 800fe84:	1e63      	subs	r3, r4, #1
 800fe86:	eb03 0800 	add.w	r8, r3, r0
 800fe8a:	f1c4 0101 	rsb	r1, r4, #1
 800fe8e:	18cf      	adds	r7, r1, r3
 800fe90:	f813 ef01 	ldrb.w	lr, [r3, #1]!
 800fe94:	f1ae 0230 	sub.w	r2, lr, #48	; 0x30
 800fe98:	f02e 0c20 	bic.w	ip, lr, #32
 800fe9c:	2a09      	cmp	r2, #9
 800fe9e:	f1ac 0c41 	sub.w	ip, ip, #65	; 0x41
 800fea2:	d914      	bls.n	800fece <rmw_validate_node_name+0x62>
 800fea4:	f1bc 0f19 	cmp.w	ip, #25
 800fea8:	d911      	bls.n	800fece <rmw_validate_node_name+0x62>
 800feaa:	f1be 0f5f 	cmp.w	lr, #95	; 0x5f
 800feae:	d00e      	beq.n	800fece <rmw_validate_node_name+0x62>
 800feb0:	2302      	movs	r3, #2
 800feb2:	602b      	str	r3, [r5, #0]
 800feb4:	b106      	cbz	r6, 800feb8 <rmw_validate_node_name+0x4c>
 800feb6:	6037      	str	r7, [r6, #0]
 800feb8:	2000      	movs	r0, #0
 800feba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800febe:	2301      	movs	r3, #1
 800fec0:	602b      	str	r3, [r5, #0]
 800fec2:	2e00      	cmp	r6, #0
 800fec4:	d0f8      	beq.n	800feb8 <rmw_validate_node_name+0x4c>
 800fec6:	2000      	movs	r0, #0
 800fec8:	6030      	str	r0, [r6, #0]
 800feca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fece:	4543      	cmp	r3, r8
 800fed0:	d1dd      	bne.n	800fe8e <rmw_validate_node_name+0x22>
 800fed2:	7822      	ldrb	r2, [r4, #0]
 800fed4:	4b0d      	ldr	r3, [pc, #52]	; (800ff0c <rmw_validate_node_name+0xa0>)
 800fed6:	5cd3      	ldrb	r3, [r2, r3]
 800fed8:	f013 0304 	ands.w	r3, r3, #4
 800fedc:	d110      	bne.n	800ff00 <rmw_validate_node_name+0x94>
 800fede:	28ff      	cmp	r0, #255	; 0xff
 800fee0:	d806      	bhi.n	800fef0 <rmw_validate_node_name+0x84>
 800fee2:	602b      	str	r3, [r5, #0]
 800fee4:	4618      	mov	r0, r3
 800fee6:	e7e8      	b.n	800feba <rmw_validate_node_name+0x4e>
 800fee8:	200b      	movs	r0, #11
 800feea:	4770      	bx	lr
 800feec:	200b      	movs	r0, #11
 800feee:	e7e4      	b.n	800feba <rmw_validate_node_name+0x4e>
 800fef0:	2204      	movs	r2, #4
 800fef2:	602a      	str	r2, [r5, #0]
 800fef4:	2e00      	cmp	r6, #0
 800fef6:	d0df      	beq.n	800feb8 <rmw_validate_node_name+0x4c>
 800fef8:	22fe      	movs	r2, #254	; 0xfe
 800fefa:	6032      	str	r2, [r6, #0]
 800fefc:	4618      	mov	r0, r3
 800fefe:	e7dc      	b.n	800feba <rmw_validate_node_name+0x4e>
 800ff00:	2303      	movs	r3, #3
 800ff02:	602b      	str	r3, [r5, #0]
 800ff04:	2e00      	cmp	r6, #0
 800ff06:	d1de      	bne.n	800fec6 <rmw_validate_node_name+0x5a>
 800ff08:	e7d6      	b.n	800feb8 <rmw_validate_node_name+0x4c>
 800ff0a:	bf00      	nop
 800ff0c:	08014e54 	.word	0x08014e54

0800ff10 <rmw_node_name_validation_result_string>:
 800ff10:	2804      	cmp	r0, #4
 800ff12:	bf9a      	itte	ls
 800ff14:	4b02      	ldrls	r3, [pc, #8]	; (800ff20 <rmw_node_name_validation_result_string+0x10>)
 800ff16:	f853 0020 	ldrls.w	r0, [r3, r0, lsl #2]
 800ff1a:	4802      	ldrhi	r0, [pc, #8]	; (800ff24 <rmw_node_name_validation_result_string+0x14>)
 800ff1c:	4770      	bx	lr
 800ff1e:	bf00      	nop
 800ff20:	08014b60 	.word	0x08014b60
 800ff24:	08014a74 	.word	0x08014a74

0800ff28 <get_memory>:
 800ff28:	4603      	mov	r3, r0
 800ff2a:	6840      	ldr	r0, [r0, #4]
 800ff2c:	b158      	cbz	r0, 800ff46 <get_memory+0x1e>
 800ff2e:	6842      	ldr	r2, [r0, #4]
 800ff30:	605a      	str	r2, [r3, #4]
 800ff32:	b10a      	cbz	r2, 800ff38 <get_memory+0x10>
 800ff34:	2100      	movs	r1, #0
 800ff36:	6011      	str	r1, [r2, #0]
 800ff38:	681a      	ldr	r2, [r3, #0]
 800ff3a:	6042      	str	r2, [r0, #4]
 800ff3c:	b102      	cbz	r2, 800ff40 <get_memory+0x18>
 800ff3e:	6010      	str	r0, [r2, #0]
 800ff40:	2200      	movs	r2, #0
 800ff42:	6002      	str	r2, [r0, #0]
 800ff44:	6018      	str	r0, [r3, #0]
 800ff46:	4770      	bx	lr

0800ff48 <put_memory>:
 800ff48:	680b      	ldr	r3, [r1, #0]
 800ff4a:	b10b      	cbz	r3, 800ff50 <put_memory+0x8>
 800ff4c:	684a      	ldr	r2, [r1, #4]
 800ff4e:	605a      	str	r2, [r3, #4]
 800ff50:	684a      	ldr	r2, [r1, #4]
 800ff52:	b102      	cbz	r2, 800ff56 <put_memory+0xe>
 800ff54:	6013      	str	r3, [r2, #0]
 800ff56:	6803      	ldr	r3, [r0, #0]
 800ff58:	428b      	cmp	r3, r1
 800ff5a:	6843      	ldr	r3, [r0, #4]
 800ff5c:	bf08      	it	eq
 800ff5e:	6002      	streq	r2, [r0, #0]
 800ff60:	604b      	str	r3, [r1, #4]
 800ff62:	b103      	cbz	r3, 800ff66 <put_memory+0x1e>
 800ff64:	6019      	str	r1, [r3, #0]
 800ff66:	2300      	movs	r3, #0
 800ff68:	600b      	str	r3, [r1, #0]
 800ff6a:	6041      	str	r1, [r0, #4]
 800ff6c:	4770      	bx	lr
 800ff6e:	bf00      	nop

0800ff70 <rmw_get_implementation_identifier>:
 800ff70:	4b01      	ldr	r3, [pc, #4]	; (800ff78 <rmw_get_implementation_identifier+0x8>)
 800ff72:	6818      	ldr	r0, [r3, #0]
 800ff74:	4770      	bx	lr
 800ff76:	bf00      	nop
 800ff78:	08014b8c 	.word	0x08014b8c

0800ff7c <rmw_init_options_init>:
 800ff7c:	b084      	sub	sp, #16
 800ff7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff80:	b083      	sub	sp, #12
 800ff82:	ad09      	add	r5, sp, #36	; 0x24
 800ff84:	e885 000e 	stmia.w	r5, {r1, r2, r3}
 800ff88:	b130      	cbz	r0, 800ff98 <rmw_init_options_init+0x1c>
 800ff8a:	4604      	mov	r4, r0
 800ff8c:	4628      	mov	r0, r5
 800ff8e:	f7fa fa4f 	bl	800a430 <rcutils_allocator_is_valid>
 800ff92:	b108      	cbz	r0, 800ff98 <rmw_init_options_init+0x1c>
 800ff94:	68a6      	ldr	r6, [r4, #8]
 800ff96:	b12e      	cbz	r6, 800ffa4 <rmw_init_options_init+0x28>
 800ff98:	200b      	movs	r0, #11
 800ff9a:	b003      	add	sp, #12
 800ff9c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 800ffa0:	b004      	add	sp, #16
 800ffa2:	4770      	bx	lr
 800ffa4:	2200      	movs	r2, #0
 800ffa6:	2300      	movs	r3, #0
 800ffa8:	e9c4 2300 	strd	r2, r3, [r4]
 800ffac:	4b22      	ldr	r3, [pc, #136]	; (8010038 <rmw_init_options_init+0xbc>)
 800ffae:	f8df e098 	ldr.w	lr, [pc, #152]	; 8010048 <rmw_init_options_init+0xcc>
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	60a3      	str	r3, [r4, #8]
 800ffb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ffb8:	f104 0c20 	add.w	ip, r4, #32
 800ffbc:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 800ffc0:	466f      	mov	r7, sp
 800ffc2:	682b      	ldr	r3, [r5, #0]
 800ffc4:	f8cc 3000 	str.w	r3, [ip]
 800ffc8:	4638      	mov	r0, r7
 800ffca:	f8c4 e01c 	str.w	lr, [r4, #28]
 800ffce:	60e6      	str	r6, [r4, #12]
 800ffd0:	f7ff fe66 	bl	800fca0 <rmw_get_default_security_options>
 800ffd4:	e897 0003 	ldmia.w	r7, {r0, r1}
 800ffd8:	f104 0310 	add.w	r3, r4, #16
 800ffdc:	e883 0003 	stmia.w	r3, {r0, r1}
 800ffe0:	2203      	movs	r2, #3
 800ffe2:	4816      	ldr	r0, [pc, #88]	; (801003c <rmw_init_options_init+0xc0>)
 800ffe4:	4916      	ldr	r1, [pc, #88]	; (8010040 <rmw_init_options_init+0xc4>)
 800ffe6:	7626      	strb	r6, [r4, #24]
 800ffe8:	f7fa fd20 	bl	800aa2c <rmw_uxrce_init_init_options_impl_memory>
 800ffec:	4813      	ldr	r0, [pc, #76]	; (801003c <rmw_init_options_init+0xc0>)
 800ffee:	f7ff ff9b 	bl	800ff28 <get_memory>
 800fff2:	b1f0      	cbz	r0, 8010032 <rmw_init_options_init+0xb6>
 800fff4:	4a13      	ldr	r2, [pc, #76]	; (8010044 <rmw_init_options_init+0xc8>)
 800fff6:	6883      	ldr	r3, [r0, #8]
 800fff8:	6851      	ldr	r1, [r2, #4]
 800fffa:	7810      	ldrb	r0, [r2, #0]
 800fffc:	6363      	str	r3, [r4, #52]	; 0x34
 800fffe:	7418      	strb	r0, [r3, #16]
 8010000:	6159      	str	r1, [r3, #20]
 8010002:	68d1      	ldr	r1, [r2, #12]
 8010004:	61d9      	str	r1, [r3, #28]
 8010006:	6911      	ldr	r1, [r2, #16]
 8010008:	6219      	str	r1, [r3, #32]
 801000a:	6951      	ldr	r1, [r2, #20]
 801000c:	6892      	ldr	r2, [r2, #8]
 801000e:	619a      	str	r2, [r3, #24]
 8010010:	6259      	str	r1, [r3, #36]	; 0x24
 8010012:	f7fd faf3 	bl	800d5fc <uxr_nanos>
 8010016:	f002 ff6f 	bl	8012ef8 <srand>
 801001a:	f002 ff9b 	bl	8012f54 <rand>
 801001e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8010020:	6298      	str	r0, [r3, #40]	; 0x28
 8010022:	2800      	cmp	r0, #0
 8010024:	d0f9      	beq.n	801001a <rmw_init_options_init+0x9e>
 8010026:	2000      	movs	r0, #0
 8010028:	b003      	add	sp, #12
 801002a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801002e:	b004      	add	sp, #16
 8010030:	4770      	bx	lr
 8010032:	2001      	movs	r0, #1
 8010034:	e7b1      	b.n	800ff9a <rmw_init_options_init+0x1e>
 8010036:	bf00      	nop
 8010038:	08014b8c 	.word	0x08014b8c
 801003c:	200158c4 	.word	0x200158c4
 8010040:	20011160 	.word	0x20011160
 8010044:	20010fec 	.word	0x20010fec
 8010048:	0801472c 	.word	0x0801472c

0801004c <rmw_init_options_copy>:
 801004c:	b570      	push	{r4, r5, r6, lr}
 801004e:	b158      	cbz	r0, 8010068 <rmw_init_options_copy+0x1c>
 8010050:	460d      	mov	r5, r1
 8010052:	b149      	cbz	r1, 8010068 <rmw_init_options_copy+0x1c>
 8010054:	4604      	mov	r4, r0
 8010056:	6880      	ldr	r0, [r0, #8]
 8010058:	b120      	cbz	r0, 8010064 <rmw_init_options_copy+0x18>
 801005a:	4b1e      	ldr	r3, [pc, #120]	; (80100d4 <rmw_init_options_copy+0x88>)
 801005c:	6819      	ldr	r1, [r3, #0]
 801005e:	f7f0 f8b7 	bl	80001d0 <strcmp>
 8010062:	bb90      	cbnz	r0, 80100ca <rmw_init_options_copy+0x7e>
 8010064:	68ab      	ldr	r3, [r5, #8]
 8010066:	b113      	cbz	r3, 801006e <rmw_init_options_copy+0x22>
 8010068:	250b      	movs	r5, #11
 801006a:	4628      	mov	r0, r5
 801006c:	bd70      	pop	{r4, r5, r6, pc}
 801006e:	4623      	mov	r3, r4
 8010070:	462a      	mov	r2, r5
 8010072:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8010076:	f8d3 c000 	ldr.w	ip, [r3]
 801007a:	6858      	ldr	r0, [r3, #4]
 801007c:	6899      	ldr	r1, [r3, #8]
 801007e:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 8010082:	f8c2 e00c 	str.w	lr, [r2, #12]
 8010086:	3310      	adds	r3, #16
 8010088:	42b3      	cmp	r3, r6
 801008a:	f8c2 c000 	str.w	ip, [r2]
 801008e:	6050      	str	r0, [r2, #4]
 8010090:	6091      	str	r1, [r2, #8]
 8010092:	f102 0210 	add.w	r2, r2, #16
 8010096:	d1ee      	bne.n	8010076 <rmw_init_options_copy+0x2a>
 8010098:	6819      	ldr	r1, [r3, #0]
 801009a:	685b      	ldr	r3, [r3, #4]
 801009c:	480e      	ldr	r0, [pc, #56]	; (80100d8 <rmw_init_options_copy+0x8c>)
 801009e:	6053      	str	r3, [r2, #4]
 80100a0:	6011      	str	r1, [r2, #0]
 80100a2:	f7ff ff41 	bl	800ff28 <get_memory>
 80100a6:	b198      	cbz	r0, 80100d0 <rmw_init_options_copy+0x84>
 80100a8:	6883      	ldr	r3, [r0, #8]
 80100aa:	636b      	str	r3, [r5, #52]	; 0x34
 80100ac:	6b62      	ldr	r2, [r4, #52]	; 0x34
 80100ae:	f102 0c10 	add.w	ip, r2, #16
 80100b2:	f103 0410 	add.w	r4, r3, #16
 80100b6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80100ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80100bc:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80100c0:	2500      	movs	r5, #0
 80100c2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80100c6:	4628      	mov	r0, r5
 80100c8:	bd70      	pop	{r4, r5, r6, pc}
 80100ca:	250c      	movs	r5, #12
 80100cc:	4628      	mov	r0, r5
 80100ce:	bd70      	pop	{r4, r5, r6, pc}
 80100d0:	2501      	movs	r5, #1
 80100d2:	e7ca      	b.n	801006a <rmw_init_options_copy+0x1e>
 80100d4:	08014b8c 	.word	0x08014b8c
 80100d8:	200158c4 	.word	0x200158c4

080100dc <rmw_init_options_fini>:
 80100dc:	2800      	cmp	r0, #0
 80100de:	d03d      	beq.n	801015c <rmw_init_options_fini+0x80>
 80100e0:	b510      	push	{r4, lr}
 80100e2:	4604      	mov	r4, r0
 80100e4:	b08e      	sub	sp, #56	; 0x38
 80100e6:	3020      	adds	r0, #32
 80100e8:	f7fa f9a2 	bl	800a430 <rcutils_allocator_is_valid>
 80100ec:	b360      	cbz	r0, 8010148 <rmw_init_options_fini+0x6c>
 80100ee:	68a0      	ldr	r0, [r4, #8]
 80100f0:	b120      	cbz	r0, 80100fc <rmw_init_options_fini+0x20>
 80100f2:	4b1c      	ldr	r3, [pc, #112]	; (8010164 <rmw_init_options_fini+0x88>)
 80100f4:	6819      	ldr	r1, [r3, #0]
 80100f6:	f7f0 f86b 	bl	80001d0 <strcmp>
 80100fa:	bb68      	cbnz	r0, 8010158 <rmw_init_options_fini+0x7c>
 80100fc:	4b1a      	ldr	r3, [pc, #104]	; (8010168 <rmw_init_options_fini+0x8c>)
 80100fe:	6819      	ldr	r1, [r3, #0]
 8010100:	b331      	cbz	r1, 8010150 <rmw_init_options_fini+0x74>
 8010102:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8010104:	e001      	b.n	801010a <rmw_init_options_fini+0x2e>
 8010106:	6849      	ldr	r1, [r1, #4]
 8010108:	b311      	cbz	r1, 8010150 <rmw_init_options_fini+0x74>
 801010a:	688b      	ldr	r3, [r1, #8]
 801010c:	429a      	cmp	r2, r3
 801010e:	d1fa      	bne.n	8010106 <rmw_init_options_fini+0x2a>
 8010110:	4815      	ldr	r0, [pc, #84]	; (8010168 <rmw_init_options_fini+0x8c>)
 8010112:	f7ff ff19 	bl	800ff48 <put_memory>
 8010116:	4668      	mov	r0, sp
 8010118:	f7ff fdb2 	bl	800fc80 <rmw_get_zero_initialized_init_options>
 801011c:	46ee      	mov	lr, sp
 801011e:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010122:	46a4      	mov	ip, r4
 8010124:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010128:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801012c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010130:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8010134:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8010138:	e89e 0003 	ldmia.w	lr, {r0, r1}
 801013c:	e88c 0003 	stmia.w	ip, {r0, r1}
 8010140:	2300      	movs	r3, #0
 8010142:	4618      	mov	r0, r3
 8010144:	b00e      	add	sp, #56	; 0x38
 8010146:	bd10      	pop	{r4, pc}
 8010148:	230b      	movs	r3, #11
 801014a:	4618      	mov	r0, r3
 801014c:	b00e      	add	sp, #56	; 0x38
 801014e:	bd10      	pop	{r4, pc}
 8010150:	2301      	movs	r3, #1
 8010152:	4618      	mov	r0, r3
 8010154:	b00e      	add	sp, #56	; 0x38
 8010156:	bd10      	pop	{r4, pc}
 8010158:	230c      	movs	r3, #12
 801015a:	e7f2      	b.n	8010142 <rmw_init_options_fini+0x66>
 801015c:	230b      	movs	r3, #11
 801015e:	4618      	mov	r0, r3
 8010160:	4770      	bx	lr
 8010162:	bf00      	nop
 8010164:	08014b8c 	.word	0x08014b8c
 8010168:	200158c4 	.word	0x200158c4

0801016c <rmw_init>:
 801016c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010170:	b083      	sub	sp, #12
 8010172:	2800      	cmp	r0, #0
 8010174:	f000 80d3 	beq.w	801031e <rmw_init+0x1b2>
 8010178:	460e      	mov	r6, r1
 801017a:	2900      	cmp	r1, #0
 801017c:	f000 80cf 	beq.w	801031e <rmw_init+0x1b2>
 8010180:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8010182:	4605      	mov	r5, r0
 8010184:	2b00      	cmp	r3, #0
 8010186:	f000 80ca 	beq.w	801031e <rmw_init+0x1b2>
 801018a:	4b78      	ldr	r3, [pc, #480]	; (801036c <rmw_init+0x200>)
 801018c:	6880      	ldr	r0, [r0, #8]
 801018e:	681f      	ldr	r7, [r3, #0]
 8010190:	b128      	cbz	r0, 801019e <rmw_init+0x32>
 8010192:	4639      	mov	r1, r7
 8010194:	f7f0 f81c 	bl	80001d0 <strcmp>
 8010198:	2800      	cmp	r0, #0
 801019a:	f040 80ca 	bne.w	8010332 <rmw_init+0x1c6>
 801019e:	e9d5 2300 	ldrd	r2, r3, [r5]
 80101a2:	4c73      	ldr	r4, [pc, #460]	; (8010370 <rmw_init+0x204>)
 80101a4:	4973      	ldr	r1, [pc, #460]	; (8010374 <rmw_init+0x208>)
 80101a6:	4874      	ldr	r0, [pc, #464]	; (8010378 <rmw_init+0x20c>)
 80101a8:	60b7      	str	r7, [r6, #8]
 80101aa:	e9c6 2300 	strd	r2, r3, [r6]
 80101ae:	68eb      	ldr	r3, [r5, #12]
 80101b0:	64b3      	str	r3, [r6, #72]	; 0x48
 80101b2:	2201      	movs	r2, #1
 80101b4:	f7fa fbda 	bl	800a96c <rmw_uxrce_init_session_memory>
 80101b8:	4620      	mov	r0, r4
 80101ba:	4970      	ldr	r1, [pc, #448]	; (801037c <rmw_init+0x210>)
 80101bc:	2204      	movs	r2, #4
 80101be:	f7fa fc15 	bl	800a9ec <rmw_uxrce_init_static_input_buffer_memory>
 80101c2:	f04f 0800 	mov.w	r8, #0
 80101c6:	486c      	ldr	r0, [pc, #432]	; (8010378 <rmw_init+0x20c>)
 80101c8:	f884 800d 	strb.w	r8, [r4, #13]
 80101cc:	f7ff feac 	bl	800ff28 <get_memory>
 80101d0:	2800      	cmp	r0, #0
 80101d2:	f000 80a9 	beq.w	8010328 <rmw_init+0x1bc>
 80101d6:	6884      	ldr	r4, [r0, #8]
 80101d8:	6b68      	ldr	r0, [r5, #52]	; 0x34
 80101da:	6a41      	ldr	r1, [r0, #36]	; 0x24
 80101dc:	f890 c010 	ldrb.w	ip, [r0, #16]
 80101e0:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 80101e4:	9101      	str	r1, [sp, #4]
 80101e6:	6a00      	ldr	r0, [r0, #32]
 80101e8:	9000      	str	r0, [sp, #0]
 80101ea:	f104 0910 	add.w	r9, r4, #16
 80101ee:	4661      	mov	r1, ip
 80101f0:	4648      	mov	r0, r9
 80101f2:	f000 fdbf 	bl	8010d74 <uxr_set_custom_transport_callbacks>
 80101f6:	f504 5380 	add.w	r3, r4, #4096	; 0x1000
 80101fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80101fe:	e9c4 22e3 	strd	r2, r2, [r4, #908]	; 0x38c
 8010202:	f504 725e 	add.w	r2, r4, #888	; 0x378
 8010206:	e9c4 22e1 	strd	r2, r2, [r4, #900]	; 0x384
 801020a:	495d      	ldr	r1, [pc, #372]	; (8010380 <rmw_init+0x214>)
 801020c:	f8c3 8594 	str.w	r8, [r3, #1428]	; 0x594
 8010210:	f8c3 8598 	str.w	r8, [r3, #1432]	; 0x598
 8010214:	f8c3 859c 	str.w	r8, [r3, #1436]	; 0x59c
 8010218:	f8c3 85a0 	str.w	r8, [r3, #1440]	; 0x5a0
 801021c:	4859      	ldr	r0, [pc, #356]	; (8010384 <rmw_init+0x218>)
 801021e:	e9c4 78da 	strd	r7, r8, [r4, #872]	; 0x368
 8010222:	2201      	movs	r2, #1
 8010224:	64f4      	str	r4, [r6, #76]	; 0x4c
 8010226:	f7fa fb81 	bl	800a92c <rmw_uxrce_init_node_memory>
 801022a:	4957      	ldr	r1, [pc, #348]	; (8010388 <rmw_init+0x21c>)
 801022c:	4857      	ldr	r0, [pc, #348]	; (801038c <rmw_init+0x220>)
 801022e:	2205      	movs	r2, #5
 8010230:	f7fa fb5c 	bl	800a8ec <rmw_uxrce_init_subscription_memory>
 8010234:	4956      	ldr	r1, [pc, #344]	; (8010390 <rmw_init+0x224>)
 8010236:	4857      	ldr	r0, [pc, #348]	; (8010394 <rmw_init+0x228>)
 8010238:	220a      	movs	r2, #10
 801023a:	f7fa fb37 	bl	800a8ac <rmw_uxrce_init_publisher_memory>
 801023e:	4956      	ldr	r1, [pc, #344]	; (8010398 <rmw_init+0x22c>)
 8010240:	4856      	ldr	r0, [pc, #344]	; (801039c <rmw_init+0x230>)
 8010242:	2201      	movs	r2, #1
 8010244:	f7fa faf2 	bl	800a82c <rmw_uxrce_init_service_memory>
 8010248:	4955      	ldr	r1, [pc, #340]	; (80103a0 <rmw_init+0x234>)
 801024a:	4856      	ldr	r0, [pc, #344]	; (80103a4 <rmw_init+0x238>)
 801024c:	2201      	movs	r2, #1
 801024e:	f7fa fb0d 	bl	800a86c <rmw_uxrce_init_client_memory>
 8010252:	4955      	ldr	r1, [pc, #340]	; (80103a8 <rmw_init+0x23c>)
 8010254:	4855      	ldr	r0, [pc, #340]	; (80103ac <rmw_init+0x240>)
 8010256:	220f      	movs	r2, #15
 8010258:	f7fa fba8 	bl	800a9ac <rmw_uxrce_init_topic_memory>
 801025c:	4954      	ldr	r1, [pc, #336]	; (80103b0 <rmw_init+0x244>)
 801025e:	4855      	ldr	r0, [pc, #340]	; (80103b4 <rmw_init+0x248>)
 8010260:	2203      	movs	r2, #3
 8010262:	f7fa fbe3 	bl	800aa2c <rmw_uxrce_init_init_options_impl_memory>
 8010266:	4954      	ldr	r1, [pc, #336]	; (80103b8 <rmw_init+0x24c>)
 8010268:	4854      	ldr	r0, [pc, #336]	; (80103bc <rmw_init+0x250>)
 801026a:	2204      	movs	r2, #4
 801026c:	f7fa fbfe 	bl	800aa6c <rmw_uxrce_init_wait_set_memory>
 8010270:	4953      	ldr	r1, [pc, #332]	; (80103c0 <rmw_init+0x254>)
 8010272:	4854      	ldr	r0, [pc, #336]	; (80103c4 <rmw_init+0x258>)
 8010274:	2204      	movs	r2, #4
 8010276:	f7fa fc19 	bl	800aaac <rmw_uxrce_init_guard_condition_memory>
 801027a:	6b69      	ldr	r1, [r5, #52]	; 0x34
 801027c:	6cf0      	ldr	r0, [r6, #76]	; 0x4c
 801027e:	4642      	mov	r2, r8
 8010280:	f000 fb06 	bl	8010890 <rmw_uxrce_transport_init>
 8010284:	4607      	mov	r7, r0
 8010286:	2800      	cmp	r0, #0
 8010288:	d158      	bne.n	801033c <rmw_init+0x1d0>
 801028a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 801028c:	f504 7528 	add.w	r5, r4, #672	; 0x2a0
 8010290:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010292:	f504 7122 	add.w	r1, r4, #648	; 0x288
 8010296:	4628      	mov	r0, r5
 8010298:	f7fc f84e 	bl	800c338 <uxr_init_session>
 801029c:	494a      	ldr	r1, [pc, #296]	; (80103c8 <rmw_init+0x25c>)
 801029e:	4622      	mov	r2, r4
 80102a0:	4628      	mov	r0, r5
 80102a2:	f7fc f86d 	bl	800c380 <uxr_set_topic_callback>
 80102a6:	4949      	ldr	r1, [pc, #292]	; (80103cc <rmw_init+0x260>)
 80102a8:	463a      	mov	r2, r7
 80102aa:	4628      	mov	r0, r5
 80102ac:	f7fc f864 	bl	800c378 <uxr_set_status_callback>
 80102b0:	4947      	ldr	r1, [pc, #284]	; (80103d0 <rmw_init+0x264>)
 80102b2:	463a      	mov	r2, r7
 80102b4:	4628      	mov	r0, r5
 80102b6:	f7fc f867 	bl	800c388 <uxr_set_request_callback>
 80102ba:	4946      	ldr	r1, [pc, #280]	; (80103d4 <rmw_init+0x268>)
 80102bc:	463a      	mov	r2, r7
 80102be:	4628      	mov	r0, r5
 80102c0:	f7fc f866 	bl	800c390 <uxr_set_reply_callback>
 80102c4:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80102c8:	2304      	movs	r3, #4
 80102ca:	0092      	lsls	r2, r2, #2
 80102cc:	f504 7165 	add.w	r1, r4, #916	; 0x394
 80102d0:	4628      	mov	r0, r5
 80102d2:	f7fc f89b 	bl	800c40c <uxr_create_input_reliable_stream>
 80102d6:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 80102da:	f8c4 0374 	str.w	r0, [r4, #884]	; 0x374
 80102de:	0092      	lsls	r2, r2, #2
 80102e0:	2304      	movs	r3, #4
 80102e2:	f604 3194 	addw	r1, r4, #2964	; 0xb94
 80102e6:	4628      	mov	r0, r5
 80102e8:	f7fc f868 	bl	800c3bc <uxr_create_output_reliable_stream>
 80102ec:	f8c4 0378 	str.w	r0, [r4, #888]	; 0x378
 80102f0:	4628      	mov	r0, r5
 80102f2:	f7fc f885 	bl	800c400 <uxr_create_input_best_effort_stream>
 80102f6:	f504 519c 	add.w	r1, r4, #4992	; 0x1380
 80102fa:	f8c4 0380 	str.w	r0, [r4, #896]	; 0x380
 80102fe:	f8b4 2298 	ldrh.w	r2, [r4, #664]	; 0x298
 8010302:	3114      	adds	r1, #20
 8010304:	4628      	mov	r0, r5
 8010306:	f7fc f847 	bl	800c398 <uxr_create_output_best_effort_stream>
 801030a:	f8c4 037c 	str.w	r0, [r4, #892]	; 0x37c
 801030e:	4628      	mov	r0, r5
 8010310:	f7fc fd98 	bl	800ce44 <uxr_create_session>
 8010314:	b1f8      	cbz	r0, 8010356 <rmw_init+0x1ea>
 8010316:	4638      	mov	r0, r7
 8010318:	b003      	add	sp, #12
 801031a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801031e:	270b      	movs	r7, #11
 8010320:	4638      	mov	r0, r7
 8010322:	b003      	add	sp, #12
 8010324:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010328:	2701      	movs	r7, #1
 801032a:	4638      	mov	r0, r7
 801032c:	b003      	add	sp, #12
 801032e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010332:	270c      	movs	r7, #12
 8010334:	4638      	mov	r0, r7
 8010336:	b003      	add	sp, #12
 8010338:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801033c:	4648      	mov	r0, r9
 801033e:	f000 fd5b 	bl	8010df8 <uxr_close_custom_transport>
 8010342:	480d      	ldr	r0, [pc, #52]	; (8010378 <rmw_init+0x20c>)
 8010344:	4621      	mov	r1, r4
 8010346:	f7ff fdff 	bl	800ff48 <put_memory>
 801034a:	4638      	mov	r0, r7
 801034c:	f8c6 804c 	str.w	r8, [r6, #76]	; 0x4c
 8010350:	b003      	add	sp, #12
 8010352:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010356:	4648      	mov	r0, r9
 8010358:	f000 fd4e 	bl	8010df8 <uxr_close_custom_transport>
 801035c:	4806      	ldr	r0, [pc, #24]	; (8010378 <rmw_init+0x20c>)
 801035e:	4621      	mov	r1, r4
 8010360:	f7ff fdf2 	bl	800ff48 <put_memory>
 8010364:	64f7      	str	r7, [r6, #76]	; 0x4c
 8010366:	2701      	movs	r7, #1
 8010368:	e7d5      	b.n	8010316 <rmw_init+0x1aa>
 801036a:	bf00      	nop
 801036c:	08014b8c 	.word	0x08014b8c
 8010370:	20015914 	.word	0x20015914
 8010374:	20011bc0 	.word	0x20011bc0
 8010378:	20015904 	.word	0x20015904
 801037c:	20013168 	.word	0x20013168
 8010380:	200111e4 	.word	0x200111e4
 8010384:	200158d4 	.word	0x200158d4
 8010388:	20015268 	.word	0x20015268
 801038c:	20015924 	.word	0x20015924
 8010390:	20011288 	.word	0x20011288
 8010394:	200158e4 	.word	0x200158e4
 8010398:	20011af8 	.word	0x20011af8
 801039c:	200158f4 	.word	0x200158f4
 80103a0:	20011018 	.word	0x20011018
 80103a4:	20011008 	.word	0x20011008
 80103a8:	200156a0 	.word	0x200156a0
 80103ac:	20015934 	.word	0x20015934
 80103b0:	20011160 	.word	0x20011160
 80103b4:	200158c4 	.word	0x200158c4
 80103b8:	20015844 	.word	0x20015844
 80103bc:	20015944 	.word	0x20015944
 80103c0:	200110e0 	.word	0x200110e0
 80103c4:	200158b4 	.word	0x200158b4
 80103c8:	08012a15 	.word	0x08012a15
 80103cc:	08012a0d 	.word	0x08012a0d
 80103d0:	08012aad 	.word	0x08012aad
 80103d4:	08012b49 	.word	0x08012b49

080103d8 <rmw_context_fini>:
 80103d8:	4b17      	ldr	r3, [pc, #92]	; (8010438 <rmw_context_fini+0x60>)
 80103da:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 80103dc:	b570      	push	{r4, r5, r6, lr}
 80103de:	681c      	ldr	r4, [r3, #0]
 80103e0:	4605      	mov	r5, r0
 80103e2:	b334      	cbz	r4, 8010432 <rmw_context_fini+0x5a>
 80103e4:	2600      	movs	r6, #0
 80103e6:	e9d4 4001 	ldrd	r4, r0, [r4, #4]
 80103ea:	6902      	ldr	r2, [r0, #16]
 80103ec:	428a      	cmp	r2, r1
 80103ee:	d018      	beq.n	8010422 <rmw_context_fini+0x4a>
 80103f0:	2c00      	cmp	r4, #0
 80103f2:	d1f8      	bne.n	80103e6 <rmw_context_fini+0xe>
 80103f4:	b189      	cbz	r1, 801041a <rmw_context_fini+0x42>
 80103f6:	f8d1 3388 	ldr.w	r3, [r1, #904]	; 0x388
 80103fa:	789b      	ldrb	r3, [r3, #2]
 80103fc:	2b01      	cmp	r3, #1
 80103fe:	f501 7028 	add.w	r0, r1, #672	; 0x2a0
 8010402:	bf14      	ite	ne
 8010404:	210a      	movne	r1, #10
 8010406:	2100      	moveq	r1, #0
 8010408:	f7fc fcf4 	bl	800cdf4 <uxr_delete_session_retries>
 801040c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 801040e:	f7fa fb6d 	bl	800aaec <rmw_uxrce_fini_session_memory>
 8010412:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 8010414:	3010      	adds	r0, #16
 8010416:	f000 fcef 	bl	8010df8 <uxr_close_custom_transport>
 801041a:	2300      	movs	r3, #0
 801041c:	64eb      	str	r3, [r5, #76]	; 0x4c
 801041e:	4630      	mov	r0, r6
 8010420:	bd70      	pop	{r4, r5, r6, pc}
 8010422:	3018      	adds	r0, #24
 8010424:	f000 f90e 	bl	8010644 <rmw_destroy_node>
 8010428:	6ce9      	ldr	r1, [r5, #76]	; 0x4c
 801042a:	4606      	mov	r6, r0
 801042c:	2c00      	cmp	r4, #0
 801042e:	d1da      	bne.n	80103e6 <rmw_context_fini+0xe>
 8010430:	e7e0      	b.n	80103f4 <rmw_context_fini+0x1c>
 8010432:	4626      	mov	r6, r4
 8010434:	e7de      	b.n	80103f4 <rmw_context_fini+0x1c>
 8010436:	bf00      	nop
 8010438:	200158d4 	.word	0x200158d4

0801043c <create_topic>:
 801043c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010440:	4605      	mov	r5, r0
 8010442:	b084      	sub	sp, #16
 8010444:	4822      	ldr	r0, [pc, #136]	; (80104d0 <create_topic+0x94>)
 8010446:	460f      	mov	r7, r1
 8010448:	4616      	mov	r6, r2
 801044a:	f7ff fd6d 	bl	800ff28 <get_memory>
 801044e:	4604      	mov	r4, r0
 8010450:	2800      	cmp	r0, #0
 8010452:	d039      	beq.n	80104c8 <create_topic+0x8c>
 8010454:	692b      	ldr	r3, [r5, #16]
 8010456:	6884      	ldr	r4, [r0, #8]
 8010458:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80104d8 <create_topic+0x9c>
 801045c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8010460:	e9c4 6505 	strd	r6, r5, [r4, #20]
 8010464:	f8b3 0596 	ldrh.w	r0, [r3, #1430]	; 0x596
 8010468:	1c42      	adds	r2, r0, #1
 801046a:	2102      	movs	r1, #2
 801046c:	f8a3 2596 	strh.w	r2, [r3, #1430]	; 0x596
 8010470:	f7fb fea4 	bl	800c1bc <uxr_object_id>
 8010474:	223c      	movs	r2, #60	; 0x3c
 8010476:	6120      	str	r0, [r4, #16]
 8010478:	4641      	mov	r1, r8
 801047a:	4638      	mov	r0, r7
 801047c:	f7fa fc6e 	bl	800ad5c <generate_topic_name>
 8010480:	b1f0      	cbz	r0, 80104c0 <create_topic+0x84>
 8010482:	4f14      	ldr	r7, [pc, #80]	; (80104d4 <create_topic+0x98>)
 8010484:	4630      	mov	r0, r6
 8010486:	2264      	movs	r2, #100	; 0x64
 8010488:	4639      	mov	r1, r7
 801048a:	f7fa fc37 	bl	800acfc <generate_type_name>
 801048e:	b1b8      	cbz	r0, 80104c0 <create_topic+0x84>
 8010490:	6928      	ldr	r0, [r5, #16]
 8010492:	2306      	movs	r3, #6
 8010494:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 8010498:	f8cd 8000 	str.w	r8, [sp]
 801049c:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80104a0:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104a4:	6811      	ldr	r1, [r2, #0]
 80104a6:	696b      	ldr	r3, [r5, #20]
 80104a8:	6922      	ldr	r2, [r4, #16]
 80104aa:	f7fb fdab 	bl	800c004 <uxr_buffer_create_topic_bin>
 80104ae:	4602      	mov	r2, r0
 80104b0:	6928      	ldr	r0, [r5, #16]
 80104b2:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80104b6:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80104ba:	f7fa fbe9 	bl	800ac90 <run_xrce_session>
 80104be:	b918      	cbnz	r0, 80104c8 <create_topic+0x8c>
 80104c0:	4620      	mov	r0, r4
 80104c2:	f7fa fb89 	bl	800abd8 <rmw_uxrce_fini_topic_memory>
 80104c6:	2400      	movs	r4, #0
 80104c8:	4620      	mov	r0, r4
 80104ca:	b004      	add	sp, #16
 80104cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80104d0:	20015934 	.word	0x20015934
 80104d4:	200159b0 	.word	0x200159b0
 80104d8:	20015974 	.word	0x20015974

080104dc <destroy_topic>:
 80104dc:	b538      	push	{r3, r4, r5, lr}
 80104de:	6985      	ldr	r5, [r0, #24]
 80104e0:	b1d5      	cbz	r5, 8010518 <destroy_topic+0x3c>
 80104e2:	4604      	mov	r4, r0
 80104e4:	6928      	ldr	r0, [r5, #16]
 80104e6:	6922      	ldr	r2, [r4, #16]
 80104e8:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80104ec:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80104f0:	6819      	ldr	r1, [r3, #0]
 80104f2:	f7fb fd09 	bl	800bf08 <uxr_buffer_delete_entity>
 80104f6:	4602      	mov	r2, r0
 80104f8:	6928      	ldr	r0, [r5, #16]
 80104fa:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80104fe:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010502:	f7fa fbc5 	bl	800ac90 <run_xrce_session>
 8010506:	2800      	cmp	r0, #0
 8010508:	4620      	mov	r0, r4
 801050a:	bf14      	ite	ne
 801050c:	2400      	movne	r4, #0
 801050e:	2402      	moveq	r4, #2
 8010510:	f7fa fb62 	bl	800abd8 <rmw_uxrce_fini_topic_memory>
 8010514:	4620      	mov	r0, r4
 8010516:	bd38      	pop	{r3, r4, r5, pc}
 8010518:	2401      	movs	r4, #1
 801051a:	4620      	mov	r0, r4
 801051c:	bd38      	pop	{r3, r4, r5, pc}
 801051e:	bf00      	nop

08010520 <create_node>:
 8010520:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010524:	b083      	sub	sp, #12
 8010526:	2b00      	cmp	r3, #0
 8010528:	d05f      	beq.n	80105ea <create_node+0xca>
 801052a:	4606      	mov	r6, r0
 801052c:	4835      	ldr	r0, [pc, #212]	; (8010604 <create_node+0xe4>)
 801052e:	460f      	mov	r7, r1
 8010530:	4690      	mov	r8, r2
 8010532:	461d      	mov	r5, r3
 8010534:	f7ff fcf8 	bl	800ff28 <get_memory>
 8010538:	2800      	cmp	r0, #0
 801053a:	d056      	beq.n	80105ea <create_node+0xca>
 801053c:	6884      	ldr	r4, [r0, #8]
 801053e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8010540:	6123      	str	r3, [r4, #16]
 8010542:	f7ff fd15 	bl	800ff70 <rmw_get_implementation_identifier>
 8010546:	f104 092c 	add.w	r9, r4, #44	; 0x2c
 801054a:	e9c4 0406 	strd	r0, r4, [r4, #24]
 801054e:	f8c4 9020 	str.w	r9, [r4, #32]
 8010552:	4630      	mov	r0, r6
 8010554:	f7ef fe46 	bl	80001e4 <strlen>
 8010558:	1c42      	adds	r2, r0, #1
 801055a:	2a3c      	cmp	r2, #60	; 0x3c
 801055c:	f104 0518 	add.w	r5, r4, #24
 8010560:	d840      	bhi.n	80105e4 <create_node+0xc4>
 8010562:	4648      	mov	r0, r9
 8010564:	4631      	mov	r1, r6
 8010566:	f104 0968 	add.w	r9, r4, #104	; 0x68
 801056a:	f003 f81f 	bl	80135ac <memcpy>
 801056e:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
 8010572:	4638      	mov	r0, r7
 8010574:	f7ef fe36 	bl	80001e4 <strlen>
 8010578:	1c42      	adds	r2, r0, #1
 801057a:	2a3c      	cmp	r2, #60	; 0x3c
 801057c:	d832      	bhi.n	80105e4 <create_node+0xc4>
 801057e:	4639      	mov	r1, r7
 8010580:	4648      	mov	r0, r9
 8010582:	f003 f813 	bl	80135ac <memcpy>
 8010586:	6923      	ldr	r3, [r4, #16]
 8010588:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801058c:	2101      	movs	r1, #1
 801058e:	f8b3 0594 	ldrh.w	r0, [r3, #1428]	; 0x594
 8010592:	1842      	adds	r2, r0, r1
 8010594:	f8a3 2594 	strh.w	r2, [r3, #1428]	; 0x594
 8010598:	f7fb fe10 	bl	800c1bc <uxr_object_id>
 801059c:	6160      	str	r0, [r4, #20]
 801059e:	783b      	ldrb	r3, [r7, #0]
 80105a0:	2b2f      	cmp	r3, #47	; 0x2f
 80105a2:	d127      	bne.n	80105f4 <create_node+0xd4>
 80105a4:	787b      	ldrb	r3, [r7, #1]
 80105a6:	bb2b      	cbnz	r3, 80105f4 <create_node+0xd4>
 80105a8:	4a17      	ldr	r2, [pc, #92]	; (8010608 <create_node+0xe8>)
 80105aa:	4818      	ldr	r0, [pc, #96]	; (801060c <create_node+0xec>)
 80105ac:	4633      	mov	r3, r6
 80105ae:	213c      	movs	r1, #60	; 0x3c
 80105b0:	f002 fe84 	bl	80132bc <sniprintf>
 80105b4:	6920      	ldr	r0, [r4, #16]
 80105b6:	4915      	ldr	r1, [pc, #84]	; (801060c <create_node+0xec>)
 80105b8:	f8d0 2384 	ldr.w	r2, [r0, #900]	; 0x384
 80105bc:	9100      	str	r1, [sp, #0]
 80105be:	2106      	movs	r1, #6
 80105c0:	9101      	str	r1, [sp, #4]
 80105c2:	6811      	ldr	r1, [r2, #0]
 80105c4:	6962      	ldr	r2, [r4, #20]
 80105c6:	fa1f f388 	uxth.w	r3, r8
 80105ca:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80105ce:	f7fb fce7 	bl	800bfa0 <uxr_buffer_create_participant_bin>
 80105d2:	4602      	mov	r2, r0
 80105d4:	6920      	ldr	r0, [r4, #16]
 80105d6:	f8d0 338c 	ldr.w	r3, [r0, #908]	; 0x38c
 80105da:	f8d0 1384 	ldr.w	r1, [r0, #900]	; 0x384
 80105de:	f7fa fb57 	bl	800ac90 <run_xrce_session>
 80105e2:	b918      	cbnz	r0, 80105ec <create_node+0xcc>
 80105e4:	4628      	mov	r0, r5
 80105e6:	f7fa fa87 	bl	800aaf8 <rmw_uxrce_fini_node_memory>
 80105ea:	2500      	movs	r5, #0
 80105ec:	4628      	mov	r0, r5
 80105ee:	b003      	add	sp, #12
 80105f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105f4:	4a06      	ldr	r2, [pc, #24]	; (8010610 <create_node+0xf0>)
 80105f6:	9600      	str	r6, [sp, #0]
 80105f8:	463b      	mov	r3, r7
 80105fa:	213c      	movs	r1, #60	; 0x3c
 80105fc:	4803      	ldr	r0, [pc, #12]	; (801060c <create_node+0xec>)
 80105fe:	f002 fe5d 	bl	80132bc <sniprintf>
 8010602:	e7d7      	b.n	80105b4 <create_node+0x94>
 8010604:	200158d4 	.word	0x200158d4
 8010608:	080145a4 	.word	0x080145a4
 801060c:	20015a14 	.word	0x20015a14
 8010610:	08014734 	.word	0x08014734

08010614 <rmw_create_node>:
 8010614:	b199      	cbz	r1, 801063e <rmw_create_node+0x2a>
 8010616:	780b      	ldrb	r3, [r1, #0]
 8010618:	468c      	mov	ip, r1
 801061a:	b183      	cbz	r3, 801063e <rmw_create_node+0x2a>
 801061c:	b410      	push	{r4}
 801061e:	4614      	mov	r4, r2
 8010620:	b14a      	cbz	r2, 8010636 <rmw_create_node+0x22>
 8010622:	7813      	ldrb	r3, [r2, #0]
 8010624:	b13b      	cbz	r3, 8010636 <rmw_create_node+0x22>
 8010626:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8010628:	4603      	mov	r3, r0
 801062a:	4621      	mov	r1, r4
 801062c:	4660      	mov	r0, ip
 801062e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010632:	f7ff bf75 	b.w	8010520 <create_node>
 8010636:	2000      	movs	r0, #0
 8010638:	f85d 4b04 	ldr.w	r4, [sp], #4
 801063c:	4770      	bx	lr
 801063e:	2000      	movs	r0, #0
 8010640:	4770      	bx	lr
 8010642:	bf00      	nop

08010644 <rmw_destroy_node>:
 8010644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010646:	b328      	cbz	r0, 8010694 <rmw_destroy_node+0x50>
 8010648:	4607      	mov	r7, r0
 801064a:	6800      	ldr	r0, [r0, #0]
 801064c:	b120      	cbz	r0, 8010658 <rmw_destroy_node+0x14>
 801064e:	4b36      	ldr	r3, [pc, #216]	; (8010728 <rmw_destroy_node+0xe4>)
 8010650:	6819      	ldr	r1, [r3, #0]
 8010652:	f7ef fdbd 	bl	80001d0 <strcmp>
 8010656:	b9e8      	cbnz	r0, 8010694 <rmw_destroy_node+0x50>
 8010658:	687d      	ldr	r5, [r7, #4]
 801065a:	b1dd      	cbz	r5, 8010694 <rmw_destroy_node+0x50>
 801065c:	4b33      	ldr	r3, [pc, #204]	; (801072c <rmw_destroy_node+0xe8>)
 801065e:	681c      	ldr	r4, [r3, #0]
 8010660:	2c00      	cmp	r4, #0
 8010662:	d05f      	beq.n	8010724 <rmw_destroy_node+0xe0>
 8010664:	2600      	movs	r6, #0
 8010666:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 801066a:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
 801066e:	429d      	cmp	r5, r3
 8010670:	d013      	beq.n	801069a <rmw_destroy_node+0x56>
 8010672:	2c00      	cmp	r4, #0
 8010674:	d1f7      	bne.n	8010666 <rmw_destroy_node+0x22>
 8010676:	4b2e      	ldr	r3, [pc, #184]	; (8010730 <rmw_destroy_node+0xec>)
 8010678:	681c      	ldr	r4, [r3, #0]
 801067a:	b1c4      	cbz	r4, 80106ae <rmw_destroy_node+0x6a>
 801067c:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 8010680:	6a0b      	ldr	r3, [r1, #32]
 8010682:	429d      	cmp	r5, r3
 8010684:	d1f9      	bne.n	801067a <rmw_destroy_node+0x36>
 8010686:	317c      	adds	r1, #124	; 0x7c
 8010688:	4638      	mov	r0, r7
 801068a:	f000 f8a1 	bl	80107d0 <rmw_destroy_subscription>
 801068e:	2801      	cmp	r0, #1
 8010690:	4606      	mov	r6, r0
 8010692:	d1f2      	bne.n	801067a <rmw_destroy_node+0x36>
 8010694:	2601      	movs	r6, #1
 8010696:	4630      	mov	r0, r6
 8010698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801069a:	3184      	adds	r1, #132	; 0x84
 801069c:	4638      	mov	r0, r7
 801069e:	f7fa f873 	bl	800a788 <rmw_destroy_publisher>
 80106a2:	2801      	cmp	r0, #1
 80106a4:	4606      	mov	r6, r0
 80106a6:	d0f5      	beq.n	8010694 <rmw_destroy_node+0x50>
 80106a8:	2c00      	cmp	r4, #0
 80106aa:	d1dc      	bne.n	8010666 <rmw_destroy_node+0x22>
 80106ac:	e7e3      	b.n	8010676 <rmw_destroy_node+0x32>
 80106ae:	4b21      	ldr	r3, [pc, #132]	; (8010734 <rmw_destroy_node+0xf0>)
 80106b0:	681c      	ldr	r4, [r3, #0]
 80106b2:	b16c      	cbz	r4, 80106d0 <rmw_destroy_node+0x8c>
 80106b4:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80106b8:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80106ba:	429d      	cmp	r5, r3
 80106bc:	d1f9      	bne.n	80106b2 <rmw_destroy_node+0x6e>
 80106be:	317c      	adds	r1, #124	; 0x7c
 80106c0:	4638      	mov	r0, r7
 80106c2:	f000 f841 	bl	8010748 <rmw_destroy_service>
 80106c6:	2801      	cmp	r0, #1
 80106c8:	4606      	mov	r6, r0
 80106ca:	d0e3      	beq.n	8010694 <rmw_destroy_node+0x50>
 80106cc:	2c00      	cmp	r4, #0
 80106ce:	d1f1      	bne.n	80106b4 <rmw_destroy_node+0x70>
 80106d0:	4b19      	ldr	r3, [pc, #100]	; (8010738 <rmw_destroy_node+0xf4>)
 80106d2:	681c      	ldr	r4, [r3, #0]
 80106d4:	b16c      	cbz	r4, 80106f2 <rmw_destroy_node+0xae>
 80106d6:	e9d4 4101 	ldrd	r4, r1, [r4, #4]
 80106da:	6f8b      	ldr	r3, [r1, #120]	; 0x78
 80106dc:	429d      	cmp	r5, r3
 80106de:	d1f9      	bne.n	80106d4 <rmw_destroy_node+0x90>
 80106e0:	317c      	adds	r1, #124	; 0x7c
 80106e2:	4638      	mov	r0, r7
 80106e4:	f002 fa7a 	bl	8012bdc <rmw_destroy_client>
 80106e8:	2801      	cmp	r0, #1
 80106ea:	4606      	mov	r6, r0
 80106ec:	d0d2      	beq.n	8010694 <rmw_destroy_node+0x50>
 80106ee:	2c00      	cmp	r4, #0
 80106f0:	d1f1      	bne.n	80106d6 <rmw_destroy_node+0x92>
 80106f2:	6928      	ldr	r0, [r5, #16]
 80106f4:	696a      	ldr	r2, [r5, #20]
 80106f6:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80106fa:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80106fe:	6819      	ldr	r1, [r3, #0]
 8010700:	f7fb fc02 	bl	800bf08 <uxr_buffer_delete_entity>
 8010704:	4602      	mov	r2, r0
 8010706:	6928      	ldr	r0, [r5, #16]
 8010708:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801070c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010710:	f7fa fabe 	bl	800ac90 <run_xrce_session>
 8010714:	2800      	cmp	r0, #0
 8010716:	bf08      	it	eq
 8010718:	2602      	moveq	r6, #2
 801071a:	4638      	mov	r0, r7
 801071c:	f7fa f9ec 	bl	800aaf8 <rmw_uxrce_fini_node_memory>
 8010720:	4630      	mov	r0, r6
 8010722:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010724:	4626      	mov	r6, r4
 8010726:	e7a6      	b.n	8010676 <rmw_destroy_node+0x32>
 8010728:	08014b8c 	.word	0x08014b8c
 801072c:	200158e4 	.word	0x200158e4
 8010730:	20015924 	.word	0x20015924
 8010734:	200158f4 	.word	0x200158f4
 8010738:	20011008 	.word	0x20011008

0801073c <rmw_node_get_graph_guard_condition>:
 801073c:	6843      	ldr	r3, [r0, #4]
 801073e:	6918      	ldr	r0, [r3, #16]
 8010740:	f500 705a 	add.w	r0, r0, #872	; 0x368
 8010744:	4770      	bx	lr
 8010746:	bf00      	nop

08010748 <rmw_destroy_service>:
 8010748:	b570      	push	{r4, r5, r6, lr}
 801074a:	b128      	cbz	r0, 8010758 <rmw_destroy_service+0x10>
 801074c:	4604      	mov	r4, r0
 801074e:	6800      	ldr	r0, [r0, #0]
 8010750:	460d      	mov	r5, r1
 8010752:	f7fa fb1d 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 8010756:	b910      	cbnz	r0, 801075e <rmw_destroy_service+0x16>
 8010758:	2401      	movs	r4, #1
 801075a:	4620      	mov	r0, r4
 801075c:	bd70      	pop	{r4, r5, r6, pc}
 801075e:	6863      	ldr	r3, [r4, #4]
 8010760:	2b00      	cmp	r3, #0
 8010762:	d0f9      	beq.n	8010758 <rmw_destroy_service+0x10>
 8010764:	2d00      	cmp	r5, #0
 8010766:	d0f7      	beq.n	8010758 <rmw_destroy_service+0x10>
 8010768:	6828      	ldr	r0, [r5, #0]
 801076a:	f7fa fb11 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 801076e:	2800      	cmp	r0, #0
 8010770:	d0f2      	beq.n	8010758 <rmw_destroy_service+0x10>
 8010772:	686e      	ldr	r6, [r5, #4]
 8010774:	2e00      	cmp	r6, #0
 8010776:	d0ef      	beq.n	8010758 <rmw_destroy_service+0x10>
 8010778:	6864      	ldr	r4, [r4, #4]
 801077a:	6932      	ldr	r2, [r6, #16]
 801077c:	6920      	ldr	r0, [r4, #16]
 801077e:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010782:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010786:	6819      	ldr	r1, [r3, #0]
 8010788:	f001 f882 	bl	8011890 <uxr_buffer_cancel_data>
 801078c:	4602      	mov	r2, r0
 801078e:	6920      	ldr	r0, [r4, #16]
 8010790:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8010794:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010798:	f7fa fa7a 	bl	800ac90 <run_xrce_session>
 801079c:	6920      	ldr	r0, [r4, #16]
 801079e:	6932      	ldr	r2, [r6, #16]
 80107a0:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 80107a4:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80107a8:	6819      	ldr	r1, [r3, #0]
 80107aa:	f7fb fbad 	bl	800bf08 <uxr_buffer_delete_entity>
 80107ae:	4602      	mov	r2, r0
 80107b0:	6920      	ldr	r0, [r4, #16]
 80107b2:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 80107b6:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 80107ba:	f7fa fa69 	bl	800ac90 <run_xrce_session>
 80107be:	2800      	cmp	r0, #0
 80107c0:	4628      	mov	r0, r5
 80107c2:	bf14      	ite	ne
 80107c4:	2400      	movne	r4, #0
 80107c6:	2402      	moveq	r4, #2
 80107c8:	f7fa f9da 	bl	800ab80 <rmw_uxrce_fini_service_memory>
 80107cc:	e7c5      	b.n	801075a <rmw_destroy_service+0x12>
 80107ce:	bf00      	nop

080107d0 <rmw_destroy_subscription>:
 80107d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80107d2:	b128      	cbz	r0, 80107e0 <rmw_destroy_subscription+0x10>
 80107d4:	4604      	mov	r4, r0
 80107d6:	6800      	ldr	r0, [r0, #0]
 80107d8:	460d      	mov	r5, r1
 80107da:	f7fa fad9 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 80107de:	b910      	cbnz	r0, 80107e6 <rmw_destroy_subscription+0x16>
 80107e0:	2401      	movs	r4, #1
 80107e2:	4620      	mov	r0, r4
 80107e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80107e6:	6863      	ldr	r3, [r4, #4]
 80107e8:	2b00      	cmp	r3, #0
 80107ea:	d0f9      	beq.n	80107e0 <rmw_destroy_subscription+0x10>
 80107ec:	2d00      	cmp	r5, #0
 80107ee:	d0f7      	beq.n	80107e0 <rmw_destroy_subscription+0x10>
 80107f0:	6828      	ldr	r0, [r5, #0]
 80107f2:	f7fa facd 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 80107f6:	2800      	cmp	r0, #0
 80107f8:	d0f2      	beq.n	80107e0 <rmw_destroy_subscription+0x10>
 80107fa:	686c      	ldr	r4, [r5, #4]
 80107fc:	2c00      	cmp	r4, #0
 80107fe:	d0ef      	beq.n	80107e0 <rmw_destroy_subscription+0x10>
 8010800:	6a26      	ldr	r6, [r4, #32]
 8010802:	6962      	ldr	r2, [r4, #20]
 8010804:	6930      	ldr	r0, [r6, #16]
 8010806:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 801080a:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 801080e:	6819      	ldr	r1, [r3, #0]
 8010810:	f001 f83e 	bl	8011890 <uxr_buffer_cancel_data>
 8010814:	4602      	mov	r2, r0
 8010816:	6930      	ldr	r0, [r6, #16]
 8010818:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 801081c:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8010820:	f7fa fa36 	bl	800ac90 <run_xrce_session>
 8010824:	69e0      	ldr	r0, [r4, #28]
 8010826:	f7ff fe59 	bl	80104dc <destroy_topic>
 801082a:	6a23      	ldr	r3, [r4, #32]
 801082c:	6962      	ldr	r2, [r4, #20]
 801082e:	6918      	ldr	r0, [r3, #16]
 8010830:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8010834:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8010838:	6819      	ldr	r1, [r3, #0]
 801083a:	f7fb fb65 	bl	800bf08 <uxr_buffer_delete_entity>
 801083e:	6a23      	ldr	r3, [r4, #32]
 8010840:	6922      	ldr	r2, [r4, #16]
 8010842:	691b      	ldr	r3, [r3, #16]
 8010844:	f8d3 1388 	ldr.w	r1, [r3, #904]	; 0x388
 8010848:	4604      	mov	r4, r0
 801084a:	6809      	ldr	r1, [r1, #0]
 801084c:	f503 7028 	add.w	r0, r3, #672	; 0x2a0
 8010850:	f7fb fb5a 	bl	800bf08 <uxr_buffer_delete_entity>
 8010854:	6937      	ldr	r7, [r6, #16]
 8010856:	4622      	mov	r2, r4
 8010858:	f8d7 3390 	ldr.w	r3, [r7, #912]	; 0x390
 801085c:	f8d7 1388 	ldr.w	r1, [r7, #904]	; 0x388
 8010860:	4604      	mov	r4, r0
 8010862:	4638      	mov	r0, r7
 8010864:	f7fa fa14 	bl	800ac90 <run_xrce_session>
 8010868:	6936      	ldr	r6, [r6, #16]
 801086a:	4622      	mov	r2, r4
 801086c:	f8d6 3390 	ldr.w	r3, [r6, #912]	; 0x390
 8010870:	f8d6 1388 	ldr.w	r1, [r6, #904]	; 0x388
 8010874:	4604      	mov	r4, r0
 8010876:	4630      	mov	r0, r6
 8010878:	f7fa fa0a 	bl	800ac90 <run_xrce_session>
 801087c:	b12c      	cbz	r4, 801088a <rmw_destroy_subscription+0xba>
 801087e:	b120      	cbz	r0, 801088a <rmw_destroy_subscription+0xba>
 8010880:	2400      	movs	r4, #0
 8010882:	4628      	mov	r0, r5
 8010884:	f7fa f966 	bl	800ab54 <rmw_uxrce_fini_subscription_memory>
 8010888:	e7ab      	b.n	80107e2 <rmw_destroy_subscription+0x12>
 801088a:	2402      	movs	r4, #2
 801088c:	e7f9      	b.n	8010882 <rmw_destroy_subscription+0xb2>
 801088e:	bf00      	nop

08010890 <rmw_uxrce_transport_init>:
 8010890:	b508      	push	{r3, lr}
 8010892:	b108      	cbz	r0, 8010898 <rmw_uxrce_transport_init+0x8>
 8010894:	f100 0210 	add.w	r2, r0, #16
 8010898:	b139      	cbz	r1, 80108aa <rmw_uxrce_transport_init+0x1a>
 801089a:	6949      	ldr	r1, [r1, #20]
 801089c:	4610      	mov	r0, r2
 801089e:	f000 fa77 	bl	8010d90 <uxr_init_custom_transport>
 80108a2:	f080 0001 	eor.w	r0, r0, #1
 80108a6:	b2c0      	uxtb	r0, r0
 80108a8:	bd08      	pop	{r3, pc}
 80108aa:	4b04      	ldr	r3, [pc, #16]	; (80108bc <rmw_uxrce_transport_init+0x2c>)
 80108ac:	4610      	mov	r0, r2
 80108ae:	6859      	ldr	r1, [r3, #4]
 80108b0:	f000 fa6e 	bl	8010d90 <uxr_init_custom_transport>
 80108b4:	f080 0001 	eor.w	r0, r0, #1
 80108b8:	b2c0      	uxtb	r0, r0
 80108ba:	bd08      	pop	{r3, pc}
 80108bc:	20010fec 	.word	0x20010fec

080108c0 <rmw_uros_epoch_nanos>:
 80108c0:	4b05      	ldr	r3, [pc, #20]	; (80108d8 <rmw_uros_epoch_nanos+0x18>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	b123      	cbz	r3, 80108d0 <rmw_uros_epoch_nanos+0x10>
 80108c6:	6898      	ldr	r0, [r3, #8]
 80108c8:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 80108cc:	f7fb bdba 	b.w	800c444 <uxr_epoch_nanos>
 80108d0:	2000      	movs	r0, #0
 80108d2:	2100      	movs	r1, #0
 80108d4:	4770      	bx	lr
 80108d6:	bf00      	nop
 80108d8:	20015904 	.word	0x20015904

080108dc <rosidl_typesupport_c__get_message_typesupport_handle_function>:
 80108dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108e0:	6805      	ldr	r5, [r0, #0]
 80108e2:	4604      	mov	r4, r0
 80108e4:	4628      	mov	r0, r5
 80108e6:	460e      	mov	r6, r1
 80108e8:	f7ef fc72 	bl	80001d0 <strcmp>
 80108ec:	b1c8      	cbz	r0, 8010922 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x46>
 80108ee:	4b11      	ldr	r3, [pc, #68]	; (8010934 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x58>)
 80108f0:	681b      	ldr	r3, [r3, #0]
 80108f2:	429d      	cmp	r5, r3
 80108f4:	d112      	bne.n	801091c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 80108f6:	f8d4 8004 	ldr.w	r8, [r4, #4]
 80108fa:	f8d8 4000 	ldr.w	r4, [r8]
 80108fe:	b16c      	cbz	r4, 801091c <rosidl_typesupport_c__get_message_typesupport_handle_function+0x40>
 8010900:	f8d8 5008 	ldr.w	r5, [r8, #8]
 8010904:	2700      	movs	r7, #0
 8010906:	3d04      	subs	r5, #4
 8010908:	f855 0f04 	ldr.w	r0, [r5, #4]!
 801090c:	4631      	mov	r1, r6
 801090e:	f7ef fc5f 	bl	80001d0 <strcmp>
 8010912:	00bb      	lsls	r3, r7, #2
 8010914:	b140      	cbz	r0, 8010928 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x4c>
 8010916:	3701      	adds	r7, #1
 8010918:	42bc      	cmp	r4, r7
 801091a:	d1f5      	bne.n	8010908 <rosidl_typesupport_c__get_message_typesupport_handle_function+0x2c>
 801091c:	2000      	movs	r0, #0
 801091e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010922:	4620      	mov	r0, r4
 8010924:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010928:	f8d8 2010 	ldr.w	r2, [r8, #16]
 801092c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010930:	58d3      	ldr	r3, [r2, r3]
 8010932:	4718      	bx	r3
 8010934:	200000ac 	.word	0x200000ac

08010938 <std_msgs__msg__Int32__init>:
 8010938:	3800      	subs	r0, #0
 801093a:	bf18      	it	ne
 801093c:	2001      	movne	r0, #1
 801093e:	4770      	bx	lr

08010940 <std_msgs__msg__Int32__fini>:
 8010940:	4770      	bx	lr
 8010942:	bf00      	nop

08010944 <ucdr_serialize_endian_array_char>:
 8010944:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010948:	4619      	mov	r1, r3
 801094a:	461f      	mov	r7, r3
 801094c:	4605      	mov	r5, r0
 801094e:	4690      	mov	r8, r2
 8010950:	f7fb fa16 	bl	800bd80 <ucdr_check_buffer_available_for>
 8010954:	b9e0      	cbnz	r0, 8010990 <ucdr_serialize_endian_array_char+0x4c>
 8010956:	463e      	mov	r6, r7
 8010958:	e009      	b.n	801096e <ucdr_serialize_endian_array_char+0x2a>
 801095a:	68a8      	ldr	r0, [r5, #8]
 801095c:	f002 fe26 	bl	80135ac <memcpy>
 8010960:	68ab      	ldr	r3, [r5, #8]
 8010962:	6928      	ldr	r0, [r5, #16]
 8010964:	4423      	add	r3, r4
 8010966:	4420      	add	r0, r4
 8010968:	1b36      	subs	r6, r6, r4
 801096a:	60ab      	str	r3, [r5, #8]
 801096c:	6128      	str	r0, [r5, #16]
 801096e:	4631      	mov	r1, r6
 8010970:	2201      	movs	r2, #1
 8010972:	4628      	mov	r0, r5
 8010974:	f7fb fa8c 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 8010978:	1bb9      	subs	r1, r7, r6
 801097a:	4441      	add	r1, r8
 801097c:	4604      	mov	r4, r0
 801097e:	4602      	mov	r2, r0
 8010980:	2800      	cmp	r0, #0
 8010982:	d1ea      	bne.n	801095a <ucdr_serialize_endian_array_char+0x16>
 8010984:	2301      	movs	r3, #1
 8010986:	7da8      	ldrb	r0, [r5, #22]
 8010988:	756b      	strb	r3, [r5, #21]
 801098a:	4058      	eors	r0, r3
 801098c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010990:	463a      	mov	r2, r7
 8010992:	68a8      	ldr	r0, [r5, #8]
 8010994:	4641      	mov	r1, r8
 8010996:	f002 fe09 	bl	80135ac <memcpy>
 801099a:	68aa      	ldr	r2, [r5, #8]
 801099c:	692b      	ldr	r3, [r5, #16]
 801099e:	443a      	add	r2, r7
 80109a0:	443b      	add	r3, r7
 80109a2:	60aa      	str	r2, [r5, #8]
 80109a4:	612b      	str	r3, [r5, #16]
 80109a6:	e7ed      	b.n	8010984 <ucdr_serialize_endian_array_char+0x40>

080109a8 <ucdr_deserialize_endian_array_char>:
 80109a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109ac:	4619      	mov	r1, r3
 80109ae:	461f      	mov	r7, r3
 80109b0:	4605      	mov	r5, r0
 80109b2:	4690      	mov	r8, r2
 80109b4:	f7fb f9e4 	bl	800bd80 <ucdr_check_buffer_available_for>
 80109b8:	b9e0      	cbnz	r0, 80109f4 <ucdr_deserialize_endian_array_char+0x4c>
 80109ba:	463e      	mov	r6, r7
 80109bc:	e009      	b.n	80109d2 <ucdr_deserialize_endian_array_char+0x2a>
 80109be:	68a9      	ldr	r1, [r5, #8]
 80109c0:	f002 fdf4 	bl	80135ac <memcpy>
 80109c4:	68ab      	ldr	r3, [r5, #8]
 80109c6:	6928      	ldr	r0, [r5, #16]
 80109c8:	4423      	add	r3, r4
 80109ca:	4420      	add	r0, r4
 80109cc:	1b36      	subs	r6, r6, r4
 80109ce:	60ab      	str	r3, [r5, #8]
 80109d0:	6128      	str	r0, [r5, #16]
 80109d2:	2201      	movs	r2, #1
 80109d4:	4631      	mov	r1, r6
 80109d6:	4628      	mov	r0, r5
 80109d8:	f7fb fa5a 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 80109dc:	4604      	mov	r4, r0
 80109de:	1bb8      	subs	r0, r7, r6
 80109e0:	4440      	add	r0, r8
 80109e2:	4622      	mov	r2, r4
 80109e4:	2c00      	cmp	r4, #0
 80109e6:	d1ea      	bne.n	80109be <ucdr_deserialize_endian_array_char+0x16>
 80109e8:	2301      	movs	r3, #1
 80109ea:	7da8      	ldrb	r0, [r5, #22]
 80109ec:	756b      	strb	r3, [r5, #21]
 80109ee:	4058      	eors	r0, r3
 80109f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109f4:	463a      	mov	r2, r7
 80109f6:	68a9      	ldr	r1, [r5, #8]
 80109f8:	4640      	mov	r0, r8
 80109fa:	f002 fdd7 	bl	80135ac <memcpy>
 80109fe:	68aa      	ldr	r2, [r5, #8]
 8010a00:	692b      	ldr	r3, [r5, #16]
 8010a02:	443a      	add	r2, r7
 8010a04:	443b      	add	r3, r7
 8010a06:	60aa      	str	r2, [r5, #8]
 8010a08:	612b      	str	r3, [r5, #16]
 8010a0a:	e7ed      	b.n	80109e8 <ucdr_deserialize_endian_array_char+0x40>

08010a0c <ucdr_serialize_array_uint8_t>:
 8010a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a10:	4688      	mov	r8, r1
 8010a12:	4611      	mov	r1, r2
 8010a14:	4617      	mov	r7, r2
 8010a16:	4605      	mov	r5, r0
 8010a18:	f7fb f9b2 	bl	800bd80 <ucdr_check_buffer_available_for>
 8010a1c:	b9e0      	cbnz	r0, 8010a58 <ucdr_serialize_array_uint8_t+0x4c>
 8010a1e:	463e      	mov	r6, r7
 8010a20:	e009      	b.n	8010a36 <ucdr_serialize_array_uint8_t+0x2a>
 8010a22:	68a8      	ldr	r0, [r5, #8]
 8010a24:	f002 fdc2 	bl	80135ac <memcpy>
 8010a28:	68aa      	ldr	r2, [r5, #8]
 8010a2a:	692b      	ldr	r3, [r5, #16]
 8010a2c:	4422      	add	r2, r4
 8010a2e:	4423      	add	r3, r4
 8010a30:	1b36      	subs	r6, r6, r4
 8010a32:	60aa      	str	r2, [r5, #8]
 8010a34:	612b      	str	r3, [r5, #16]
 8010a36:	4631      	mov	r1, r6
 8010a38:	2201      	movs	r2, #1
 8010a3a:	4628      	mov	r0, r5
 8010a3c:	f7fb fa28 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 8010a40:	1bb9      	subs	r1, r7, r6
 8010a42:	4441      	add	r1, r8
 8010a44:	4604      	mov	r4, r0
 8010a46:	4602      	mov	r2, r0
 8010a48:	2800      	cmp	r0, #0
 8010a4a:	d1ea      	bne.n	8010a22 <ucdr_serialize_array_uint8_t+0x16>
 8010a4c:	2301      	movs	r3, #1
 8010a4e:	7da8      	ldrb	r0, [r5, #22]
 8010a50:	756b      	strb	r3, [r5, #21]
 8010a52:	4058      	eors	r0, r3
 8010a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a58:	463a      	mov	r2, r7
 8010a5a:	68a8      	ldr	r0, [r5, #8]
 8010a5c:	4641      	mov	r1, r8
 8010a5e:	f002 fda5 	bl	80135ac <memcpy>
 8010a62:	68aa      	ldr	r2, [r5, #8]
 8010a64:	692b      	ldr	r3, [r5, #16]
 8010a66:	443a      	add	r2, r7
 8010a68:	443b      	add	r3, r7
 8010a6a:	60aa      	str	r2, [r5, #8]
 8010a6c:	612b      	str	r3, [r5, #16]
 8010a6e:	e7ed      	b.n	8010a4c <ucdr_serialize_array_uint8_t+0x40>

08010a70 <ucdr_serialize_endian_array_uint8_t>:
 8010a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a74:	4619      	mov	r1, r3
 8010a76:	461f      	mov	r7, r3
 8010a78:	4605      	mov	r5, r0
 8010a7a:	4690      	mov	r8, r2
 8010a7c:	f7fb f980 	bl	800bd80 <ucdr_check_buffer_available_for>
 8010a80:	b9e0      	cbnz	r0, 8010abc <ucdr_serialize_endian_array_uint8_t+0x4c>
 8010a82:	463e      	mov	r6, r7
 8010a84:	e009      	b.n	8010a9a <ucdr_serialize_endian_array_uint8_t+0x2a>
 8010a86:	68a8      	ldr	r0, [r5, #8]
 8010a88:	f002 fd90 	bl	80135ac <memcpy>
 8010a8c:	68ab      	ldr	r3, [r5, #8]
 8010a8e:	6928      	ldr	r0, [r5, #16]
 8010a90:	4423      	add	r3, r4
 8010a92:	4420      	add	r0, r4
 8010a94:	1b36      	subs	r6, r6, r4
 8010a96:	60ab      	str	r3, [r5, #8]
 8010a98:	6128      	str	r0, [r5, #16]
 8010a9a:	4631      	mov	r1, r6
 8010a9c:	2201      	movs	r2, #1
 8010a9e:	4628      	mov	r0, r5
 8010aa0:	f7fb f9f6 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 8010aa4:	1bb9      	subs	r1, r7, r6
 8010aa6:	4441      	add	r1, r8
 8010aa8:	4604      	mov	r4, r0
 8010aaa:	4602      	mov	r2, r0
 8010aac:	2800      	cmp	r0, #0
 8010aae:	d1ea      	bne.n	8010a86 <ucdr_serialize_endian_array_uint8_t+0x16>
 8010ab0:	2301      	movs	r3, #1
 8010ab2:	7da8      	ldrb	r0, [r5, #22]
 8010ab4:	756b      	strb	r3, [r5, #21]
 8010ab6:	4058      	eors	r0, r3
 8010ab8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010abc:	463a      	mov	r2, r7
 8010abe:	68a8      	ldr	r0, [r5, #8]
 8010ac0:	4641      	mov	r1, r8
 8010ac2:	f002 fd73 	bl	80135ac <memcpy>
 8010ac6:	68aa      	ldr	r2, [r5, #8]
 8010ac8:	692b      	ldr	r3, [r5, #16]
 8010aca:	443a      	add	r2, r7
 8010acc:	443b      	add	r3, r7
 8010ace:	60aa      	str	r2, [r5, #8]
 8010ad0:	612b      	str	r3, [r5, #16]
 8010ad2:	e7ed      	b.n	8010ab0 <ucdr_serialize_endian_array_uint8_t+0x40>

08010ad4 <ucdr_deserialize_array_uint8_t>:
 8010ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010ad8:	4688      	mov	r8, r1
 8010ada:	4611      	mov	r1, r2
 8010adc:	4617      	mov	r7, r2
 8010ade:	4605      	mov	r5, r0
 8010ae0:	f7fb f94e 	bl	800bd80 <ucdr_check_buffer_available_for>
 8010ae4:	b9e0      	cbnz	r0, 8010b20 <ucdr_deserialize_array_uint8_t+0x4c>
 8010ae6:	463e      	mov	r6, r7
 8010ae8:	e009      	b.n	8010afe <ucdr_deserialize_array_uint8_t+0x2a>
 8010aea:	68a9      	ldr	r1, [r5, #8]
 8010aec:	f002 fd5e 	bl	80135ac <memcpy>
 8010af0:	68aa      	ldr	r2, [r5, #8]
 8010af2:	692b      	ldr	r3, [r5, #16]
 8010af4:	4422      	add	r2, r4
 8010af6:	4423      	add	r3, r4
 8010af8:	1b36      	subs	r6, r6, r4
 8010afa:	60aa      	str	r2, [r5, #8]
 8010afc:	612b      	str	r3, [r5, #16]
 8010afe:	2201      	movs	r2, #1
 8010b00:	4631      	mov	r1, r6
 8010b02:	4628      	mov	r0, r5
 8010b04:	f7fb f9c4 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 8010b08:	4604      	mov	r4, r0
 8010b0a:	1bb8      	subs	r0, r7, r6
 8010b0c:	4440      	add	r0, r8
 8010b0e:	4622      	mov	r2, r4
 8010b10:	2c00      	cmp	r4, #0
 8010b12:	d1ea      	bne.n	8010aea <ucdr_deserialize_array_uint8_t+0x16>
 8010b14:	2301      	movs	r3, #1
 8010b16:	7da8      	ldrb	r0, [r5, #22]
 8010b18:	756b      	strb	r3, [r5, #21]
 8010b1a:	4058      	eors	r0, r3
 8010b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b20:	463a      	mov	r2, r7
 8010b22:	68a9      	ldr	r1, [r5, #8]
 8010b24:	4640      	mov	r0, r8
 8010b26:	f002 fd41 	bl	80135ac <memcpy>
 8010b2a:	68aa      	ldr	r2, [r5, #8]
 8010b2c:	692b      	ldr	r3, [r5, #16]
 8010b2e:	443a      	add	r2, r7
 8010b30:	443b      	add	r3, r7
 8010b32:	60aa      	str	r2, [r5, #8]
 8010b34:	612b      	str	r3, [r5, #16]
 8010b36:	e7ed      	b.n	8010b14 <ucdr_deserialize_array_uint8_t+0x40>

08010b38 <ucdr_deserialize_endian_array_uint8_t>:
 8010b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b3c:	4619      	mov	r1, r3
 8010b3e:	461f      	mov	r7, r3
 8010b40:	4605      	mov	r5, r0
 8010b42:	4690      	mov	r8, r2
 8010b44:	f7fb f91c 	bl	800bd80 <ucdr_check_buffer_available_for>
 8010b48:	b9e0      	cbnz	r0, 8010b84 <ucdr_deserialize_endian_array_uint8_t+0x4c>
 8010b4a:	463e      	mov	r6, r7
 8010b4c:	e009      	b.n	8010b62 <ucdr_deserialize_endian_array_uint8_t+0x2a>
 8010b4e:	68a9      	ldr	r1, [r5, #8]
 8010b50:	f002 fd2c 	bl	80135ac <memcpy>
 8010b54:	68ab      	ldr	r3, [r5, #8]
 8010b56:	6928      	ldr	r0, [r5, #16]
 8010b58:	4423      	add	r3, r4
 8010b5a:	4420      	add	r0, r4
 8010b5c:	1b36      	subs	r6, r6, r4
 8010b5e:	60ab      	str	r3, [r5, #8]
 8010b60:	6128      	str	r0, [r5, #16]
 8010b62:	2201      	movs	r2, #1
 8010b64:	4631      	mov	r1, r6
 8010b66:	4628      	mov	r0, r5
 8010b68:	f7fb f992 	bl	800be90 <ucdr_check_final_buffer_behavior_array>
 8010b6c:	4604      	mov	r4, r0
 8010b6e:	1bb8      	subs	r0, r7, r6
 8010b70:	4440      	add	r0, r8
 8010b72:	4622      	mov	r2, r4
 8010b74:	2c00      	cmp	r4, #0
 8010b76:	d1ea      	bne.n	8010b4e <ucdr_deserialize_endian_array_uint8_t+0x16>
 8010b78:	2301      	movs	r3, #1
 8010b7a:	7da8      	ldrb	r0, [r5, #22]
 8010b7c:	756b      	strb	r3, [r5, #21]
 8010b7e:	4058      	eors	r0, r3
 8010b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010b84:	463a      	mov	r2, r7
 8010b86:	68a9      	ldr	r1, [r5, #8]
 8010b88:	4640      	mov	r0, r8
 8010b8a:	f002 fd0f 	bl	80135ac <memcpy>
 8010b8e:	68aa      	ldr	r2, [r5, #8]
 8010b90:	692b      	ldr	r3, [r5, #16]
 8010b92:	443a      	add	r2, r7
 8010b94:	443b      	add	r3, r7
 8010b96:	60aa      	str	r2, [r5, #8]
 8010b98:	612b      	str	r3, [r5, #16]
 8010b9a:	e7ed      	b.n	8010b78 <ucdr_deserialize_endian_array_uint8_t+0x40>

08010b9c <ucdr_serialize_sequence_char>:
 8010b9c:	b570      	push	{r4, r5, r6, lr}
 8010b9e:	4615      	mov	r5, r2
 8010ba0:	460e      	mov	r6, r1
 8010ba2:	7d01      	ldrb	r1, [r0, #20]
 8010ba4:	4604      	mov	r4, r0
 8010ba6:	f7fa fc41 	bl	800b42c <ucdr_serialize_endian_uint32_t>
 8010baa:	b90d      	cbnz	r5, 8010bb0 <ucdr_serialize_sequence_char+0x14>
 8010bac:	2001      	movs	r0, #1
 8010bae:	bd70      	pop	{r4, r5, r6, pc}
 8010bb0:	7d21      	ldrb	r1, [r4, #20]
 8010bb2:	462b      	mov	r3, r5
 8010bb4:	4632      	mov	r2, r6
 8010bb6:	4620      	mov	r0, r4
 8010bb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010bbc:	f7ff bec2 	b.w	8010944 <ucdr_serialize_endian_array_char>

08010bc0 <ucdr_deserialize_sequence_char>:
 8010bc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010bc4:	461d      	mov	r5, r3
 8010bc6:	4616      	mov	r6, r2
 8010bc8:	460f      	mov	r7, r1
 8010bca:	461a      	mov	r2, r3
 8010bcc:	7d01      	ldrb	r1, [r0, #20]
 8010bce:	4604      	mov	r4, r0
 8010bd0:	f7fa fd54 	bl	800b67c <ucdr_deserialize_endian_uint32_t>
 8010bd4:	682b      	ldr	r3, [r5, #0]
 8010bd6:	429e      	cmp	r6, r3
 8010bd8:	bf3c      	itt	cc
 8010bda:	2201      	movcc	r2, #1
 8010bdc:	75a2      	strbcc	r2, [r4, #22]
 8010bde:	b913      	cbnz	r3, 8010be6 <ucdr_deserialize_sequence_char+0x26>
 8010be0:	2001      	movs	r0, #1
 8010be2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010be6:	7d21      	ldrb	r1, [r4, #20]
 8010be8:	463a      	mov	r2, r7
 8010bea:	4620      	mov	r0, r4
 8010bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010bf0:	f7ff beda 	b.w	80109a8 <ucdr_deserialize_endian_array_char>

08010bf4 <ucdr_serialize_sequence_uint8_t>:
 8010bf4:	b570      	push	{r4, r5, r6, lr}
 8010bf6:	4615      	mov	r5, r2
 8010bf8:	460e      	mov	r6, r1
 8010bfa:	7d01      	ldrb	r1, [r0, #20]
 8010bfc:	4604      	mov	r4, r0
 8010bfe:	f7fa fc15 	bl	800b42c <ucdr_serialize_endian_uint32_t>
 8010c02:	b90d      	cbnz	r5, 8010c08 <ucdr_serialize_sequence_uint8_t+0x14>
 8010c04:	2001      	movs	r0, #1
 8010c06:	bd70      	pop	{r4, r5, r6, pc}
 8010c08:	7d21      	ldrb	r1, [r4, #20]
 8010c0a:	462b      	mov	r3, r5
 8010c0c:	4632      	mov	r2, r6
 8010c0e:	4620      	mov	r0, r4
 8010c10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c14:	f7ff bf2c 	b.w	8010a70 <ucdr_serialize_endian_array_uint8_t>

08010c18 <ucdr_deserialize_sequence_uint8_t>:
 8010c18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c1c:	461d      	mov	r5, r3
 8010c1e:	4616      	mov	r6, r2
 8010c20:	460f      	mov	r7, r1
 8010c22:	461a      	mov	r2, r3
 8010c24:	7d01      	ldrb	r1, [r0, #20]
 8010c26:	4604      	mov	r4, r0
 8010c28:	f7fa fd28 	bl	800b67c <ucdr_deserialize_endian_uint32_t>
 8010c2c:	682b      	ldr	r3, [r5, #0]
 8010c2e:	429e      	cmp	r6, r3
 8010c30:	bf3c      	itt	cc
 8010c32:	2201      	movcc	r2, #1
 8010c34:	75a2      	strbcc	r2, [r4, #22]
 8010c36:	b913      	cbnz	r3, 8010c3e <ucdr_deserialize_sequence_uint8_t+0x26>
 8010c38:	2001      	movs	r0, #1
 8010c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c3e:	7d21      	ldrb	r1, [r4, #20]
 8010c40:	463a      	mov	r2, r7
 8010c42:	4620      	mov	r0, r4
 8010c44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8010c48:	f7ff bf76 	b.w	8010b38 <ucdr_deserialize_endian_array_uint8_t>

08010c4c <ucdr_serialize_string>:
 8010c4c:	b510      	push	{r4, lr}
 8010c4e:	b082      	sub	sp, #8
 8010c50:	4604      	mov	r4, r0
 8010c52:	4608      	mov	r0, r1
 8010c54:	9101      	str	r1, [sp, #4]
 8010c56:	f7ef fac5 	bl	80001e4 <strlen>
 8010c5a:	9901      	ldr	r1, [sp, #4]
 8010c5c:	1c42      	adds	r2, r0, #1
 8010c5e:	4620      	mov	r0, r4
 8010c60:	b002      	add	sp, #8
 8010c62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c66:	f7ff bf99 	b.w	8010b9c <ucdr_serialize_sequence_char>
 8010c6a:	bf00      	nop

08010c6c <ucdr_deserialize_string>:
 8010c6c:	b500      	push	{lr}
 8010c6e:	b083      	sub	sp, #12
 8010c70:	ab01      	add	r3, sp, #4
 8010c72:	f7ff ffa5 	bl	8010bc0 <ucdr_deserialize_sequence_char>
 8010c76:	b003      	add	sp, #12
 8010c78:	f85d fb04 	ldr.w	pc, [sp], #4

08010c7c <get_custom_error>:
 8010c7c:	4b01      	ldr	r3, [pc, #4]	; (8010c84 <get_custom_error+0x8>)
 8010c7e:	7818      	ldrb	r0, [r3, #0]
 8010c80:	4770      	bx	lr
 8010c82:	bf00      	nop
 8010c84:	20015a50 	.word	0x20015a50

08010c88 <recv_custom_msg>:
 8010c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010c8c:	4693      	mov	fp, r2
 8010c8e:	b089      	sub	sp, #36	; 0x24
 8010c90:	f890 2200 	ldrb.w	r2, [r0, #512]	; 0x200
 8010c94:	9305      	str	r3, [sp, #20]
 8010c96:	468a      	mov	sl, r1
 8010c98:	2100      	movs	r1, #0
 8010c9a:	4604      	mov	r4, r0
 8010c9c:	f88d 101e 	strb.w	r1, [sp, #30]
 8010ca0:	b322      	cbz	r2, 8010cec <recv_custom_msg+0x64>
 8010ca2:	f200 2902 	addw	r9, r0, #514	; 0x202
 8010ca6:	f10d 081f 	add.w	r8, sp, #31
 8010caa:	af05      	add	r7, sp, #20
 8010cac:	f10d 061e 	add.w	r6, sp, #30
 8010cb0:	f44f 7500 	mov.w	r5, #512	; 0x200
 8010cb4:	e002      	b.n	8010cbc <recv_custom_msg+0x34>
 8010cb6:	9b05      	ldr	r3, [sp, #20]
 8010cb8:	2b00      	cmp	r3, #0
 8010cba:	dd0f      	ble.n	8010cdc <recv_custom_msg+0x54>
 8010cbc:	f8d4 1274 	ldr.w	r1, [r4, #628]	; 0x274
 8010cc0:	4623      	mov	r3, r4
 8010cc2:	e9cd 7802 	strd	r7, r8, [sp, #8]
 8010cc6:	e9cd 5600 	strd	r5, r6, [sp]
 8010cca:	4622      	mov	r2, r4
 8010ccc:	4648      	mov	r0, r9
 8010cce:	f001 f8f3 	bl	8011eb8 <uxr_read_framed_msg>
 8010cd2:	2800      	cmp	r0, #0
 8010cd4:	d0ef      	beq.n	8010cb6 <recv_custom_msg+0x2e>
 8010cd6:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010cda:	b1b3      	cbz	r3, 8010d0a <recv_custom_msg+0x82>
 8010cdc:	4b0f      	ldr	r3, [pc, #60]	; (8010d1c <recv_custom_msg+0x94>)
 8010cde:	f89d 201f 	ldrb.w	r2, [sp, #31]
 8010ce2:	701a      	strb	r2, [r3, #0]
 8010ce4:	2000      	movs	r0, #0
 8010ce6:	b009      	add	sp, #36	; 0x24
 8010ce8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010cec:	f10d 021f 	add.w	r2, sp, #31
 8010cf0:	9200      	str	r2, [sp, #0]
 8010cf2:	f8d0 5274 	ldr.w	r5, [r0, #628]	; 0x274
 8010cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010cfa:	4601      	mov	r1, r0
 8010cfc:	47a8      	blx	r5
 8010cfe:	2800      	cmp	r0, #0
 8010d00:	d0ec      	beq.n	8010cdc <recv_custom_msg+0x54>
 8010d02:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d1e8      	bne.n	8010cdc <recv_custom_msg+0x54>
 8010d0a:	f8cb 0000 	str.w	r0, [fp]
 8010d0e:	2001      	movs	r0, #1
 8010d10:	f8ca 4000 	str.w	r4, [sl]
 8010d14:	b009      	add	sp, #36	; 0x24
 8010d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d1a:	bf00      	nop
 8010d1c:	20015a50 	.word	0x20015a50

08010d20 <send_custom_msg>:
 8010d20:	b530      	push	{r4, r5, lr}
 8010d22:	f890 4200 	ldrb.w	r4, [r0, #512]	; 0x200
 8010d26:	b087      	sub	sp, #28
 8010d28:	4615      	mov	r5, r2
 8010d2a:	b974      	cbnz	r4, 8010d4a <send_custom_msg+0x2a>
 8010d2c:	f8d0 4270 	ldr.w	r4, [r0, #624]	; 0x270
 8010d30:	f10d 0317 	add.w	r3, sp, #23
 8010d34:	47a0      	blx	r4
 8010d36:	b108      	cbz	r0, 8010d3c <send_custom_msg+0x1c>
 8010d38:	42a8      	cmp	r0, r5
 8010d3a:	d015      	beq.n	8010d68 <send_custom_msg+0x48>
 8010d3c:	4b0c      	ldr	r3, [pc, #48]	; (8010d70 <send_custom_msg+0x50>)
 8010d3e:	f89d 2017 	ldrb.w	r2, [sp, #23]
 8010d42:	701a      	strb	r2, [r3, #0]
 8010d44:	2000      	movs	r0, #0
 8010d46:	b007      	add	sp, #28
 8010d48:	bd30      	pop	{r4, r5, pc}
 8010d4a:	460b      	mov	r3, r1
 8010d4c:	2200      	movs	r2, #0
 8010d4e:	f10d 0117 	add.w	r1, sp, #23
 8010d52:	e9cd 2101 	strd	r2, r1, [sp, #4]
 8010d56:	4602      	mov	r2, r0
 8010d58:	f8d0 1270 	ldr.w	r1, [r0, #624]	; 0x270
 8010d5c:	9500      	str	r5, [sp, #0]
 8010d5e:	f200 2002 	addw	r0, r0, #514	; 0x202
 8010d62:	f000 feb1 	bl	8011ac8 <uxr_write_framed_msg>
 8010d66:	e7e6      	b.n	8010d36 <send_custom_msg+0x16>
 8010d68:	2001      	movs	r0, #1
 8010d6a:	b007      	add	sp, #28
 8010d6c:	bd30      	pop	{r4, r5, pc}
 8010d6e:	bf00      	nop
 8010d70:	20015a50 	.word	0x20015a50

08010d74 <uxr_set_custom_transport_callbacks>:
 8010d74:	b410      	push	{r4}
 8010d76:	9c01      	ldr	r4, [sp, #4]
 8010d78:	f8c0 4270 	str.w	r4, [r0, #624]	; 0x270
 8010d7c:	e9c0 239a 	strd	r2, r3, [r0, #616]	; 0x268
 8010d80:	9b02      	ldr	r3, [sp, #8]
 8010d82:	f880 1200 	strb.w	r1, [r0, #512]	; 0x200
 8010d86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010d8a:	f8c0 3274 	str.w	r3, [r0, #628]	; 0x274
 8010d8e:	4770      	bx	lr

08010d90 <uxr_init_custom_transport>:
 8010d90:	b538      	push	{r3, r4, r5, lr}
 8010d92:	f8d0 3268 	ldr.w	r3, [r0, #616]	; 0x268
 8010d96:	b303      	cbz	r3, 8010dda <uxr_init_custom_transport+0x4a>
 8010d98:	f8d0 226c 	ldr.w	r2, [r0, #620]	; 0x26c
 8010d9c:	4604      	mov	r4, r0
 8010d9e:	b1e2      	cbz	r2, 8010dda <uxr_init_custom_transport+0x4a>
 8010da0:	f8d0 2270 	ldr.w	r2, [r0, #624]	; 0x270
 8010da4:	b1ca      	cbz	r2, 8010dda <uxr_init_custom_transport+0x4a>
 8010da6:	f8d0 2274 	ldr.w	r2, [r0, #628]	; 0x274
 8010daa:	b1b2      	cbz	r2, 8010dda <uxr_init_custom_transport+0x4a>
 8010dac:	f8c0 128c 	str.w	r1, [r0, #652]	; 0x28c
 8010db0:	4798      	blx	r3
 8010db2:	4605      	mov	r5, r0
 8010db4:	b188      	cbz	r0, 8010dda <uxr_init_custom_transport+0x4a>
 8010db6:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8010dba:	b98b      	cbnz	r3, 8010de0 <uxr_init_custom_transport+0x50>
 8010dbc:	490b      	ldr	r1, [pc, #44]	; (8010dec <uxr_init_custom_transport+0x5c>)
 8010dbe:	4b0c      	ldr	r3, [pc, #48]	; (8010df0 <uxr_init_custom_transport+0x60>)
 8010dc0:	4a0c      	ldr	r2, [pc, #48]	; (8010df4 <uxr_init_custom_transport+0x64>)
 8010dc2:	f8c4 3280 	str.w	r3, [r4, #640]	; 0x280
 8010dc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8010dca:	e9c4 419e 	strd	r4, r1, [r4, #632]	; 0x278
 8010dce:	f8c4 2284 	str.w	r2, [r4, #644]	; 0x284
 8010dd2:	f8a4 3288 	strh.w	r3, [r4, #648]	; 0x288
 8010dd6:	4628      	mov	r0, r5
 8010dd8:	bd38      	pop	{r3, r4, r5, pc}
 8010dda:	2500      	movs	r5, #0
 8010ddc:	4628      	mov	r0, r5
 8010dde:	bd38      	pop	{r3, r4, r5, pc}
 8010de0:	2100      	movs	r1, #0
 8010de2:	f204 2002 	addw	r0, r4, #514	; 0x202
 8010de6:	f000 fe69 	bl	8011abc <uxr_init_framing_io>
 8010dea:	e7e7      	b.n	8010dbc <uxr_init_custom_transport+0x2c>
 8010dec:	08010d21 	.word	0x08010d21
 8010df0:	08010c89 	.word	0x08010c89
 8010df4:	08010c7d 	.word	0x08010c7d

08010df8 <uxr_close_custom_transport>:
 8010df8:	f8d0 326c 	ldr.w	r3, [r0, #620]	; 0x26c
 8010dfc:	4718      	bx	r3
 8010dfe:	bf00      	nop

08010e00 <uxr_init_input_best_effort_stream>:
 8010e00:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e04:	8003      	strh	r3, [r0, #0]
 8010e06:	4770      	bx	lr

08010e08 <uxr_reset_input_best_effort_stream>:
 8010e08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8010e0c:	8003      	strh	r3, [r0, #0]
 8010e0e:	4770      	bx	lr

08010e10 <uxr_receive_best_effort_message>:
 8010e10:	b538      	push	{r3, r4, r5, lr}
 8010e12:	4604      	mov	r4, r0
 8010e14:	8800      	ldrh	r0, [r0, #0]
 8010e16:	460d      	mov	r5, r1
 8010e18:	f000 fe38 	bl	8011a8c <uxr_seq_num_cmp>
 8010e1c:	4603      	mov	r3, r0
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	ea4f 70d0 	mov.w	r0, r0, lsr #31
 8010e24:	bfb8      	it	lt
 8010e26:	8025      	strhlt	r5, [r4, #0]
 8010e28:	bd38      	pop	{r3, r4, r5, pc}
 8010e2a:	bf00      	nop

08010e2c <on_full_input_buffer>:
 8010e2c:	b570      	push	{r4, r5, r6, lr}
 8010e2e:	4605      	mov	r5, r0
 8010e30:	460c      	mov	r4, r1
 8010e32:	682b      	ldr	r3, [r5, #0]
 8010e34:	6809      	ldr	r1, [r1, #0]
 8010e36:	8920      	ldrh	r0, [r4, #8]
 8010e38:	6862      	ldr	r2, [r4, #4]
 8010e3a:	fbb2 f2f0 	udiv	r2, r2, r0
 8010e3e:	eba3 0c01 	sub.w	ip, r3, r1
 8010e42:	fbbc fcf2 	udiv	ip, ip, r2
 8010e46:	f10c 0c01 	add.w	ip, ip, #1
 8010e4a:	fa1f f38c 	uxth.w	r3, ip
 8010e4e:	fbb3 f6f0 	udiv	r6, r3, r0
 8010e52:	fb00 3316 	mls	r3, r0, r6, r3
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	fb02 f303 	mul.w	r3, r2, r3
 8010e5c:	1d18      	adds	r0, r3, #4
 8010e5e:	4408      	add	r0, r1
 8010e60:	7d26      	ldrb	r6, [r4, #20]
 8010e62:	f850 2c04 	ldr.w	r2, [r0, #-4]
 8010e66:	b116      	cbz	r6, 8010e6e <on_full_input_buffer+0x42>
 8010e68:	2600      	movs	r6, #0
 8010e6a:	f840 6c04 	str.w	r6, [r0, #-4]
 8010e6e:	2a03      	cmp	r2, #3
 8010e70:	d801      	bhi.n	8010e76 <on_full_input_buffer+0x4a>
 8010e72:	2001      	movs	r0, #1
 8010e74:	bd70      	pop	{r4, r5, r6, pc}
 8010e76:	3308      	adds	r3, #8
 8010e78:	4419      	add	r1, r3
 8010e7a:	4628      	mov	r0, r5
 8010e7c:	692b      	ldr	r3, [r5, #16]
 8010e7e:	3a04      	subs	r2, #4
 8010e80:	f7fa ffca 	bl	800be18 <ucdr_init_buffer_origin>
 8010e84:	4628      	mov	r0, r5
 8010e86:	4903      	ldr	r1, [pc, #12]	; (8010e94 <on_full_input_buffer+0x68>)
 8010e88:	4622      	mov	r2, r4
 8010e8a:	f7fa ffa1 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 8010e8e:	2000      	movs	r0, #0
 8010e90:	bd70      	pop	{r4, r5, r6, pc}
 8010e92:	bf00      	nop
 8010e94:	08010e2d 	.word	0x08010e2d

08010e98 <uxr_init_input_reliable_stream>:
 8010e98:	b500      	push	{lr}
 8010e9a:	e9c0 1200 	strd	r1, r2, [r0]
 8010e9e:	f04f 0e00 	mov.w	lr, #0
 8010ea2:	9a01      	ldr	r2, [sp, #4]
 8010ea4:	8103      	strh	r3, [r0, #8]
 8010ea6:	6102      	str	r2, [r0, #16]
 8010ea8:	f880 e014 	strb.w	lr, [r0, #20]
 8010eac:	b1d3      	cbz	r3, 8010ee4 <uxr_init_input_reliable_stream+0x4c>
 8010eae:	f8c1 e000 	str.w	lr, [r1]
 8010eb2:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010eb6:	f1bc 0f01 	cmp.w	ip, #1
 8010eba:	d913      	bls.n	8010ee4 <uxr_init_input_reliable_stream+0x4c>
 8010ebc:	2301      	movs	r3, #1
 8010ebe:	fbb3 f1fc 	udiv	r1, r3, ip
 8010ec2:	fb0c 3111 	mls	r1, ip, r1, r3
 8010ec6:	b289      	uxth	r1, r1
 8010ec8:	6842      	ldr	r2, [r0, #4]
 8010eca:	fbb2 f2fc 	udiv	r2, r2, ip
 8010ece:	fb01 f202 	mul.w	r2, r1, r2
 8010ed2:	6801      	ldr	r1, [r0, #0]
 8010ed4:	f841 e002 	str.w	lr, [r1, r2]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8010ede:	b29b      	uxth	r3, r3
 8010ee0:	459c      	cmp	ip, r3
 8010ee2:	d8ec      	bhi.n	8010ebe <uxr_init_input_reliable_stream+0x26>
 8010ee4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010ee8:	60c3      	str	r3, [r0, #12]
 8010eea:	f85d fb04 	ldr.w	pc, [sp], #4
 8010eee:	bf00      	nop

08010ef0 <uxr_reset_input_reliable_stream>:
 8010ef0:	8901      	ldrh	r1, [r0, #8]
 8010ef2:	b1e9      	cbz	r1, 8010f30 <uxr_reset_input_reliable_stream+0x40>
 8010ef4:	f04f 0c00 	mov.w	ip, #0
 8010ef8:	b500      	push	{lr}
 8010efa:	4663      	mov	r3, ip
 8010efc:	46e6      	mov	lr, ip
 8010efe:	fbb3 f2f1 	udiv	r2, r3, r1
 8010f02:	fb01 3312 	mls	r3, r1, r2, r3
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	6842      	ldr	r2, [r0, #4]
 8010f0a:	fbb2 f2f1 	udiv	r2, r2, r1
 8010f0e:	fb02 f303 	mul.w	r3, r2, r3
 8010f12:	6802      	ldr	r2, [r0, #0]
 8010f14:	f842 e003 	str.w	lr, [r2, r3]
 8010f18:	f10c 0c01 	add.w	ip, ip, #1
 8010f1c:	8901      	ldrh	r1, [r0, #8]
 8010f1e:	fa1f f38c 	uxth.w	r3, ip
 8010f22:	4299      	cmp	r1, r3
 8010f24:	d8eb      	bhi.n	8010efe <uxr_reset_input_reliable_stream+0xe>
 8010f26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f2a:	60c3      	str	r3, [r0, #12]
 8010f2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8010f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8010f34:	60c3      	str	r3, [r0, #12]
 8010f36:	4770      	bx	lr

08010f38 <uxr_receive_reliable_message>:
 8010f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f3c:	4604      	mov	r4, r0
 8010f3e:	460d      	mov	r5, r1
 8010f40:	8901      	ldrh	r1, [r0, #8]
 8010f42:	8980      	ldrh	r0, [r0, #12]
 8010f44:	4690      	mov	r8, r2
 8010f46:	461f      	mov	r7, r3
 8010f48:	f000 fd98 	bl	8011a7c <uxr_seq_num_add>
 8010f4c:	4629      	mov	r1, r5
 8010f4e:	4606      	mov	r6, r0
 8010f50:	89a0      	ldrh	r0, [r4, #12]
 8010f52:	f000 fd9b 	bl	8011a8c <uxr_seq_num_cmp>
 8010f56:	2800      	cmp	r0, #0
 8010f58:	db0a      	blt.n	8010f70 <uxr_receive_reliable_message+0x38>
 8010f5a:	2600      	movs	r6, #0
 8010f5c:	89e0      	ldrh	r0, [r4, #14]
 8010f5e:	4629      	mov	r1, r5
 8010f60:	f000 fd94 	bl	8011a8c <uxr_seq_num_cmp>
 8010f64:	2800      	cmp	r0, #0
 8010f66:	da00      	bge.n	8010f6a <uxr_receive_reliable_message+0x32>
 8010f68:	81e5      	strh	r5, [r4, #14]
 8010f6a:	4630      	mov	r0, r6
 8010f6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010f70:	4630      	mov	r0, r6
 8010f72:	4629      	mov	r1, r5
 8010f74:	f000 fd8a 	bl	8011a8c <uxr_seq_num_cmp>
 8010f78:	2800      	cmp	r0, #0
 8010f7a:	dbee      	blt.n	8010f5a <uxr_receive_reliable_message+0x22>
 8010f7c:	6923      	ldr	r3, [r4, #16]
 8010f7e:	4640      	mov	r0, r8
 8010f80:	4798      	blx	r3
 8010f82:	2101      	movs	r1, #1
 8010f84:	4681      	mov	r9, r0
 8010f86:	89a0      	ldrh	r0, [r4, #12]
 8010f88:	f000 fd78 	bl	8011a7c <uxr_seq_num_add>
 8010f8c:	f1b9 0f00 	cmp.w	r9, #0
 8010f90:	d101      	bne.n	8010f96 <uxr_receive_reliable_message+0x5e>
 8010f92:	4285      	cmp	r5, r0
 8010f94:	d047      	beq.n	8011026 <uxr_receive_reliable_message+0xee>
 8010f96:	8922      	ldrh	r2, [r4, #8]
 8010f98:	fbb5 f0f2 	udiv	r0, r5, r2
 8010f9c:	fb02 5010 	mls	r0, r2, r0, r5
 8010fa0:	b280      	uxth	r0, r0
 8010fa2:	6863      	ldr	r3, [r4, #4]
 8010fa4:	fbb3 f3f2 	udiv	r3, r3, r2
 8010fa8:	fb00 f303 	mul.w	r3, r0, r3
 8010fac:	6820      	ldr	r0, [r4, #0]
 8010fae:	3304      	adds	r3, #4
 8010fb0:	4418      	add	r0, r3
 8010fb2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d1cf      	bne.n	8010f5a <uxr_receive_reliable_message+0x22>
 8010fba:	4641      	mov	r1, r8
 8010fbc:	463a      	mov	r2, r7
 8010fbe:	f002 faf5 	bl	80135ac <memcpy>
 8010fc2:	8921      	ldrh	r1, [r4, #8]
 8010fc4:	fbb5 f2f1 	udiv	r2, r5, r1
 8010fc8:	fb01 5212 	mls	r2, r1, r2, r5
 8010fcc:	b292      	uxth	r2, r2
 8010fce:	6863      	ldr	r3, [r4, #4]
 8010fd0:	fbb3 f3f1 	udiv	r3, r3, r1
 8010fd4:	fb02 f303 	mul.w	r3, r2, r3
 8010fd8:	6822      	ldr	r2, [r4, #0]
 8010fda:	50d7      	str	r7, [r2, r3]
 8010fdc:	9a08      	ldr	r2, [sp, #32]
 8010fde:	2301      	movs	r3, #1
 8010fe0:	7013      	strb	r3, [r2, #0]
 8010fe2:	f1b9 0f00 	cmp.w	r9, #0
 8010fe6:	d0b8      	beq.n	8010f5a <uxr_receive_reliable_message+0x22>
 8010fe8:	89a6      	ldrh	r6, [r4, #12]
 8010fea:	4630      	mov	r0, r6
 8010fec:	2101      	movs	r1, #1
 8010fee:	f000 fd45 	bl	8011a7c <uxr_seq_num_add>
 8010ff2:	8922      	ldrh	r2, [r4, #8]
 8010ff4:	6863      	ldr	r3, [r4, #4]
 8010ff6:	fbb3 f3f2 	udiv	r3, r3, r2
 8010ffa:	4606      	mov	r6, r0
 8010ffc:	fbb0 f0f2 	udiv	r0, r0, r2
 8011000:	fb02 6010 	mls	r0, r2, r0, r6
 8011004:	b280      	uxth	r0, r0
 8011006:	fb00 f303 	mul.w	r3, r0, r3
 801100a:	6820      	ldr	r0, [r4, #0]
 801100c:	3304      	adds	r3, #4
 801100e:	4418      	add	r0, r3
 8011010:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8011014:	2b00      	cmp	r3, #0
 8011016:	d0a0      	beq.n	8010f5a <uxr_receive_reliable_message+0x22>
 8011018:	6923      	ldr	r3, [r4, #16]
 801101a:	4798      	blx	r3
 801101c:	2802      	cmp	r0, #2
 801101e:	d008      	beq.n	8011032 <uxr_receive_reliable_message+0xfa>
 8011020:	2801      	cmp	r0, #1
 8011022:	d0e2      	beq.n	8010fea <uxr_receive_reliable_message+0xb2>
 8011024:	e799      	b.n	8010f5a <uxr_receive_reliable_message+0x22>
 8011026:	9b08      	ldr	r3, [sp, #32]
 8011028:	81a5      	strh	r5, [r4, #12]
 801102a:	2601      	movs	r6, #1
 801102c:	f883 9000 	strb.w	r9, [r3]
 8011030:	e794      	b.n	8010f5c <uxr_receive_reliable_message+0x24>
 8011032:	2601      	movs	r6, #1
 8011034:	e792      	b.n	8010f5c <uxr_receive_reliable_message+0x24>
 8011036:	bf00      	nop

08011038 <uxr_next_input_reliable_buffer_available>:
 8011038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801103c:	4604      	mov	r4, r0
 801103e:	460f      	mov	r7, r1
 8011040:	8980      	ldrh	r0, [r0, #12]
 8011042:	2101      	movs	r1, #1
 8011044:	4690      	mov	r8, r2
 8011046:	f000 fd19 	bl	8011a7c <uxr_seq_num_add>
 801104a:	8922      	ldrh	r2, [r4, #8]
 801104c:	fbb0 f6f2 	udiv	r6, r0, r2
 8011050:	fb02 0616 	mls	r6, r2, r6, r0
 8011054:	b2b6      	uxth	r6, r6
 8011056:	6863      	ldr	r3, [r4, #4]
 8011058:	fbb3 f3f2 	udiv	r3, r3, r2
 801105c:	fb06 f303 	mul.w	r3, r6, r3
 8011060:	6826      	ldr	r6, [r4, #0]
 8011062:	3304      	adds	r3, #4
 8011064:	441e      	add	r6, r3
 8011066:	f856 9c04 	ldr.w	r9, [r6, #-4]
 801106a:	f1b9 0f00 	cmp.w	r9, #0
 801106e:	d023      	beq.n	80110b8 <uxr_next_input_reliable_buffer_available+0x80>
 8011070:	6923      	ldr	r3, [r4, #16]
 8011072:	4605      	mov	r5, r0
 8011074:	4630      	mov	r0, r6
 8011076:	4798      	blx	r3
 8011078:	4682      	mov	sl, r0
 801107a:	b300      	cbz	r0, 80110be <uxr_next_input_reliable_buffer_available+0x86>
 801107c:	f8b4 a00c 	ldrh.w	sl, [r4, #12]
 8011080:	2101      	movs	r1, #1
 8011082:	4650      	mov	r0, sl
 8011084:	f000 fcfa 	bl	8011a7c <uxr_seq_num_add>
 8011088:	8921      	ldrh	r1, [r4, #8]
 801108a:	fbb0 f2f1 	udiv	r2, r0, r1
 801108e:	4682      	mov	sl, r0
 8011090:	fb01 0212 	mls	r2, r1, r2, r0
 8011094:	e9d4 0300 	ldrd	r0, r3, [r4]
 8011098:	b292      	uxth	r2, r2
 801109a:	fbb3 f3f1 	udiv	r3, r3, r1
 801109e:	fb02 f303 	mul.w	r3, r2, r3
 80110a2:	3304      	adds	r3, #4
 80110a4:	4418      	add	r0, r3
 80110a6:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80110aa:	b12b      	cbz	r3, 80110b8 <uxr_next_input_reliable_buffer_available+0x80>
 80110ac:	6923      	ldr	r3, [r4, #16]
 80110ae:	4798      	blx	r3
 80110b0:	2802      	cmp	r0, #2
 80110b2:	d01b      	beq.n	80110ec <uxr_next_input_reliable_buffer_available+0xb4>
 80110b4:	2801      	cmp	r0, #1
 80110b6:	d0e3      	beq.n	8011080 <uxr_next_input_reliable_buffer_available+0x48>
 80110b8:	2000      	movs	r0, #0
 80110ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110be:	464a      	mov	r2, r9
 80110c0:	4631      	mov	r1, r6
 80110c2:	4638      	mov	r0, r7
 80110c4:	f7fa feb0 	bl	800be28 <ucdr_init_buffer>
 80110c8:	8921      	ldrh	r1, [r4, #8]
 80110ca:	fbb5 f2f1 	udiv	r2, r5, r1
 80110ce:	fb01 5212 	mls	r2, r1, r2, r5
 80110d2:	b292      	uxth	r2, r2
 80110d4:	6863      	ldr	r3, [r4, #4]
 80110d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80110da:	fb02 f303 	mul.w	r3, r2, r3
 80110de:	6822      	ldr	r2, [r4, #0]
 80110e0:	f842 a003 	str.w	sl, [r2, r3]
 80110e4:	2001      	movs	r0, #1
 80110e6:	81a5      	strh	r5, [r4, #12]
 80110e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110ec:	8920      	ldrh	r0, [r4, #8]
 80110ee:	fbb5 f3f0 	udiv	r3, r5, r0
 80110f2:	fb00 5513 	mls	r5, r0, r3, r5
 80110f6:	b2ad      	uxth	r5, r5
 80110f8:	6863      	ldr	r3, [r4, #4]
 80110fa:	fbb3 f3f0 	udiv	r3, r3, r0
 80110fe:	fb03 f505 	mul.w	r5, r3, r5
 8011102:	6823      	ldr	r3, [r4, #0]
 8011104:	2000      	movs	r0, #0
 8011106:	5158      	str	r0, [r3, r5]
 8011108:	eb06 0108 	add.w	r1, r6, r8
 801110c:	eba9 0208 	sub.w	r2, r9, r8
 8011110:	4638      	mov	r0, r7
 8011112:	f7fa fe89 	bl	800be28 <ucdr_init_buffer>
 8011116:	4638      	mov	r0, r7
 8011118:	4903      	ldr	r1, [pc, #12]	; (8011128 <uxr_next_input_reliable_buffer_available+0xf0>)
 801111a:	4622      	mov	r2, r4
 801111c:	f7fa fe58 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 8011120:	f8a4 a00c 	strh.w	sl, [r4, #12]
 8011124:	2001      	movs	r0, #1
 8011126:	e7c8      	b.n	80110ba <uxr_next_input_reliable_buffer_available+0x82>
 8011128:	08010e2d 	.word	0x08010e2d

0801112c <uxr_process_heartbeat>:
 801112c:	b538      	push	{r3, r4, r5, lr}
 801112e:	4611      	mov	r1, r2
 8011130:	4604      	mov	r4, r0
 8011132:	89c0      	ldrh	r0, [r0, #14]
 8011134:	4615      	mov	r5, r2
 8011136:	f000 fca9 	bl	8011a8c <uxr_seq_num_cmp>
 801113a:	2800      	cmp	r0, #0
 801113c:	bfb8      	it	lt
 801113e:	81e5      	strhlt	r5, [r4, #14]
 8011140:	bd38      	pop	{r3, r4, r5, pc}
 8011142:	bf00      	nop

08011144 <uxr_compute_acknack>:
 8011144:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011148:	8903      	ldrh	r3, [r0, #8]
 801114a:	8985      	ldrh	r5, [r0, #12]
 801114c:	4604      	mov	r4, r0
 801114e:	460e      	mov	r6, r1
 8011150:	b1d3      	cbz	r3, 8011188 <uxr_compute_acknack+0x44>
 8011152:	4628      	mov	r0, r5
 8011154:	2701      	movs	r7, #1
 8011156:	e003      	b.n	8011160 <uxr_compute_acknack+0x1c>
 8011158:	4567      	cmp	r7, ip
 801115a:	d215      	bcs.n	8011188 <uxr_compute_acknack+0x44>
 801115c:	89a0      	ldrh	r0, [r4, #12]
 801115e:	3701      	adds	r7, #1
 8011160:	b2b9      	uxth	r1, r7
 8011162:	f000 fc8b 	bl	8011a7c <uxr_seq_num_add>
 8011166:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 801116a:	fbb0 f3fc 	udiv	r3, r0, ip
 801116e:	fb0c 0313 	mls	r3, ip, r3, r0
 8011172:	b29a      	uxth	r2, r3
 8011174:	e9d4 1300 	ldrd	r1, r3, [r4]
 8011178:	fbb3 f3fc 	udiv	r3, r3, ip
 801117c:	fb02 f303 	mul.w	r3, r2, r3
 8011180:	58cb      	ldr	r3, [r1, r3]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d1e8      	bne.n	8011158 <uxr_compute_acknack+0x14>
 8011186:	4605      	mov	r5, r0
 8011188:	8035      	strh	r5, [r6, #0]
 801118a:	2101      	movs	r1, #1
 801118c:	4628      	mov	r0, r5
 801118e:	89e7      	ldrh	r7, [r4, #14]
 8011190:	f000 fc78 	bl	8011a84 <uxr_seq_num_sub>
 8011194:	4601      	mov	r1, r0
 8011196:	4638      	mov	r0, r7
 8011198:	f000 fc74 	bl	8011a84 <uxr_seq_num_sub>
 801119c:	4605      	mov	r5, r0
 801119e:	b318      	cbz	r0, 80111e8 <uxr_compute_acknack+0xa4>
 80111a0:	f04f 0900 	mov.w	r9, #0
 80111a4:	464f      	mov	r7, r9
 80111a6:	f04f 0801 	mov.w	r8, #1
 80111aa:	fa1f f189 	uxth.w	r1, r9
 80111ae:	8830      	ldrh	r0, [r6, #0]
 80111b0:	f000 fc64 	bl	8011a7c <uxr_seq_num_add>
 80111b4:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 80111b8:	fbb0 f3fc 	udiv	r3, r0, ip
 80111bc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80111c0:	fb03 001c 	mls	r0, r3, ip, r0
 80111c4:	b283      	uxth	r3, r0
 80111c6:	fbb2 f2fc 	udiv	r2, r2, ip
 80111ca:	fb02 f303 	mul.w	r3, r2, r3
 80111ce:	fa08 f209 	lsl.w	r2, r8, r9
 80111d2:	58cb      	ldr	r3, [r1, r3]
 80111d4:	f109 0901 	add.w	r9, r9, #1
 80111d8:	b90b      	cbnz	r3, 80111de <uxr_compute_acknack+0x9a>
 80111da:	4317      	orrs	r7, r2
 80111dc:	b2bf      	uxth	r7, r7
 80111de:	454d      	cmp	r5, r9
 80111e0:	d1e3      	bne.n	80111aa <uxr_compute_acknack+0x66>
 80111e2:	4638      	mov	r0, r7
 80111e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80111e8:	4607      	mov	r7, r0
 80111ea:	4638      	mov	r0, r7
 80111ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080111f0 <uxr_init_output_best_effort_stream>:
 80111f0:	f64f 7cff 	movw	ip, #65535	; 0xffff
 80111f4:	e9c0 3201 	strd	r3, r2, [r0, #4]
 80111f8:	6001      	str	r1, [r0, #0]
 80111fa:	7303      	strb	r3, [r0, #12]
 80111fc:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8011200:	4770      	bx	lr
 8011202:	bf00      	nop

08011204 <uxr_reset_output_best_effort_stream>:
 8011204:	7b02      	ldrb	r2, [r0, #12]
 8011206:	6042      	str	r2, [r0, #4]
 8011208:	f64f 73ff 	movw	r3, #65535	; 0xffff
 801120c:	81c3      	strh	r3, [r0, #14]
 801120e:	4770      	bx	lr

08011210 <uxr_prepare_best_effort_buffer_to_write>:
 8011210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011212:	4604      	mov	r4, r0
 8011214:	b083      	sub	sp, #12
 8011216:	6840      	ldr	r0, [r0, #4]
 8011218:	460d      	mov	r5, r1
 801121a:	4616      	mov	r6, r2
 801121c:	f7fc f9ce 	bl	800d5bc <uxr_submessage_padding>
 8011220:	6863      	ldr	r3, [r4, #4]
 8011222:	4418      	add	r0, r3
 8011224:	68a3      	ldr	r3, [r4, #8]
 8011226:	1942      	adds	r2, r0, r5
 8011228:	4293      	cmp	r3, r2
 801122a:	bf2c      	ite	cs
 801122c:	2701      	movcs	r7, #1
 801122e:	2700      	movcc	r7, #0
 8011230:	d202      	bcs.n	8011238 <uxr_prepare_best_effort_buffer_to_write+0x28>
 8011232:	4638      	mov	r0, r7
 8011234:	b003      	add	sp, #12
 8011236:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011238:	9000      	str	r0, [sp, #0]
 801123a:	6821      	ldr	r1, [r4, #0]
 801123c:	4630      	mov	r0, r6
 801123e:	2300      	movs	r3, #0
 8011240:	f7fa fde0 	bl	800be04 <ucdr_init_buffer_origin_offset>
 8011244:	6861      	ldr	r1, [r4, #4]
 8011246:	4638      	mov	r0, r7
 8011248:	4429      	add	r1, r5
 801124a:	6061      	str	r1, [r4, #4]
 801124c:	b003      	add	sp, #12
 801124e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011250 <uxr_prepare_best_effort_buffer_to_send>:
 8011250:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011254:	4604      	mov	r4, r0
 8011256:	461d      	mov	r5, r3
 8011258:	6840      	ldr	r0, [r0, #4]
 801125a:	7b23      	ldrb	r3, [r4, #12]
 801125c:	4298      	cmp	r0, r3
 801125e:	bf8c      	ite	hi
 8011260:	2601      	movhi	r6, #1
 8011262:	2600      	movls	r6, #0
 8011264:	d802      	bhi.n	801126c <uxr_prepare_best_effort_buffer_to_send+0x1c>
 8011266:	4630      	mov	r0, r6
 8011268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801126c:	4688      	mov	r8, r1
 801126e:	89e0      	ldrh	r0, [r4, #14]
 8011270:	2101      	movs	r1, #1
 8011272:	4617      	mov	r7, r2
 8011274:	f000 fc02 	bl	8011a7c <uxr_seq_num_add>
 8011278:	6823      	ldr	r3, [r4, #0]
 801127a:	81e0      	strh	r0, [r4, #14]
 801127c:	8028      	strh	r0, [r5, #0]
 801127e:	f8c8 3000 	str.w	r3, [r8]
 8011282:	6863      	ldr	r3, [r4, #4]
 8011284:	603b      	str	r3, [r7, #0]
 8011286:	7b23      	ldrb	r3, [r4, #12]
 8011288:	6063      	str	r3, [r4, #4]
 801128a:	4630      	mov	r0, r6
 801128c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08011290 <on_full_output_buffer>:
 8011290:	b538      	push	{r3, r4, r5, lr}
 8011292:	6802      	ldr	r2, [r0, #0]
 8011294:	460c      	mov	r4, r1
 8011296:	6809      	ldr	r1, [r1, #0]
 8011298:	8923      	ldrh	r3, [r4, #8]
 801129a:	eba2 0c01 	sub.w	ip, r2, r1
 801129e:	6862      	ldr	r2, [r4, #4]
 80112a0:	fbb2 f2f3 	udiv	r2, r2, r3
 80112a4:	fbbc fcf2 	udiv	ip, ip, r2
 80112a8:	f10c 0c01 	add.w	ip, ip, #1
 80112ac:	fa1f fc8c 	uxth.w	ip, ip
 80112b0:	fbbc fef3 	udiv	lr, ip, r3
 80112b4:	fb03 c31e 	mls	r3, r3, lr, ip
 80112b8:	b29b      	uxth	r3, r3
 80112ba:	fb02 f303 	mul.w	r3, r2, r3
 80112be:	f894 c00c 	ldrb.w	ip, [r4, #12]
 80112c2:	58ca      	ldr	r2, [r1, r3]
 80112c4:	4463      	add	r3, ip
 80112c6:	eba2 020c 	sub.w	r2, r2, ip
 80112ca:	3308      	adds	r3, #8
 80112cc:	4605      	mov	r5, r0
 80112ce:	4419      	add	r1, r3
 80112d0:	3a04      	subs	r2, #4
 80112d2:	6903      	ldr	r3, [r0, #16]
 80112d4:	f7fa fda0 	bl	800be18 <ucdr_init_buffer_origin>
 80112d8:	4628      	mov	r0, r5
 80112da:	4903      	ldr	r1, [pc, #12]	; (80112e8 <on_full_output_buffer+0x58>)
 80112dc:	4622      	mov	r2, r4
 80112de:	f7fa fd77 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 80112e2:	2000      	movs	r0, #0
 80112e4:	bd38      	pop	{r3, r4, r5, pc}
 80112e6:	bf00      	nop
 80112e8:	08011291 	.word	0x08011291

080112ec <uxr_init_output_reliable_stream>:
 80112ec:	b410      	push	{r4}
 80112ee:	f89d c004 	ldrb.w	ip, [sp, #4]
 80112f2:	8103      	strh	r3, [r0, #8]
 80112f4:	e9c0 1200 	strd	r1, r2, [r0]
 80112f8:	f880 c00c 	strb.w	ip, [r0, #12]
 80112fc:	b1d3      	cbz	r3, 8011334 <uxr_init_output_reliable_stream+0x48>
 80112fe:	f8c1 c000 	str.w	ip, [r1]
 8011302:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 8011306:	f1bc 0f01 	cmp.w	ip, #1
 801130a:	d913      	bls.n	8011334 <uxr_init_output_reliable_stream+0x48>
 801130c:	2301      	movs	r3, #1
 801130e:	fbb3 f1fc 	udiv	r1, r3, ip
 8011312:	fb0c 3111 	mls	r1, ip, r1, r3
 8011316:	b289      	uxth	r1, r1
 8011318:	6842      	ldr	r2, [r0, #4]
 801131a:	6804      	ldr	r4, [r0, #0]
 801131c:	fbb2 f2fc 	udiv	r2, r2, ip
 8011320:	fb01 f202 	mul.w	r2, r1, r2
 8011324:	7b01      	ldrb	r1, [r0, #12]
 8011326:	50a1      	str	r1, [r4, r2]
 8011328:	3301      	adds	r3, #1
 801132a:	f8b0 c008 	ldrh.w	ip, [r0, #8]
 801132e:	b29b      	uxth	r3, r3
 8011330:	459c      	cmp	ip, r3
 8011332:	d8ec      	bhi.n	801130e <uxr_init_output_reliable_stream+0x22>
 8011334:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011338:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801133c:	e9c0 2306 	strd	r2, r3, [r0, #24]
 8011340:	4905      	ldr	r1, [pc, #20]	; (8011358 <uxr_init_output_reliable_stream+0x6c>)
 8011342:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011346:	f8c0 100e 	str.w	r1, [r0, #14]
 801134a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801134e:	2300      	movs	r3, #0
 8011350:	8242      	strh	r2, [r0, #18]
 8011352:	8403      	strh	r3, [r0, #32]
 8011354:	4770      	bx	lr
 8011356:	bf00      	nop
 8011358:	ffff0000 	.word	0xffff0000

0801135c <uxr_reset_output_reliable_stream>:
 801135c:	8901      	ldrh	r1, [r0, #8]
 801135e:	b1b1      	cbz	r1, 801138e <uxr_reset_output_reliable_stream+0x32>
 8011360:	f04f 0c00 	mov.w	ip, #0
 8011364:	4663      	mov	r3, ip
 8011366:	fbb3 f2f1 	udiv	r2, r3, r1
 801136a:	fb01 3312 	mls	r3, r1, r2, r3
 801136e:	b29b      	uxth	r3, r3
 8011370:	6842      	ldr	r2, [r0, #4]
 8011372:	fbb2 f2f1 	udiv	r2, r2, r1
 8011376:	6801      	ldr	r1, [r0, #0]
 8011378:	fb02 f303 	mul.w	r3, r2, r3
 801137c:	7b02      	ldrb	r2, [r0, #12]
 801137e:	50ca      	str	r2, [r1, r3]
 8011380:	f10c 0c01 	add.w	ip, ip, #1
 8011384:	8901      	ldrh	r1, [r0, #8]
 8011386:	fa1f f38c 	uxth.w	r3, ip
 801138a:	4299      	cmp	r1, r3
 801138c:	d8eb      	bhi.n	8011366 <uxr_reset_output_reliable_stream+0xa>
 801138e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011392:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011396:	e9c0 2306 	strd	r2, r3, [r0, #24]
 801139a:	4904      	ldr	r1, [pc, #16]	; (80113ac <uxr_reset_output_reliable_stream+0x50>)
 801139c:	f8c0 100e 	str.w	r1, [r0, #14]
 80113a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80113a4:	2300      	movs	r3, #0
 80113a6:	8242      	strh	r2, [r0, #18]
 80113a8:	8403      	strh	r3, [r0, #32]
 80113aa:	4770      	bx	lr
 80113ac:	ffff0000 	.word	0xffff0000

080113b0 <uxr_prepare_reliable_buffer_to_write>:
 80113b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113b4:	4604      	mov	r4, r0
 80113b6:	b091      	sub	sp, #68	; 0x44
 80113b8:	8900      	ldrh	r0, [r0, #8]
 80113ba:	89e6      	ldrh	r6, [r4, #14]
 80113bc:	6823      	ldr	r3, [r4, #0]
 80113be:	9204      	str	r2, [sp, #16]
 80113c0:	fbb6 f2f0 	udiv	r2, r6, r0
 80113c4:	fb00 6212 	mls	r2, r0, r2, r6
 80113c8:	b292      	uxth	r2, r2
 80113ca:	6865      	ldr	r5, [r4, #4]
 80113cc:	fbb5 f5f0 	udiv	r5, r5, r0
 80113d0:	fb05 3202 	mla	r2, r5, r2, r3
 80113d4:	3204      	adds	r2, #4
 80113d6:	f852 8c04 	ldr.w	r8, [r2, #-4]
 80113da:	f894 900c 	ldrb.w	r9, [r4, #12]
 80113de:	9203      	str	r2, [sp, #12]
 80113e0:	468b      	mov	fp, r1
 80113e2:	1f2f      	subs	r7, r5, #4
 80113e4:	2800      	cmp	r0, #0
 80113e6:	f000 814c 	beq.w	8011682 <uxr_prepare_reliable_buffer_to_write+0x2d2>
 80113ea:	f04f 0c00 	mov.w	ip, #0
 80113ee:	46e2      	mov	sl, ip
 80113f0:	4661      	mov	r1, ip
 80113f2:	fbb1 f2f0 	udiv	r2, r1, r0
 80113f6:	fb00 1212 	mls	r2, r0, r2, r1
 80113fa:	b292      	uxth	r2, r2
 80113fc:	fb05 f202 	mul.w	r2, r5, r2
 8011400:	f10c 0c01 	add.w	ip, ip, #1
 8011404:	589a      	ldr	r2, [r3, r2]
 8011406:	454a      	cmp	r2, r9
 8011408:	bf08      	it	eq
 801140a:	f10a 0a01 	addeq.w	sl, sl, #1
 801140e:	fa1f f18c 	uxth.w	r1, ip
 8011412:	bf08      	it	eq
 8011414:	fa1f fa8a 	uxtheq.w	sl, sl
 8011418:	4281      	cmp	r1, r0
 801141a:	d3ea      	bcc.n	80113f2 <uxr_prepare_reliable_buffer_to_write+0x42>
 801141c:	4640      	mov	r0, r8
 801141e:	2104      	movs	r1, #4
 8011420:	f8cd a014 	str.w	sl, [sp, #20]
 8011424:	f7fa fd04 	bl	800be30 <ucdr_alignment>
 8011428:	4480      	add	r8, r0
 801142a:	eb08 020b 	add.w	r2, r8, fp
 801142e:	42ba      	cmp	r2, r7
 8011430:	f240 80cd 	bls.w	80115ce <uxr_prepare_reliable_buffer_to_write+0x21e>
 8011434:	7b22      	ldrb	r2, [r4, #12]
 8011436:	445a      	add	r2, fp
 8011438:	42ba      	cmp	r2, r7
 801143a:	f240 80b5 	bls.w	80115a8 <uxr_prepare_reliable_buffer_to_write+0x1f8>
 801143e:	f5c9 437f 	rsb	r3, r9, #65280	; 0xff00
 8011442:	33fc      	adds	r3, #252	; 0xfc
 8011444:	b2ba      	uxth	r2, r7
 8011446:	4413      	add	r3, r2
 8011448:	b29b      	uxth	r3, r3
 801144a:	fb0a f903 	mul.w	r9, sl, r3
 801144e:	45d9      	cmp	r9, fp
 8011450:	9305      	str	r3, [sp, #20]
 8011452:	9306      	str	r3, [sp, #24]
 8011454:	f0c0 80b7 	bcc.w	80115c6 <uxr_prepare_reliable_buffer_to_write+0x216>
 8011458:	f108 0304 	add.w	r3, r8, #4
 801145c:	42bb      	cmp	r3, r7
 801145e:	f080 80db 	bcs.w	8011618 <uxr_prepare_reliable_buffer_to_write+0x268>
 8011462:	f1a2 0904 	sub.w	r9, r2, #4
 8011466:	eba9 0908 	sub.w	r9, r9, r8
 801146a:	9b05      	ldr	r3, [sp, #20]
 801146c:	fa1f f989 	uxth.w	r9, r9
 8011470:	ebab 0b09 	sub.w	fp, fp, r9
 8011474:	fbbb f2f3 	udiv	r2, fp, r3
 8011478:	fb03 b312 	mls	r3, r3, r2, fp
 801147c:	2b00      	cmp	r3, #0
 801147e:	f000 80c8 	beq.w	8011612 <uxr_prepare_reliable_buffer_to_write+0x262>
 8011482:	3201      	adds	r2, #1
 8011484:	b292      	uxth	r2, r2
 8011486:	9306      	str	r3, [sp, #24]
 8011488:	4552      	cmp	r2, sl
 801148a:	f200 809c 	bhi.w	80115c6 <uxr_prepare_reliable_buffer_to_write+0x216>
 801148e:	f10d 0b20 	add.w	fp, sp, #32
 8011492:	2a00      	cmp	r2, #0
 8011494:	d042      	beq.n	801151c <uxr_prepare_reliable_buffer_to_write+0x16c>
 8011496:	f8cd 801c 	str.w	r8, [sp, #28]
 801149a:	f04f 0a00 	mov.w	sl, #0
 801149e:	f8dd 8014 	ldr.w	r8, [sp, #20]
 80114a2:	9505      	str	r5, [sp, #20]
 80114a4:	f10d 0b20 	add.w	fp, sp, #32
 80114a8:	4615      	mov	r5, r2
 80114aa:	e000      	b.n	80114ae <uxr_prepare_reliable_buffer_to_write+0xfe>
 80114ac:	46c1      	mov	r9, r8
 80114ae:	8920      	ldrh	r0, [r4, #8]
 80114b0:	fbb6 f2f0 	udiv	r2, r6, r0
 80114b4:	fb00 6112 	mls	r1, r0, r2, r6
 80114b8:	b28a      	uxth	r2, r1
 80114ba:	6863      	ldr	r3, [r4, #4]
 80114bc:	fbb3 f1f0 	udiv	r1, r3, r0
 80114c0:	6823      	ldr	r3, [r4, #0]
 80114c2:	fb02 f101 	mul.w	r1, r2, r1
 80114c6:	3104      	adds	r1, #4
 80114c8:	4419      	add	r1, r3
 80114ca:	4658      	mov	r0, fp
 80114cc:	f851 2c04 	ldr.w	r2, [r1, #-4]
 80114d0:	9200      	str	r2, [sp, #0]
 80114d2:	2300      	movs	r3, #0
 80114d4:	463a      	mov	r2, r7
 80114d6:	f7fa fc95 	bl	800be04 <ucdr_init_buffer_origin_offset>
 80114da:	464a      	mov	r2, r9
 80114dc:	2300      	movs	r3, #0
 80114de:	210d      	movs	r1, #13
 80114e0:	4658      	mov	r0, fp
 80114e2:	f7fc f82b 	bl	800d53c <uxr_buffer_submessage_header>
 80114e6:	8921      	ldrh	r1, [r4, #8]
 80114e8:	fbb6 f2f1 	udiv	r2, r6, r1
 80114ec:	fb01 6212 	mls	r2, r1, r2, r6
 80114f0:	b292      	uxth	r2, r2
 80114f2:	6863      	ldr	r3, [r4, #4]
 80114f4:	fbb3 f3f1 	udiv	r3, r3, r1
 80114f8:	fb02 f303 	mul.w	r3, r2, r3
 80114fc:	6822      	ldr	r2, [r4, #0]
 80114fe:	4630      	mov	r0, r6
 8011500:	50d7      	str	r7, [r2, r3]
 8011502:	2101      	movs	r1, #1
 8011504:	f000 faba 	bl	8011a7c <uxr_seq_num_add>
 8011508:	f10a 0a01 	add.w	sl, sl, #1
 801150c:	fa1f f38a 	uxth.w	r3, sl
 8011510:	429d      	cmp	r5, r3
 8011512:	4606      	mov	r6, r0
 8011514:	d8ca      	bhi.n	80114ac <uxr_prepare_reliable_buffer_to_write+0xfc>
 8011516:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801151a:	9d05      	ldr	r5, [sp, #20]
 801151c:	8920      	ldrh	r0, [r4, #8]
 801151e:	fbb6 f3f0 	udiv	r3, r6, r0
 8011522:	fb00 6313 	mls	r3, r0, r3, r6
 8011526:	b299      	uxth	r1, r3
 8011528:	6863      	ldr	r3, [r4, #4]
 801152a:	fbb3 f3f0 	udiv	r3, r3, r0
 801152e:	fb01 f303 	mul.w	r3, r1, r3
 8011532:	6821      	ldr	r1, [r4, #0]
 8011534:	3304      	adds	r3, #4
 8011536:	4419      	add	r1, r3
 8011538:	463a      	mov	r2, r7
 801153a:	f851 0c04 	ldr.w	r0, [r1, #-4]
 801153e:	9000      	str	r0, [sp, #0]
 8011540:	2300      	movs	r3, #0
 8011542:	4658      	mov	r0, fp
 8011544:	f7fa fc5e 	bl	800be04 <ucdr_init_buffer_origin_offset>
 8011548:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801154c:	4658      	mov	r0, fp
 801154e:	fa1f f289 	uxth.w	r2, r9
 8011552:	2302      	movs	r3, #2
 8011554:	210d      	movs	r1, #13
 8011556:	f7fb fff1 	bl	800d53c <uxr_buffer_submessage_header>
 801155a:	9b03      	ldr	r3, [sp, #12]
 801155c:	8927      	ldrh	r7, [r4, #8]
 801155e:	7b20      	ldrb	r0, [r4, #12]
 8011560:	f108 0104 	add.w	r1, r8, #4
 8011564:	440b      	add	r3, r1
 8011566:	4619      	mov	r1, r3
 8011568:	fbb6 f3f7 	udiv	r3, r6, r7
 801156c:	fb07 6313 	mls	r3, r7, r3, r6
 8011570:	f1a5 0208 	sub.w	r2, r5, #8
 8011574:	b29d      	uxth	r5, r3
 8011576:	3004      	adds	r0, #4
 8011578:	6863      	ldr	r3, [r4, #4]
 801157a:	fbb3 f3f7 	udiv	r3, r3, r7
 801157e:	fb05 f303 	mul.w	r3, r5, r3
 8011582:	6825      	ldr	r5, [r4, #0]
 8011584:	4448      	add	r0, r9
 8011586:	50e8      	str	r0, [r5, r3]
 8011588:	9d04      	ldr	r5, [sp, #16]
 801158a:	eba2 0208 	sub.w	r2, r2, r8
 801158e:	4628      	mov	r0, r5
 8011590:	f7fa fc4a 	bl	800be28 <ucdr_init_buffer>
 8011594:	4628      	mov	r0, r5
 8011596:	493c      	ldr	r1, [pc, #240]	; (8011688 <uxr_prepare_reliable_buffer_to_write+0x2d8>)
 8011598:	4622      	mov	r2, r4
 801159a:	f7fa fc19 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 801159e:	2001      	movs	r0, #1
 80115a0:	81e6      	strh	r6, [r4, #14]
 80115a2:	b011      	add	sp, #68	; 0x44
 80115a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115a8:	2101      	movs	r1, #1
 80115aa:	89e0      	ldrh	r0, [r4, #14]
 80115ac:	f000 fa66 	bl	8011a7c <uxr_seq_num_add>
 80115b0:	8921      	ldrh	r1, [r4, #8]
 80115b2:	4605      	mov	r5, r0
 80115b4:	8a60      	ldrh	r0, [r4, #18]
 80115b6:	f000 fa61 	bl	8011a7c <uxr_seq_num_add>
 80115ba:	4601      	mov	r1, r0
 80115bc:	4628      	mov	r0, r5
 80115be:	f000 fa65 	bl	8011a8c <uxr_seq_num_cmp>
 80115c2:	2800      	cmp	r0, #0
 80115c4:	dd42      	ble.n	801164c <uxr_prepare_reliable_buffer_to_write+0x29c>
 80115c6:	2000      	movs	r0, #0
 80115c8:	b011      	add	sp, #68	; 0x44
 80115ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115ce:	8921      	ldrh	r1, [r4, #8]
 80115d0:	8a60      	ldrh	r0, [r4, #18]
 80115d2:	9205      	str	r2, [sp, #20]
 80115d4:	f000 fa52 	bl	8011a7c <uxr_seq_num_add>
 80115d8:	4601      	mov	r1, r0
 80115da:	4630      	mov	r0, r6
 80115dc:	f000 fa56 	bl	8011a8c <uxr_seq_num_cmp>
 80115e0:	2800      	cmp	r0, #0
 80115e2:	9a05      	ldr	r2, [sp, #20]
 80115e4:	dcef      	bgt.n	80115c6 <uxr_prepare_reliable_buffer_to_write+0x216>
 80115e6:	8927      	ldrh	r7, [r4, #8]
 80115e8:	fbb6 f3f7 	udiv	r3, r6, r7
 80115ec:	fb07 6313 	mls	r3, r7, r3, r6
 80115f0:	b29d      	uxth	r5, r3
 80115f2:	6863      	ldr	r3, [r4, #4]
 80115f4:	6824      	ldr	r4, [r4, #0]
 80115f6:	fbb3 f3f7 	udiv	r3, r3, r7
 80115fa:	fb05 f303 	mul.w	r3, r5, r3
 80115fe:	e9dd 1003 	ldrd	r1, r0, [sp, #12]
 8011602:	50e2      	str	r2, [r4, r3]
 8011604:	2300      	movs	r3, #0
 8011606:	f8cd 8000 	str.w	r8, [sp]
 801160a:	f7fa fbfb 	bl	800be04 <ucdr_init_buffer_origin_offset>
 801160e:	2001      	movs	r0, #1
 8011610:	e7da      	b.n	80115c8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8011612:	b293      	uxth	r3, r2
 8011614:	461a      	mov	r2, r3
 8011616:	e737      	b.n	8011488 <uxr_prepare_reliable_buffer_to_write+0xd8>
 8011618:	4630      	mov	r0, r6
 801161a:	2101      	movs	r1, #1
 801161c:	9207      	str	r2, [sp, #28]
 801161e:	f000 fa2d 	bl	8011a7c <uxr_seq_num_add>
 8011622:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011626:	fbb0 f1fc 	udiv	r1, r0, ip
 801162a:	fb0c 0111 	mls	r1, ip, r1, r0
 801162e:	4606      	mov	r6, r0
 8011630:	b288      	uxth	r0, r1
 8011632:	6863      	ldr	r3, [r4, #4]
 8011634:	fbb3 f1fc 	udiv	r1, r3, ip
 8011638:	6823      	ldr	r3, [r4, #0]
 801163a:	9a07      	ldr	r2, [sp, #28]
 801163c:	fb00 f101 	mul.w	r1, r0, r1
 8011640:	3104      	adds	r1, #4
 8011642:	440b      	add	r3, r1
 8011644:	9303      	str	r3, [sp, #12]
 8011646:	f853 8c04 	ldr.w	r8, [r3, #-4]
 801164a:	e70a      	b.n	8011462 <uxr_prepare_reliable_buffer_to_write+0xb2>
 801164c:	8921      	ldrh	r1, [r4, #8]
 801164e:	fbb5 f3f1 	udiv	r3, r5, r1
 8011652:	fb01 5313 	mls	r3, r1, r3, r5
 8011656:	b29a      	uxth	r2, r3
 8011658:	6863      	ldr	r3, [r4, #4]
 801165a:	fbb3 f3f1 	udiv	r3, r3, r1
 801165e:	6821      	ldr	r1, [r4, #0]
 8011660:	9804      	ldr	r0, [sp, #16]
 8011662:	fb02 f303 	mul.w	r3, r2, r3
 8011666:	3304      	adds	r3, #4
 8011668:	7b22      	ldrb	r2, [r4, #12]
 801166a:	4419      	add	r1, r3
 801166c:	445a      	add	r2, fp
 801166e:	f841 2c04 	str.w	r2, [r1, #-4]
 8011672:	7b23      	ldrb	r3, [r4, #12]
 8011674:	9300      	str	r3, [sp, #0]
 8011676:	2300      	movs	r3, #0
 8011678:	f7fa fbc4 	bl	800be04 <ucdr_init_buffer_origin_offset>
 801167c:	81e5      	strh	r5, [r4, #14]
 801167e:	2001      	movs	r0, #1
 8011680:	e7a2      	b.n	80115c8 <uxr_prepare_reliable_buffer_to_write+0x218>
 8011682:	4682      	mov	sl, r0
 8011684:	e6ca      	b.n	801141c <uxr_prepare_reliable_buffer_to_write+0x6c>
 8011686:	bf00      	nop
 8011688:	08011291 	.word	0x08011291

0801168c <uxr_prepare_next_reliable_buffer_to_send>:
 801168c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801168e:	4604      	mov	r4, r0
 8011690:	460f      	mov	r7, r1
 8011692:	8a00      	ldrh	r0, [r0, #16]
 8011694:	2101      	movs	r1, #1
 8011696:	4616      	mov	r6, r2
 8011698:	461d      	mov	r5, r3
 801169a:	f000 f9ef 	bl	8011a7c <uxr_seq_num_add>
 801169e:	8028      	strh	r0, [r5, #0]
 80116a0:	8922      	ldrh	r2, [r4, #8]
 80116a2:	fbb0 f3f2 	udiv	r3, r0, r2
 80116a6:	fb02 0c13 	mls	ip, r2, r3, r0
 80116aa:	fa1f fc8c 	uxth.w	ip, ip
 80116ae:	6863      	ldr	r3, [r4, #4]
 80116b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80116b4:	fb0c fc03 	mul.w	ip, ip, r3
 80116b8:	6823      	ldr	r3, [r4, #0]
 80116ba:	89e1      	ldrh	r1, [r4, #14]
 80116bc:	f10c 0c04 	add.w	ip, ip, #4
 80116c0:	4463      	add	r3, ip
 80116c2:	603b      	str	r3, [r7, #0]
 80116c4:	6823      	ldr	r3, [r4, #0]
 80116c6:	449c      	add	ip, r3
 80116c8:	f85c 3c04 	ldr.w	r3, [ip, #-4]
 80116cc:	6033      	str	r3, [r6, #0]
 80116ce:	f000 f9dd 	bl	8011a8c <uxr_seq_num_cmp>
 80116d2:	2800      	cmp	r0, #0
 80116d4:	dd01      	ble.n	80116da <uxr_prepare_next_reliable_buffer_to_send+0x4e>
 80116d6:	2000      	movs	r0, #0
 80116d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116da:	7b23      	ldrb	r3, [r4, #12]
 80116dc:	6832      	ldr	r2, [r6, #0]
 80116de:	429a      	cmp	r2, r3
 80116e0:	d9f9      	bls.n	80116d6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80116e2:	8a61      	ldrh	r1, [r4, #18]
 80116e4:	8a20      	ldrh	r0, [r4, #16]
 80116e6:	f000 f9cd 	bl	8011a84 <uxr_seq_num_sub>
 80116ea:	8923      	ldrh	r3, [r4, #8]
 80116ec:	4283      	cmp	r3, r0
 80116ee:	d0f2      	beq.n	80116d6 <uxr_prepare_next_reliable_buffer_to_send+0x4a>
 80116f0:	8828      	ldrh	r0, [r5, #0]
 80116f2:	89e3      	ldrh	r3, [r4, #14]
 80116f4:	8220      	strh	r0, [r4, #16]
 80116f6:	4298      	cmp	r0, r3
 80116f8:	d001      	beq.n	80116fe <uxr_prepare_next_reliable_buffer_to_send+0x72>
 80116fa:	2001      	movs	r0, #1
 80116fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80116fe:	2101      	movs	r1, #1
 8011700:	f000 f9bc 	bl	8011a7c <uxr_seq_num_add>
 8011704:	81e0      	strh	r0, [r4, #14]
 8011706:	2001      	movs	r0, #1
 8011708:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801170a:	bf00      	nop

0801170c <uxr_update_output_stream_heartbeat_timestamp>:
 801170c:	b570      	push	{r4, r5, r6, lr}
 801170e:	8a01      	ldrh	r1, [r0, #16]
 8011710:	4604      	mov	r4, r0
 8011712:	8a40      	ldrh	r0, [r0, #18]
 8011714:	4615      	mov	r5, r2
 8011716:	461e      	mov	r6, r3
 8011718:	f000 f9b8 	bl	8011a8c <uxr_seq_num_cmp>
 801171c:	2800      	cmp	r0, #0
 801171e:	db07      	blt.n	8011730 <uxr_update_output_stream_heartbeat_timestamp+0x24>
 8011720:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8011724:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8011728:	e9c4 2306 	strd	r2, r3, [r4, #24]
 801172c:	2000      	movs	r0, #0
 801172e:	bd70      	pop	{r4, r5, r6, pc}
 8011730:	f894 0020 	ldrb.w	r0, [r4, #32]
 8011734:	b940      	cbnz	r0, 8011748 <uxr_update_output_stream_heartbeat_timestamp+0x3c>
 8011736:	2301      	movs	r3, #1
 8011738:	f884 3020 	strb.w	r3, [r4, #32]
 801173c:	3564      	adds	r5, #100	; 0x64
 801173e:	f146 0600 	adc.w	r6, r6, #0
 8011742:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8011746:	bd70      	pop	{r4, r5, r6, pc}
 8011748:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
 801174c:	4295      	cmp	r5, r2
 801174e:	eb76 0303 	sbcs.w	r3, r6, r3
 8011752:	bfa5      	ittet	ge
 8011754:	3001      	addge	r0, #1
 8011756:	f884 0020 	strbge.w	r0, [r4, #32]
 801175a:	2000      	movlt	r0, #0
 801175c:	2001      	movge	r0, #1
 801175e:	e7ed      	b.n	801173c <uxr_update_output_stream_heartbeat_timestamp+0x30>

08011760 <uxr_begin_output_nack_buffer_it>:
 8011760:	8a40      	ldrh	r0, [r0, #18]
 8011762:	4770      	bx	lr

08011764 <uxr_next_reliable_nack_buffer_to_send>:
 8011764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011768:	f890 8021 	ldrb.w	r8, [r0, #33]	; 0x21
 801176c:	b082      	sub	sp, #8
 801176e:	f1b8 0f00 	cmp.w	r8, #0
 8011772:	d011      	beq.n	8011798 <uxr_next_reliable_nack_buffer_to_send+0x34>
 8011774:	4604      	mov	r4, r0
 8011776:	8818      	ldrh	r0, [r3, #0]
 8011778:	460e      	mov	r6, r1
 801177a:	4617      	mov	r7, r2
 801177c:	461d      	mov	r5, r3
 801177e:	2101      	movs	r1, #1
 8011780:	f000 f97c 	bl	8011a7c <uxr_seq_num_add>
 8011784:	8028      	strh	r0, [r5, #0]
 8011786:	8a21      	ldrh	r1, [r4, #16]
 8011788:	f000 f980 	bl	8011a8c <uxr_seq_num_cmp>
 801178c:	2800      	cmp	r0, #0
 801178e:	dd07      	ble.n	80117a0 <uxr_next_reliable_nack_buffer_to_send+0x3c>
 8011790:	f04f 0800 	mov.w	r8, #0
 8011794:	f884 8021 	strb.w	r8, [r4, #33]	; 0x21
 8011798:	4640      	mov	r0, r8
 801179a:	b002      	add	sp, #8
 801179c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80117a0:	8921      	ldrh	r1, [r4, #8]
 80117a2:	8828      	ldrh	r0, [r5, #0]
 80117a4:	6823      	ldr	r3, [r4, #0]
 80117a6:	fbb0 f2f1 	udiv	r2, r0, r1
 80117aa:	fb01 0c12 	mls	ip, r1, r2, r0
 80117ae:	fa1f f28c 	uxth.w	r2, ip
 80117b2:	9301      	str	r3, [sp, #4]
 80117b4:	6863      	ldr	r3, [r4, #4]
 80117b6:	fbb3 fcf1 	udiv	ip, r3, r1
 80117ba:	9b01      	ldr	r3, [sp, #4]
 80117bc:	fb02 fc0c 	mul.w	ip, r2, ip
 80117c0:	f10c 0c04 	add.w	ip, ip, #4
 80117c4:	4463      	add	r3, ip
 80117c6:	6033      	str	r3, [r6, #0]
 80117c8:	6823      	ldr	r3, [r4, #0]
 80117ca:	4463      	add	r3, ip
 80117cc:	f853 3c04 	ldr.w	r3, [r3, #-4]
 80117d0:	603b      	str	r3, [r7, #0]
 80117d2:	7b22      	ldrb	r2, [r4, #12]
 80117d4:	429a      	cmp	r2, r3
 80117d6:	d0d2      	beq.n	801177e <uxr_next_reliable_nack_buffer_to_send+0x1a>
 80117d8:	4640      	mov	r0, r8
 80117da:	b002      	add	sp, #8
 80117dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080117e0 <uxr_process_acknack>:
 80117e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80117e2:	4604      	mov	r4, r0
 80117e4:	460e      	mov	r6, r1
 80117e6:	4610      	mov	r0, r2
 80117e8:	2101      	movs	r1, #1
 80117ea:	f000 f94b 	bl	8011a84 <uxr_seq_num_sub>
 80117ee:	8a61      	ldrh	r1, [r4, #18]
 80117f0:	f000 f948 	bl	8011a84 <uxr_seq_num_sub>
 80117f4:	b1c0      	cbz	r0, 8011828 <uxr_process_acknack+0x48>
 80117f6:	4605      	mov	r5, r0
 80117f8:	2700      	movs	r7, #0
 80117fa:	2101      	movs	r1, #1
 80117fc:	8a60      	ldrh	r0, [r4, #18]
 80117fe:	f000 f93d 	bl	8011a7c <uxr_seq_num_add>
 8011802:	f8b4 c008 	ldrh.w	ip, [r4, #8]
 8011806:	fbb0 f1fc 	udiv	r1, r0, ip
 801180a:	e9d4 2300 	ldrd	r2, r3, [r4]
 801180e:	fb0c 0111 	mls	r1, ip, r1, r0
 8011812:	b289      	uxth	r1, r1
 8011814:	3701      	adds	r7, #1
 8011816:	fbb3 f3fc 	udiv	r3, r3, ip
 801181a:	fb01 f303 	mul.w	r3, r1, r3
 801181e:	42bd      	cmp	r5, r7
 8011820:	7b21      	ldrb	r1, [r4, #12]
 8011822:	8260      	strh	r0, [r4, #18]
 8011824:	50d1      	str	r1, [r2, r3]
 8011826:	d1e8      	bne.n	80117fa <uxr_process_acknack+0x1a>
 8011828:	3e00      	subs	r6, #0
 801182a:	f04f 0300 	mov.w	r3, #0
 801182e:	bf18      	it	ne
 8011830:	2601      	movne	r6, #1
 8011832:	f884 3020 	strb.w	r3, [r4, #32]
 8011836:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
 801183a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801183c <uxr_is_output_up_to_date>:
 801183c:	8a01      	ldrh	r1, [r0, #16]
 801183e:	8a40      	ldrh	r0, [r0, #18]
 8011840:	b508      	push	{r3, lr}
 8011842:	f000 f923 	bl	8011a8c <uxr_seq_num_cmp>
 8011846:	fab0 f080 	clz	r0, r0
 801184a:	0940      	lsrs	r0, r0, #5
 801184c:	bd08      	pop	{r3, pc}
 801184e:	bf00      	nop

08011850 <get_available_free_slots>:
 8011850:	8902      	ldrh	r2, [r0, #8]
 8011852:	b1da      	cbz	r2, 801188c <get_available_free_slots+0x3c>
 8011854:	b530      	push	{r4, r5, lr}
 8011856:	2100      	movs	r1, #0
 8011858:	6843      	ldr	r3, [r0, #4]
 801185a:	6805      	ldr	r5, [r0, #0]
 801185c:	7b04      	ldrb	r4, [r0, #12]
 801185e:	fbb3 fef2 	udiv	lr, r3, r2
 8011862:	4608      	mov	r0, r1
 8011864:	460b      	mov	r3, r1
 8011866:	fbb3 fcf2 	udiv	ip, r3, r2
 801186a:	fb02 331c 	mls	r3, r2, ip, r3
 801186e:	b29b      	uxth	r3, r3
 8011870:	fb0e f303 	mul.w	r3, lr, r3
 8011874:	3101      	adds	r1, #1
 8011876:	f855 c003 	ldr.w	ip, [r5, r3]
 801187a:	4564      	cmp	r4, ip
 801187c:	bf08      	it	eq
 801187e:	3001      	addeq	r0, #1
 8011880:	b28b      	uxth	r3, r1
 8011882:	bf08      	it	eq
 8011884:	b280      	uxtheq	r0, r0
 8011886:	4293      	cmp	r3, r2
 8011888:	d3ed      	bcc.n	8011866 <get_available_free_slots+0x16>
 801188a:	bd30      	pop	{r4, r5, pc}
 801188c:	4610      	mov	r0, r2
 801188e:	4770      	bx	lr

08011890 <uxr_buffer_cancel_data>:
 8011890:	b510      	push	{r4, lr}
 8011892:	b094      	sub	sp, #80	; 0x50
 8011894:	2300      	movs	r3, #0
 8011896:	9202      	str	r2, [sp, #8]
 8011898:	9205      	str	r2, [sp, #20]
 801189a:	9301      	str	r3, [sp, #4]
 801189c:	2201      	movs	r2, #1
 801189e:	f8ad 301c 	strh.w	r3, [sp, #28]
 80118a2:	f88d 301e 	strb.w	r3, [sp, #30]
 80118a6:	f8cd 3026 	str.w	r3, [sp, #38]	; 0x26
 80118aa:	f8cd 302a 	str.w	r3, [sp, #42]	; 0x2a
 80118ae:	2308      	movs	r3, #8
 80118b0:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
 80118b4:	9300      	str	r3, [sp, #0]
 80118b6:	2210      	movs	r2, #16
 80118b8:	ab0c      	add	r3, sp, #48	; 0x30
 80118ba:	4604      	mov	r4, r0
 80118bc:	9103      	str	r1, [sp, #12]
 80118be:	f7fb fb9f 	bl	800d000 <uxr_prepare_stream_to_write_submessage>
 80118c2:	b918      	cbnz	r0, 80118cc <uxr_buffer_cancel_data+0x3c>
 80118c4:	4604      	mov	r4, r0
 80118c6:	4620      	mov	r0, r4
 80118c8:	b014      	add	sp, #80	; 0x50
 80118ca:	bd10      	pop	{r4, pc}
 80118cc:	9905      	ldr	r1, [sp, #20]
 80118ce:	aa06      	add	r2, sp, #24
 80118d0:	4620      	mov	r0, r4
 80118d2:	f7fb fccb 	bl	800d26c <uxr_init_base_object_request>
 80118d6:	a906      	add	r1, sp, #24
 80118d8:	4604      	mov	r4, r0
 80118da:	a80c      	add	r0, sp, #48	; 0x30
 80118dc:	f7fc feda 	bl	800e694 <uxr_serialize_READ_DATA_Payload>
 80118e0:	4620      	mov	r0, r4
 80118e2:	b014      	add	sp, #80	; 0x50
 80118e4:	bd10      	pop	{r4, pc}
 80118e6:	bf00      	nop

080118e8 <read_submessage_format>:
 80118e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80118ec:	b095      	sub	sp, #84	; 0x54
 80118ee:	f8bd 6078 	ldrh.w	r6, [sp, #120]	; 0x78
 80118f2:	b113      	cbz	r3, 80118fa <read_submessage_format+0x12>
 80118f4:	b015      	add	sp, #84	; 0x54
 80118f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80118fa:	460c      	mov	r4, r1
 80118fc:	4615      	mov	r5, r2
 80118fe:	e9d1 2101 	ldrd	r2, r1, [r1, #4]
 8011902:	4607      	mov	r7, r0
 8011904:	981c      	ldr	r0, [sp, #112]	; 0x70
 8011906:	9004      	str	r0, [sp, #16]
 8011908:	981d      	ldr	r0, [sp, #116]	; 0x74
 801190a:	9005      	str	r0, [sp, #20]
 801190c:	1a52      	subs	r2, r2, r1
 801190e:	a80c      	add	r0, sp, #48	; 0x30
 8011910:	4699      	mov	r9, r3
 8011912:	f89d 8076 	ldrb.w	r8, [sp, #118]	; 0x76
 8011916:	f7fa fa87 	bl	800be28 <ucdr_init_buffer>
 801191a:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 801191e:	a80c      	add	r0, sp, #48	; 0x30
 8011920:	f7fa fa56 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 8011924:	69e2      	ldr	r2, [r4, #28]
 8011926:	b19a      	cbz	r2, 8011950 <read_submessage_format+0x68>
 8011928:	f1b8 0f07 	cmp.w	r8, #7
 801192c:	f882 9014 	strb.w	r9, [r2, #20]
 8011930:	d040      	beq.n	80119b4 <read_submessage_format+0xcc>
 8011932:	f1b8 0f08 	cmp.w	r8, #8
 8011936:	d02e      	beq.n	8011996 <read_submessage_format+0xae>
 8011938:	f1b8 0f06 	cmp.w	r8, #6
 801193c:	d011      	beq.n	8011962 <read_submessage_format+0x7a>
 801193e:	2301      	movs	r3, #1
 8011940:	7513      	strb	r3, [r2, #20]
 8011942:	4629      	mov	r1, r5
 8011944:	4620      	mov	r0, r4
 8011946:	f7fa fabf 	bl	800bec8 <ucdr_advance_buffer>
 801194a:	b015      	add	sp, #84	; 0x54
 801194c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8011950:	f1b8 0f07 	cmp.w	r8, #7
 8011954:	d02e      	beq.n	80119b4 <read_submessage_format+0xcc>
 8011956:	f1b8 0f08 	cmp.w	r8, #8
 801195a:	d01c      	beq.n	8011996 <read_submessage_format+0xae>
 801195c:	f1b8 0f06 	cmp.w	r8, #6
 8011960:	d1ef      	bne.n	8011942 <read_submessage_format+0x5a>
 8011962:	f8d7 8088 	ldr.w	r8, [r7, #136]	; 0x88
 8011966:	f1b8 0f00 	cmp.w	r8, #0
 801196a:	d011      	beq.n	8011990 <read_submessage_format+0xa8>
 801196c:	ab0c      	add	r3, sp, #48	; 0x30
 801196e:	e9cd 3500 	strd	r3, r5, [sp]
 8011972:	2306      	movs	r3, #6
 8011974:	f88d 3016 	strb.w	r3, [sp, #22]
 8011978:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801197c:	9302      	str	r3, [sp, #8]
 801197e:	4632      	mov	r2, r6
 8011980:	e9dd 3104 	ldrd	r3, r1, [sp, #16]
 8011984:	4638      	mov	r0, r7
 8011986:	47c0      	blx	r8
 8011988:	2301      	movs	r3, #1
 801198a:	69e2      	ldr	r2, [r4, #28]
 801198c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011990:	2a00      	cmp	r2, #0
 8011992:	d1d4      	bne.n	801193e <read_submessage_format+0x56>
 8011994:	e7d5      	b.n	8011942 <read_submessage_format+0x5a>
 8011996:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801199a:	2b00      	cmp	r3, #0
 801199c:	d0f8      	beq.n	8011990 <read_submessage_format+0xa8>
 801199e:	a906      	add	r1, sp, #24
 80119a0:	a80c      	add	r0, sp, #48	; 0x30
 80119a2:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80119a6:	f7fc ff15 	bl	800e7d4 <uxr_deserialize_SampleIdentity>
 80119aa:	b9a0      	cbnz	r0, 80119d6 <read_submessage_format+0xee>
 80119ac:	69e2      	ldr	r2, [r4, #28]
 80119ae:	2a00      	cmp	r2, #0
 80119b0:	d1c5      	bne.n	801193e <read_submessage_format+0x56>
 80119b2:	e7c6      	b.n	8011942 <read_submessage_format+0x5a>
 80119b4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80119b8:	b13b      	cbz	r3, 80119ca <read_submessage_format+0xe2>
 80119ba:	a906      	add	r1, sp, #24
 80119bc:	a80c      	add	r0, sp, #48	; 0x30
 80119be:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 80119c2:	f7fc fc01 	bl	800e1c8 <uxr_deserialize_BaseObjectRequest>
 80119c6:	bb60      	cbnz	r0, 8011a22 <read_submessage_format+0x13a>
 80119c8:	69e2      	ldr	r2, [r4, #28]
 80119ca:	68a3      	ldr	r3, [r4, #8]
 80119cc:	442b      	add	r3, r5
 80119ce:	60a3      	str	r3, [r4, #8]
 80119d0:	2a00      	cmp	r2, #0
 80119d2:	d1b4      	bne.n	801193e <read_submessage_format+0x56>
 80119d4:	e7b5      	b.n	8011942 <read_submessage_format+0x5a>
 80119d6:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 80119da:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80119dc:	1a52      	subs	r2, r2, r1
 80119de:	eba8 0803 	sub.w	r8, r8, r3
 80119e2:	a80c      	add	r0, sp, #48	; 0x30
 80119e4:	f7fa fa20 	bl	800be28 <ucdr_init_buffer>
 80119e8:	44a8      	add	r8, r5
 80119ea:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 80119ee:	a80c      	add	r0, sp, #48	; 0x30
 80119f0:	f7fa f9ee 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 80119f4:	fa1f f888 	uxth.w	r8, r8
 80119f8:	ab0c      	add	r3, sp, #48	; 0x30
 80119fa:	9300      	str	r3, [sp, #0]
 80119fc:	f8cd 8004 	str.w	r8, [sp, #4]
 8011a00:	2108      	movs	r1, #8
 8011a02:	f88d 1016 	strb.w	r1, [sp, #22]
 8011a06:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8011a0a:	9102      	str	r1, [sp, #8]
 8011a0c:	ab06      	add	r3, sp, #24
 8011a0e:	4632      	mov	r2, r6
 8011a10:	9905      	ldr	r1, [sp, #20]
 8011a12:	f8d7 60a4 	ldr.w	r6, [r7, #164]	; 0xa4
 8011a16:	4638      	mov	r0, r7
 8011a18:	47b0      	blx	r6
 8011a1a:	2301      	movs	r3, #1
 8011a1c:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011a20:	e7c4      	b.n	80119ac <read_submessage_format+0xc4>
 8011a22:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 8011a26:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8011a28:	1a52      	subs	r2, r2, r1
 8011a2a:	a80c      	add	r0, sp, #48	; 0x30
 8011a2c:	eba8 0803 	sub.w	r8, r8, r3
 8011a30:	f7fa f9fa 	bl	800be28 <ucdr_init_buffer>
 8011a34:	e9d4 1206 	ldrd	r1, r2, [r4, #24]
 8011a38:	a80c      	add	r0, sp, #48	; 0x30
 8011a3a:	f7fa f9c9 	bl	800bdd0 <ucdr_set_on_full_buffer_callback>
 8011a3e:	ab0c      	add	r3, sp, #48	; 0x30
 8011a40:	9300      	str	r3, [sp, #0]
 8011a42:	f89d 1018 	ldrb.w	r1, [sp, #24]
 8011a46:	f89d 3019 	ldrb.w	r3, [sp, #25]
 8011a4a:	44a8      	add	r8, r5
 8011a4c:	fa1f f888 	uxth.w	r8, r8
 8011a50:	f8cd 8004 	str.w	r8, [sp, #4]
 8011a54:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 8011a58:	2107      	movs	r1, #7
 8011a5a:	f88d 1016 	strb.w	r1, [sp, #22]
 8011a5e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8011a62:	9102      	str	r1, [sp, #8]
 8011a64:	4632      	mov	r2, r6
 8011a66:	b29b      	uxth	r3, r3
 8011a68:	f8d7 60ac 	ldr.w	r6, [r7, #172]	; 0xac
 8011a6c:	9905      	ldr	r1, [sp, #20]
 8011a6e:	4638      	mov	r0, r7
 8011a70:	47b0      	blx	r6
 8011a72:	2301      	movs	r3, #1
 8011a74:	f887 30b4 	strb.w	r3, [r7, #180]	; 0xb4
 8011a78:	e7a6      	b.n	80119c8 <read_submessage_format+0xe0>
 8011a7a:	bf00      	nop

08011a7c <uxr_seq_num_add>:
 8011a7c:	4408      	add	r0, r1
 8011a7e:	b280      	uxth	r0, r0
 8011a80:	4770      	bx	lr
 8011a82:	bf00      	nop

08011a84 <uxr_seq_num_sub>:
 8011a84:	1a40      	subs	r0, r0, r1
 8011a86:	b280      	uxth	r0, r0
 8011a88:	4770      	bx	lr
 8011a8a:	bf00      	nop

08011a8c <uxr_seq_num_cmp>:
 8011a8c:	4288      	cmp	r0, r1
 8011a8e:	d011      	beq.n	8011ab4 <uxr_seq_num_cmp+0x28>
 8011a90:	d309      	bcc.n	8011aa6 <uxr_seq_num_cmp+0x1a>
 8011a92:	4288      	cmp	r0, r1
 8011a94:	d910      	bls.n	8011ab8 <uxr_seq_num_cmp+0x2c>
 8011a96:	1a40      	subs	r0, r0, r1
 8011a98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8011a9c:	bfd4      	ite	le
 8011a9e:	2001      	movle	r0, #1
 8011aa0:	f04f 30ff 	movgt.w	r0, #4294967295	; 0xffffffff
 8011aa4:	4770      	bx	lr
 8011aa6:	1a0b      	subs	r3, r1, r0
 8011aa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011aac:	daf1      	bge.n	8011a92 <uxr_seq_num_cmp+0x6>
 8011aae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8011ab2:	4770      	bx	lr
 8011ab4:	2000      	movs	r0, #0
 8011ab6:	4770      	bx	lr
 8011ab8:	2001      	movs	r0, #1
 8011aba:	4770      	bx	lr

08011abc <uxr_init_framing_io>:
 8011abc:	2300      	movs	r3, #0
 8011abe:	7041      	strb	r1, [r0, #1]
 8011ac0:	7003      	strb	r3, [r0, #0]
 8011ac2:	8583      	strh	r3, [r0, #44]	; 0x2c
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop

08011ac8 <uxr_write_framed_msg>:
 8011ac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011acc:	4617      	mov	r7, r2
 8011ace:	7842      	ldrb	r2, [r0, #1]
 8011ad0:	b083      	sub	sp, #12
 8011ad2:	460e      	mov	r6, r1
 8011ad4:	f1a2 017d 	sub.w	r1, r2, #125	; 0x7d
 8011ad8:	469a      	mov	sl, r3
 8011ada:	2901      	cmp	r1, #1
 8011adc:	f04f 037e 	mov.w	r3, #126	; 0x7e
 8011ae0:	4604      	mov	r4, r0
 8011ae2:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
 8011ae6:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8011aea:	f89d 0034 	ldrb.w	r0, [sp, #52]	; 0x34
 8011aee:	f240 8137 	bls.w	8011d60 <uxr_write_framed_msg+0x298>
 8011af2:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8011af6:	f884 2039 	strb.w	r2, [r4, #57]	; 0x39
 8011afa:	2901      	cmp	r1, #1
 8011afc:	f04f 0202 	mov.w	r2, #2
 8011b00:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011b04:	f240 808f 	bls.w	8011c26 <uxr_write_framed_msg+0x15e>
 8011b08:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b0a:	f884 003a 	strb.w	r0, [r4, #58]	; 0x3a
 8011b0e:	b2dd      	uxtb	r5, r3
 8011b10:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8011b14:	2203      	movs	r2, #3
 8011b16:	2901      	cmp	r1, #1
 8011b18:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011b1c:	f240 809a 	bls.w	8011c54 <uxr_write_framed_msg+0x18c>
 8011b20:	18a1      	adds	r1, r4, r2
 8011b22:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b24:	f881 5038 	strb.w	r5, [r1, #56]	; 0x38
 8011b28:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011b2c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8011b30:	3201      	adds	r2, #1
 8011b32:	2801      	cmp	r0, #1
 8011b34:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011b38:	f240 80a0 	bls.w	8011c7c <uxr_write_framed_msg+0x1b4>
 8011b3c:	18a0      	adds	r0, r4, r2
 8011b3e:	3201      	adds	r2, #1
 8011b40:	b2d2      	uxtb	r2, r2
 8011b42:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011b46:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	f000 80a9 	beq.w	8011ca2 <uxr_write_framed_msg+0x1da>
 8011b50:	f04f 0900 	mov.w	r9, #0
 8011b54:	46c8      	mov	r8, r9
 8011b56:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011b5a:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011b5e:	2901      	cmp	r1, #1
 8011b60:	f240 80c3 	bls.w	8011cea <uxr_write_framed_msg+0x222>
 8011b64:	2a29      	cmp	r2, #41	; 0x29
 8011b66:	f200 809f 	bhi.w	8011ca8 <uxr_write_framed_msg+0x1e0>
 8011b6a:	18a1      	adds	r1, r4, r2
 8011b6c:	3201      	adds	r2, #1
 8011b6e:	b2d2      	uxtb	r2, r2
 8011b70:	f881 3038 	strb.w	r3, [r1, #56]	; 0x38
 8011b74:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011b78:	ea89 0303 	eor.w	r3, r9, r3
 8011b7c:	498c      	ldr	r1, [pc, #560]	; (8011db0 <uxr_write_framed_msg+0x2e8>)
 8011b7e:	b2db      	uxtb	r3, r3
 8011b80:	f108 0801 	add.w	r8, r8, #1
 8011b84:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8011b88:	ea83 2919 	eor.w	r9, r3, r9, lsr #8
 8011b8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011b8e:	4543      	cmp	r3, r8
 8011b90:	d8e1      	bhi.n	8011b56 <uxr_write_framed_msg+0x8e>
 8011b92:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011b96:	fa5f f889 	uxtb.w	r8, r9
 8011b9a:	9301      	str	r3, [sp, #4]
 8011b9c:	f04f 0900 	mov.w	r9, #0
 8011ba0:	f1a8 0a7d 	sub.w	sl, r8, #125	; 0x7d
 8011ba4:	fa5f f18a 	uxtb.w	r1, sl
 8011ba8:	2901      	cmp	r1, #1
 8011baa:	d921      	bls.n	8011bf0 <uxr_write_framed_msg+0x128>
 8011bac:	2a29      	cmp	r2, #41	; 0x29
 8011bae:	f240 80af 	bls.w	8011d10 <uxr_write_framed_msg+0x248>
 8011bb2:	2500      	movs	r5, #0
 8011bb4:	e000      	b.n	8011bb8 <uxr_write_framed_msg+0xf0>
 8011bb6:	b160      	cbz	r0, 8011bd2 <uxr_write_framed_msg+0x10a>
 8011bb8:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011bbc:	1b52      	subs	r2, r2, r5
 8011bbe:	465b      	mov	r3, fp
 8011bc0:	4421      	add	r1, r4
 8011bc2:	4638      	mov	r0, r7
 8011bc4:	47b0      	blx	r6
 8011bc6:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011bca:	4405      	add	r5, r0
 8011bcc:	4295      	cmp	r5, r2
 8011bce:	d3f2      	bcc.n	8011bb6 <uxr_write_framed_msg+0xee>
 8011bd0:	d003      	beq.n	8011bda <uxr_write_framed_msg+0x112>
 8011bd2:	2000      	movs	r0, #0
 8011bd4:	b003      	add	sp, #12
 8011bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011bda:	fa5f f18a 	uxtb.w	r1, sl
 8011bde:	f04f 0300 	mov.w	r3, #0
 8011be2:	2901      	cmp	r1, #1
 8011be4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011be8:	f04f 0200 	mov.w	r2, #0
 8011bec:	f200 8090 	bhi.w	8011d10 <uxr_write_framed_msg+0x248>
 8011bf0:	1c51      	adds	r1, r2, #1
 8011bf2:	b2c9      	uxtb	r1, r1
 8011bf4:	2929      	cmp	r1, #41	; 0x29
 8011bf6:	d8dc      	bhi.n	8011bb2 <uxr_write_framed_msg+0xea>
 8011bf8:	18a5      	adds	r5, r4, r2
 8011bfa:	4421      	add	r1, r4
 8011bfc:	3202      	adds	r2, #2
 8011bfe:	f088 0820 	eor.w	r8, r8, #32
 8011c02:	4648      	mov	r0, r9
 8011c04:	f04f 037d 	mov.w	r3, #125	; 0x7d
 8011c08:	b2d2      	uxtb	r2, r2
 8011c0a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
 8011c0e:	f04f 0901 	mov.w	r9, #1
 8011c12:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8011c16:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011c1a:	2800      	cmp	r0, #0
 8011c1c:	f040 8085 	bne.w	8011d2a <uxr_write_framed_msg+0x262>
 8011c20:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8011c24:	e7bc      	b.n	8011ba0 <uxr_write_framed_msg+0xd8>
 8011c26:	4611      	mov	r1, r2
 8011c28:	f04f 0c03 	mov.w	ip, #3
 8011c2c:	2204      	movs	r2, #4
 8011c2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c30:	4421      	add	r1, r4
 8011c32:	b2dd      	uxtb	r5, r3
 8011c34:	f04f 0e7d 	mov.w	lr, #125	; 0x7d
 8011c38:	f881 e038 	strb.w	lr, [r1, #56]	; 0x38
 8011c3c:	44a4      	add	ip, r4
 8011c3e:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8011c42:	f080 0020 	eor.w	r0, r0, #32
 8011c46:	2901      	cmp	r1, #1
 8011c48:	f88c 0038 	strb.w	r0, [ip, #56]	; 0x38
 8011c4c:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011c50:	f63f af66 	bhi.w	8011b20 <uxr_write_framed_msg+0x58>
 8011c54:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011c56:	18a0      	adds	r0, r4, r2
 8011c58:	f085 0520 	eor.w	r5, r5, #32
 8011c5c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8011c60:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011c64:	f880 c038 	strb.w	ip, [r0, #56]	; 0x38
 8011c68:	f880 5039 	strb.w	r5, [r0, #57]	; 0x39
 8011c6c:	f1a1 007d 	sub.w	r0, r1, #125	; 0x7d
 8011c70:	3202      	adds	r2, #2
 8011c72:	2801      	cmp	r0, #1
 8011c74:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011c78:	f63f af60 	bhi.w	8011b3c <uxr_write_framed_msg+0x74>
 8011c7c:	1c50      	adds	r0, r2, #1
 8011c7e:	18a5      	adds	r5, r4, r2
 8011c80:	fa54 f080 	uxtab	r0, r4, r0
 8011c84:	3202      	adds	r2, #2
 8011c86:	f081 0120 	eor.w	r1, r1, #32
 8011c8a:	b2d2      	uxtb	r2, r2
 8011c8c:	f04f 0c7d 	mov.w	ip, #125	; 0x7d
 8011c90:	f885 c038 	strb.w	ip, [r5, #56]	; 0x38
 8011c94:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
 8011c98:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	f47f af57 	bne.w	8011b50 <uxr_write_framed_msg+0x88>
 8011ca2:	9301      	str	r3, [sp, #4]
 8011ca4:	4698      	mov	r8, r3
 8011ca6:	e779      	b.n	8011b9c <uxr_write_framed_msg+0xd4>
 8011ca8:	2500      	movs	r5, #0
 8011caa:	e001      	b.n	8011cb0 <uxr_write_framed_msg+0x1e8>
 8011cac:	2800      	cmp	r0, #0
 8011cae:	d090      	beq.n	8011bd2 <uxr_write_framed_msg+0x10a>
 8011cb0:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011cb4:	1b52      	subs	r2, r2, r5
 8011cb6:	465b      	mov	r3, fp
 8011cb8:	4421      	add	r1, r4
 8011cba:	4638      	mov	r0, r7
 8011cbc:	47b0      	blx	r6
 8011cbe:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011cc2:	4405      	add	r5, r0
 8011cc4:	4295      	cmp	r5, r2
 8011cc6:	d3f1      	bcc.n	8011cac <uxr_write_framed_msg+0x1e4>
 8011cc8:	d183      	bne.n	8011bd2 <uxr_write_framed_msg+0x10a>
 8011cca:	f04f 0300 	mov.w	r3, #0
 8011cce:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011cd2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011cd4:	4543      	cmp	r3, r8
 8011cd6:	d964      	bls.n	8011da2 <uxr_write_framed_msg+0x2da>
 8011cd8:	f81a 3008 	ldrb.w	r3, [sl, r8]
 8011cdc:	f1a3 017d 	sub.w	r1, r3, #125	; 0x7d
 8011ce0:	2901      	cmp	r1, #1
 8011ce2:	f04f 0200 	mov.w	r2, #0
 8011ce6:	f63f af3d 	bhi.w	8011b64 <uxr_write_framed_msg+0x9c>
 8011cea:	1c51      	adds	r1, r2, #1
 8011cec:	b2c9      	uxtb	r1, r1
 8011cee:	2929      	cmp	r1, #41	; 0x29
 8011cf0:	d8da      	bhi.n	8011ca8 <uxr_write_framed_msg+0x1e0>
 8011cf2:	18a0      	adds	r0, r4, r2
 8011cf4:	4421      	add	r1, r4
 8011cf6:	f04f 057d 	mov.w	r5, #125	; 0x7d
 8011cfa:	3202      	adds	r2, #2
 8011cfc:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
 8011d00:	b2d2      	uxtb	r2, r2
 8011d02:	f083 0020 	eor.w	r0, r3, #32
 8011d06:	f881 0038 	strb.w	r0, [r1, #56]	; 0x38
 8011d0a:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011d0e:	e733      	b.n	8011b78 <uxr_write_framed_msg+0xb0>
 8011d10:	18a1      	adds	r1, r4, r2
 8011d12:	3201      	adds	r2, #1
 8011d14:	4648      	mov	r0, r9
 8011d16:	b2d2      	uxtb	r2, r2
 8011d18:	f881 8038 	strb.w	r8, [r1, #56]	; 0x38
 8011d1c:	f04f 0901 	mov.w	r9, #1
 8011d20:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011d24:	2800      	cmp	r0, #0
 8011d26:	f43f af7b 	beq.w	8011c20 <uxr_write_framed_msg+0x158>
 8011d2a:	2500      	movs	r5, #0
 8011d2c:	e002      	b.n	8011d34 <uxr_write_framed_msg+0x26c>
 8011d2e:	2800      	cmp	r0, #0
 8011d30:	f43f af4f 	beq.w	8011bd2 <uxr_write_framed_msg+0x10a>
 8011d34:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8011d38:	1b52      	subs	r2, r2, r5
 8011d3a:	465b      	mov	r3, fp
 8011d3c:	4421      	add	r1, r4
 8011d3e:	4638      	mov	r0, r7
 8011d40:	47b0      	blx	r6
 8011d42:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
 8011d46:	4405      	add	r5, r0
 8011d48:	4295      	cmp	r5, r2
 8011d4a:	d3f0      	bcc.n	8011d2e <uxr_write_framed_msg+0x266>
 8011d4c:	f47f af41 	bne.w	8011bd2 <uxr_write_framed_msg+0x10a>
 8011d50:	2300      	movs	r3, #0
 8011d52:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
 8011d56:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d58:	b298      	uxth	r0, r3
 8011d5a:	b003      	add	sp, #12
 8011d5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d60:	217d      	movs	r1, #125	; 0x7d
 8011d62:	f082 0220 	eor.w	r2, r2, #32
 8011d66:	f884 1039 	strb.w	r1, [r4, #57]	; 0x39
 8011d6a:	f1a0 017d 	sub.w	r1, r0, #125	; 0x7d
 8011d6e:	f884 203a 	strb.w	r2, [r4, #58]	; 0x3a
 8011d72:	2901      	cmp	r1, #1
 8011d74:	f04f 0203 	mov.w	r2, #3
 8011d78:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011d7c:	d804      	bhi.n	8011d88 <uxr_write_framed_msg+0x2c0>
 8011d7e:	4611      	mov	r1, r2
 8011d80:	f04f 0c04 	mov.w	ip, #4
 8011d84:	2205      	movs	r2, #5
 8011d86:	e752      	b.n	8011c2e <uxr_write_framed_msg+0x166>
 8011d88:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011d8a:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
 8011d8e:	b2dd      	uxtb	r5, r3
 8011d90:	f1a5 017d 	sub.w	r1, r5, #125	; 0x7d
 8011d94:	2204      	movs	r2, #4
 8011d96:	2901      	cmp	r1, #1
 8011d98:	f884 2062 	strb.w	r2, [r4, #98]	; 0x62
 8011d9c:	f63f aec0 	bhi.w	8011b20 <uxr_write_framed_msg+0x58>
 8011da0:	e758      	b.n	8011c54 <uxr_write_framed_msg+0x18c>
 8011da2:	ea4f 2319 	mov.w	r3, r9, lsr #8
 8011da6:	fa5f f889 	uxtb.w	r8, r9
 8011daa:	9301      	str	r3, [sp, #4]
 8011dac:	2200      	movs	r2, #0
 8011dae:	e6f5      	b.n	8011b9c <uxr_write_framed_msg+0xd4>
 8011db0:	08014ba8 	.word	0x08014ba8

08011db4 <uxr_framing_read_transport>:
 8011db4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011db8:	4604      	mov	r4, r0
 8011dba:	b083      	sub	sp, #12
 8011dbc:	461f      	mov	r7, r3
 8011dbe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
 8011dc2:	4689      	mov	r9, r1
 8011dc4:	4692      	mov	sl, r2
 8011dc6:	f7fb fbff 	bl	800d5c8 <uxr_millis>
 8011dca:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011dce:	f894 602d 	ldrb.w	r6, [r4, #45]	; 0x2d
 8011dd2:	42b3      	cmp	r3, r6
 8011dd4:	4680      	mov	r8, r0
 8011dd6:	d061      	beq.n	8011e9c <uxr_framing_read_transport+0xe8>
 8011dd8:	d81c      	bhi.n	8011e14 <uxr_framing_read_transport+0x60>
 8011dda:	1e75      	subs	r5, r6, #1
 8011ddc:	1aed      	subs	r5, r5, r3
 8011dde:	b2ed      	uxtb	r5, r5
 8011de0:	2600      	movs	r6, #0
 8011de2:	455d      	cmp	r5, fp
 8011de4:	d81f      	bhi.n	8011e26 <uxr_framing_read_transport+0x72>
 8011de6:	19ab      	adds	r3, r5, r6
 8011de8:	455b      	cmp	r3, fp
 8011dea:	bf84      	itt	hi
 8011dec:	ebab 0605 	subhi.w	r6, fp, r5
 8011df0:	b2f6      	uxtbhi	r6, r6
 8011df2:	b9ed      	cbnz	r5, 8011e30 <uxr_framing_read_transport+0x7c>
 8011df4:	f04f 0b00 	mov.w	fp, #0
 8011df8:	f7fb fbe6 	bl	800d5c8 <uxr_millis>
 8011dfc:	683b      	ldr	r3, [r7, #0]
 8011dfe:	eba0 0808 	sub.w	r8, r0, r8
 8011e02:	eba3 0308 	sub.w	r3, r3, r8
 8011e06:	4658      	mov	r0, fp
 8011e08:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011e0c:	603b      	str	r3, [r7, #0]
 8011e0e:	b003      	add	sp, #12
 8011e10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011e14:	2e00      	cmp	r6, #0
 8011e16:	d049      	beq.n	8011eac <uxr_framing_read_transport+0xf8>
 8011e18:	f1c3 052a 	rsb	r5, r3, #42	; 0x2a
 8011e1c:	b2ed      	uxtb	r5, r5
 8011e1e:	3e01      	subs	r6, #1
 8011e20:	455d      	cmp	r5, fp
 8011e22:	b2f6      	uxtb	r6, r6
 8011e24:	d9df      	bls.n	8011de6 <uxr_framing_read_transport+0x32>
 8011e26:	fa5f f58b 	uxtb.w	r5, fp
 8011e2a:	2600      	movs	r6, #0
 8011e2c:	2d00      	cmp	r5, #0
 8011e2e:	d0e1      	beq.n	8011df4 <uxr_framing_read_transport+0x40>
 8011e30:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011e34:	3102      	adds	r1, #2
 8011e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e38:	9300      	str	r3, [sp, #0]
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	4421      	add	r1, r4
 8011e3e:	462a      	mov	r2, r5
 8011e40:	4650      	mov	r0, sl
 8011e42:	47c8      	blx	r9
 8011e44:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 8011e48:	4a1a      	ldr	r2, [pc, #104]	; (8011eb4 <uxr_framing_read_transport+0x100>)
 8011e4a:	4403      	add	r3, r0
 8011e4c:	0859      	lsrs	r1, r3, #1
 8011e4e:	fba2 2101 	umull	r2, r1, r2, r1
 8011e52:	0889      	lsrs	r1, r1, #2
 8011e54:	222a      	movs	r2, #42	; 0x2a
 8011e56:	fb02 3111 	mls	r1, r2, r1, r3
 8011e5a:	4683      	mov	fp, r0
 8011e5c:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
 8011e60:	2800      	cmp	r0, #0
 8011e62:	d0c7      	beq.n	8011df4 <uxr_framing_read_transport+0x40>
 8011e64:	42a8      	cmp	r0, r5
 8011e66:	d1c7      	bne.n	8011df8 <uxr_framing_read_transport+0x44>
 8011e68:	2e00      	cmp	r6, #0
 8011e6a:	d0c5      	beq.n	8011df8 <uxr_framing_read_transport+0x44>
 8011e6c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8011e6e:	9300      	str	r3, [sp, #0]
 8011e70:	3102      	adds	r1, #2
 8011e72:	4632      	mov	r2, r6
 8011e74:	4421      	add	r1, r4
 8011e76:	2300      	movs	r3, #0
 8011e78:	4650      	mov	r0, sl
 8011e7a:	47c8      	blx	r9
 8011e7c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011e80:	4a0c      	ldr	r2, [pc, #48]	; (8011eb4 <uxr_framing_read_transport+0x100>)
 8011e82:	180b      	adds	r3, r1, r0
 8011e84:	0859      	lsrs	r1, r3, #1
 8011e86:	fba2 1201 	umull	r1, r2, r2, r1
 8011e8a:	0892      	lsrs	r2, r2, #2
 8011e8c:	212a      	movs	r1, #42	; 0x2a
 8011e8e:	fb01 3312 	mls	r3, r1, r2, r3
 8011e92:	eb00 0b05 	add.w	fp, r0, r5
 8011e96:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
 8011e9a:	e7ad      	b.n	8011df8 <uxr_framing_read_transport+0x44>
 8011e9c:	2600      	movs	r6, #0
 8011e9e:	f1bb 0f28 	cmp.w	fp, #40	; 0x28
 8011ea2:	85a6      	strh	r6, [r4, #44]	; 0x2c
 8011ea4:	d9bf      	bls.n	8011e26 <uxr_framing_read_transport+0x72>
 8011ea6:	2102      	movs	r1, #2
 8011ea8:	2529      	movs	r5, #41	; 0x29
 8011eaa:	e7c4      	b.n	8011e36 <uxr_framing_read_transport+0x82>
 8011eac:	f1c3 0529 	rsb	r5, r3, #41	; 0x29
 8011eb0:	b2ed      	uxtb	r5, r5
 8011eb2:	e796      	b.n	8011de2 <uxr_framing_read_transport+0x2e>
 8011eb4:	30c30c31 	.word	0x30c30c31

08011eb8 <uxr_read_framed_msg>:
 8011eb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011ebc:	461e      	mov	r6, r3
 8011ebe:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
 8011ec2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8011ec6:	429d      	cmp	r5, r3
 8011ec8:	b083      	sub	sp, #12
 8011eca:	4604      	mov	r4, r0
 8011ecc:	4688      	mov	r8, r1
 8011ece:	4691      	mov	r9, r2
 8011ed0:	f000 8188 	beq.w	80121e4 <uxr_read_framed_msg+0x32c>
 8011ed4:	7823      	ldrb	r3, [r4, #0]
 8011ed6:	4dc1      	ldr	r5, [pc, #772]	; (80121dc <uxr_read_framed_msg+0x324>)
 8011ed8:	4fc1      	ldr	r7, [pc, #772]	; (80121e0 <uxr_read_framed_msg+0x328>)
 8011eda:	2b07      	cmp	r3, #7
 8011edc:	d8fd      	bhi.n	8011eda <uxr_read_framed_msg+0x22>
 8011ede:	e8df f013 	tbh	[pc, r3, lsl #1]
 8011ee2:	0115      	.short	0x0115
 8011ee4:	00d600f6 	.word	0x00d600f6
 8011ee8:	009000b9 	.word	0x009000b9
 8011eec:	0030004d 	.word	0x0030004d
 8011ef0:	0008      	.short	0x0008
 8011ef2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011ef6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011efa:	4299      	cmp	r1, r3
 8011efc:	f000 814a 	beq.w	8012194 <uxr_read_framed_msg+0x2dc>
 8011f00:	18e2      	adds	r2, r4, r3
 8011f02:	7892      	ldrb	r2, [r2, #2]
 8011f04:	2a7d      	cmp	r2, #125	; 0x7d
 8011f06:	f000 8199 	beq.w	801223c <uxr_read_framed_msg+0x384>
 8011f0a:	3301      	adds	r3, #1
 8011f0c:	0858      	lsrs	r0, r3, #1
 8011f0e:	fba5 1000 	umull	r1, r0, r5, r0
 8011f12:	0880      	lsrs	r0, r0, #2
 8011f14:	212a      	movs	r1, #42	; 0x2a
 8011f16:	fb01 3310 	mls	r3, r1, r0, r3
 8011f1a:	2a7e      	cmp	r2, #126	; 0x7e
 8011f1c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011f20:	f000 8252 	beq.w	80123c8 <uxr_read_framed_msg+0x510>
 8011f24:	8ea3      	ldrh	r3, [r4, #52]	; 0x34
 8011f26:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
 8011f28:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8011f2c:	b29b      	uxth	r3, r3
 8011f2e:	2200      	movs	r2, #0
 8011f30:	4299      	cmp	r1, r3
 8011f32:	86a3      	strh	r3, [r4, #52]	; 0x34
 8011f34:	7022      	strb	r2, [r4, #0]
 8011f36:	f000 8179 	beq.w	801222c <uxr_read_framed_msg+0x374>
 8011f3a:	2000      	movs	r0, #0
 8011f3c:	b003      	add	sp, #12
 8011f3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f42:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8011f46:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 8011f4a:	4299      	cmp	r1, r3
 8011f4c:	f000 8131 	beq.w	80121b2 <uxr_read_framed_msg+0x2fa>
 8011f50:	18e2      	adds	r2, r4, r3
 8011f52:	7890      	ldrb	r0, [r2, #2]
 8011f54:	287d      	cmp	r0, #125	; 0x7d
 8011f56:	f000 8190 	beq.w	801227a <uxr_read_framed_msg+0x3c2>
 8011f5a:	3301      	adds	r3, #1
 8011f5c:	085a      	lsrs	r2, r3, #1
 8011f5e:	fba5 1202 	umull	r1, r2, r5, r2
 8011f62:	0892      	lsrs	r2, r2, #2
 8011f64:	212a      	movs	r1, #42	; 0x2a
 8011f66:	fb01 3312 	mls	r3, r1, r2, r3
 8011f6a:	287e      	cmp	r0, #126	; 0x7e
 8011f6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8011f70:	f000 821a 	beq.w	80123a8 <uxr_read_framed_msg+0x4f0>
 8011f74:	2307      	movs	r3, #7
 8011f76:	86a0      	strh	r0, [r4, #52]	; 0x34
 8011f78:	7023      	strb	r3, [r4, #0]
 8011f7a:	e7ae      	b.n	8011eda <uxr_read_framed_msg+0x22>
 8011f7c:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8011f7e:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8011f82:	459e      	cmp	lr, r3
 8011f84:	d938      	bls.n	8011ff8 <uxr_read_framed_msg+0x140>
 8011f86:	ee07 8a90 	vmov	s15, r8
 8011f8a:	212a      	movs	r1, #42	; 0x2a
 8011f8c:	e020      	b.n	8011fd0 <uxr_read_framed_msg+0x118>
 8011f8e:	f89b c002 	ldrb.w	ip, [fp, #2]
 8011f92:	f1bc 0f7d 	cmp.w	ip, #125	; 0x7d
 8011f96:	f000 80d4 	beq.w	8012142 <uxr_read_framed_msg+0x28a>
 8011f9a:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 8011f9e:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8011fa2:	f000 8219 	beq.w	80123d8 <uxr_read_framed_msg+0x520>
 8011fa6:	f806 c003 	strb.w	ip, [r6, r3]
 8011faa:	f8b4 a036 	ldrh.w	sl, [r4, #54]	; 0x36
 8011fae:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 8011fb0:	f8b4 e030 	ldrh.w	lr, [r4, #48]	; 0x30
 8011fb4:	ea8a 000c 	eor.w	r0, sl, ip
 8011fb8:	b2c0      	uxtb	r0, r0
 8011fba:	3301      	adds	r3, #1
 8011fbc:	f837 2010 	ldrh.w	r2, [r7, r0, lsl #1]
 8011fc0:	b29b      	uxth	r3, r3
 8011fc2:	ea82 221a 	eor.w	r2, r2, sl, lsr #8
 8011fc6:	4573      	cmp	r3, lr
 8011fc8:	8663      	strh	r3, [r4, #50]	; 0x32
 8011fca:	86e2      	strh	r2, [r4, #54]	; 0x36
 8011fcc:	f080 8120 	bcs.w	8012210 <uxr_read_framed_msg+0x358>
 8011fd0:	f894 002d 	ldrb.w	r0, [r4, #45]	; 0x2d
 8011fd4:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8011fd8:	f100 0c01 	add.w	ip, r0, #1
 8011fdc:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8011fe0:	fba5 8202 	umull	r8, r2, r5, r2
 8011fe4:	0892      	lsrs	r2, r2, #2
 8011fe6:	4582      	cmp	sl, r0
 8011fe8:	eb04 0b00 	add.w	fp, r4, r0
 8011fec:	fb01 c212 	mls	r2, r1, r2, ip
 8011ff0:	d1cd      	bne.n	8011f8e <uxr_read_framed_msg+0xd6>
 8011ff2:	ee17 8a90 	vmov	r8, s15
 8011ff6:	459e      	cmp	lr, r3
 8011ff8:	f040 8111 	bne.w	801221e <uxr_read_framed_msg+0x366>
 8011ffc:	2306      	movs	r3, #6
 8011ffe:	7023      	strb	r3, [r4, #0]
 8012000:	e76b      	b.n	8011eda <uxr_read_framed_msg+0x22>
 8012002:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012006:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801200a:	4298      	cmp	r0, r3
 801200c:	f000 80c2 	beq.w	8012194 <uxr_read_framed_msg+0x2dc>
 8012010:	18e2      	adds	r2, r4, r3
 8012012:	7891      	ldrb	r1, [r2, #2]
 8012014:	297d      	cmp	r1, #125	; 0x7d
 8012016:	f000 814c 	beq.w	80122b2 <uxr_read_framed_msg+0x3fa>
 801201a:	3301      	adds	r3, #1
 801201c:	085a      	lsrs	r2, r3, #1
 801201e:	fba5 0202 	umull	r0, r2, r5, r2
 8012022:	0892      	lsrs	r2, r2, #2
 8012024:	202a      	movs	r0, #42	; 0x2a
 8012026:	fb00 3312 	mls	r3, r0, r2, r3
 801202a:	297e      	cmp	r1, #126	; 0x7e
 801202c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012030:	f000 81ca 	beq.w	80123c8 <uxr_read_framed_msg+0x510>
 8012034:	8e23      	ldrh	r3, [r4, #48]	; 0x30
 8012036:	eb03 2301 	add.w	r3, r3, r1, lsl #8
 801203a:	990c      	ldr	r1, [sp, #48]	; 0x30
 801203c:	b29b      	uxth	r3, r3
 801203e:	2000      	movs	r0, #0
 8012040:	428b      	cmp	r3, r1
 8012042:	8623      	strh	r3, [r4, #48]	; 0x30
 8012044:	8660      	strh	r0, [r4, #50]	; 0x32
 8012046:	86e0      	strh	r0, [r4, #54]	; 0x36
 8012048:	f240 80df 	bls.w	801220a <uxr_read_framed_msg+0x352>
 801204c:	7020      	strb	r0, [r4, #0]
 801204e:	b003      	add	sp, #12
 8012050:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012054:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 8012058:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 801205c:	4299      	cmp	r1, r3
 801205e:	f000 80a8 	beq.w	80121b2 <uxr_read_framed_msg+0x2fa>
 8012062:	18e2      	adds	r2, r4, r3
 8012064:	7890      	ldrb	r0, [r2, #2]
 8012066:	287d      	cmp	r0, #125	; 0x7d
 8012068:	f000 8164 	beq.w	8012334 <uxr_read_framed_msg+0x47c>
 801206c:	3301      	adds	r3, #1
 801206e:	085a      	lsrs	r2, r3, #1
 8012070:	fba5 1202 	umull	r1, r2, r5, r2
 8012074:	0892      	lsrs	r2, r2, #2
 8012076:	212a      	movs	r1, #42	; 0x2a
 8012078:	fb01 3312 	mls	r3, r1, r2, r3
 801207c:	287e      	cmp	r0, #126	; 0x7e
 801207e:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012082:	f000 8191 	beq.w	80123a8 <uxr_read_framed_msg+0x4f0>
 8012086:	2304      	movs	r3, #4
 8012088:	8620      	strh	r0, [r4, #48]	; 0x30
 801208a:	7023      	strb	r3, [r4, #0]
 801208c:	e725      	b.n	8011eda <uxr_read_framed_msg+0x22>
 801208e:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
 8012092:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012096:	4290      	cmp	r0, r2
 8012098:	f000 80b3 	beq.w	8012202 <uxr_read_framed_msg+0x34a>
 801209c:	18a3      	adds	r3, r4, r2
 801209e:	7899      	ldrb	r1, [r3, #2]
 80120a0:	297d      	cmp	r1, #125	; 0x7d
 80120a2:	f000 8164 	beq.w	801236e <uxr_read_framed_msg+0x4b6>
 80120a6:	3201      	adds	r2, #1
 80120a8:	0850      	lsrs	r0, r2, #1
 80120aa:	fba5 3000 	umull	r3, r0, r5, r0
 80120ae:	0880      	lsrs	r0, r0, #2
 80120b0:	232a      	movs	r3, #42	; 0x2a
 80120b2:	fb03 2210 	mls	r2, r3, r0, r2
 80120b6:	297e      	cmp	r1, #126	; 0x7e
 80120b8:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80120bc:	f000 8188 	beq.w	80123d0 <uxr_read_framed_msg+0x518>
 80120c0:	7863      	ldrb	r3, [r4, #1]
 80120c2:	428b      	cmp	r3, r1
 80120c4:	bf0c      	ite	eq
 80120c6:	2303      	moveq	r3, #3
 80120c8:	2300      	movne	r3, #0
 80120ca:	7023      	strb	r3, [r4, #0]
 80120cc:	e705      	b.n	8011eda <uxr_read_framed_msg+0x22>
 80120ce:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80120d2:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
 80120d6:	2200      	movs	r2, #0
 80120d8:	4299      	cmp	r1, r3
 80120da:	f884 202e 	strb.w	r2, [r4, #46]	; 0x2e
 80120de:	d06c      	beq.n	80121ba <uxr_read_framed_msg+0x302>
 80120e0:	18e2      	adds	r2, r4, r3
 80120e2:	7890      	ldrb	r0, [r2, #2]
 80120e4:	287d      	cmp	r0, #125	; 0x7d
 80120e6:	f000 8101 	beq.w	80122ec <uxr_read_framed_msg+0x434>
 80120ea:	3301      	adds	r3, #1
 80120ec:	085a      	lsrs	r2, r3, #1
 80120ee:	fba5 1202 	umull	r1, r2, r5, r2
 80120f2:	0892      	lsrs	r2, r2, #2
 80120f4:	212a      	movs	r1, #42	; 0x2a
 80120f6:	fb01 3312 	mls	r3, r1, r2, r3
 80120fa:	287e      	cmp	r0, #126	; 0x7e
 80120fc:	f884 002e 	strb.w	r0, [r4, #46]	; 0x2e
 8012100:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012104:	d059      	beq.n	80121ba <uxr_read_framed_msg+0x302>
 8012106:	2302      	movs	r3, #2
 8012108:	7023      	strb	r3, [r4, #0]
 801210a:	e6e6      	b.n	8011eda <uxr_read_framed_msg+0x22>
 801210c:	f894 a02c 	ldrb.w	sl, [r4, #44]	; 0x2c
 8012110:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 8012114:	f04f 0e2a 	mov.w	lr, #42	; 0x2a
 8012118:	1c51      	adds	r1, r2, #1
 801211a:	084b      	lsrs	r3, r1, #1
 801211c:	fba5 c303 	umull	ip, r3, r5, r3
 8012120:	089b      	lsrs	r3, r3, #2
 8012122:	fb0e 1313 	mls	r3, lr, r3, r1
 8012126:	4592      	cmp	sl, r2
 8012128:	eb04 0002 	add.w	r0, r4, r2
 801212c:	b2da      	uxtb	r2, r3
 801212e:	f43f af04 	beq.w	8011f3a <uxr_read_framed_msg+0x82>
 8012132:	7883      	ldrb	r3, [r0, #2]
 8012134:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 8012138:	2b7e      	cmp	r3, #126	; 0x7e
 801213a:	d1ed      	bne.n	8012118 <uxr_read_framed_msg+0x260>
 801213c:	2301      	movs	r3, #1
 801213e:	7023      	strb	r3, [r4, #0]
 8012140:	e6cb      	b.n	8011eda <uxr_read_framed_msg+0x22>
 8012142:	f100 0c01 	add.w	ip, r0, #1
 8012146:	ea4f 025c 	mov.w	r2, ip, lsr #1
 801214a:	fba5 8202 	umull	r8, r2, r5, r2
 801214e:	0892      	lsrs	r2, r2, #2
 8012150:	fb01 c212 	mls	r2, r1, r2, ip
 8012154:	eb04 0c02 	add.w	ip, r4, r2
 8012158:	b2d2      	uxtb	r2, r2
 801215a:	4592      	cmp	sl, r2
 801215c:	f100 0002 	add.w	r0, r0, #2
 8012160:	f43f af47 	beq.w	8011ff2 <uxr_read_framed_msg+0x13a>
 8012164:	0842      	lsrs	r2, r0, #1
 8012166:	f89c a002 	ldrb.w	sl, [ip, #2]
 801216a:	fba5 8202 	umull	r8, r2, r5, r2
 801216e:	0892      	lsrs	r2, r2, #2
 8012170:	fb01 0012 	mls	r0, r1, r2, r0
 8012174:	f1ba 0f7e 	cmp.w	sl, #126	; 0x7e
 8012178:	f08a 0c20 	eor.w	ip, sl, #32
 801217c:	f884 002d 	strb.w	r0, [r4, #45]	; 0x2d
 8012180:	f47f af11 	bne.w	8011fa6 <uxr_read_framed_msg+0xee>
 8012184:	459e      	cmp	lr, r3
 8012186:	ee17 8a90 	vmov	r8, s15
 801218a:	f43f af37 	beq.w	8011ffc <uxr_read_framed_msg+0x144>
 801218e:	2301      	movs	r3, #1
 8012190:	7023      	strb	r3, [r4, #0]
 8012192:	e6a2      	b.n	8011eda <uxr_read_framed_msg+0x22>
 8012194:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012196:	9300      	str	r3, [sp, #0]
 8012198:	2301      	movs	r3, #1
 801219a:	9301      	str	r3, [sp, #4]
 801219c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801219e:	464a      	mov	r2, r9
 80121a0:	4641      	mov	r1, r8
 80121a2:	4620      	mov	r0, r4
 80121a4:	f7ff fe06 	bl	8011db4 <uxr_framing_read_transport>
 80121a8:	2800      	cmp	r0, #0
 80121aa:	f43f aec6 	beq.w	8011f3a <uxr_read_framed_msg+0x82>
 80121ae:	7823      	ldrb	r3, [r4, #0]
 80121b0:	e693      	b.n	8011eda <uxr_read_framed_msg+0x22>
 80121b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121b4:	9300      	str	r3, [sp, #0]
 80121b6:	2302      	movs	r3, #2
 80121b8:	e7ef      	b.n	801219a <uxr_read_framed_msg+0x2e2>
 80121ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121bc:	9300      	str	r3, [sp, #0]
 80121be:	2304      	movs	r3, #4
 80121c0:	9301      	str	r3, [sp, #4]
 80121c2:	464a      	mov	r2, r9
 80121c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121c6:	4641      	mov	r1, r8
 80121c8:	4620      	mov	r0, r4
 80121ca:	f7ff fdf3 	bl	8011db4 <uxr_framing_read_transport>
 80121ce:	2800      	cmp	r0, #0
 80121d0:	d1ed      	bne.n	80121ae <uxr_read_framed_msg+0x2f6>
 80121d2:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 80121d6:	2b7e      	cmp	r3, #126	; 0x7e
 80121d8:	d0e9      	beq.n	80121ae <uxr_read_framed_msg+0x2f6>
 80121da:	e6ae      	b.n	8011f3a <uxr_read_framed_msg+0x82>
 80121dc:	30c30c31 	.word	0x30c30c31
 80121e0:	08014ba8 	.word	0x08014ba8
 80121e4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80121e6:	9300      	str	r3, [sp, #0]
 80121e8:	2305      	movs	r3, #5
 80121ea:	9301      	str	r3, [sp, #4]
 80121ec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80121ee:	f7ff fde1 	bl	8011db4 <uxr_framing_read_transport>
 80121f2:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
 80121f6:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
 80121fa:	429a      	cmp	r2, r3
 80121fc:	f43f ae9d 	beq.w	8011f3a <uxr_read_framed_msg+0x82>
 8012200:	e668      	b.n	8011ed4 <uxr_read_framed_msg+0x1c>
 8012202:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012204:	9300      	str	r3, [sp, #0]
 8012206:	2303      	movs	r3, #3
 8012208:	e7c7      	b.n	801219a <uxr_read_framed_msg+0x2e2>
 801220a:	2305      	movs	r3, #5
 801220c:	7023      	strb	r3, [r4, #0]
 801220e:	e664      	b.n	8011eda <uxr_read_framed_msg+0x22>
 8012210:	ee17 8a90 	vmov	r8, s15
 8012214:	f43f aef2 	beq.w	8011ffc <uxr_read_framed_msg+0x144>
 8012218:	f1bc 0f7e 	cmp.w	ip, #126	; 0x7e
 801221c:	d08e      	beq.n	801213c <uxr_read_framed_msg+0x284>
 801221e:	ebae 0303 	sub.w	r3, lr, r3
 8012222:	3302      	adds	r3, #2
 8012224:	9301      	str	r3, [sp, #4]
 8012226:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8012228:	9300      	str	r3, [sp, #0]
 801222a:	e7b7      	b.n	801219c <uxr_read_framed_msg+0x2e4>
 801222c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 801222e:	f894 302e 	ldrb.w	r3, [r4, #46]	; 0x2e
 8012232:	7013      	strb	r3, [r2, #0]
 8012234:	8e20      	ldrh	r0, [r4, #48]	; 0x30
 8012236:	b003      	add	sp, #12
 8012238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801223c:	f103 0c01 	add.w	ip, r3, #1
 8012240:	ea4f 025c 	mov.w	r2, ip, lsr #1
 8012244:	fba5 0202 	umull	r0, r2, r5, r2
 8012248:	0892      	lsrs	r2, r2, #2
 801224a:	202a      	movs	r0, #42	; 0x2a
 801224c:	fb00 c212 	mls	r2, r0, r2, ip
 8012250:	fa5f fc82 	uxtb.w	ip, r2
 8012254:	4561      	cmp	r1, ip
 8012256:	d09d      	beq.n	8012194 <uxr_read_framed_msg+0x2dc>
 8012258:	3302      	adds	r3, #2
 801225a:	4422      	add	r2, r4
 801225c:	0859      	lsrs	r1, r3, #1
 801225e:	7892      	ldrb	r2, [r2, #2]
 8012260:	fba5 c101 	umull	ip, r1, r5, r1
 8012264:	0889      	lsrs	r1, r1, #2
 8012266:	fb00 3311 	mls	r3, r0, r1, r3
 801226a:	2a7e      	cmp	r2, #126	; 0x7e
 801226c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012270:	f000 80aa 	beq.w	80123c8 <uxr_read_framed_msg+0x510>
 8012274:	f082 0220 	eor.w	r2, r2, #32
 8012278:	e654      	b.n	8011f24 <uxr_read_framed_msg+0x6c>
 801227a:	1c58      	adds	r0, r3, #1
 801227c:	0842      	lsrs	r2, r0, #1
 801227e:	fba5 c202 	umull	ip, r2, r5, r2
 8012282:	0892      	lsrs	r2, r2, #2
 8012284:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012288:	fb0c 0212 	mls	r2, ip, r2, r0
 801228c:	b2d0      	uxtb	r0, r2
 801228e:	4281      	cmp	r1, r0
 8012290:	d08f      	beq.n	80121b2 <uxr_read_framed_msg+0x2fa>
 8012292:	4422      	add	r2, r4
 8012294:	3302      	adds	r3, #2
 8012296:	7890      	ldrb	r0, [r2, #2]
 8012298:	085a      	lsrs	r2, r3, #1
 801229a:	fba5 1202 	umull	r1, r2, r5, r2
 801229e:	0892      	lsrs	r2, r2, #2
 80122a0:	fb0c 3312 	mls	r3, ip, r2, r3
 80122a4:	287e      	cmp	r0, #126	; 0x7e
 80122a6:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80122aa:	d07d      	beq.n	80123a8 <uxr_read_framed_msg+0x4f0>
 80122ac:	f080 0020 	eor.w	r0, r0, #32
 80122b0:	e660      	b.n	8011f74 <uxr_read_framed_msg+0xbc>
 80122b2:	1c59      	adds	r1, r3, #1
 80122b4:	084a      	lsrs	r2, r1, #1
 80122b6:	fba5 c202 	umull	ip, r2, r5, r2
 80122ba:	0892      	lsrs	r2, r2, #2
 80122bc:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 80122c0:	fb0c 1212 	mls	r2, ip, r2, r1
 80122c4:	b2d1      	uxtb	r1, r2
 80122c6:	4288      	cmp	r0, r1
 80122c8:	f43f af64 	beq.w	8012194 <uxr_read_framed_msg+0x2dc>
 80122cc:	4422      	add	r2, r4
 80122ce:	3302      	adds	r3, #2
 80122d0:	7891      	ldrb	r1, [r2, #2]
 80122d2:	085a      	lsrs	r2, r3, #1
 80122d4:	fba5 0202 	umull	r0, r2, r5, r2
 80122d8:	0892      	lsrs	r2, r2, #2
 80122da:	fb0c 3312 	mls	r3, ip, r2, r3
 80122de:	297e      	cmp	r1, #126	; 0x7e
 80122e0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 80122e4:	d070      	beq.n	80123c8 <uxr_read_framed_msg+0x510>
 80122e6:	f081 0120 	eor.w	r1, r1, #32
 80122ea:	e6a3      	b.n	8012034 <uxr_read_framed_msg+0x17c>
 80122ec:	f103 0c01 	add.w	ip, r3, #1
 80122f0:	ea4f 025c 	mov.w	r2, ip, lsr #1
 80122f4:	fba5 0202 	umull	r0, r2, r5, r2
 80122f8:	0892      	lsrs	r2, r2, #2
 80122fa:	202a      	movs	r0, #42	; 0x2a
 80122fc:	fb00 c212 	mls	r2, r0, r2, ip
 8012300:	fa5f fc82 	uxtb.w	ip, r2
 8012304:	4561      	cmp	r1, ip
 8012306:	f43f af58 	beq.w	80121ba <uxr_read_framed_msg+0x302>
 801230a:	4422      	add	r2, r4
 801230c:	3302      	adds	r3, #2
 801230e:	7891      	ldrb	r1, [r2, #2]
 8012310:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8012314:	085a      	lsrs	r2, r3, #1
 8012316:	fba5 c202 	umull	ip, r2, r5, r2
 801231a:	0892      	lsrs	r2, r2, #2
 801231c:	fb00 3312 	mls	r3, r0, r2, r3
 8012320:	297e      	cmp	r1, #126	; 0x7e
 8012322:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012326:	f43f af48 	beq.w	80121ba <uxr_read_framed_msg+0x302>
 801232a:	f081 0120 	eor.w	r1, r1, #32
 801232e:	f884 102e 	strb.w	r1, [r4, #46]	; 0x2e
 8012332:	e6e8      	b.n	8012106 <uxr_read_framed_msg+0x24e>
 8012334:	1c58      	adds	r0, r3, #1
 8012336:	0842      	lsrs	r2, r0, #1
 8012338:	fba5 c202 	umull	ip, r2, r5, r2
 801233c:	0892      	lsrs	r2, r2, #2
 801233e:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 8012342:	fb0c 0212 	mls	r2, ip, r2, r0
 8012346:	b2d0      	uxtb	r0, r2
 8012348:	4281      	cmp	r1, r0
 801234a:	f43f af32 	beq.w	80121b2 <uxr_read_framed_msg+0x2fa>
 801234e:	4422      	add	r2, r4
 8012350:	3302      	adds	r3, #2
 8012352:	7890      	ldrb	r0, [r2, #2]
 8012354:	085a      	lsrs	r2, r3, #1
 8012356:	fba5 1202 	umull	r1, r2, r5, r2
 801235a:	0892      	lsrs	r2, r2, #2
 801235c:	fb0c 3312 	mls	r3, ip, r2, r3
 8012360:	287e      	cmp	r0, #126	; 0x7e
 8012362:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
 8012366:	d01f      	beq.n	80123a8 <uxr_read_framed_msg+0x4f0>
 8012368:	f080 0020 	eor.w	r0, r0, #32
 801236c:	e68b      	b.n	8012086 <uxr_read_framed_msg+0x1ce>
 801236e:	1c51      	adds	r1, r2, #1
 8012370:	084b      	lsrs	r3, r1, #1
 8012372:	fba5 c303 	umull	ip, r3, r5, r3
 8012376:	089b      	lsrs	r3, r3, #2
 8012378:	f04f 0c2a 	mov.w	ip, #42	; 0x2a
 801237c:	fb0c 1313 	mls	r3, ip, r3, r1
 8012380:	b2d9      	uxtb	r1, r3
 8012382:	4288      	cmp	r0, r1
 8012384:	f43f af3d 	beq.w	8012202 <uxr_read_framed_msg+0x34a>
 8012388:	3202      	adds	r2, #2
 801238a:	4423      	add	r3, r4
 801238c:	0850      	lsrs	r0, r2, #1
 801238e:	789b      	ldrb	r3, [r3, #2]
 8012390:	fba5 1000 	umull	r1, r0, r5, r0
 8012394:	0880      	lsrs	r0, r0, #2
 8012396:	fb0c 2210 	mls	r2, ip, r0, r2
 801239a:	2b7e      	cmp	r3, #126	; 0x7e
 801239c:	f884 202d 	strb.w	r2, [r4, #45]	; 0x2d
 80123a0:	d016      	beq.n	80123d0 <uxr_read_framed_msg+0x518>
 80123a2:	f083 0120 	eor.w	r1, r3, #32
 80123a6:	e68b      	b.n	80120c0 <uxr_read_framed_msg+0x208>
 80123a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123aa:	9300      	str	r3, [sp, #0]
 80123ac:	2302      	movs	r3, #2
 80123ae:	9301      	str	r3, [sp, #4]
 80123b0:	464a      	mov	r2, r9
 80123b2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80123b4:	4641      	mov	r1, r8
 80123b6:	4620      	mov	r0, r4
 80123b8:	f7ff fcfc 	bl	8011db4 <uxr_framing_read_transport>
 80123bc:	2800      	cmp	r0, #0
 80123be:	f47f aef6 	bne.w	80121ae <uxr_read_framed_msg+0x2f6>
 80123c2:	2301      	movs	r3, #1
 80123c4:	7023      	strb	r3, [r4, #0]
 80123c6:	e588      	b.n	8011eda <uxr_read_framed_msg+0x22>
 80123c8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123ca:	9300      	str	r3, [sp, #0]
 80123cc:	2301      	movs	r3, #1
 80123ce:	e7ee      	b.n	80123ae <uxr_read_framed_msg+0x4f6>
 80123d0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80123d2:	9300      	str	r3, [sp, #0]
 80123d4:	2303      	movs	r3, #3
 80123d6:	e7ea      	b.n	80123ae <uxr_read_framed_msg+0x4f6>
 80123d8:	ee17 8a90 	vmov	r8, s15
 80123dc:	e6ae      	b.n	801213c <uxr_read_framed_msg+0x284>
 80123de:	bf00      	nop

080123e0 <rcl_get_default_domain_id>:
 80123e0:	b530      	push	{r4, r5, lr}
 80123e2:	b083      	sub	sp, #12
 80123e4:	2300      	movs	r3, #0
 80123e6:	9300      	str	r3, [sp, #0]
 80123e8:	b1d0      	cbz	r0, 8012420 <rcl_get_default_domain_id+0x40>
 80123ea:	4604      	mov	r4, r0
 80123ec:	4669      	mov	r1, sp
 80123ee:	4815      	ldr	r0, [pc, #84]	; (8012444 <rcl_get_default_domain_id+0x64>)
 80123f0:	f7fd f93a 	bl	800f668 <rcutils_get_env>
 80123f4:	4602      	mov	r2, r0
 80123f6:	b110      	cbz	r0, 80123fe <rcl_get_default_domain_id+0x1e>
 80123f8:	2001      	movs	r0, #1
 80123fa:	b003      	add	sp, #12
 80123fc:	bd30      	pop	{r4, r5, pc}
 80123fe:	9b00      	ldr	r3, [sp, #0]
 8012400:	b18b      	cbz	r3, 8012426 <rcl_get_default_domain_id+0x46>
 8012402:	7818      	ldrb	r0, [r3, #0]
 8012404:	2800      	cmp	r0, #0
 8012406:	d0f8      	beq.n	80123fa <rcl_get_default_domain_id+0x1a>
 8012408:	a901      	add	r1, sp, #4
 801240a:	4618      	mov	r0, r3
 801240c:	9201      	str	r2, [sp, #4]
 801240e:	f000 fe89 	bl	8013124 <strtoul>
 8012412:	4605      	mov	r5, r0
 8012414:	b150      	cbz	r0, 801242c <rcl_get_default_domain_id+0x4c>
 8012416:	1c43      	adds	r3, r0, #1
 8012418:	d00d      	beq.n	8012436 <rcl_get_default_domain_id+0x56>
 801241a:	6025      	str	r5, [r4, #0]
 801241c:	2000      	movs	r0, #0
 801241e:	e7ec      	b.n	80123fa <rcl_get_default_domain_id+0x1a>
 8012420:	200b      	movs	r0, #11
 8012422:	b003      	add	sp, #12
 8012424:	bd30      	pop	{r4, r5, pc}
 8012426:	4618      	mov	r0, r3
 8012428:	b003      	add	sp, #12
 801242a:	bd30      	pop	{r4, r5, pc}
 801242c:	9b01      	ldr	r3, [sp, #4]
 801242e:	781b      	ldrb	r3, [r3, #0]
 8012430:	2b00      	cmp	r3, #0
 8012432:	d0f2      	beq.n	801241a <rcl_get_default_domain_id+0x3a>
 8012434:	e7e0      	b.n	80123f8 <rcl_get_default_domain_id+0x18>
 8012436:	f001 f885 	bl	8013544 <__errno>
 801243a:	6803      	ldr	r3, [r0, #0]
 801243c:	2b22      	cmp	r3, #34	; 0x22
 801243e:	d1ec      	bne.n	801241a <rcl_get_default_domain_id+0x3a>
 8012440:	e7da      	b.n	80123f8 <rcl_get_default_domain_id+0x18>
 8012442:	bf00      	nop
 8012444:	08014da8 	.word	0x08014da8

08012448 <rcl_expand_topic_name>:
 8012448:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801244c:	b08b      	sub	sp, #44	; 0x2c
 801244e:	9306      	str	r3, [sp, #24]
 8012450:	2800      	cmp	r0, #0
 8012452:	f000 80ad 	beq.w	80125b0 <rcl_expand_topic_name+0x168>
 8012456:	460e      	mov	r6, r1
 8012458:	2900      	cmp	r1, #0
 801245a:	f000 80a9 	beq.w	80125b0 <rcl_expand_topic_name+0x168>
 801245e:	4617      	mov	r7, r2
 8012460:	2a00      	cmp	r2, #0
 8012462:	f000 80a5 	beq.w	80125b0 <rcl_expand_topic_name+0x168>
 8012466:	2b00      	cmp	r3, #0
 8012468:	f000 80a2 	beq.w	80125b0 <rcl_expand_topic_name+0x168>
 801246c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 801246e:	2b00      	cmp	r3, #0
 8012470:	f000 809e 	beq.w	80125b0 <rcl_expand_topic_name+0x168>
 8012474:	2200      	movs	r2, #0
 8012476:	a909      	add	r1, sp, #36	; 0x24
 8012478:	4680      	mov	r8, r0
 801247a:	f000 f9f5 	bl	8012868 <rcl_validate_topic_name>
 801247e:	4604      	mov	r4, r0
 8012480:	2800      	cmp	r0, #0
 8012482:	f040 8096 	bne.w	80125b2 <rcl_expand_topic_name+0x16a>
 8012486:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8012488:	2b00      	cmp	r3, #0
 801248a:	f040 809a 	bne.w	80125c2 <rcl_expand_topic_name+0x17a>
 801248e:	4602      	mov	r2, r0
 8012490:	a909      	add	r1, sp, #36	; 0x24
 8012492:	4630      	mov	r0, r6
 8012494:	f7fd fcea 	bl	800fe6c <rmw_validate_node_name>
 8012498:	2800      	cmp	r0, #0
 801249a:	f040 808e 	bne.w	80125ba <rcl_expand_topic_name+0x172>
 801249e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80124a0:	2a00      	cmp	r2, #0
 80124a2:	f040 8093 	bne.w	80125cc <rcl_expand_topic_name+0x184>
 80124a6:	a909      	add	r1, sp, #36	; 0x24
 80124a8:	4638      	mov	r0, r7
 80124aa:	f7fd fcc1 	bl	800fe30 <rmw_validate_namespace>
 80124ae:	2800      	cmp	r0, #0
 80124b0:	f040 8083 	bne.w	80125ba <rcl_expand_topic_name+0x172>
 80124b4:	9c09      	ldr	r4, [sp, #36]	; 0x24
 80124b6:	2c00      	cmp	r4, #0
 80124b8:	f040 80ed 	bne.w	8012696 <rcl_expand_topic_name+0x24e>
 80124bc:	217b      	movs	r1, #123	; 0x7b
 80124be:	4640      	mov	r0, r8
 80124c0:	f000 ffb4 	bl	801342c <strchr>
 80124c4:	f898 3000 	ldrb.w	r3, [r8]
 80124c8:	2b2f      	cmp	r3, #47	; 0x2f
 80124ca:	4605      	mov	r5, r0
 80124cc:	f000 809e 	beq.w	801260c <rcl_expand_topic_name+0x1c4>
 80124d0:	2b7e      	cmp	r3, #126	; 0x7e
 80124d2:	f040 80a2 	bne.w	801261a <rcl_expand_topic_name+0x1d2>
 80124d6:	4638      	mov	r0, r7
 80124d8:	f7ed fe84 	bl	80001e4 <strlen>
 80124dc:	4a82      	ldr	r2, [pc, #520]	; (80126e8 <rcl_expand_topic_name+0x2a0>)
 80124de:	4b83      	ldr	r3, [pc, #524]	; (80126ec <rcl_expand_topic_name+0x2a4>)
 80124e0:	2801      	cmp	r0, #1
 80124e2:	bf18      	it	ne
 80124e4:	4613      	movne	r3, r2
 80124e6:	9302      	str	r3, [sp, #8]
 80124e8:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80124ea:	9300      	str	r3, [sp, #0]
 80124ec:	e9cd 7603 	strd	r7, r6, [sp, #12]
 80124f0:	f108 0301 	add.w	r3, r8, #1
 80124f4:	9305      	str	r3, [sp, #20]
 80124f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80124fa:	9301      	str	r3, [sp, #4]
 80124fc:	ab14      	add	r3, sp, #80	; 0x50
 80124fe:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012500:	f7fd f8da 	bl	800f6b8 <rcutils_format_string_limit>
 8012504:	4682      	mov	sl, r0
 8012506:	2800      	cmp	r0, #0
 8012508:	f000 80c7 	beq.w	801269a <rcl_expand_topic_name+0x252>
 801250c:	2d00      	cmp	r5, #0
 801250e:	f000 80a2 	beq.w	8012656 <rcl_expand_topic_name+0x20e>
 8012512:	217b      	movs	r1, #123	; 0x7b
 8012514:	f000 ff8a 	bl	801342c <strchr>
 8012518:	46d1      	mov	r9, sl
 801251a:	4605      	mov	r5, r0
 801251c:	9407      	str	r4, [sp, #28]
 801251e:	46d3      	mov	fp, sl
 8012520:	464c      	mov	r4, r9
 8012522:	2d00      	cmp	r5, #0
 8012524:	f000 80be 	beq.w	80126a4 <rcl_expand_topic_name+0x25c>
 8012528:	217d      	movs	r1, #125	; 0x7d
 801252a:	4620      	mov	r0, r4
 801252c:	f000 ff7e 	bl	801342c <strchr>
 8012530:	eba0 0905 	sub.w	r9, r0, r5
 8012534:	f109 0a01 	add.w	sl, r9, #1
 8012538:	486d      	ldr	r0, [pc, #436]	; (80126f0 <rcl_expand_topic_name+0x2a8>)
 801253a:	4652      	mov	r2, sl
 801253c:	4629      	mov	r1, r5
 801253e:	f000 ff82 	bl	8013446 <strncmp>
 8012542:	2800      	cmp	r0, #0
 8012544:	d067      	beq.n	8012616 <rcl_expand_topic_name+0x1ce>
 8012546:	486b      	ldr	r0, [pc, #428]	; (80126f4 <rcl_expand_topic_name+0x2ac>)
 8012548:	4652      	mov	r2, sl
 801254a:	4629      	mov	r1, r5
 801254c:	f000 ff7b 	bl	8013446 <strncmp>
 8012550:	b130      	cbz	r0, 8012560 <rcl_expand_topic_name+0x118>
 8012552:	4869      	ldr	r0, [pc, #420]	; (80126f8 <rcl_expand_topic_name+0x2b0>)
 8012554:	4652      	mov	r2, sl
 8012556:	4629      	mov	r1, r5
 8012558:	f000 ff75 	bl	8013446 <strncmp>
 801255c:	2800      	cmp	r0, #0
 801255e:	d137      	bne.n	80125d0 <rcl_expand_topic_name+0x188>
 8012560:	46b9      	mov	r9, r7
 8012562:	ab16      	add	r3, sp, #88	; 0x58
 8012564:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8012568:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 801256c:	ab14      	add	r3, sp, #80	; 0x50
 801256e:	4628      	mov	r0, r5
 8012570:	cb0c      	ldmia	r3, {r2, r3}
 8012572:	4651      	mov	r1, sl
 8012574:	f7fd f9dc 	bl	800f930 <rcutils_strndup>
 8012578:	4605      	mov	r5, r0
 801257a:	2800      	cmp	r0, #0
 801257c:	f000 809c 	beq.w	80126b8 <rcl_expand_topic_name+0x270>
 8012580:	464a      	mov	r2, r9
 8012582:	4620      	mov	r0, r4
 8012584:	ab14      	add	r3, sp, #80	; 0x50
 8012586:	4629      	mov	r1, r5
 8012588:	f7fd f8d0 	bl	800f72c <rcutils_repl_str>
 801258c:	9918      	ldr	r1, [sp, #96]	; 0x60
 801258e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012590:	4604      	mov	r4, r0
 8012592:	4628      	mov	r0, r5
 8012594:	4798      	blx	r3
 8012596:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012598:	9918      	ldr	r1, [sp, #96]	; 0x60
 801259a:	4658      	mov	r0, fp
 801259c:	4798      	blx	r3
 801259e:	2c00      	cmp	r4, #0
 80125a0:	d07b      	beq.n	801269a <rcl_expand_topic_name+0x252>
 80125a2:	217b      	movs	r1, #123	; 0x7b
 80125a4:	4620      	mov	r0, r4
 80125a6:	f000 ff41 	bl	801342c <strchr>
 80125aa:	46a3      	mov	fp, r4
 80125ac:	4605      	mov	r5, r0
 80125ae:	e7b8      	b.n	8012522 <rcl_expand_topic_name+0xda>
 80125b0:	240b      	movs	r4, #11
 80125b2:	4620      	mov	r0, r4
 80125b4:	b00b      	add	sp, #44	; 0x2c
 80125b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125ba:	f7fc f935 	bl	800e828 <rcl_convert_rmw_ret_to_rcl_ret>
 80125be:	4604      	mov	r4, r0
 80125c0:	e7f7      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 80125c2:	2467      	movs	r4, #103	; 0x67
 80125c4:	4620      	mov	r0, r4
 80125c6:	b00b      	add	sp, #44	; 0x2c
 80125c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80125cc:	24c9      	movs	r4, #201	; 0xc9
 80125ce:	e7f0      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 80125d0:	f109 32ff 	add.w	r2, r9, #4294967295	; 0xffffffff
 80125d4:	9806      	ldr	r0, [sp, #24]
 80125d6:	1c69      	adds	r1, r5, #1
 80125d8:	f7fd fac4 	bl	800fb64 <rcutils_string_map_getn>
 80125dc:	4681      	mov	r9, r0
 80125de:	2800      	cmp	r0, #0
 80125e0:	d1bf      	bne.n	8012562 <rcl_expand_topic_name+0x11a>
 80125e2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80125e4:	aa16      	add	r2, sp, #88	; 0x58
 80125e6:	6018      	str	r0, [r3, #0]
 80125e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80125ea:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
 80125ee:	ab14      	add	r3, sp, #80	; 0x50
 80125f0:	cb0c      	ldmia	r3, {r2, r3}
 80125f2:	4651      	mov	r1, sl
 80125f4:	4628      	mov	r0, r5
 80125f6:	f7fd f99b 	bl	800f930 <rcutils_strndup>
 80125fa:	9918      	ldr	r1, [sp, #96]	; 0x60
 80125fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80125fe:	4798      	blx	r3
 8012600:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8012602:	9918      	ldr	r1, [sp, #96]	; 0x60
 8012604:	4658      	mov	r0, fp
 8012606:	2469      	movs	r4, #105	; 0x69
 8012608:	4798      	blx	r3
 801260a:	e7d2      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 801260c:	2800      	cmp	r0, #0
 801260e:	d05b      	beq.n	80126c8 <rcl_expand_topic_name+0x280>
 8012610:	46c1      	mov	r9, r8
 8012612:	46a2      	mov	sl, r4
 8012614:	e782      	b.n	801251c <rcl_expand_topic_name+0xd4>
 8012616:	46b1      	mov	r9, r6
 8012618:	e7a3      	b.n	8012562 <rcl_expand_topic_name+0x11a>
 801261a:	2800      	cmp	r0, #0
 801261c:	d1f8      	bne.n	8012610 <rcl_expand_topic_name+0x1c8>
 801261e:	4638      	mov	r0, r7
 8012620:	f7ed fde0 	bl	80001e4 <strlen>
 8012624:	4a35      	ldr	r2, [pc, #212]	; (80126fc <rcl_expand_topic_name+0x2b4>)
 8012626:	4b36      	ldr	r3, [pc, #216]	; (8012700 <rcl_expand_topic_name+0x2b8>)
 8012628:	f8cd 8010 	str.w	r8, [sp, #16]
 801262c:	2801      	cmp	r0, #1
 801262e:	bf18      	it	ne
 8012630:	4613      	movne	r3, r2
 8012632:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012636:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801263a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801263c:	9703      	str	r7, [sp, #12]
 801263e:	9200      	str	r2, [sp, #0]
 8012640:	ab14      	add	r3, sp, #80	; 0x50
 8012642:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012644:	f7fd f838 	bl	800f6b8 <rcutils_format_string_limit>
 8012648:	4682      	mov	sl, r0
 801264a:	4653      	mov	r3, sl
 801264c:	b32b      	cbz	r3, 801269a <rcl_expand_topic_name+0x252>
 801264e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8012650:	f8c3 a000 	str.w	sl, [r3]
 8012654:	e7ad      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 8012656:	f89a 3000 	ldrb.w	r3, [sl]
 801265a:	2b2f      	cmp	r3, #47	; 0x2f
 801265c:	d0f7      	beq.n	801264e <rcl_expand_topic_name+0x206>
 801265e:	4638      	mov	r0, r7
 8012660:	f7ed fdc0 	bl	80001e4 <strlen>
 8012664:	4a25      	ldr	r2, [pc, #148]	; (80126fc <rcl_expand_topic_name+0x2b4>)
 8012666:	4b26      	ldr	r3, [pc, #152]	; (8012700 <rcl_expand_topic_name+0x2b8>)
 8012668:	f8cd a010 	str.w	sl, [sp, #16]
 801266c:	2801      	cmp	r0, #1
 801266e:	bf18      	it	ne
 8012670:	4613      	movne	r3, r2
 8012672:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8012676:	e9cd 1301 	strd	r1, r3, [sp, #4]
 801267a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 801267c:	9703      	str	r7, [sp, #12]
 801267e:	9200      	str	r2, [sp, #0]
 8012680:	ab14      	add	r3, sp, #80	; 0x50
 8012682:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8012684:	f7fd f818 	bl	800f6b8 <rcutils_format_string_limit>
 8012688:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801268a:	9918      	ldr	r1, [sp, #96]	; 0x60
 801268c:	4605      	mov	r5, r0
 801268e:	4650      	mov	r0, sl
 8012690:	4798      	blx	r3
 8012692:	46aa      	mov	sl, r5
 8012694:	e7d9      	b.n	801264a <rcl_expand_topic_name+0x202>
 8012696:	24ca      	movs	r4, #202	; 0xca
 8012698:	e78b      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 801269a:	9a19      	ldr	r2, [sp, #100]	; 0x64
 801269c:	2300      	movs	r3, #0
 801269e:	6013      	str	r3, [r2, #0]
 80126a0:	240a      	movs	r4, #10
 80126a2:	e786      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 80126a4:	465b      	mov	r3, fp
 80126a6:	9c07      	ldr	r4, [sp, #28]
 80126a8:	46da      	mov	sl, fp
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d1d3      	bne.n	8012656 <rcl_expand_topic_name+0x20e>
 80126ae:	f898 3000 	ldrb.w	r3, [r8]
 80126b2:	2b2f      	cmp	r3, #47	; 0x2f
 80126b4:	d0cb      	beq.n	801264e <rcl_expand_topic_name+0x206>
 80126b6:	e7b2      	b.n	801261e <rcl_expand_topic_name+0x1d6>
 80126b8:	e9dd 1218 	ldrd	r1, r2, [sp, #96]	; 0x60
 80126bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80126be:	6015      	str	r5, [r2, #0]
 80126c0:	4658      	mov	r0, fp
 80126c2:	4798      	blx	r3
 80126c4:	240a      	movs	r4, #10
 80126c6:	e774      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 80126c8:	ab17      	add	r3, sp, #92	; 0x5c
 80126ca:	e893 0003 	ldmia.w	r3, {r0, r1}
 80126ce:	e88d 0003 	stmia.w	sp, {r0, r1}
 80126d2:	ab14      	add	r3, sp, #80	; 0x50
 80126d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80126d6:	4640      	mov	r0, r8
 80126d8:	f7fd f908 	bl	800f8ec <rcutils_strdup>
 80126dc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80126de:	2800      	cmp	r0, #0
 80126e0:	6018      	str	r0, [r3, #0]
 80126e2:	bf08      	it	eq
 80126e4:	240a      	moveq	r4, #10
 80126e6:	e764      	b.n	80125b2 <rcl_expand_topic_name+0x16a>
 80126e8:	08014db8 	.word	0x08014db8
 80126ec:	080145a0 	.word	0x080145a0
 80126f0:	08014dc0 	.word	0x08014dc0
 80126f4:	08014dc8 	.word	0x08014dc8
 80126f8:	08014dd0 	.word	0x08014dd0
 80126fc:	08014734 	.word	0x08014734
 8012700:	080145b0 	.word	0x080145b0

08012704 <rcl_get_default_topic_name_substitutions>:
 8012704:	2800      	cmp	r0, #0
 8012706:	bf0c      	ite	eq
 8012708:	200b      	moveq	r0, #11
 801270a:	2000      	movne	r0, #0
 801270c:	4770      	bx	lr
 801270e:	bf00      	nop

08012710 <rcl_get_zero_initialized_guard_condition>:
 8012710:	4a03      	ldr	r2, [pc, #12]	; (8012720 <rcl_get_zero_initialized_guard_condition+0x10>)
 8012712:	4603      	mov	r3, r0
 8012714:	e892 0003 	ldmia.w	r2, {r0, r1}
 8012718:	e883 0003 	stmia.w	r3, {r0, r1}
 801271c:	4618      	mov	r0, r3
 801271e:	4770      	bx	lr
 8012720:	08014ddc 	.word	0x08014ddc

08012724 <rcl_guard_condition_init_from_rmw>:
 8012724:	b082      	sub	sp, #8
 8012726:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801272a:	b086      	sub	sp, #24
 801272c:	f10d 0c30 	add.w	ip, sp, #48	; 0x30
 8012730:	4604      	mov	r4, r0
 8012732:	f84c 3f04 	str.w	r3, [ip, #4]!
 8012736:	460e      	mov	r6, r1
 8012738:	4617      	mov	r7, r2
 801273a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 801273e:	f10d 0e04 	add.w	lr, sp, #4
 8012742:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8012746:	f8dc 3000 	ldr.w	r3, [ip]
 801274a:	f8ce 3000 	str.w	r3, [lr]
 801274e:	a801      	add	r0, sp, #4
 8012750:	f7f7 fe6e 	bl	800a430 <rcutils_allocator_is_valid>
 8012754:	b350      	cbz	r0, 80127ac <rcl_guard_condition_init_from_rmw+0x88>
 8012756:	b34c      	cbz	r4, 80127ac <rcl_guard_condition_init_from_rmw+0x88>
 8012758:	f8d4 8004 	ldr.w	r8, [r4, #4]
 801275c:	f1b8 0f00 	cmp.w	r8, #0
 8012760:	d11e      	bne.n	80127a0 <rcl_guard_condition_init_from_rmw+0x7c>
 8012762:	b31f      	cbz	r7, 80127ac <rcl_guard_condition_init_from_rmw+0x88>
 8012764:	4638      	mov	r0, r7
 8012766:	f7fc f87d 	bl	800e864 <rcl_context_is_valid>
 801276a:	b328      	cbz	r0, 80127b8 <rcl_guard_condition_init_from_rmw+0x94>
 801276c:	9b01      	ldr	r3, [sp, #4]
 801276e:	9905      	ldr	r1, [sp, #20]
 8012770:	201c      	movs	r0, #28
 8012772:	4798      	blx	r3
 8012774:	4605      	mov	r5, r0
 8012776:	6060      	str	r0, [r4, #4]
 8012778:	b358      	cbz	r0, 80127d2 <rcl_guard_condition_init_from_rmw+0xae>
 801277a:	b1fe      	cbz	r6, 80127bc <rcl_guard_condition_init_from_rmw+0x98>
 801277c:	6006      	str	r6, [r0, #0]
 801277e:	f880 8004 	strb.w	r8, [r0, #4]
 8012782:	ac01      	add	r4, sp, #4
 8012784:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8012786:	f105 0c08 	add.w	ip, r5, #8
 801278a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801278e:	6823      	ldr	r3, [r4, #0]
 8012790:	f8cc 3000 	str.w	r3, [ip]
 8012794:	2000      	movs	r0, #0
 8012796:	b006      	add	sp, #24
 8012798:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801279c:	b002      	add	sp, #8
 801279e:	4770      	bx	lr
 80127a0:	2064      	movs	r0, #100	; 0x64
 80127a2:	b006      	add	sp, #24
 80127a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127a8:	b002      	add	sp, #8
 80127aa:	4770      	bx	lr
 80127ac:	200b      	movs	r0, #11
 80127ae:	b006      	add	sp, #24
 80127b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80127b4:	b002      	add	sp, #8
 80127b6:	4770      	bx	lr
 80127b8:	2065      	movs	r0, #101	; 0x65
 80127ba:	e7f2      	b.n	80127a2 <rcl_guard_condition_init_from_rmw+0x7e>
 80127bc:	6838      	ldr	r0, [r7, #0]
 80127be:	3028      	adds	r0, #40	; 0x28
 80127c0:	f000 fa50 	bl	8012c64 <rmw_create_guard_condition>
 80127c4:	6028      	str	r0, [r5, #0]
 80127c6:	6865      	ldr	r5, [r4, #4]
 80127c8:	682e      	ldr	r6, [r5, #0]
 80127ca:	b126      	cbz	r6, 80127d6 <rcl_guard_condition_init_from_rmw+0xb2>
 80127cc:	2301      	movs	r3, #1
 80127ce:	712b      	strb	r3, [r5, #4]
 80127d0:	e7d7      	b.n	8012782 <rcl_guard_condition_init_from_rmw+0x5e>
 80127d2:	200a      	movs	r0, #10
 80127d4:	e7e5      	b.n	80127a2 <rcl_guard_condition_init_from_rmw+0x7e>
 80127d6:	4628      	mov	r0, r5
 80127d8:	9b02      	ldr	r3, [sp, #8]
 80127da:	9905      	ldr	r1, [sp, #20]
 80127dc:	4798      	blx	r3
 80127de:	6066      	str	r6, [r4, #4]
 80127e0:	2001      	movs	r0, #1
 80127e2:	e7de      	b.n	80127a2 <rcl_guard_condition_init_from_rmw+0x7e>

080127e4 <rcl_guard_condition_fini>:
 80127e4:	b570      	push	{r4, r5, r6, lr}
 80127e6:	b082      	sub	sp, #8
 80127e8:	b1f0      	cbz	r0, 8012828 <rcl_guard_condition_fini+0x44>
 80127ea:	6843      	ldr	r3, [r0, #4]
 80127ec:	4604      	mov	r4, r0
 80127ee:	b163      	cbz	r3, 801280a <rcl_guard_condition_fini+0x26>
 80127f0:	6818      	ldr	r0, [r3, #0]
 80127f2:	68de      	ldr	r6, [r3, #12]
 80127f4:	6999      	ldr	r1, [r3, #24]
 80127f6:	b160      	cbz	r0, 8012812 <rcl_guard_condition_fini+0x2e>
 80127f8:	791d      	ldrb	r5, [r3, #4]
 80127fa:	b965      	cbnz	r5, 8012816 <rcl_guard_condition_fini+0x32>
 80127fc:	4618      	mov	r0, r3
 80127fe:	47b0      	blx	r6
 8012800:	2300      	movs	r3, #0
 8012802:	4628      	mov	r0, r5
 8012804:	6063      	str	r3, [r4, #4]
 8012806:	b002      	add	sp, #8
 8012808:	bd70      	pop	{r4, r5, r6, pc}
 801280a:	461d      	mov	r5, r3
 801280c:	4628      	mov	r0, r5
 801280e:	b002      	add	sp, #8
 8012810:	bd70      	pop	{r4, r5, r6, pc}
 8012812:	4605      	mov	r5, r0
 8012814:	e7f2      	b.n	80127fc <rcl_guard_condition_fini+0x18>
 8012816:	9101      	str	r1, [sp, #4]
 8012818:	f000 fa38 	bl	8012c8c <rmw_destroy_guard_condition>
 801281c:	1e05      	subs	r5, r0, #0
 801281e:	6863      	ldr	r3, [r4, #4]
 8012820:	9901      	ldr	r1, [sp, #4]
 8012822:	bf18      	it	ne
 8012824:	2501      	movne	r5, #1
 8012826:	e7e9      	b.n	80127fc <rcl_guard_condition_fini+0x18>
 8012828:	250b      	movs	r5, #11
 801282a:	4628      	mov	r0, r5
 801282c:	b002      	add	sp, #8
 801282e:	bd70      	pop	{r4, r5, r6, pc}

08012830 <rcl_guard_condition_get_default_options>:
 8012830:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012832:	b087      	sub	sp, #28
 8012834:	4606      	mov	r6, r0
 8012836:	4668      	mov	r0, sp
 8012838:	f7f7 fdec 	bl	800a414 <rcutils_get_default_allocator>
 801283c:	4b09      	ldr	r3, [pc, #36]	; (8012864 <rcl_guard_condition_get_default_options+0x34>)
 801283e:	46ee      	mov	lr, sp
 8012840:	469c      	mov	ip, r3
 8012842:	461d      	mov	r5, r3
 8012844:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012848:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801284e:	4634      	mov	r4, r6
 8012850:	f8de 7000 	ldr.w	r7, [lr]
 8012854:	f8cc 7000 	str.w	r7, [ip]
 8012858:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801285a:	4630      	mov	r0, r6
 801285c:	6027      	str	r7, [r4, #0]
 801285e:	b007      	add	sp, #28
 8012860:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012862:	bf00      	nop
 8012864:	20015a54 	.word	0x20015a54

08012868 <rcl_validate_topic_name>:
 8012868:	2800      	cmp	r0, #0
 801286a:	d07a      	beq.n	8012962 <rcl_validate_topic_name+0xfa>
 801286c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012870:	460e      	mov	r6, r1
 8012872:	2900      	cmp	r1, #0
 8012874:	d07c      	beq.n	8012970 <rcl_validate_topic_name+0x108>
 8012876:	4617      	mov	r7, r2
 8012878:	4605      	mov	r5, r0
 801287a:	f7ed fcb3 	bl	80001e4 <strlen>
 801287e:	b1b0      	cbz	r0, 80128ae <rcl_validate_topic_name+0x46>
 8012880:	f895 9000 	ldrb.w	r9, [r5]
 8012884:	f8df c180 	ldr.w	ip, [pc, #384]	; 8012a08 <rcl_validate_topic_name+0x1a0>
 8012888:	f81c 3009 	ldrb.w	r3, [ip, r9]
 801288c:	f013 0304 	ands.w	r3, r3, #4
 8012890:	d169      	bne.n	8012966 <rcl_validate_topic_name+0xfe>
 8012892:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8012896:	f815 2008 	ldrb.w	r2, [r5, r8]
 801289a:	2a2f      	cmp	r2, #47	; 0x2f
 801289c:	d10e      	bne.n	80128bc <rcl_validate_topic_name+0x54>
 801289e:	2202      	movs	r2, #2
 80128a0:	6032      	str	r2, [r6, #0]
 80128a2:	b36f      	cbz	r7, 8012900 <rcl_validate_topic_name+0x98>
 80128a4:	f8c7 8000 	str.w	r8, [r7]
 80128a8:	4618      	mov	r0, r3
 80128aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128ae:	2301      	movs	r3, #1
 80128b0:	6033      	str	r3, [r6, #0]
 80128b2:	b32f      	cbz	r7, 8012900 <rcl_validate_topic_name+0x98>
 80128b4:	2000      	movs	r0, #0
 80128b6:	6038      	str	r0, [r7, #0]
 80128b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80128bc:	f105 3aff 	add.w	sl, r5, #4294967295	; 0xffffffff
 80128c0:	461c      	mov	r4, r3
 80128c2:	4619      	mov	r1, r3
 80128c4:	f81a 2f01 	ldrb.w	r2, [sl, #1]!
 80128c8:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80128cc:	f1be 0f09 	cmp.w	lr, #9
 80128d0:	d919      	bls.n	8012906 <rcl_validate_topic_name+0x9e>
 80128d2:	f022 0e20 	bic.w	lr, r2, #32
 80128d6:	f1ae 0e41 	sub.w	lr, lr, #65	; 0x41
 80128da:	f1be 0f19 	cmp.w	lr, #25
 80128de:	d912      	bls.n	8012906 <rcl_validate_topic_name+0x9e>
 80128e0:	2a5f      	cmp	r2, #95	; 0x5f
 80128e2:	d019      	beq.n	8012918 <rcl_validate_topic_name+0xb0>
 80128e4:	2a2f      	cmp	r2, #47	; 0x2f
 80128e6:	d051      	beq.n	801298c <rcl_validate_topic_name+0x124>
 80128e8:	2a7e      	cmp	r2, #126	; 0x7e
 80128ea:	d048      	beq.n	801297e <rcl_validate_topic_name+0x116>
 80128ec:	2a7b      	cmp	r2, #123	; 0x7b
 80128ee:	d054      	beq.n	801299a <rcl_validate_topic_name+0x132>
 80128f0:	2a7d      	cmp	r2, #125	; 0x7d
 80128f2:	d161      	bne.n	80129b8 <rcl_validate_topic_name+0x150>
 80128f4:	2c00      	cmp	r4, #0
 80128f6:	d155      	bne.n	80129a4 <rcl_validate_topic_name+0x13c>
 80128f8:	2305      	movs	r3, #5
 80128fa:	6033      	str	r3, [r6, #0]
 80128fc:	b107      	cbz	r7, 8012900 <rcl_validate_topic_name+0x98>
 80128fe:	6039      	str	r1, [r7, #0]
 8012900:	2000      	movs	r0, #0
 8012902:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012906:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801290a:	0752      	lsls	r2, r2, #29
 801290c:	d504      	bpl.n	8012918 <rcl_validate_topic_name+0xb0>
 801290e:	b11c      	cbz	r4, 8012918 <rcl_validate_topic_name+0xb0>
 8012910:	b111      	cbz	r1, 8012918 <rcl_validate_topic_name+0xb0>
 8012912:	1e4a      	subs	r2, r1, #1
 8012914:	429a      	cmp	r2, r3
 8012916:	d02d      	beq.n	8012974 <rcl_validate_topic_name+0x10c>
 8012918:	3101      	adds	r1, #1
 801291a:	4288      	cmp	r0, r1
 801291c:	d1d2      	bne.n	80128c4 <rcl_validate_topic_name+0x5c>
 801291e:	2c00      	cmp	r4, #0
 8012920:	d145      	bne.n	80129ae <rcl_validate_topic_name+0x146>
 8012922:	f1b9 0f7e 	cmp.w	r9, #126	; 0x7e
 8012926:	d04f      	beq.n	80129c8 <rcl_validate_topic_name+0x160>
 8012928:	4620      	mov	r0, r4
 801292a:	2301      	movs	r3, #1
 801292c:	e006      	b.n	801293c <rcl_validate_topic_name+0xd4>
 801292e:	428b      	cmp	r3, r1
 8012930:	f105 0501 	add.w	r5, r5, #1
 8012934:	f103 0201 	add.w	r2, r3, #1
 8012938:	d236      	bcs.n	80129a8 <rcl_validate_topic_name+0x140>
 801293a:	4613      	mov	r3, r2
 801293c:	4580      	cmp	r8, r0
 801293e:	f100 0001 	add.w	r0, r0, #1
 8012942:	d0f4      	beq.n	801292e <rcl_validate_topic_name+0xc6>
 8012944:	782a      	ldrb	r2, [r5, #0]
 8012946:	2a2f      	cmp	r2, #47	; 0x2f
 8012948:	d1f1      	bne.n	801292e <rcl_validate_topic_name+0xc6>
 801294a:	786a      	ldrb	r2, [r5, #1]
 801294c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 8012950:	0754      	lsls	r4, r2, #29
 8012952:	d5ec      	bpl.n	801292e <rcl_validate_topic_name+0xc6>
 8012954:	2204      	movs	r2, #4
 8012956:	6032      	str	r2, [r6, #0]
 8012958:	2f00      	cmp	r7, #0
 801295a:	d0d1      	beq.n	8012900 <rcl_validate_topic_name+0x98>
 801295c:	603b      	str	r3, [r7, #0]
 801295e:	2000      	movs	r0, #0
 8012960:	e7aa      	b.n	80128b8 <rcl_validate_topic_name+0x50>
 8012962:	200b      	movs	r0, #11
 8012964:	4770      	bx	lr
 8012966:	2304      	movs	r3, #4
 8012968:	6033      	str	r3, [r6, #0]
 801296a:	2f00      	cmp	r7, #0
 801296c:	d1a2      	bne.n	80128b4 <rcl_validate_topic_name+0x4c>
 801296e:	e7c7      	b.n	8012900 <rcl_validate_topic_name+0x98>
 8012970:	200b      	movs	r0, #11
 8012972:	e7a1      	b.n	80128b8 <rcl_validate_topic_name+0x50>
 8012974:	2309      	movs	r3, #9
 8012976:	6033      	str	r3, [r6, #0]
 8012978:	2f00      	cmp	r7, #0
 801297a:	d1c0      	bne.n	80128fe <rcl_validate_topic_name+0x96>
 801297c:	e7c0      	b.n	8012900 <rcl_validate_topic_name+0x98>
 801297e:	2900      	cmp	r1, #0
 8012980:	d0ca      	beq.n	8012918 <rcl_validate_topic_name+0xb0>
 8012982:	2306      	movs	r3, #6
 8012984:	6033      	str	r3, [r6, #0]
 8012986:	2f00      	cmp	r7, #0
 8012988:	d1b9      	bne.n	80128fe <rcl_validate_topic_name+0x96>
 801298a:	e7b9      	b.n	8012900 <rcl_validate_topic_name+0x98>
 801298c:	2c00      	cmp	r4, #0
 801298e:	d0c3      	beq.n	8012918 <rcl_validate_topic_name+0xb0>
 8012990:	2308      	movs	r3, #8
 8012992:	6033      	str	r3, [r6, #0]
 8012994:	2f00      	cmp	r7, #0
 8012996:	d1b2      	bne.n	80128fe <rcl_validate_topic_name+0x96>
 8012998:	e7b2      	b.n	8012900 <rcl_validate_topic_name+0x98>
 801299a:	2c00      	cmp	r4, #0
 801299c:	d1f8      	bne.n	8012990 <rcl_validate_topic_name+0x128>
 801299e:	460b      	mov	r3, r1
 80129a0:	2401      	movs	r4, #1
 80129a2:	e7b9      	b.n	8012918 <rcl_validate_topic_name+0xb0>
 80129a4:	2400      	movs	r4, #0
 80129a6:	e7b7      	b.n	8012918 <rcl_validate_topic_name+0xb0>
 80129a8:	2000      	movs	r0, #0
 80129aa:	6030      	str	r0, [r6, #0]
 80129ac:	e784      	b.n	80128b8 <rcl_validate_topic_name+0x50>
 80129ae:	2205      	movs	r2, #5
 80129b0:	6032      	str	r2, [r6, #0]
 80129b2:	2f00      	cmp	r7, #0
 80129b4:	d1d2      	bne.n	801295c <rcl_validate_topic_name+0xf4>
 80129b6:	e7a3      	b.n	8012900 <rcl_validate_topic_name+0x98>
 80129b8:	2c00      	cmp	r4, #0
 80129ba:	bf14      	ite	ne
 80129bc:	2308      	movne	r3, #8
 80129be:	2303      	moveq	r3, #3
 80129c0:	6033      	str	r3, [r6, #0]
 80129c2:	2f00      	cmp	r7, #0
 80129c4:	d19b      	bne.n	80128fe <rcl_validate_topic_name+0x96>
 80129c6:	e79b      	b.n	8012900 <rcl_validate_topic_name+0x98>
 80129c8:	2301      	movs	r3, #1
 80129ca:	e00a      	b.n	80129e2 <rcl_validate_topic_name+0x17a>
 80129cc:	2c01      	cmp	r4, #1
 80129ce:	d013      	beq.n	80129f8 <rcl_validate_topic_name+0x190>
 80129d0:	4299      	cmp	r1, r3
 80129d2:	f104 0401 	add.w	r4, r4, #1
 80129d6:	f105 0501 	add.w	r5, r5, #1
 80129da:	f103 0201 	add.w	r2, r3, #1
 80129de:	d9e3      	bls.n	80129a8 <rcl_validate_topic_name+0x140>
 80129e0:	4613      	mov	r3, r2
 80129e2:	45a0      	cmp	r8, r4
 80129e4:	d0f4      	beq.n	80129d0 <rcl_validate_topic_name+0x168>
 80129e6:	782a      	ldrb	r2, [r5, #0]
 80129e8:	2a2f      	cmp	r2, #47	; 0x2f
 80129ea:	d1ef      	bne.n	80129cc <rcl_validate_topic_name+0x164>
 80129ec:	786a      	ldrb	r2, [r5, #1]
 80129ee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80129f2:	0752      	lsls	r2, r2, #29
 80129f4:	d5ec      	bpl.n	80129d0 <rcl_validate_topic_name+0x168>
 80129f6:	e7ad      	b.n	8012954 <rcl_validate_topic_name+0xec>
 80129f8:	2307      	movs	r3, #7
 80129fa:	6033      	str	r3, [r6, #0]
 80129fc:	2f00      	cmp	r7, #0
 80129fe:	f43f af7f 	beq.w	8012900 <rcl_validate_topic_name+0x98>
 8012a02:	603c      	str	r4, [r7, #0]
 8012a04:	2000      	movs	r0, #0
 8012a06:	e757      	b.n	80128b8 <rcl_validate_topic_name+0x50>
 8012a08:	08014e54 	.word	0x08014e54

08012a0c <on_status>:
 8012a0c:	b082      	sub	sp, #8
 8012a0e:	b002      	add	sp, #8
 8012a10:	4770      	bx	lr
 8012a12:	bf00      	nop

08012a14 <on_topic>:
 8012a14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012a18:	4a22      	ldr	r2, [pc, #136]	; (8012aa4 <on_topic+0x90>)
 8012a1a:	b094      	sub	sp, #80	; 0x50
 8012a1c:	6812      	ldr	r2, [r2, #0]
 8012a1e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 8012a20:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8012a24:	e9cd 3112 	strd	r3, r1, [sp, #72]	; 0x48
 8012a28:	b3c2      	cbz	r2, 8012a9c <on_topic+0x88>
 8012a2a:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8012a2e:	f89d 004e 	ldrb.w	r0, [sp, #78]	; 0x4e
 8012a32:	e001      	b.n	8012a38 <on_topic+0x24>
 8012a34:	6852      	ldr	r2, [r2, #4]
 8012a36:	b38a      	cbz	r2, 8012a9c <on_topic+0x88>
 8012a38:	6894      	ldr	r4, [r2, #8]
 8012a3a:	8aa3      	ldrh	r3, [r4, #20]
 8012a3c:	428b      	cmp	r3, r1
 8012a3e:	d1f9      	bne.n	8012a34 <on_topic+0x20>
 8012a40:	7da3      	ldrb	r3, [r4, #22]
 8012a42:	4283      	cmp	r3, r0
 8012a44:	d1f6      	bne.n	8012a34 <on_topic+0x20>
 8012a46:	2248      	movs	r2, #72	; 0x48
 8012a48:	f104 0130 	add.w	r1, r4, #48	; 0x30
 8012a4c:	4668      	mov	r0, sp
 8012a4e:	f000 fdad 	bl	80135ac <memcpy>
 8012a52:	f104 0328 	add.w	r3, r4, #40	; 0x28
 8012a56:	cb0c      	ldmia	r3, {r2, r3}
 8012a58:	4620      	mov	r0, r4
 8012a5a:	f7f8 f8c9 	bl	800abf0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012a5e:	4607      	mov	r7, r0
 8012a60:	b1e0      	cbz	r0, 8012a9c <on_topic+0x88>
 8012a62:	f8d0 8008 	ldr.w	r8, [r0, #8]
 8012a66:	4632      	mov	r2, r6
 8012a68:	4628      	mov	r0, r5
 8012a6a:	f108 0110 	add.w	r1, r8, #16
 8012a6e:	f7fe f831 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 8012a72:	b930      	cbnz	r0, 8012a82 <on_topic+0x6e>
 8012a74:	480c      	ldr	r0, [pc, #48]	; (8012aa8 <on_topic+0x94>)
 8012a76:	4639      	mov	r1, r7
 8012a78:	b014      	add	sp, #80	; 0x50
 8012a7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012a7e:	f7fd ba63 	b.w	800ff48 <put_memory>
 8012a82:	f8c8 4814 	str.w	r4, [r8, #2068]	; 0x814
 8012a86:	f8c8 6810 	str.w	r6, [r8, #2064]	; 0x810
 8012a8a:	f7fd ff19 	bl	80108c0 <rmw_uros_epoch_nanos>
 8012a8e:	f508 6202 	add.w	r2, r8, #2080	; 0x820
 8012a92:	2305      	movs	r3, #5
 8012a94:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012a98:	f888 3820 	strb.w	r3, [r8, #2080]	; 0x820
 8012a9c:	b014      	add	sp, #80	; 0x50
 8012a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012aa2:	bf00      	nop
 8012aa4:	20015924 	.word	0x20015924
 8012aa8:	20015914 	.word	0x20015914

08012aac <on_request>:
 8012aac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012ab0:	4823      	ldr	r0, [pc, #140]	; (8012b40 <on_request+0x94>)
 8012ab2:	b094      	sub	sp, #80	; 0x50
 8012ab4:	6800      	ldr	r0, [r0, #0]
 8012ab6:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8012ab8:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8012abc:	9113      	str	r1, [sp, #76]	; 0x4c
 8012abe:	2800      	cmp	r0, #0
 8012ac0:	d03b      	beq.n	8012b3a <on_request+0x8e>
 8012ac2:	461d      	mov	r5, r3
 8012ac4:	e001      	b.n	8012aca <on_request+0x1e>
 8012ac6:	6840      	ldr	r0, [r0, #4]
 8012ac8:	b3b8      	cbz	r0, 8012b3a <on_request+0x8e>
 8012aca:	6884      	ldr	r4, [r0, #8]
 8012acc:	8b21      	ldrh	r1, [r4, #24]
 8012ace:	4291      	cmp	r1, r2
 8012ad0:	d1f9      	bne.n	8012ac6 <on_request+0x1a>
 8012ad2:	2248      	movs	r2, #72	; 0x48
 8012ad4:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8012ad8:	4668      	mov	r0, sp
 8012ada:	f000 fd67 	bl	80135ac <memcpy>
 8012ade:	f104 0320 	add.w	r3, r4, #32
 8012ae2:	cb0c      	ldmia	r3, {r2, r3}
 8012ae4:	4620      	mov	r0, r4
 8012ae6:	f7f8 f883 	bl	800abf0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012aea:	4680      	mov	r8, r0
 8012aec:	b328      	cbz	r0, 8012b3a <on_request+0x8e>
 8012aee:	4638      	mov	r0, r7
 8012af0:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012af4:	4632      	mov	r2, r6
 8012af6:	f107 0110 	add.w	r1, r7, #16
 8012afa:	f7fd ffeb 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 8012afe:	b930      	cbnz	r0, 8012b0e <on_request+0x62>
 8012b00:	4810      	ldr	r0, [pc, #64]	; (8012b44 <on_request+0x98>)
 8012b02:	4641      	mov	r1, r8
 8012b04:	b014      	add	sp, #80	; 0x50
 8012b06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012b0a:	f7fd ba1d 	b.w	800ff48 <put_memory>
 8012b0e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8012b10:	f607 0c28 	addw	ip, r7, #2088	; 0x828
 8012b14:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8012b18:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8012b1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012b20:	e895 0003 	ldmia.w	r5, {r0, r1}
 8012b24:	e88c 0003 	stmia.w	ip, {r0, r1}
 8012b28:	f7fd feca 	bl	80108c0 <rmw_uros_epoch_nanos>
 8012b2c:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8012b30:	2303      	movs	r3, #3
 8012b32:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012b36:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8012b3a:	b014      	add	sp, #80	; 0x50
 8012b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012b40:	200158f4 	.word	0x200158f4
 8012b44:	20015914 	.word	0x20015914

08012b48 <on_reply>:
 8012b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012b4c:	4821      	ldr	r0, [pc, #132]	; (8012bd4 <on_reply+0x8c>)
 8012b4e:	b094      	sub	sp, #80	; 0x50
 8012b50:	6800      	ldr	r0, [r0, #0]
 8012b52:	9f1a      	ldr	r7, [sp, #104]	; 0x68
 8012b54:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8012b58:	9113      	str	r1, [sp, #76]	; 0x4c
 8012b5a:	b3b8      	cbz	r0, 8012bcc <on_reply+0x84>
 8012b5c:	461d      	mov	r5, r3
 8012b5e:	e001      	b.n	8012b64 <on_reply+0x1c>
 8012b60:	6840      	ldr	r0, [r0, #4]
 8012b62:	b398      	cbz	r0, 8012bcc <on_reply+0x84>
 8012b64:	6884      	ldr	r4, [r0, #8]
 8012b66:	8b21      	ldrh	r1, [r4, #24]
 8012b68:	4291      	cmp	r1, r2
 8012b6a:	d1f9      	bne.n	8012b60 <on_reply+0x18>
 8012b6c:	2248      	movs	r2, #72	; 0x48
 8012b6e:	f104 0128 	add.w	r1, r4, #40	; 0x28
 8012b72:	4668      	mov	r0, sp
 8012b74:	f000 fd1a 	bl	80135ac <memcpy>
 8012b78:	f104 0320 	add.w	r3, r4, #32
 8012b7c:	cb0c      	ldmia	r3, {r2, r3}
 8012b7e:	4620      	mov	r0, r4
 8012b80:	f7f8 f836 	bl	800abf0 <rmw_uxrce_get_static_input_buffer_for_entity>
 8012b84:	4680      	mov	r8, r0
 8012b86:	b308      	cbz	r0, 8012bcc <on_reply+0x84>
 8012b88:	4638      	mov	r0, r7
 8012b8a:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8012b8e:	4632      	mov	r2, r6
 8012b90:	f107 0110 	add.w	r1, r7, #16
 8012b94:	f7fd ff9e 	bl	8010ad4 <ucdr_deserialize_array_uint8_t>
 8012b98:	b930      	cbnz	r0, 8012ba8 <on_reply+0x60>
 8012b9a:	480f      	ldr	r0, [pc, #60]	; (8012bd8 <on_reply+0x90>)
 8012b9c:	4641      	mov	r1, r8
 8012b9e:	b014      	add	sp, #80	; 0x50
 8012ba0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ba4:	f7fd b9d0 	b.w	800ff48 <put_memory>
 8012ba8:	2200      	movs	r2, #0
 8012baa:	f8c7 282c 	str.w	r2, [r7, #2092]	; 0x82c
 8012bae:	f8c7 4814 	str.w	r4, [r7, #2068]	; 0x814
 8012bb2:	f8c7 6810 	str.w	r6, [r7, #2064]	; 0x810
 8012bb6:	f8c7 5828 	str.w	r5, [r7, #2088]	; 0x828
 8012bba:	f7fd fe81 	bl	80108c0 <rmw_uros_epoch_nanos>
 8012bbe:	f507 6202 	add.w	r2, r7, #2080	; 0x820
 8012bc2:	2304      	movs	r3, #4
 8012bc4:	e942 0102 	strd	r0, r1, [r2, #-8]
 8012bc8:	f887 3820 	strb.w	r3, [r7, #2080]	; 0x820
 8012bcc:	b014      	add	sp, #80	; 0x50
 8012bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012bd2:	bf00      	nop
 8012bd4:	20011008 	.word	0x20011008
 8012bd8:	20015914 	.word	0x20015914

08012bdc <rmw_destroy_client>:
 8012bdc:	b570      	push	{r4, r5, r6, lr}
 8012bde:	b128      	cbz	r0, 8012bec <rmw_destroy_client+0x10>
 8012be0:	4604      	mov	r4, r0
 8012be2:	6800      	ldr	r0, [r0, #0]
 8012be4:	460d      	mov	r5, r1
 8012be6:	f7f8 f8d3 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 8012bea:	b910      	cbnz	r0, 8012bf2 <rmw_destroy_client+0x16>
 8012bec:	2401      	movs	r4, #1
 8012bee:	4620      	mov	r0, r4
 8012bf0:	bd70      	pop	{r4, r5, r6, pc}
 8012bf2:	6863      	ldr	r3, [r4, #4]
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d0f9      	beq.n	8012bec <rmw_destroy_client+0x10>
 8012bf8:	2d00      	cmp	r5, #0
 8012bfa:	d0f7      	beq.n	8012bec <rmw_destroy_client+0x10>
 8012bfc:	6828      	ldr	r0, [r5, #0]
 8012bfe:	f7f8 f8c7 	bl	800ad90 <is_uxrce_rmw_identifier_valid>
 8012c02:	2800      	cmp	r0, #0
 8012c04:	d0f2      	beq.n	8012bec <rmw_destroy_client+0x10>
 8012c06:	686e      	ldr	r6, [r5, #4]
 8012c08:	2e00      	cmp	r6, #0
 8012c0a:	d0ef      	beq.n	8012bec <rmw_destroy_client+0x10>
 8012c0c:	6864      	ldr	r4, [r4, #4]
 8012c0e:	6932      	ldr	r2, [r6, #16]
 8012c10:	6920      	ldr	r0, [r4, #16]
 8012c12:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012c16:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c1a:	6819      	ldr	r1, [r3, #0]
 8012c1c:	f7fe fe38 	bl	8011890 <uxr_buffer_cancel_data>
 8012c20:	4602      	mov	r2, r0
 8012c22:	6920      	ldr	r0, [r4, #16]
 8012c24:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012c28:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012c2c:	f7f8 f830 	bl	800ac90 <run_xrce_session>
 8012c30:	6920      	ldr	r0, [r4, #16]
 8012c32:	6932      	ldr	r2, [r6, #16]
 8012c34:	f8d0 3388 	ldr.w	r3, [r0, #904]	; 0x388
 8012c38:	f500 7028 	add.w	r0, r0, #672	; 0x2a0
 8012c3c:	6819      	ldr	r1, [r3, #0]
 8012c3e:	f7f9 f963 	bl	800bf08 <uxr_buffer_delete_entity>
 8012c42:	4602      	mov	r2, r0
 8012c44:	6920      	ldr	r0, [r4, #16]
 8012c46:	f8d0 3390 	ldr.w	r3, [r0, #912]	; 0x390
 8012c4a:	f8d0 1388 	ldr.w	r1, [r0, #904]	; 0x388
 8012c4e:	f7f8 f81f 	bl	800ac90 <run_xrce_session>
 8012c52:	2800      	cmp	r0, #0
 8012c54:	4628      	mov	r0, r5
 8012c56:	bf14      	ite	ne
 8012c58:	2400      	movne	r4, #0
 8012c5a:	2402      	moveq	r4, #2
 8012c5c:	f7f7 ffa6 	bl	800abac <rmw_uxrce_fini_client_memory>
 8012c60:	e7c5      	b.n	8012bee <rmw_destroy_client+0x12>
 8012c62:	bf00      	nop

08012c64 <rmw_create_guard_condition>:
 8012c64:	b538      	push	{r3, r4, r5, lr}
 8012c66:	4605      	mov	r5, r0
 8012c68:	4807      	ldr	r0, [pc, #28]	; (8012c88 <rmw_create_guard_condition+0x24>)
 8012c6a:	f7fd f95d 	bl	800ff28 <get_memory>
 8012c6e:	b148      	cbz	r0, 8012c84 <rmw_create_guard_condition+0x20>
 8012c70:	6884      	ldr	r4, [r0, #8]
 8012c72:	2300      	movs	r3, #0
 8012c74:	7423      	strb	r3, [r4, #16]
 8012c76:	61e5      	str	r5, [r4, #28]
 8012c78:	f7fd f97a 	bl	800ff70 <rmw_get_implementation_identifier>
 8012c7c:	e9c4 0405 	strd	r0, r4, [r4, #20]
 8012c80:	f104 0014 	add.w	r0, r4, #20
 8012c84:	bd38      	pop	{r3, r4, r5, pc}
 8012c86:	bf00      	nop
 8012c88:	200158b4 	.word	0x200158b4

08012c8c <rmw_destroy_guard_condition>:
 8012c8c:	b508      	push	{r3, lr}
 8012c8e:	4b08      	ldr	r3, [pc, #32]	; (8012cb0 <rmw_destroy_guard_condition+0x24>)
 8012c90:	6819      	ldr	r1, [r3, #0]
 8012c92:	b911      	cbnz	r1, 8012c9a <rmw_destroy_guard_condition+0xe>
 8012c94:	e00a      	b.n	8012cac <rmw_destroy_guard_condition+0x20>
 8012c96:	6849      	ldr	r1, [r1, #4]
 8012c98:	b141      	cbz	r1, 8012cac <rmw_destroy_guard_condition+0x20>
 8012c9a:	688b      	ldr	r3, [r1, #8]
 8012c9c:	3314      	adds	r3, #20
 8012c9e:	4298      	cmp	r0, r3
 8012ca0:	d1f9      	bne.n	8012c96 <rmw_destroy_guard_condition+0xa>
 8012ca2:	4803      	ldr	r0, [pc, #12]	; (8012cb0 <rmw_destroy_guard_condition+0x24>)
 8012ca4:	f7fd f950 	bl	800ff48 <put_memory>
 8012ca8:	2000      	movs	r0, #0
 8012caa:	bd08      	pop	{r3, pc}
 8012cac:	2001      	movs	r0, #1
 8012cae:	bd08      	pop	{r3, pc}
 8012cb0:	200158b4 	.word	0x200158b4

08012cb4 <calloc>:
 8012cb4:	4b02      	ldr	r3, [pc, #8]	; (8012cc0 <calloc+0xc>)
 8012cb6:	460a      	mov	r2, r1
 8012cb8:	4601      	mov	r1, r0
 8012cba:	6818      	ldr	r0, [r3, #0]
 8012cbc:	f000 b802 	b.w	8012cc4 <_calloc_r>
 8012cc0:	2000010c 	.word	0x2000010c

08012cc4 <_calloc_r>:
 8012cc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012cc6:	fba1 2402 	umull	r2, r4, r1, r2
 8012cca:	b94c      	cbnz	r4, 8012ce0 <_calloc_r+0x1c>
 8012ccc:	4611      	mov	r1, r2
 8012cce:	9201      	str	r2, [sp, #4]
 8012cd0:	f000 f886 	bl	8012de0 <_malloc_r>
 8012cd4:	9a01      	ldr	r2, [sp, #4]
 8012cd6:	4605      	mov	r5, r0
 8012cd8:	b930      	cbnz	r0, 8012ce8 <_calloc_r+0x24>
 8012cda:	4628      	mov	r0, r5
 8012cdc:	b003      	add	sp, #12
 8012cde:	bd30      	pop	{r4, r5, pc}
 8012ce0:	220c      	movs	r2, #12
 8012ce2:	6002      	str	r2, [r0, #0]
 8012ce4:	2500      	movs	r5, #0
 8012ce6:	e7f8      	b.n	8012cda <_calloc_r+0x16>
 8012ce8:	4621      	mov	r1, r4
 8012cea:	f000 fb97 	bl	801341c <memset>
 8012cee:	e7f4      	b.n	8012cda <_calloc_r+0x16>

08012cf0 <getenv>:
 8012cf0:	b507      	push	{r0, r1, r2, lr}
 8012cf2:	4b04      	ldr	r3, [pc, #16]	; (8012d04 <getenv+0x14>)
 8012cf4:	4601      	mov	r1, r0
 8012cf6:	aa01      	add	r2, sp, #4
 8012cf8:	6818      	ldr	r0, [r3, #0]
 8012cfa:	f000 f805 	bl	8012d08 <_findenv_r>
 8012cfe:	b003      	add	sp, #12
 8012d00:	f85d fb04 	ldr.w	pc, [sp], #4
 8012d04:	2000010c 	.word	0x2000010c

08012d08 <_findenv_r>:
 8012d08:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012d0c:	f8df a06c 	ldr.w	sl, [pc, #108]	; 8012d7c <_findenv_r+0x74>
 8012d10:	4607      	mov	r7, r0
 8012d12:	4689      	mov	r9, r1
 8012d14:	4616      	mov	r6, r2
 8012d16:	f000 fc75 	bl	8013604 <__env_lock>
 8012d1a:	f8da 4000 	ldr.w	r4, [sl]
 8012d1e:	b134      	cbz	r4, 8012d2e <_findenv_r+0x26>
 8012d20:	464b      	mov	r3, r9
 8012d22:	4698      	mov	r8, r3
 8012d24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012d28:	b13a      	cbz	r2, 8012d3a <_findenv_r+0x32>
 8012d2a:	2a3d      	cmp	r2, #61	; 0x3d
 8012d2c:	d1f9      	bne.n	8012d22 <_findenv_r+0x1a>
 8012d2e:	4638      	mov	r0, r7
 8012d30:	f000 fc6e 	bl	8013610 <__env_unlock>
 8012d34:	2000      	movs	r0, #0
 8012d36:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012d3a:	eba8 0809 	sub.w	r8, r8, r9
 8012d3e:	46a3      	mov	fp, r4
 8012d40:	f854 0b04 	ldr.w	r0, [r4], #4
 8012d44:	2800      	cmp	r0, #0
 8012d46:	d0f2      	beq.n	8012d2e <_findenv_r+0x26>
 8012d48:	4642      	mov	r2, r8
 8012d4a:	4649      	mov	r1, r9
 8012d4c:	f000 fb7b 	bl	8013446 <strncmp>
 8012d50:	2800      	cmp	r0, #0
 8012d52:	d1f4      	bne.n	8012d3e <_findenv_r+0x36>
 8012d54:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8012d58:	eb03 0508 	add.w	r5, r3, r8
 8012d5c:	f813 3008 	ldrb.w	r3, [r3, r8]
 8012d60:	2b3d      	cmp	r3, #61	; 0x3d
 8012d62:	d1ec      	bne.n	8012d3e <_findenv_r+0x36>
 8012d64:	f8da 3000 	ldr.w	r3, [sl]
 8012d68:	ebab 0303 	sub.w	r3, fp, r3
 8012d6c:	109b      	asrs	r3, r3, #2
 8012d6e:	4638      	mov	r0, r7
 8012d70:	6033      	str	r3, [r6, #0]
 8012d72:	f000 fc4d 	bl	8013610 <__env_unlock>
 8012d76:	1c68      	adds	r0, r5, #1
 8012d78:	e7dd      	b.n	8012d36 <_findenv_r+0x2e>
 8012d7a:	bf00      	nop
 8012d7c:	20000000 	.word	0x20000000

08012d80 <malloc>:
 8012d80:	4b02      	ldr	r3, [pc, #8]	; (8012d8c <malloc+0xc>)
 8012d82:	4601      	mov	r1, r0
 8012d84:	6818      	ldr	r0, [r3, #0]
 8012d86:	f000 b82b 	b.w	8012de0 <_malloc_r>
 8012d8a:	bf00      	nop
 8012d8c:	2000010c 	.word	0x2000010c

08012d90 <free>:
 8012d90:	4b02      	ldr	r3, [pc, #8]	; (8012d9c <free+0xc>)
 8012d92:	4601      	mov	r1, r0
 8012d94:	6818      	ldr	r0, [r3, #0]
 8012d96:	f000 bc41 	b.w	801361c <_free_r>
 8012d9a:	bf00      	nop
 8012d9c:	2000010c 	.word	0x2000010c

08012da0 <sbrk_aligned>:
 8012da0:	b570      	push	{r4, r5, r6, lr}
 8012da2:	4e0e      	ldr	r6, [pc, #56]	; (8012ddc <sbrk_aligned+0x3c>)
 8012da4:	460c      	mov	r4, r1
 8012da6:	6831      	ldr	r1, [r6, #0]
 8012da8:	4605      	mov	r5, r0
 8012daa:	b911      	cbnz	r1, 8012db2 <sbrk_aligned+0x12>
 8012dac:	f000 fba8 	bl	8013500 <_sbrk_r>
 8012db0:	6030      	str	r0, [r6, #0]
 8012db2:	4621      	mov	r1, r4
 8012db4:	4628      	mov	r0, r5
 8012db6:	f000 fba3 	bl	8013500 <_sbrk_r>
 8012dba:	1c43      	adds	r3, r0, #1
 8012dbc:	d00a      	beq.n	8012dd4 <sbrk_aligned+0x34>
 8012dbe:	1cc4      	adds	r4, r0, #3
 8012dc0:	f024 0403 	bic.w	r4, r4, #3
 8012dc4:	42a0      	cmp	r0, r4
 8012dc6:	d007      	beq.n	8012dd8 <sbrk_aligned+0x38>
 8012dc8:	1a21      	subs	r1, r4, r0
 8012dca:	4628      	mov	r0, r5
 8012dcc:	f000 fb98 	bl	8013500 <_sbrk_r>
 8012dd0:	3001      	adds	r0, #1
 8012dd2:	d101      	bne.n	8012dd8 <sbrk_aligned+0x38>
 8012dd4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8012dd8:	4620      	mov	r0, r4
 8012dda:	bd70      	pop	{r4, r5, r6, pc}
 8012ddc:	20015a6c 	.word	0x20015a6c

08012de0 <_malloc_r>:
 8012de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8012de4:	1ccd      	adds	r5, r1, #3
 8012de6:	f025 0503 	bic.w	r5, r5, #3
 8012dea:	3508      	adds	r5, #8
 8012dec:	2d0c      	cmp	r5, #12
 8012dee:	bf38      	it	cc
 8012df0:	250c      	movcc	r5, #12
 8012df2:	2d00      	cmp	r5, #0
 8012df4:	4607      	mov	r7, r0
 8012df6:	db01      	blt.n	8012dfc <_malloc_r+0x1c>
 8012df8:	42a9      	cmp	r1, r5
 8012dfa:	d905      	bls.n	8012e08 <_malloc_r+0x28>
 8012dfc:	230c      	movs	r3, #12
 8012dfe:	603b      	str	r3, [r7, #0]
 8012e00:	2600      	movs	r6, #0
 8012e02:	4630      	mov	r0, r6
 8012e04:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8012e08:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8012edc <_malloc_r+0xfc>
 8012e0c:	f000 f868 	bl	8012ee0 <__malloc_lock>
 8012e10:	f8d8 3000 	ldr.w	r3, [r8]
 8012e14:	461c      	mov	r4, r3
 8012e16:	bb5c      	cbnz	r4, 8012e70 <_malloc_r+0x90>
 8012e18:	4629      	mov	r1, r5
 8012e1a:	4638      	mov	r0, r7
 8012e1c:	f7ff ffc0 	bl	8012da0 <sbrk_aligned>
 8012e20:	1c43      	adds	r3, r0, #1
 8012e22:	4604      	mov	r4, r0
 8012e24:	d155      	bne.n	8012ed2 <_malloc_r+0xf2>
 8012e26:	f8d8 4000 	ldr.w	r4, [r8]
 8012e2a:	4626      	mov	r6, r4
 8012e2c:	2e00      	cmp	r6, #0
 8012e2e:	d145      	bne.n	8012ebc <_malloc_r+0xdc>
 8012e30:	2c00      	cmp	r4, #0
 8012e32:	d048      	beq.n	8012ec6 <_malloc_r+0xe6>
 8012e34:	6823      	ldr	r3, [r4, #0]
 8012e36:	4631      	mov	r1, r6
 8012e38:	4638      	mov	r0, r7
 8012e3a:	eb04 0903 	add.w	r9, r4, r3
 8012e3e:	f000 fb5f 	bl	8013500 <_sbrk_r>
 8012e42:	4581      	cmp	r9, r0
 8012e44:	d13f      	bne.n	8012ec6 <_malloc_r+0xe6>
 8012e46:	6821      	ldr	r1, [r4, #0]
 8012e48:	1a6d      	subs	r5, r5, r1
 8012e4a:	4629      	mov	r1, r5
 8012e4c:	4638      	mov	r0, r7
 8012e4e:	f7ff ffa7 	bl	8012da0 <sbrk_aligned>
 8012e52:	3001      	adds	r0, #1
 8012e54:	d037      	beq.n	8012ec6 <_malloc_r+0xe6>
 8012e56:	6823      	ldr	r3, [r4, #0]
 8012e58:	442b      	add	r3, r5
 8012e5a:	6023      	str	r3, [r4, #0]
 8012e5c:	f8d8 3000 	ldr.w	r3, [r8]
 8012e60:	2b00      	cmp	r3, #0
 8012e62:	d038      	beq.n	8012ed6 <_malloc_r+0xf6>
 8012e64:	685a      	ldr	r2, [r3, #4]
 8012e66:	42a2      	cmp	r2, r4
 8012e68:	d12b      	bne.n	8012ec2 <_malloc_r+0xe2>
 8012e6a:	2200      	movs	r2, #0
 8012e6c:	605a      	str	r2, [r3, #4]
 8012e6e:	e00f      	b.n	8012e90 <_malloc_r+0xb0>
 8012e70:	6822      	ldr	r2, [r4, #0]
 8012e72:	1b52      	subs	r2, r2, r5
 8012e74:	d41f      	bmi.n	8012eb6 <_malloc_r+0xd6>
 8012e76:	2a0b      	cmp	r2, #11
 8012e78:	d917      	bls.n	8012eaa <_malloc_r+0xca>
 8012e7a:	1961      	adds	r1, r4, r5
 8012e7c:	42a3      	cmp	r3, r4
 8012e7e:	6025      	str	r5, [r4, #0]
 8012e80:	bf18      	it	ne
 8012e82:	6059      	strne	r1, [r3, #4]
 8012e84:	6863      	ldr	r3, [r4, #4]
 8012e86:	bf08      	it	eq
 8012e88:	f8c8 1000 	streq.w	r1, [r8]
 8012e8c:	5162      	str	r2, [r4, r5]
 8012e8e:	604b      	str	r3, [r1, #4]
 8012e90:	4638      	mov	r0, r7
 8012e92:	f104 060b 	add.w	r6, r4, #11
 8012e96:	f000 f829 	bl	8012eec <__malloc_unlock>
 8012e9a:	f026 0607 	bic.w	r6, r6, #7
 8012e9e:	1d23      	adds	r3, r4, #4
 8012ea0:	1af2      	subs	r2, r6, r3
 8012ea2:	d0ae      	beq.n	8012e02 <_malloc_r+0x22>
 8012ea4:	1b9b      	subs	r3, r3, r6
 8012ea6:	50a3      	str	r3, [r4, r2]
 8012ea8:	e7ab      	b.n	8012e02 <_malloc_r+0x22>
 8012eaa:	42a3      	cmp	r3, r4
 8012eac:	6862      	ldr	r2, [r4, #4]
 8012eae:	d1dd      	bne.n	8012e6c <_malloc_r+0x8c>
 8012eb0:	f8c8 2000 	str.w	r2, [r8]
 8012eb4:	e7ec      	b.n	8012e90 <_malloc_r+0xb0>
 8012eb6:	4623      	mov	r3, r4
 8012eb8:	6864      	ldr	r4, [r4, #4]
 8012eba:	e7ac      	b.n	8012e16 <_malloc_r+0x36>
 8012ebc:	4634      	mov	r4, r6
 8012ebe:	6876      	ldr	r6, [r6, #4]
 8012ec0:	e7b4      	b.n	8012e2c <_malloc_r+0x4c>
 8012ec2:	4613      	mov	r3, r2
 8012ec4:	e7cc      	b.n	8012e60 <_malloc_r+0x80>
 8012ec6:	230c      	movs	r3, #12
 8012ec8:	603b      	str	r3, [r7, #0]
 8012eca:	4638      	mov	r0, r7
 8012ecc:	f000 f80e 	bl	8012eec <__malloc_unlock>
 8012ed0:	e797      	b.n	8012e02 <_malloc_r+0x22>
 8012ed2:	6025      	str	r5, [r4, #0]
 8012ed4:	e7dc      	b.n	8012e90 <_malloc_r+0xb0>
 8012ed6:	605b      	str	r3, [r3, #4]
 8012ed8:	deff      	udf	#255	; 0xff
 8012eda:	bf00      	nop
 8012edc:	20015a68 	.word	0x20015a68

08012ee0 <__malloc_lock>:
 8012ee0:	4801      	ldr	r0, [pc, #4]	; (8012ee8 <__malloc_lock+0x8>)
 8012ee2:	f000 bb59 	b.w	8013598 <__retarget_lock_acquire_recursive>
 8012ee6:	bf00      	nop
 8012ee8:	20015bb1 	.word	0x20015bb1

08012eec <__malloc_unlock>:
 8012eec:	4801      	ldr	r0, [pc, #4]	; (8012ef4 <__malloc_unlock+0x8>)
 8012eee:	f000 bb54 	b.w	801359a <__retarget_lock_release_recursive>
 8012ef2:	bf00      	nop
 8012ef4:	20015bb1 	.word	0x20015bb1

08012ef8 <srand>:
 8012ef8:	b538      	push	{r3, r4, r5, lr}
 8012efa:	4b10      	ldr	r3, [pc, #64]	; (8012f3c <srand+0x44>)
 8012efc:	681d      	ldr	r5, [r3, #0]
 8012efe:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012f00:	4604      	mov	r4, r0
 8012f02:	b9b3      	cbnz	r3, 8012f32 <srand+0x3a>
 8012f04:	2018      	movs	r0, #24
 8012f06:	f7ff ff3b 	bl	8012d80 <malloc>
 8012f0a:	4602      	mov	r2, r0
 8012f0c:	6328      	str	r0, [r5, #48]	; 0x30
 8012f0e:	b920      	cbnz	r0, 8012f1a <srand+0x22>
 8012f10:	4b0b      	ldr	r3, [pc, #44]	; (8012f40 <srand+0x48>)
 8012f12:	480c      	ldr	r0, [pc, #48]	; (8012f44 <srand+0x4c>)
 8012f14:	2146      	movs	r1, #70	; 0x46
 8012f16:	f000 fb57 	bl	80135c8 <__assert_func>
 8012f1a:	490b      	ldr	r1, [pc, #44]	; (8012f48 <srand+0x50>)
 8012f1c:	4b0b      	ldr	r3, [pc, #44]	; (8012f4c <srand+0x54>)
 8012f1e:	e9c0 1300 	strd	r1, r3, [r0]
 8012f22:	4b0b      	ldr	r3, [pc, #44]	; (8012f50 <srand+0x58>)
 8012f24:	6083      	str	r3, [r0, #8]
 8012f26:	230b      	movs	r3, #11
 8012f28:	8183      	strh	r3, [r0, #12]
 8012f2a:	2100      	movs	r1, #0
 8012f2c:	2001      	movs	r0, #1
 8012f2e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f32:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8012f34:	2200      	movs	r2, #0
 8012f36:	611c      	str	r4, [r3, #16]
 8012f38:	615a      	str	r2, [r3, #20]
 8012f3a:	bd38      	pop	{r3, r4, r5, pc}
 8012f3c:	2000010c 	.word	0x2000010c
 8012f40:	08014de4 	.word	0x08014de4
 8012f44:	08014dfb 	.word	0x08014dfb
 8012f48:	abcd330e 	.word	0xabcd330e
 8012f4c:	e66d1234 	.word	0xe66d1234
 8012f50:	0005deec 	.word	0x0005deec

08012f54 <rand>:
 8012f54:	4b16      	ldr	r3, [pc, #88]	; (8012fb0 <rand+0x5c>)
 8012f56:	b510      	push	{r4, lr}
 8012f58:	681c      	ldr	r4, [r3, #0]
 8012f5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8012f5c:	b9b3      	cbnz	r3, 8012f8c <rand+0x38>
 8012f5e:	2018      	movs	r0, #24
 8012f60:	f7ff ff0e 	bl	8012d80 <malloc>
 8012f64:	4602      	mov	r2, r0
 8012f66:	6320      	str	r0, [r4, #48]	; 0x30
 8012f68:	b920      	cbnz	r0, 8012f74 <rand+0x20>
 8012f6a:	4b12      	ldr	r3, [pc, #72]	; (8012fb4 <rand+0x60>)
 8012f6c:	4812      	ldr	r0, [pc, #72]	; (8012fb8 <rand+0x64>)
 8012f6e:	2152      	movs	r1, #82	; 0x52
 8012f70:	f000 fb2a 	bl	80135c8 <__assert_func>
 8012f74:	4911      	ldr	r1, [pc, #68]	; (8012fbc <rand+0x68>)
 8012f76:	4b12      	ldr	r3, [pc, #72]	; (8012fc0 <rand+0x6c>)
 8012f78:	e9c0 1300 	strd	r1, r3, [r0]
 8012f7c:	4b11      	ldr	r3, [pc, #68]	; (8012fc4 <rand+0x70>)
 8012f7e:	6083      	str	r3, [r0, #8]
 8012f80:	230b      	movs	r3, #11
 8012f82:	8183      	strh	r3, [r0, #12]
 8012f84:	2100      	movs	r1, #0
 8012f86:	2001      	movs	r0, #1
 8012f88:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8012f8c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8012f8e:	480e      	ldr	r0, [pc, #56]	; (8012fc8 <rand+0x74>)
 8012f90:	690b      	ldr	r3, [r1, #16]
 8012f92:	694c      	ldr	r4, [r1, #20]
 8012f94:	4a0d      	ldr	r2, [pc, #52]	; (8012fcc <rand+0x78>)
 8012f96:	4358      	muls	r0, r3
 8012f98:	fb02 0004 	mla	r0, r2, r4, r0
 8012f9c:	fba3 3202 	umull	r3, r2, r3, r2
 8012fa0:	3301      	adds	r3, #1
 8012fa2:	eb40 0002 	adc.w	r0, r0, r2
 8012fa6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8012faa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8012fae:	bd10      	pop	{r4, pc}
 8012fb0:	2000010c 	.word	0x2000010c
 8012fb4:	08014de4 	.word	0x08014de4
 8012fb8:	08014dfb 	.word	0x08014dfb
 8012fbc:	abcd330e 	.word	0xabcd330e
 8012fc0:	e66d1234 	.word	0xe66d1234
 8012fc4:	0005deec 	.word	0x0005deec
 8012fc8:	5851f42d 	.word	0x5851f42d
 8012fcc:	4c957f2d 	.word	0x4c957f2d

08012fd0 <realloc>:
 8012fd0:	4b02      	ldr	r3, [pc, #8]	; (8012fdc <realloc+0xc>)
 8012fd2:	460a      	mov	r2, r1
 8012fd4:	4601      	mov	r1, r0
 8012fd6:	6818      	ldr	r0, [r3, #0]
 8012fd8:	f000 b802 	b.w	8012fe0 <_realloc_r>
 8012fdc:	2000010c 	.word	0x2000010c

08012fe0 <_realloc_r>:
 8012fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012fe4:	4680      	mov	r8, r0
 8012fe6:	4614      	mov	r4, r2
 8012fe8:	460e      	mov	r6, r1
 8012fea:	b921      	cbnz	r1, 8012ff6 <_realloc_r+0x16>
 8012fec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012ff0:	4611      	mov	r1, r2
 8012ff2:	f7ff bef5 	b.w	8012de0 <_malloc_r>
 8012ff6:	b92a      	cbnz	r2, 8013004 <_realloc_r+0x24>
 8012ff8:	f000 fb10 	bl	801361c <_free_r>
 8012ffc:	4625      	mov	r5, r4
 8012ffe:	4628      	mov	r0, r5
 8013000:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013004:	f000 fb56 	bl	80136b4 <_malloc_usable_size_r>
 8013008:	4284      	cmp	r4, r0
 801300a:	4607      	mov	r7, r0
 801300c:	d802      	bhi.n	8013014 <_realloc_r+0x34>
 801300e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8013012:	d812      	bhi.n	801303a <_realloc_r+0x5a>
 8013014:	4621      	mov	r1, r4
 8013016:	4640      	mov	r0, r8
 8013018:	f7ff fee2 	bl	8012de0 <_malloc_r>
 801301c:	4605      	mov	r5, r0
 801301e:	2800      	cmp	r0, #0
 8013020:	d0ed      	beq.n	8012ffe <_realloc_r+0x1e>
 8013022:	42bc      	cmp	r4, r7
 8013024:	4622      	mov	r2, r4
 8013026:	4631      	mov	r1, r6
 8013028:	bf28      	it	cs
 801302a:	463a      	movcs	r2, r7
 801302c:	f000 fabe 	bl	80135ac <memcpy>
 8013030:	4631      	mov	r1, r6
 8013032:	4640      	mov	r0, r8
 8013034:	f000 faf2 	bl	801361c <_free_r>
 8013038:	e7e1      	b.n	8012ffe <_realloc_r+0x1e>
 801303a:	4635      	mov	r5, r6
 801303c:	e7df      	b.n	8012ffe <_realloc_r+0x1e>
	...

08013040 <_strtoul_l.constprop.0>:
 8013040:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013044:	4f36      	ldr	r7, [pc, #216]	; (8013120 <_strtoul_l.constprop.0+0xe0>)
 8013046:	4686      	mov	lr, r0
 8013048:	460d      	mov	r5, r1
 801304a:	4628      	mov	r0, r5
 801304c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8013050:	5d3e      	ldrb	r6, [r7, r4]
 8013052:	f016 0608 	ands.w	r6, r6, #8
 8013056:	d1f8      	bne.n	801304a <_strtoul_l.constprop.0+0xa>
 8013058:	2c2d      	cmp	r4, #45	; 0x2d
 801305a:	d130      	bne.n	80130be <_strtoul_l.constprop.0+0x7e>
 801305c:	782c      	ldrb	r4, [r5, #0]
 801305e:	2601      	movs	r6, #1
 8013060:	1c85      	adds	r5, r0, #2
 8013062:	2b00      	cmp	r3, #0
 8013064:	d057      	beq.n	8013116 <_strtoul_l.constprop.0+0xd6>
 8013066:	2b10      	cmp	r3, #16
 8013068:	d109      	bne.n	801307e <_strtoul_l.constprop.0+0x3e>
 801306a:	2c30      	cmp	r4, #48	; 0x30
 801306c:	d107      	bne.n	801307e <_strtoul_l.constprop.0+0x3e>
 801306e:	7828      	ldrb	r0, [r5, #0]
 8013070:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8013074:	2858      	cmp	r0, #88	; 0x58
 8013076:	d149      	bne.n	801310c <_strtoul_l.constprop.0+0xcc>
 8013078:	786c      	ldrb	r4, [r5, #1]
 801307a:	2310      	movs	r3, #16
 801307c:	3502      	adds	r5, #2
 801307e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8013082:	2700      	movs	r7, #0
 8013084:	fbb8 f8f3 	udiv	r8, r8, r3
 8013088:	fb03 f908 	mul.w	r9, r3, r8
 801308c:	ea6f 0909 	mvn.w	r9, r9
 8013090:	4638      	mov	r0, r7
 8013092:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8013096:	f1bc 0f09 	cmp.w	ip, #9
 801309a:	d815      	bhi.n	80130c8 <_strtoul_l.constprop.0+0x88>
 801309c:	4664      	mov	r4, ip
 801309e:	42a3      	cmp	r3, r4
 80130a0:	dd23      	ble.n	80130ea <_strtoul_l.constprop.0+0xaa>
 80130a2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 80130a6:	d007      	beq.n	80130b8 <_strtoul_l.constprop.0+0x78>
 80130a8:	4580      	cmp	r8, r0
 80130aa:	d31b      	bcc.n	80130e4 <_strtoul_l.constprop.0+0xa4>
 80130ac:	d101      	bne.n	80130b2 <_strtoul_l.constprop.0+0x72>
 80130ae:	45a1      	cmp	r9, r4
 80130b0:	db18      	blt.n	80130e4 <_strtoul_l.constprop.0+0xa4>
 80130b2:	fb00 4003 	mla	r0, r0, r3, r4
 80130b6:	2701      	movs	r7, #1
 80130b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80130bc:	e7e9      	b.n	8013092 <_strtoul_l.constprop.0+0x52>
 80130be:	2c2b      	cmp	r4, #43	; 0x2b
 80130c0:	bf04      	itt	eq
 80130c2:	782c      	ldrbeq	r4, [r5, #0]
 80130c4:	1c85      	addeq	r5, r0, #2
 80130c6:	e7cc      	b.n	8013062 <_strtoul_l.constprop.0+0x22>
 80130c8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80130cc:	f1bc 0f19 	cmp.w	ip, #25
 80130d0:	d801      	bhi.n	80130d6 <_strtoul_l.constprop.0+0x96>
 80130d2:	3c37      	subs	r4, #55	; 0x37
 80130d4:	e7e3      	b.n	801309e <_strtoul_l.constprop.0+0x5e>
 80130d6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80130da:	f1bc 0f19 	cmp.w	ip, #25
 80130de:	d804      	bhi.n	80130ea <_strtoul_l.constprop.0+0xaa>
 80130e0:	3c57      	subs	r4, #87	; 0x57
 80130e2:	e7dc      	b.n	801309e <_strtoul_l.constprop.0+0x5e>
 80130e4:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80130e8:	e7e6      	b.n	80130b8 <_strtoul_l.constprop.0+0x78>
 80130ea:	1c7b      	adds	r3, r7, #1
 80130ec:	d106      	bne.n	80130fc <_strtoul_l.constprop.0+0xbc>
 80130ee:	2322      	movs	r3, #34	; 0x22
 80130f0:	f8ce 3000 	str.w	r3, [lr]
 80130f4:	4638      	mov	r0, r7
 80130f6:	b932      	cbnz	r2, 8013106 <_strtoul_l.constprop.0+0xc6>
 80130f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80130fc:	b106      	cbz	r6, 8013100 <_strtoul_l.constprop.0+0xc0>
 80130fe:	4240      	negs	r0, r0
 8013100:	2a00      	cmp	r2, #0
 8013102:	d0f9      	beq.n	80130f8 <_strtoul_l.constprop.0+0xb8>
 8013104:	b107      	cbz	r7, 8013108 <_strtoul_l.constprop.0+0xc8>
 8013106:	1e69      	subs	r1, r5, #1
 8013108:	6011      	str	r1, [r2, #0]
 801310a:	e7f5      	b.n	80130f8 <_strtoul_l.constprop.0+0xb8>
 801310c:	2430      	movs	r4, #48	; 0x30
 801310e:	2b00      	cmp	r3, #0
 8013110:	d1b5      	bne.n	801307e <_strtoul_l.constprop.0+0x3e>
 8013112:	2308      	movs	r3, #8
 8013114:	e7b3      	b.n	801307e <_strtoul_l.constprop.0+0x3e>
 8013116:	2c30      	cmp	r4, #48	; 0x30
 8013118:	d0a9      	beq.n	801306e <_strtoul_l.constprop.0+0x2e>
 801311a:	230a      	movs	r3, #10
 801311c:	e7af      	b.n	801307e <_strtoul_l.constprop.0+0x3e>
 801311e:	bf00      	nop
 8013120:	08014e54 	.word	0x08014e54

08013124 <strtoul>:
 8013124:	4613      	mov	r3, r2
 8013126:	460a      	mov	r2, r1
 8013128:	4601      	mov	r1, r0
 801312a:	4802      	ldr	r0, [pc, #8]	; (8013134 <strtoul+0x10>)
 801312c:	6800      	ldr	r0, [r0, #0]
 801312e:	f7ff bf87 	b.w	8013040 <_strtoul_l.constprop.0>
 8013132:	bf00      	nop
 8013134:	2000010c 	.word	0x2000010c

08013138 <std>:
 8013138:	2300      	movs	r3, #0
 801313a:	b510      	push	{r4, lr}
 801313c:	4604      	mov	r4, r0
 801313e:	e9c0 3300 	strd	r3, r3, [r0]
 8013142:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013146:	6083      	str	r3, [r0, #8]
 8013148:	8181      	strh	r1, [r0, #12]
 801314a:	6643      	str	r3, [r0, #100]	; 0x64
 801314c:	81c2      	strh	r2, [r0, #14]
 801314e:	6183      	str	r3, [r0, #24]
 8013150:	4619      	mov	r1, r3
 8013152:	2208      	movs	r2, #8
 8013154:	305c      	adds	r0, #92	; 0x5c
 8013156:	f000 f961 	bl	801341c <memset>
 801315a:	4b05      	ldr	r3, [pc, #20]	; (8013170 <std+0x38>)
 801315c:	6263      	str	r3, [r4, #36]	; 0x24
 801315e:	4b05      	ldr	r3, [pc, #20]	; (8013174 <std+0x3c>)
 8013160:	62a3      	str	r3, [r4, #40]	; 0x28
 8013162:	4b05      	ldr	r3, [pc, #20]	; (8013178 <std+0x40>)
 8013164:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013166:	4b05      	ldr	r3, [pc, #20]	; (801317c <std+0x44>)
 8013168:	6224      	str	r4, [r4, #32]
 801316a:	6323      	str	r3, [r4, #48]	; 0x30
 801316c:	bd10      	pop	{r4, pc}
 801316e:	bf00      	nop
 8013170:	08013325 	.word	0x08013325
 8013174:	08013347 	.word	0x08013347
 8013178:	0801337f 	.word	0x0801337f
 801317c:	080133a3 	.word	0x080133a3

08013180 <stdio_exit_handler>:
 8013180:	4a02      	ldr	r2, [pc, #8]	; (801318c <stdio_exit_handler+0xc>)
 8013182:	4903      	ldr	r1, [pc, #12]	; (8013190 <stdio_exit_handler+0x10>)
 8013184:	4803      	ldr	r0, [pc, #12]	; (8013194 <stdio_exit_handler+0x14>)
 8013186:	f000 b869 	b.w	801325c <_fwalk_sglue>
 801318a:	bf00      	nop
 801318c:	200000b4 	.word	0x200000b4
 8013190:	08014029 	.word	0x08014029
 8013194:	200000c0 	.word	0x200000c0

08013198 <cleanup_stdio>:
 8013198:	6841      	ldr	r1, [r0, #4]
 801319a:	4b0c      	ldr	r3, [pc, #48]	; (80131cc <cleanup_stdio+0x34>)
 801319c:	4299      	cmp	r1, r3
 801319e:	b510      	push	{r4, lr}
 80131a0:	4604      	mov	r4, r0
 80131a2:	d001      	beq.n	80131a8 <cleanup_stdio+0x10>
 80131a4:	f000 ff40 	bl	8014028 <_fflush_r>
 80131a8:	68a1      	ldr	r1, [r4, #8]
 80131aa:	4b09      	ldr	r3, [pc, #36]	; (80131d0 <cleanup_stdio+0x38>)
 80131ac:	4299      	cmp	r1, r3
 80131ae:	d002      	beq.n	80131b6 <cleanup_stdio+0x1e>
 80131b0:	4620      	mov	r0, r4
 80131b2:	f000 ff39 	bl	8014028 <_fflush_r>
 80131b6:	68e1      	ldr	r1, [r4, #12]
 80131b8:	4b06      	ldr	r3, [pc, #24]	; (80131d4 <cleanup_stdio+0x3c>)
 80131ba:	4299      	cmp	r1, r3
 80131bc:	d004      	beq.n	80131c8 <cleanup_stdio+0x30>
 80131be:	4620      	mov	r0, r4
 80131c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131c4:	f000 bf30 	b.w	8014028 <_fflush_r>
 80131c8:	bd10      	pop	{r4, pc}
 80131ca:	bf00      	nop
 80131cc:	20015a70 	.word	0x20015a70
 80131d0:	20015ad8 	.word	0x20015ad8
 80131d4:	20015b40 	.word	0x20015b40

080131d8 <global_stdio_init.part.0>:
 80131d8:	b510      	push	{r4, lr}
 80131da:	4b0b      	ldr	r3, [pc, #44]	; (8013208 <global_stdio_init.part.0+0x30>)
 80131dc:	4c0b      	ldr	r4, [pc, #44]	; (801320c <global_stdio_init.part.0+0x34>)
 80131de:	4a0c      	ldr	r2, [pc, #48]	; (8013210 <global_stdio_init.part.0+0x38>)
 80131e0:	601a      	str	r2, [r3, #0]
 80131e2:	4620      	mov	r0, r4
 80131e4:	2200      	movs	r2, #0
 80131e6:	2104      	movs	r1, #4
 80131e8:	f7ff ffa6 	bl	8013138 <std>
 80131ec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80131f0:	2201      	movs	r2, #1
 80131f2:	2109      	movs	r1, #9
 80131f4:	f7ff ffa0 	bl	8013138 <std>
 80131f8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80131fc:	2202      	movs	r2, #2
 80131fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013202:	2112      	movs	r1, #18
 8013204:	f7ff bf98 	b.w	8013138 <std>
 8013208:	20015ba8 	.word	0x20015ba8
 801320c:	20015a70 	.word	0x20015a70
 8013210:	08013181 	.word	0x08013181

08013214 <__sfp_lock_acquire>:
 8013214:	4801      	ldr	r0, [pc, #4]	; (801321c <__sfp_lock_acquire+0x8>)
 8013216:	f000 b9bf 	b.w	8013598 <__retarget_lock_acquire_recursive>
 801321a:	bf00      	nop
 801321c:	20015bb2 	.word	0x20015bb2

08013220 <__sfp_lock_release>:
 8013220:	4801      	ldr	r0, [pc, #4]	; (8013228 <__sfp_lock_release+0x8>)
 8013222:	f000 b9ba 	b.w	801359a <__retarget_lock_release_recursive>
 8013226:	bf00      	nop
 8013228:	20015bb2 	.word	0x20015bb2

0801322c <__sinit>:
 801322c:	b510      	push	{r4, lr}
 801322e:	4604      	mov	r4, r0
 8013230:	f7ff fff0 	bl	8013214 <__sfp_lock_acquire>
 8013234:	6a23      	ldr	r3, [r4, #32]
 8013236:	b11b      	cbz	r3, 8013240 <__sinit+0x14>
 8013238:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801323c:	f7ff bff0 	b.w	8013220 <__sfp_lock_release>
 8013240:	4b04      	ldr	r3, [pc, #16]	; (8013254 <__sinit+0x28>)
 8013242:	6223      	str	r3, [r4, #32]
 8013244:	4b04      	ldr	r3, [pc, #16]	; (8013258 <__sinit+0x2c>)
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	2b00      	cmp	r3, #0
 801324a:	d1f5      	bne.n	8013238 <__sinit+0xc>
 801324c:	f7ff ffc4 	bl	80131d8 <global_stdio_init.part.0>
 8013250:	e7f2      	b.n	8013238 <__sinit+0xc>
 8013252:	bf00      	nop
 8013254:	08013199 	.word	0x08013199
 8013258:	20015ba8 	.word	0x20015ba8

0801325c <_fwalk_sglue>:
 801325c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013260:	4607      	mov	r7, r0
 8013262:	4688      	mov	r8, r1
 8013264:	4614      	mov	r4, r2
 8013266:	2600      	movs	r6, #0
 8013268:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801326c:	f1b9 0901 	subs.w	r9, r9, #1
 8013270:	d505      	bpl.n	801327e <_fwalk_sglue+0x22>
 8013272:	6824      	ldr	r4, [r4, #0]
 8013274:	2c00      	cmp	r4, #0
 8013276:	d1f7      	bne.n	8013268 <_fwalk_sglue+0xc>
 8013278:	4630      	mov	r0, r6
 801327a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801327e:	89ab      	ldrh	r3, [r5, #12]
 8013280:	2b01      	cmp	r3, #1
 8013282:	d907      	bls.n	8013294 <_fwalk_sglue+0x38>
 8013284:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013288:	3301      	adds	r3, #1
 801328a:	d003      	beq.n	8013294 <_fwalk_sglue+0x38>
 801328c:	4629      	mov	r1, r5
 801328e:	4638      	mov	r0, r7
 8013290:	47c0      	blx	r8
 8013292:	4306      	orrs	r6, r0
 8013294:	3568      	adds	r5, #104	; 0x68
 8013296:	e7e9      	b.n	801326c <_fwalk_sglue+0x10>

08013298 <iprintf>:
 8013298:	b40f      	push	{r0, r1, r2, r3}
 801329a:	b507      	push	{r0, r1, r2, lr}
 801329c:	4906      	ldr	r1, [pc, #24]	; (80132b8 <iprintf+0x20>)
 801329e:	ab04      	add	r3, sp, #16
 80132a0:	6808      	ldr	r0, [r1, #0]
 80132a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80132a6:	6881      	ldr	r1, [r0, #8]
 80132a8:	9301      	str	r3, [sp, #4]
 80132aa:	f000 fb8d 	bl	80139c8 <_vfiprintf_r>
 80132ae:	b003      	add	sp, #12
 80132b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80132b4:	b004      	add	sp, #16
 80132b6:	4770      	bx	lr
 80132b8:	2000010c 	.word	0x2000010c

080132bc <sniprintf>:
 80132bc:	b40c      	push	{r2, r3}
 80132be:	b530      	push	{r4, r5, lr}
 80132c0:	4b17      	ldr	r3, [pc, #92]	; (8013320 <sniprintf+0x64>)
 80132c2:	1e0c      	subs	r4, r1, #0
 80132c4:	681d      	ldr	r5, [r3, #0]
 80132c6:	b09d      	sub	sp, #116	; 0x74
 80132c8:	da08      	bge.n	80132dc <sniprintf+0x20>
 80132ca:	238b      	movs	r3, #139	; 0x8b
 80132cc:	602b      	str	r3, [r5, #0]
 80132ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80132d2:	b01d      	add	sp, #116	; 0x74
 80132d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80132d8:	b002      	add	sp, #8
 80132da:	4770      	bx	lr
 80132dc:	f44f 7302 	mov.w	r3, #520	; 0x208
 80132e0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80132e4:	bf14      	ite	ne
 80132e6:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80132ea:	4623      	moveq	r3, r4
 80132ec:	9304      	str	r3, [sp, #16]
 80132ee:	9307      	str	r3, [sp, #28]
 80132f0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80132f4:	9002      	str	r0, [sp, #8]
 80132f6:	9006      	str	r0, [sp, #24]
 80132f8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80132fc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80132fe:	ab21      	add	r3, sp, #132	; 0x84
 8013300:	a902      	add	r1, sp, #8
 8013302:	4628      	mov	r0, r5
 8013304:	9301      	str	r3, [sp, #4]
 8013306:	f000 fa37 	bl	8013778 <_svfiprintf_r>
 801330a:	1c43      	adds	r3, r0, #1
 801330c:	bfbc      	itt	lt
 801330e:	238b      	movlt	r3, #139	; 0x8b
 8013310:	602b      	strlt	r3, [r5, #0]
 8013312:	2c00      	cmp	r4, #0
 8013314:	d0dd      	beq.n	80132d2 <sniprintf+0x16>
 8013316:	9b02      	ldr	r3, [sp, #8]
 8013318:	2200      	movs	r2, #0
 801331a:	701a      	strb	r2, [r3, #0]
 801331c:	e7d9      	b.n	80132d2 <sniprintf+0x16>
 801331e:	bf00      	nop
 8013320:	2000010c 	.word	0x2000010c

08013324 <__sread>:
 8013324:	b510      	push	{r4, lr}
 8013326:	460c      	mov	r4, r1
 8013328:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801332c:	f000 f8d6 	bl	80134dc <_read_r>
 8013330:	2800      	cmp	r0, #0
 8013332:	bfab      	itete	ge
 8013334:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8013336:	89a3      	ldrhlt	r3, [r4, #12]
 8013338:	181b      	addge	r3, r3, r0
 801333a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801333e:	bfac      	ite	ge
 8013340:	6563      	strge	r3, [r4, #84]	; 0x54
 8013342:	81a3      	strhlt	r3, [r4, #12]
 8013344:	bd10      	pop	{r4, pc}

08013346 <__swrite>:
 8013346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801334a:	461f      	mov	r7, r3
 801334c:	898b      	ldrh	r3, [r1, #12]
 801334e:	05db      	lsls	r3, r3, #23
 8013350:	4605      	mov	r5, r0
 8013352:	460c      	mov	r4, r1
 8013354:	4616      	mov	r6, r2
 8013356:	d505      	bpl.n	8013364 <__swrite+0x1e>
 8013358:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801335c:	2302      	movs	r3, #2
 801335e:	2200      	movs	r2, #0
 8013360:	f000 f8aa 	bl	80134b8 <_lseek_r>
 8013364:	89a3      	ldrh	r3, [r4, #12]
 8013366:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801336a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801336e:	81a3      	strh	r3, [r4, #12]
 8013370:	4632      	mov	r2, r6
 8013372:	463b      	mov	r3, r7
 8013374:	4628      	mov	r0, r5
 8013376:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801337a:	f000 b8d1 	b.w	8013520 <_write_r>

0801337e <__sseek>:
 801337e:	b510      	push	{r4, lr}
 8013380:	460c      	mov	r4, r1
 8013382:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8013386:	f000 f897 	bl	80134b8 <_lseek_r>
 801338a:	1c43      	adds	r3, r0, #1
 801338c:	89a3      	ldrh	r3, [r4, #12]
 801338e:	bf15      	itete	ne
 8013390:	6560      	strne	r0, [r4, #84]	; 0x54
 8013392:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8013396:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801339a:	81a3      	strheq	r3, [r4, #12]
 801339c:	bf18      	it	ne
 801339e:	81a3      	strhne	r3, [r4, #12]
 80133a0:	bd10      	pop	{r4, pc}

080133a2 <__sclose>:
 80133a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80133a6:	f000 b877 	b.w	8013498 <_close_r>

080133aa <_vsniprintf_r>:
 80133aa:	b530      	push	{r4, r5, lr}
 80133ac:	4614      	mov	r4, r2
 80133ae:	2c00      	cmp	r4, #0
 80133b0:	b09b      	sub	sp, #108	; 0x6c
 80133b2:	4605      	mov	r5, r0
 80133b4:	461a      	mov	r2, r3
 80133b6:	da05      	bge.n	80133c4 <_vsniprintf_r+0x1a>
 80133b8:	238b      	movs	r3, #139	; 0x8b
 80133ba:	6003      	str	r3, [r0, #0]
 80133bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80133c0:	b01b      	add	sp, #108	; 0x6c
 80133c2:	bd30      	pop	{r4, r5, pc}
 80133c4:	f44f 7302 	mov.w	r3, #520	; 0x208
 80133c8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80133cc:	bf14      	ite	ne
 80133ce:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 80133d2:	4623      	moveq	r3, r4
 80133d4:	9302      	str	r3, [sp, #8]
 80133d6:	9305      	str	r3, [sp, #20]
 80133d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80133dc:	9100      	str	r1, [sp, #0]
 80133de:	9104      	str	r1, [sp, #16]
 80133e0:	f8ad 300e 	strh.w	r3, [sp, #14]
 80133e4:	4669      	mov	r1, sp
 80133e6:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 80133e8:	f000 f9c6 	bl	8013778 <_svfiprintf_r>
 80133ec:	1c43      	adds	r3, r0, #1
 80133ee:	bfbc      	itt	lt
 80133f0:	238b      	movlt	r3, #139	; 0x8b
 80133f2:	602b      	strlt	r3, [r5, #0]
 80133f4:	2c00      	cmp	r4, #0
 80133f6:	d0e3      	beq.n	80133c0 <_vsniprintf_r+0x16>
 80133f8:	9b00      	ldr	r3, [sp, #0]
 80133fa:	2200      	movs	r2, #0
 80133fc:	701a      	strb	r2, [r3, #0]
 80133fe:	e7df      	b.n	80133c0 <_vsniprintf_r+0x16>

08013400 <vsniprintf>:
 8013400:	b507      	push	{r0, r1, r2, lr}
 8013402:	9300      	str	r3, [sp, #0]
 8013404:	4613      	mov	r3, r2
 8013406:	460a      	mov	r2, r1
 8013408:	4601      	mov	r1, r0
 801340a:	4803      	ldr	r0, [pc, #12]	; (8013418 <vsniprintf+0x18>)
 801340c:	6800      	ldr	r0, [r0, #0]
 801340e:	f7ff ffcc 	bl	80133aa <_vsniprintf_r>
 8013412:	b003      	add	sp, #12
 8013414:	f85d fb04 	ldr.w	pc, [sp], #4
 8013418:	2000010c 	.word	0x2000010c

0801341c <memset>:
 801341c:	4402      	add	r2, r0
 801341e:	4603      	mov	r3, r0
 8013420:	4293      	cmp	r3, r2
 8013422:	d100      	bne.n	8013426 <memset+0xa>
 8013424:	4770      	bx	lr
 8013426:	f803 1b01 	strb.w	r1, [r3], #1
 801342a:	e7f9      	b.n	8013420 <memset+0x4>

0801342c <strchr>:
 801342c:	b2c9      	uxtb	r1, r1
 801342e:	4603      	mov	r3, r0
 8013430:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013434:	b11a      	cbz	r2, 801343e <strchr+0x12>
 8013436:	428a      	cmp	r2, r1
 8013438:	d1f9      	bne.n	801342e <strchr+0x2>
 801343a:	4618      	mov	r0, r3
 801343c:	4770      	bx	lr
 801343e:	2900      	cmp	r1, #0
 8013440:	bf18      	it	ne
 8013442:	2300      	movne	r3, #0
 8013444:	e7f9      	b.n	801343a <strchr+0xe>

08013446 <strncmp>:
 8013446:	b510      	push	{r4, lr}
 8013448:	b16a      	cbz	r2, 8013466 <strncmp+0x20>
 801344a:	3901      	subs	r1, #1
 801344c:	1884      	adds	r4, r0, r2
 801344e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013452:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8013456:	429a      	cmp	r2, r3
 8013458:	d103      	bne.n	8013462 <strncmp+0x1c>
 801345a:	42a0      	cmp	r0, r4
 801345c:	d001      	beq.n	8013462 <strncmp+0x1c>
 801345e:	2a00      	cmp	r2, #0
 8013460:	d1f5      	bne.n	801344e <strncmp+0x8>
 8013462:	1ad0      	subs	r0, r2, r3
 8013464:	bd10      	pop	{r4, pc}
 8013466:	4610      	mov	r0, r2
 8013468:	e7fc      	b.n	8013464 <strncmp+0x1e>

0801346a <strstr>:
 801346a:	780a      	ldrb	r2, [r1, #0]
 801346c:	b570      	push	{r4, r5, r6, lr}
 801346e:	b96a      	cbnz	r2, 801348c <strstr+0x22>
 8013470:	bd70      	pop	{r4, r5, r6, pc}
 8013472:	429a      	cmp	r2, r3
 8013474:	d109      	bne.n	801348a <strstr+0x20>
 8013476:	460c      	mov	r4, r1
 8013478:	4605      	mov	r5, r0
 801347a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 801347e:	2b00      	cmp	r3, #0
 8013480:	d0f6      	beq.n	8013470 <strstr+0x6>
 8013482:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8013486:	429e      	cmp	r6, r3
 8013488:	d0f7      	beq.n	801347a <strstr+0x10>
 801348a:	3001      	adds	r0, #1
 801348c:	7803      	ldrb	r3, [r0, #0]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d1ef      	bne.n	8013472 <strstr+0x8>
 8013492:	4618      	mov	r0, r3
 8013494:	e7ec      	b.n	8013470 <strstr+0x6>
	...

08013498 <_close_r>:
 8013498:	b538      	push	{r3, r4, r5, lr}
 801349a:	4d06      	ldr	r5, [pc, #24]	; (80134b4 <_close_r+0x1c>)
 801349c:	2300      	movs	r3, #0
 801349e:	4604      	mov	r4, r0
 80134a0:	4608      	mov	r0, r1
 80134a2:	602b      	str	r3, [r5, #0]
 80134a4:	f7ed fd9d 	bl	8000fe2 <_close>
 80134a8:	1c43      	adds	r3, r0, #1
 80134aa:	d102      	bne.n	80134b2 <_close_r+0x1a>
 80134ac:	682b      	ldr	r3, [r5, #0]
 80134ae:	b103      	cbz	r3, 80134b2 <_close_r+0x1a>
 80134b0:	6023      	str	r3, [r4, #0]
 80134b2:	bd38      	pop	{r3, r4, r5, pc}
 80134b4:	20015bac 	.word	0x20015bac

080134b8 <_lseek_r>:
 80134b8:	b538      	push	{r3, r4, r5, lr}
 80134ba:	4d07      	ldr	r5, [pc, #28]	; (80134d8 <_lseek_r+0x20>)
 80134bc:	4604      	mov	r4, r0
 80134be:	4608      	mov	r0, r1
 80134c0:	4611      	mov	r1, r2
 80134c2:	2200      	movs	r2, #0
 80134c4:	602a      	str	r2, [r5, #0]
 80134c6:	461a      	mov	r2, r3
 80134c8:	f7ed fdb2 	bl	8001030 <_lseek>
 80134cc:	1c43      	adds	r3, r0, #1
 80134ce:	d102      	bne.n	80134d6 <_lseek_r+0x1e>
 80134d0:	682b      	ldr	r3, [r5, #0]
 80134d2:	b103      	cbz	r3, 80134d6 <_lseek_r+0x1e>
 80134d4:	6023      	str	r3, [r4, #0]
 80134d6:	bd38      	pop	{r3, r4, r5, pc}
 80134d8:	20015bac 	.word	0x20015bac

080134dc <_read_r>:
 80134dc:	b538      	push	{r3, r4, r5, lr}
 80134de:	4d07      	ldr	r5, [pc, #28]	; (80134fc <_read_r+0x20>)
 80134e0:	4604      	mov	r4, r0
 80134e2:	4608      	mov	r0, r1
 80134e4:	4611      	mov	r1, r2
 80134e6:	2200      	movs	r2, #0
 80134e8:	602a      	str	r2, [r5, #0]
 80134ea:	461a      	mov	r2, r3
 80134ec:	f7ed fd40 	bl	8000f70 <_read>
 80134f0:	1c43      	adds	r3, r0, #1
 80134f2:	d102      	bne.n	80134fa <_read_r+0x1e>
 80134f4:	682b      	ldr	r3, [r5, #0]
 80134f6:	b103      	cbz	r3, 80134fa <_read_r+0x1e>
 80134f8:	6023      	str	r3, [r4, #0]
 80134fa:	bd38      	pop	{r3, r4, r5, pc}
 80134fc:	20015bac 	.word	0x20015bac

08013500 <_sbrk_r>:
 8013500:	b538      	push	{r3, r4, r5, lr}
 8013502:	4d06      	ldr	r5, [pc, #24]	; (801351c <_sbrk_r+0x1c>)
 8013504:	2300      	movs	r3, #0
 8013506:	4604      	mov	r4, r0
 8013508:	4608      	mov	r0, r1
 801350a:	602b      	str	r3, [r5, #0]
 801350c:	f7ed fd9e 	bl	800104c <_sbrk>
 8013510:	1c43      	adds	r3, r0, #1
 8013512:	d102      	bne.n	801351a <_sbrk_r+0x1a>
 8013514:	682b      	ldr	r3, [r5, #0]
 8013516:	b103      	cbz	r3, 801351a <_sbrk_r+0x1a>
 8013518:	6023      	str	r3, [r4, #0]
 801351a:	bd38      	pop	{r3, r4, r5, pc}
 801351c:	20015bac 	.word	0x20015bac

08013520 <_write_r>:
 8013520:	b538      	push	{r3, r4, r5, lr}
 8013522:	4d07      	ldr	r5, [pc, #28]	; (8013540 <_write_r+0x20>)
 8013524:	4604      	mov	r4, r0
 8013526:	4608      	mov	r0, r1
 8013528:	4611      	mov	r1, r2
 801352a:	2200      	movs	r2, #0
 801352c:	602a      	str	r2, [r5, #0]
 801352e:	461a      	mov	r2, r3
 8013530:	f7ed fd3b 	bl	8000faa <_write>
 8013534:	1c43      	adds	r3, r0, #1
 8013536:	d102      	bne.n	801353e <_write_r+0x1e>
 8013538:	682b      	ldr	r3, [r5, #0]
 801353a:	b103      	cbz	r3, 801353e <_write_r+0x1e>
 801353c:	6023      	str	r3, [r4, #0]
 801353e:	bd38      	pop	{r3, r4, r5, pc}
 8013540:	20015bac 	.word	0x20015bac

08013544 <__errno>:
 8013544:	4b01      	ldr	r3, [pc, #4]	; (801354c <__errno+0x8>)
 8013546:	6818      	ldr	r0, [r3, #0]
 8013548:	4770      	bx	lr
 801354a:	bf00      	nop
 801354c:	2000010c 	.word	0x2000010c

08013550 <__libc_init_array>:
 8013550:	b570      	push	{r4, r5, r6, lr}
 8013552:	4d0d      	ldr	r5, [pc, #52]	; (8013588 <__libc_init_array+0x38>)
 8013554:	4c0d      	ldr	r4, [pc, #52]	; (801358c <__libc_init_array+0x3c>)
 8013556:	1b64      	subs	r4, r4, r5
 8013558:	10a4      	asrs	r4, r4, #2
 801355a:	2600      	movs	r6, #0
 801355c:	42a6      	cmp	r6, r4
 801355e:	d109      	bne.n	8013574 <__libc_init_array+0x24>
 8013560:	4d0b      	ldr	r5, [pc, #44]	; (8013590 <__libc_init_array+0x40>)
 8013562:	4c0c      	ldr	r4, [pc, #48]	; (8013594 <__libc_init_array+0x44>)
 8013564:	f000 ff1a 	bl	801439c <_init>
 8013568:	1b64      	subs	r4, r4, r5
 801356a:	10a4      	asrs	r4, r4, #2
 801356c:	2600      	movs	r6, #0
 801356e:	42a6      	cmp	r6, r4
 8013570:	d105      	bne.n	801357e <__libc_init_array+0x2e>
 8013572:	bd70      	pop	{r4, r5, r6, pc}
 8013574:	f855 3b04 	ldr.w	r3, [r5], #4
 8013578:	4798      	blx	r3
 801357a:	3601      	adds	r6, #1
 801357c:	e7ee      	b.n	801355c <__libc_init_array+0xc>
 801357e:	f855 3b04 	ldr.w	r3, [r5], #4
 8013582:	4798      	blx	r3
 8013584:	3601      	adds	r6, #1
 8013586:	e7f2      	b.n	801356e <__libc_init_array+0x1e>
 8013588:	08014fcc 	.word	0x08014fcc
 801358c:	08014fcc 	.word	0x08014fcc
 8013590:	08014fcc 	.word	0x08014fcc
 8013594:	08014fd4 	.word	0x08014fd4

08013598 <__retarget_lock_acquire_recursive>:
 8013598:	4770      	bx	lr

0801359a <__retarget_lock_release_recursive>:
 801359a:	4770      	bx	lr

0801359c <strcpy>:
 801359c:	4603      	mov	r3, r0
 801359e:	f811 2b01 	ldrb.w	r2, [r1], #1
 80135a2:	f803 2b01 	strb.w	r2, [r3], #1
 80135a6:	2a00      	cmp	r2, #0
 80135a8:	d1f9      	bne.n	801359e <strcpy+0x2>
 80135aa:	4770      	bx	lr

080135ac <memcpy>:
 80135ac:	440a      	add	r2, r1
 80135ae:	4291      	cmp	r1, r2
 80135b0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80135b4:	d100      	bne.n	80135b8 <memcpy+0xc>
 80135b6:	4770      	bx	lr
 80135b8:	b510      	push	{r4, lr}
 80135ba:	f811 4b01 	ldrb.w	r4, [r1], #1
 80135be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80135c2:	4291      	cmp	r1, r2
 80135c4:	d1f9      	bne.n	80135ba <memcpy+0xe>
 80135c6:	bd10      	pop	{r4, pc}

080135c8 <__assert_func>:
 80135c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80135ca:	4614      	mov	r4, r2
 80135cc:	461a      	mov	r2, r3
 80135ce:	4b09      	ldr	r3, [pc, #36]	; (80135f4 <__assert_func+0x2c>)
 80135d0:	681b      	ldr	r3, [r3, #0]
 80135d2:	4605      	mov	r5, r0
 80135d4:	68d8      	ldr	r0, [r3, #12]
 80135d6:	b14c      	cbz	r4, 80135ec <__assert_func+0x24>
 80135d8:	4b07      	ldr	r3, [pc, #28]	; (80135f8 <__assert_func+0x30>)
 80135da:	9100      	str	r1, [sp, #0]
 80135dc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80135e0:	4906      	ldr	r1, [pc, #24]	; (80135fc <__assert_func+0x34>)
 80135e2:	462b      	mov	r3, r5
 80135e4:	f000 fd48 	bl	8014078 <fiprintf>
 80135e8:	f000 fe08 	bl	80141fc <abort>
 80135ec:	4b04      	ldr	r3, [pc, #16]	; (8013600 <__assert_func+0x38>)
 80135ee:	461c      	mov	r4, r3
 80135f0:	e7f3      	b.n	80135da <__assert_func+0x12>
 80135f2:	bf00      	nop
 80135f4:	2000010c 	.word	0x2000010c
 80135f8:	08014f54 	.word	0x08014f54
 80135fc:	08014f61 	.word	0x08014f61
 8013600:	08014f8f 	.word	0x08014f8f

08013604 <__env_lock>:
 8013604:	4801      	ldr	r0, [pc, #4]	; (801360c <__env_lock+0x8>)
 8013606:	f7ff bfc7 	b.w	8013598 <__retarget_lock_acquire_recursive>
 801360a:	bf00      	nop
 801360c:	20015bb0 	.word	0x20015bb0

08013610 <__env_unlock>:
 8013610:	4801      	ldr	r0, [pc, #4]	; (8013618 <__env_unlock+0x8>)
 8013612:	f7ff bfc2 	b.w	801359a <__retarget_lock_release_recursive>
 8013616:	bf00      	nop
 8013618:	20015bb0 	.word	0x20015bb0

0801361c <_free_r>:
 801361c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801361e:	2900      	cmp	r1, #0
 8013620:	d044      	beq.n	80136ac <_free_r+0x90>
 8013622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8013626:	9001      	str	r0, [sp, #4]
 8013628:	2b00      	cmp	r3, #0
 801362a:	f1a1 0404 	sub.w	r4, r1, #4
 801362e:	bfb8      	it	lt
 8013630:	18e4      	addlt	r4, r4, r3
 8013632:	f7ff fc55 	bl	8012ee0 <__malloc_lock>
 8013636:	4a1e      	ldr	r2, [pc, #120]	; (80136b0 <_free_r+0x94>)
 8013638:	9801      	ldr	r0, [sp, #4]
 801363a:	6813      	ldr	r3, [r2, #0]
 801363c:	b933      	cbnz	r3, 801364c <_free_r+0x30>
 801363e:	6063      	str	r3, [r4, #4]
 8013640:	6014      	str	r4, [r2, #0]
 8013642:	b003      	add	sp, #12
 8013644:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8013648:	f7ff bc50 	b.w	8012eec <__malloc_unlock>
 801364c:	42a3      	cmp	r3, r4
 801364e:	d908      	bls.n	8013662 <_free_r+0x46>
 8013650:	6825      	ldr	r5, [r4, #0]
 8013652:	1961      	adds	r1, r4, r5
 8013654:	428b      	cmp	r3, r1
 8013656:	bf01      	itttt	eq
 8013658:	6819      	ldreq	r1, [r3, #0]
 801365a:	685b      	ldreq	r3, [r3, #4]
 801365c:	1949      	addeq	r1, r1, r5
 801365e:	6021      	streq	r1, [r4, #0]
 8013660:	e7ed      	b.n	801363e <_free_r+0x22>
 8013662:	461a      	mov	r2, r3
 8013664:	685b      	ldr	r3, [r3, #4]
 8013666:	b10b      	cbz	r3, 801366c <_free_r+0x50>
 8013668:	42a3      	cmp	r3, r4
 801366a:	d9fa      	bls.n	8013662 <_free_r+0x46>
 801366c:	6811      	ldr	r1, [r2, #0]
 801366e:	1855      	adds	r5, r2, r1
 8013670:	42a5      	cmp	r5, r4
 8013672:	d10b      	bne.n	801368c <_free_r+0x70>
 8013674:	6824      	ldr	r4, [r4, #0]
 8013676:	4421      	add	r1, r4
 8013678:	1854      	adds	r4, r2, r1
 801367a:	42a3      	cmp	r3, r4
 801367c:	6011      	str	r1, [r2, #0]
 801367e:	d1e0      	bne.n	8013642 <_free_r+0x26>
 8013680:	681c      	ldr	r4, [r3, #0]
 8013682:	685b      	ldr	r3, [r3, #4]
 8013684:	6053      	str	r3, [r2, #4]
 8013686:	440c      	add	r4, r1
 8013688:	6014      	str	r4, [r2, #0]
 801368a:	e7da      	b.n	8013642 <_free_r+0x26>
 801368c:	d902      	bls.n	8013694 <_free_r+0x78>
 801368e:	230c      	movs	r3, #12
 8013690:	6003      	str	r3, [r0, #0]
 8013692:	e7d6      	b.n	8013642 <_free_r+0x26>
 8013694:	6825      	ldr	r5, [r4, #0]
 8013696:	1961      	adds	r1, r4, r5
 8013698:	428b      	cmp	r3, r1
 801369a:	bf04      	itt	eq
 801369c:	6819      	ldreq	r1, [r3, #0]
 801369e:	685b      	ldreq	r3, [r3, #4]
 80136a0:	6063      	str	r3, [r4, #4]
 80136a2:	bf04      	itt	eq
 80136a4:	1949      	addeq	r1, r1, r5
 80136a6:	6021      	streq	r1, [r4, #0]
 80136a8:	6054      	str	r4, [r2, #4]
 80136aa:	e7ca      	b.n	8013642 <_free_r+0x26>
 80136ac:	b003      	add	sp, #12
 80136ae:	bd30      	pop	{r4, r5, pc}
 80136b0:	20015a68 	.word	0x20015a68

080136b4 <_malloc_usable_size_r>:
 80136b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80136b8:	1f18      	subs	r0, r3, #4
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	bfbc      	itt	lt
 80136be:	580b      	ldrlt	r3, [r1, r0]
 80136c0:	18c0      	addlt	r0, r0, r3
 80136c2:	4770      	bx	lr

080136c4 <__ssputs_r>:
 80136c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80136c8:	688e      	ldr	r6, [r1, #8]
 80136ca:	461f      	mov	r7, r3
 80136cc:	42be      	cmp	r6, r7
 80136ce:	680b      	ldr	r3, [r1, #0]
 80136d0:	4682      	mov	sl, r0
 80136d2:	460c      	mov	r4, r1
 80136d4:	4690      	mov	r8, r2
 80136d6:	d82c      	bhi.n	8013732 <__ssputs_r+0x6e>
 80136d8:	898a      	ldrh	r2, [r1, #12]
 80136da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80136de:	d026      	beq.n	801372e <__ssputs_r+0x6a>
 80136e0:	6965      	ldr	r5, [r4, #20]
 80136e2:	6909      	ldr	r1, [r1, #16]
 80136e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80136e8:	eba3 0901 	sub.w	r9, r3, r1
 80136ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80136f0:	1c7b      	adds	r3, r7, #1
 80136f2:	444b      	add	r3, r9
 80136f4:	106d      	asrs	r5, r5, #1
 80136f6:	429d      	cmp	r5, r3
 80136f8:	bf38      	it	cc
 80136fa:	461d      	movcc	r5, r3
 80136fc:	0553      	lsls	r3, r2, #21
 80136fe:	d527      	bpl.n	8013750 <__ssputs_r+0x8c>
 8013700:	4629      	mov	r1, r5
 8013702:	f7ff fb6d 	bl	8012de0 <_malloc_r>
 8013706:	4606      	mov	r6, r0
 8013708:	b360      	cbz	r0, 8013764 <__ssputs_r+0xa0>
 801370a:	6921      	ldr	r1, [r4, #16]
 801370c:	464a      	mov	r2, r9
 801370e:	f7ff ff4d 	bl	80135ac <memcpy>
 8013712:	89a3      	ldrh	r3, [r4, #12]
 8013714:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8013718:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801371c:	81a3      	strh	r3, [r4, #12]
 801371e:	6126      	str	r6, [r4, #16]
 8013720:	6165      	str	r5, [r4, #20]
 8013722:	444e      	add	r6, r9
 8013724:	eba5 0509 	sub.w	r5, r5, r9
 8013728:	6026      	str	r6, [r4, #0]
 801372a:	60a5      	str	r5, [r4, #8]
 801372c:	463e      	mov	r6, r7
 801372e:	42be      	cmp	r6, r7
 8013730:	d900      	bls.n	8013734 <__ssputs_r+0x70>
 8013732:	463e      	mov	r6, r7
 8013734:	6820      	ldr	r0, [r4, #0]
 8013736:	4632      	mov	r2, r6
 8013738:	4641      	mov	r1, r8
 801373a:	f000 fd45 	bl	80141c8 <memmove>
 801373e:	68a3      	ldr	r3, [r4, #8]
 8013740:	1b9b      	subs	r3, r3, r6
 8013742:	60a3      	str	r3, [r4, #8]
 8013744:	6823      	ldr	r3, [r4, #0]
 8013746:	4433      	add	r3, r6
 8013748:	6023      	str	r3, [r4, #0]
 801374a:	2000      	movs	r0, #0
 801374c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013750:	462a      	mov	r2, r5
 8013752:	f7ff fc45 	bl	8012fe0 <_realloc_r>
 8013756:	4606      	mov	r6, r0
 8013758:	2800      	cmp	r0, #0
 801375a:	d1e0      	bne.n	801371e <__ssputs_r+0x5a>
 801375c:	6921      	ldr	r1, [r4, #16]
 801375e:	4650      	mov	r0, sl
 8013760:	f7ff ff5c 	bl	801361c <_free_r>
 8013764:	230c      	movs	r3, #12
 8013766:	f8ca 3000 	str.w	r3, [sl]
 801376a:	89a3      	ldrh	r3, [r4, #12]
 801376c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013770:	81a3      	strh	r3, [r4, #12]
 8013772:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013776:	e7e9      	b.n	801374c <__ssputs_r+0x88>

08013778 <_svfiprintf_r>:
 8013778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801377c:	4698      	mov	r8, r3
 801377e:	898b      	ldrh	r3, [r1, #12]
 8013780:	061b      	lsls	r3, r3, #24
 8013782:	b09d      	sub	sp, #116	; 0x74
 8013784:	4607      	mov	r7, r0
 8013786:	460d      	mov	r5, r1
 8013788:	4614      	mov	r4, r2
 801378a:	d50e      	bpl.n	80137aa <_svfiprintf_r+0x32>
 801378c:	690b      	ldr	r3, [r1, #16]
 801378e:	b963      	cbnz	r3, 80137aa <_svfiprintf_r+0x32>
 8013790:	2140      	movs	r1, #64	; 0x40
 8013792:	f7ff fb25 	bl	8012de0 <_malloc_r>
 8013796:	6028      	str	r0, [r5, #0]
 8013798:	6128      	str	r0, [r5, #16]
 801379a:	b920      	cbnz	r0, 80137a6 <_svfiprintf_r+0x2e>
 801379c:	230c      	movs	r3, #12
 801379e:	603b      	str	r3, [r7, #0]
 80137a0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80137a4:	e0d0      	b.n	8013948 <_svfiprintf_r+0x1d0>
 80137a6:	2340      	movs	r3, #64	; 0x40
 80137a8:	616b      	str	r3, [r5, #20]
 80137aa:	2300      	movs	r3, #0
 80137ac:	9309      	str	r3, [sp, #36]	; 0x24
 80137ae:	2320      	movs	r3, #32
 80137b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80137b4:	f8cd 800c 	str.w	r8, [sp, #12]
 80137b8:	2330      	movs	r3, #48	; 0x30
 80137ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8013960 <_svfiprintf_r+0x1e8>
 80137be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80137c2:	f04f 0901 	mov.w	r9, #1
 80137c6:	4623      	mov	r3, r4
 80137c8:	469a      	mov	sl, r3
 80137ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80137ce:	b10a      	cbz	r2, 80137d4 <_svfiprintf_r+0x5c>
 80137d0:	2a25      	cmp	r2, #37	; 0x25
 80137d2:	d1f9      	bne.n	80137c8 <_svfiprintf_r+0x50>
 80137d4:	ebba 0b04 	subs.w	fp, sl, r4
 80137d8:	d00b      	beq.n	80137f2 <_svfiprintf_r+0x7a>
 80137da:	465b      	mov	r3, fp
 80137dc:	4622      	mov	r2, r4
 80137de:	4629      	mov	r1, r5
 80137e0:	4638      	mov	r0, r7
 80137e2:	f7ff ff6f 	bl	80136c4 <__ssputs_r>
 80137e6:	3001      	adds	r0, #1
 80137e8:	f000 80a9 	beq.w	801393e <_svfiprintf_r+0x1c6>
 80137ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80137ee:	445a      	add	r2, fp
 80137f0:	9209      	str	r2, [sp, #36]	; 0x24
 80137f2:	f89a 3000 	ldrb.w	r3, [sl]
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	f000 80a1 	beq.w	801393e <_svfiprintf_r+0x1c6>
 80137fc:	2300      	movs	r3, #0
 80137fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013802:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013806:	f10a 0a01 	add.w	sl, sl, #1
 801380a:	9304      	str	r3, [sp, #16]
 801380c:	9307      	str	r3, [sp, #28]
 801380e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013812:	931a      	str	r3, [sp, #104]	; 0x68
 8013814:	4654      	mov	r4, sl
 8013816:	2205      	movs	r2, #5
 8013818:	f814 1b01 	ldrb.w	r1, [r4], #1
 801381c:	4850      	ldr	r0, [pc, #320]	; (8013960 <_svfiprintf_r+0x1e8>)
 801381e:	f7ec fcef 	bl	8000200 <memchr>
 8013822:	9a04      	ldr	r2, [sp, #16]
 8013824:	b9d8      	cbnz	r0, 801385e <_svfiprintf_r+0xe6>
 8013826:	06d0      	lsls	r0, r2, #27
 8013828:	bf44      	itt	mi
 801382a:	2320      	movmi	r3, #32
 801382c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013830:	0711      	lsls	r1, r2, #28
 8013832:	bf44      	itt	mi
 8013834:	232b      	movmi	r3, #43	; 0x2b
 8013836:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801383a:	f89a 3000 	ldrb.w	r3, [sl]
 801383e:	2b2a      	cmp	r3, #42	; 0x2a
 8013840:	d015      	beq.n	801386e <_svfiprintf_r+0xf6>
 8013842:	9a07      	ldr	r2, [sp, #28]
 8013844:	4654      	mov	r4, sl
 8013846:	2000      	movs	r0, #0
 8013848:	f04f 0c0a 	mov.w	ip, #10
 801384c:	4621      	mov	r1, r4
 801384e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013852:	3b30      	subs	r3, #48	; 0x30
 8013854:	2b09      	cmp	r3, #9
 8013856:	d94d      	bls.n	80138f4 <_svfiprintf_r+0x17c>
 8013858:	b1b0      	cbz	r0, 8013888 <_svfiprintf_r+0x110>
 801385a:	9207      	str	r2, [sp, #28]
 801385c:	e014      	b.n	8013888 <_svfiprintf_r+0x110>
 801385e:	eba0 0308 	sub.w	r3, r0, r8
 8013862:	fa09 f303 	lsl.w	r3, r9, r3
 8013866:	4313      	orrs	r3, r2
 8013868:	9304      	str	r3, [sp, #16]
 801386a:	46a2      	mov	sl, r4
 801386c:	e7d2      	b.n	8013814 <_svfiprintf_r+0x9c>
 801386e:	9b03      	ldr	r3, [sp, #12]
 8013870:	1d19      	adds	r1, r3, #4
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	9103      	str	r1, [sp, #12]
 8013876:	2b00      	cmp	r3, #0
 8013878:	bfbb      	ittet	lt
 801387a:	425b      	neglt	r3, r3
 801387c:	f042 0202 	orrlt.w	r2, r2, #2
 8013880:	9307      	strge	r3, [sp, #28]
 8013882:	9307      	strlt	r3, [sp, #28]
 8013884:	bfb8      	it	lt
 8013886:	9204      	strlt	r2, [sp, #16]
 8013888:	7823      	ldrb	r3, [r4, #0]
 801388a:	2b2e      	cmp	r3, #46	; 0x2e
 801388c:	d10c      	bne.n	80138a8 <_svfiprintf_r+0x130>
 801388e:	7863      	ldrb	r3, [r4, #1]
 8013890:	2b2a      	cmp	r3, #42	; 0x2a
 8013892:	d134      	bne.n	80138fe <_svfiprintf_r+0x186>
 8013894:	9b03      	ldr	r3, [sp, #12]
 8013896:	1d1a      	adds	r2, r3, #4
 8013898:	681b      	ldr	r3, [r3, #0]
 801389a:	9203      	str	r2, [sp, #12]
 801389c:	2b00      	cmp	r3, #0
 801389e:	bfb8      	it	lt
 80138a0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80138a4:	3402      	adds	r4, #2
 80138a6:	9305      	str	r3, [sp, #20]
 80138a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8013970 <_svfiprintf_r+0x1f8>
 80138ac:	7821      	ldrb	r1, [r4, #0]
 80138ae:	2203      	movs	r2, #3
 80138b0:	4650      	mov	r0, sl
 80138b2:	f7ec fca5 	bl	8000200 <memchr>
 80138b6:	b138      	cbz	r0, 80138c8 <_svfiprintf_r+0x150>
 80138b8:	9b04      	ldr	r3, [sp, #16]
 80138ba:	eba0 000a 	sub.w	r0, r0, sl
 80138be:	2240      	movs	r2, #64	; 0x40
 80138c0:	4082      	lsls	r2, r0
 80138c2:	4313      	orrs	r3, r2
 80138c4:	3401      	adds	r4, #1
 80138c6:	9304      	str	r3, [sp, #16]
 80138c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80138cc:	4825      	ldr	r0, [pc, #148]	; (8013964 <_svfiprintf_r+0x1ec>)
 80138ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80138d2:	2206      	movs	r2, #6
 80138d4:	f7ec fc94 	bl	8000200 <memchr>
 80138d8:	2800      	cmp	r0, #0
 80138da:	d038      	beq.n	801394e <_svfiprintf_r+0x1d6>
 80138dc:	4b22      	ldr	r3, [pc, #136]	; (8013968 <_svfiprintf_r+0x1f0>)
 80138de:	bb1b      	cbnz	r3, 8013928 <_svfiprintf_r+0x1b0>
 80138e0:	9b03      	ldr	r3, [sp, #12]
 80138e2:	3307      	adds	r3, #7
 80138e4:	f023 0307 	bic.w	r3, r3, #7
 80138e8:	3308      	adds	r3, #8
 80138ea:	9303      	str	r3, [sp, #12]
 80138ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80138ee:	4433      	add	r3, r6
 80138f0:	9309      	str	r3, [sp, #36]	; 0x24
 80138f2:	e768      	b.n	80137c6 <_svfiprintf_r+0x4e>
 80138f4:	fb0c 3202 	mla	r2, ip, r2, r3
 80138f8:	460c      	mov	r4, r1
 80138fa:	2001      	movs	r0, #1
 80138fc:	e7a6      	b.n	801384c <_svfiprintf_r+0xd4>
 80138fe:	2300      	movs	r3, #0
 8013900:	3401      	adds	r4, #1
 8013902:	9305      	str	r3, [sp, #20]
 8013904:	4619      	mov	r1, r3
 8013906:	f04f 0c0a 	mov.w	ip, #10
 801390a:	4620      	mov	r0, r4
 801390c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013910:	3a30      	subs	r2, #48	; 0x30
 8013912:	2a09      	cmp	r2, #9
 8013914:	d903      	bls.n	801391e <_svfiprintf_r+0x1a6>
 8013916:	2b00      	cmp	r3, #0
 8013918:	d0c6      	beq.n	80138a8 <_svfiprintf_r+0x130>
 801391a:	9105      	str	r1, [sp, #20]
 801391c:	e7c4      	b.n	80138a8 <_svfiprintf_r+0x130>
 801391e:	fb0c 2101 	mla	r1, ip, r1, r2
 8013922:	4604      	mov	r4, r0
 8013924:	2301      	movs	r3, #1
 8013926:	e7f0      	b.n	801390a <_svfiprintf_r+0x192>
 8013928:	ab03      	add	r3, sp, #12
 801392a:	9300      	str	r3, [sp, #0]
 801392c:	462a      	mov	r2, r5
 801392e:	4b0f      	ldr	r3, [pc, #60]	; (801396c <_svfiprintf_r+0x1f4>)
 8013930:	a904      	add	r1, sp, #16
 8013932:	4638      	mov	r0, r7
 8013934:	f3af 8000 	nop.w
 8013938:	1c42      	adds	r2, r0, #1
 801393a:	4606      	mov	r6, r0
 801393c:	d1d6      	bne.n	80138ec <_svfiprintf_r+0x174>
 801393e:	89ab      	ldrh	r3, [r5, #12]
 8013940:	065b      	lsls	r3, r3, #25
 8013942:	f53f af2d 	bmi.w	80137a0 <_svfiprintf_r+0x28>
 8013946:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013948:	b01d      	add	sp, #116	; 0x74
 801394a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801394e:	ab03      	add	r3, sp, #12
 8013950:	9300      	str	r3, [sp, #0]
 8013952:	462a      	mov	r2, r5
 8013954:	4b05      	ldr	r3, [pc, #20]	; (801396c <_svfiprintf_r+0x1f4>)
 8013956:	a904      	add	r1, sp, #16
 8013958:	4638      	mov	r0, r7
 801395a:	f000 f9bd 	bl	8013cd8 <_printf_i>
 801395e:	e7eb      	b.n	8013938 <_svfiprintf_r+0x1c0>
 8013960:	08014f90 	.word	0x08014f90
 8013964:	08014f9a 	.word	0x08014f9a
 8013968:	00000000 	.word	0x00000000
 801396c:	080136c5 	.word	0x080136c5
 8013970:	08014f96 	.word	0x08014f96

08013974 <__sfputc_r>:
 8013974:	6893      	ldr	r3, [r2, #8]
 8013976:	3b01      	subs	r3, #1
 8013978:	2b00      	cmp	r3, #0
 801397a:	b410      	push	{r4}
 801397c:	6093      	str	r3, [r2, #8]
 801397e:	da08      	bge.n	8013992 <__sfputc_r+0x1e>
 8013980:	6994      	ldr	r4, [r2, #24]
 8013982:	42a3      	cmp	r3, r4
 8013984:	db01      	blt.n	801398a <__sfputc_r+0x16>
 8013986:	290a      	cmp	r1, #10
 8013988:	d103      	bne.n	8013992 <__sfputc_r+0x1e>
 801398a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801398e:	f000 bb85 	b.w	801409c <__swbuf_r>
 8013992:	6813      	ldr	r3, [r2, #0]
 8013994:	1c58      	adds	r0, r3, #1
 8013996:	6010      	str	r0, [r2, #0]
 8013998:	7019      	strb	r1, [r3, #0]
 801399a:	4608      	mov	r0, r1
 801399c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80139a0:	4770      	bx	lr

080139a2 <__sfputs_r>:
 80139a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80139a4:	4606      	mov	r6, r0
 80139a6:	460f      	mov	r7, r1
 80139a8:	4614      	mov	r4, r2
 80139aa:	18d5      	adds	r5, r2, r3
 80139ac:	42ac      	cmp	r4, r5
 80139ae:	d101      	bne.n	80139b4 <__sfputs_r+0x12>
 80139b0:	2000      	movs	r0, #0
 80139b2:	e007      	b.n	80139c4 <__sfputs_r+0x22>
 80139b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80139b8:	463a      	mov	r2, r7
 80139ba:	4630      	mov	r0, r6
 80139bc:	f7ff ffda 	bl	8013974 <__sfputc_r>
 80139c0:	1c43      	adds	r3, r0, #1
 80139c2:	d1f3      	bne.n	80139ac <__sfputs_r+0xa>
 80139c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080139c8 <_vfiprintf_r>:
 80139c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80139cc:	460d      	mov	r5, r1
 80139ce:	b09d      	sub	sp, #116	; 0x74
 80139d0:	4614      	mov	r4, r2
 80139d2:	4698      	mov	r8, r3
 80139d4:	4606      	mov	r6, r0
 80139d6:	b118      	cbz	r0, 80139e0 <_vfiprintf_r+0x18>
 80139d8:	6a03      	ldr	r3, [r0, #32]
 80139da:	b90b      	cbnz	r3, 80139e0 <_vfiprintf_r+0x18>
 80139dc:	f7ff fc26 	bl	801322c <__sinit>
 80139e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80139e2:	07d9      	lsls	r1, r3, #31
 80139e4:	d405      	bmi.n	80139f2 <_vfiprintf_r+0x2a>
 80139e6:	89ab      	ldrh	r3, [r5, #12]
 80139e8:	059a      	lsls	r2, r3, #22
 80139ea:	d402      	bmi.n	80139f2 <_vfiprintf_r+0x2a>
 80139ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80139ee:	f7ff fdd3 	bl	8013598 <__retarget_lock_acquire_recursive>
 80139f2:	89ab      	ldrh	r3, [r5, #12]
 80139f4:	071b      	lsls	r3, r3, #28
 80139f6:	d501      	bpl.n	80139fc <_vfiprintf_r+0x34>
 80139f8:	692b      	ldr	r3, [r5, #16]
 80139fa:	b99b      	cbnz	r3, 8013a24 <_vfiprintf_r+0x5c>
 80139fc:	4629      	mov	r1, r5
 80139fe:	4630      	mov	r0, r6
 8013a00:	f000 fb8a 	bl	8014118 <__swsetup_r>
 8013a04:	b170      	cbz	r0, 8013a24 <_vfiprintf_r+0x5c>
 8013a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013a08:	07dc      	lsls	r4, r3, #31
 8013a0a:	d504      	bpl.n	8013a16 <_vfiprintf_r+0x4e>
 8013a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013a10:	b01d      	add	sp, #116	; 0x74
 8013a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013a16:	89ab      	ldrh	r3, [r5, #12]
 8013a18:	0598      	lsls	r0, r3, #22
 8013a1a:	d4f7      	bmi.n	8013a0c <_vfiprintf_r+0x44>
 8013a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013a1e:	f7ff fdbc 	bl	801359a <__retarget_lock_release_recursive>
 8013a22:	e7f3      	b.n	8013a0c <_vfiprintf_r+0x44>
 8013a24:	2300      	movs	r3, #0
 8013a26:	9309      	str	r3, [sp, #36]	; 0x24
 8013a28:	2320      	movs	r3, #32
 8013a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8013a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8013a32:	2330      	movs	r3, #48	; 0x30
 8013a34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8013be8 <_vfiprintf_r+0x220>
 8013a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8013a3c:	f04f 0901 	mov.w	r9, #1
 8013a40:	4623      	mov	r3, r4
 8013a42:	469a      	mov	sl, r3
 8013a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8013a48:	b10a      	cbz	r2, 8013a4e <_vfiprintf_r+0x86>
 8013a4a:	2a25      	cmp	r2, #37	; 0x25
 8013a4c:	d1f9      	bne.n	8013a42 <_vfiprintf_r+0x7a>
 8013a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8013a52:	d00b      	beq.n	8013a6c <_vfiprintf_r+0xa4>
 8013a54:	465b      	mov	r3, fp
 8013a56:	4622      	mov	r2, r4
 8013a58:	4629      	mov	r1, r5
 8013a5a:	4630      	mov	r0, r6
 8013a5c:	f7ff ffa1 	bl	80139a2 <__sfputs_r>
 8013a60:	3001      	adds	r0, #1
 8013a62:	f000 80a9 	beq.w	8013bb8 <_vfiprintf_r+0x1f0>
 8013a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8013a68:	445a      	add	r2, fp
 8013a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8013a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	f000 80a1 	beq.w	8013bb8 <_vfiprintf_r+0x1f0>
 8013a76:	2300      	movs	r3, #0
 8013a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8013a80:	f10a 0a01 	add.w	sl, sl, #1
 8013a84:	9304      	str	r3, [sp, #16]
 8013a86:	9307      	str	r3, [sp, #28]
 8013a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8013a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8013a8e:	4654      	mov	r4, sl
 8013a90:	2205      	movs	r2, #5
 8013a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013a96:	4854      	ldr	r0, [pc, #336]	; (8013be8 <_vfiprintf_r+0x220>)
 8013a98:	f7ec fbb2 	bl	8000200 <memchr>
 8013a9c:	9a04      	ldr	r2, [sp, #16]
 8013a9e:	b9d8      	cbnz	r0, 8013ad8 <_vfiprintf_r+0x110>
 8013aa0:	06d1      	lsls	r1, r2, #27
 8013aa2:	bf44      	itt	mi
 8013aa4:	2320      	movmi	r3, #32
 8013aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013aaa:	0713      	lsls	r3, r2, #28
 8013aac:	bf44      	itt	mi
 8013aae:	232b      	movmi	r3, #43	; 0x2b
 8013ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8013ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8013ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8013aba:	d015      	beq.n	8013ae8 <_vfiprintf_r+0x120>
 8013abc:	9a07      	ldr	r2, [sp, #28]
 8013abe:	4654      	mov	r4, sl
 8013ac0:	2000      	movs	r0, #0
 8013ac2:	f04f 0c0a 	mov.w	ip, #10
 8013ac6:	4621      	mov	r1, r4
 8013ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8013acc:	3b30      	subs	r3, #48	; 0x30
 8013ace:	2b09      	cmp	r3, #9
 8013ad0:	d94d      	bls.n	8013b6e <_vfiprintf_r+0x1a6>
 8013ad2:	b1b0      	cbz	r0, 8013b02 <_vfiprintf_r+0x13a>
 8013ad4:	9207      	str	r2, [sp, #28]
 8013ad6:	e014      	b.n	8013b02 <_vfiprintf_r+0x13a>
 8013ad8:	eba0 0308 	sub.w	r3, r0, r8
 8013adc:	fa09 f303 	lsl.w	r3, r9, r3
 8013ae0:	4313      	orrs	r3, r2
 8013ae2:	9304      	str	r3, [sp, #16]
 8013ae4:	46a2      	mov	sl, r4
 8013ae6:	e7d2      	b.n	8013a8e <_vfiprintf_r+0xc6>
 8013ae8:	9b03      	ldr	r3, [sp, #12]
 8013aea:	1d19      	adds	r1, r3, #4
 8013aec:	681b      	ldr	r3, [r3, #0]
 8013aee:	9103      	str	r1, [sp, #12]
 8013af0:	2b00      	cmp	r3, #0
 8013af2:	bfbb      	ittet	lt
 8013af4:	425b      	neglt	r3, r3
 8013af6:	f042 0202 	orrlt.w	r2, r2, #2
 8013afa:	9307      	strge	r3, [sp, #28]
 8013afc:	9307      	strlt	r3, [sp, #28]
 8013afe:	bfb8      	it	lt
 8013b00:	9204      	strlt	r2, [sp, #16]
 8013b02:	7823      	ldrb	r3, [r4, #0]
 8013b04:	2b2e      	cmp	r3, #46	; 0x2e
 8013b06:	d10c      	bne.n	8013b22 <_vfiprintf_r+0x15a>
 8013b08:	7863      	ldrb	r3, [r4, #1]
 8013b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8013b0c:	d134      	bne.n	8013b78 <_vfiprintf_r+0x1b0>
 8013b0e:	9b03      	ldr	r3, [sp, #12]
 8013b10:	1d1a      	adds	r2, r3, #4
 8013b12:	681b      	ldr	r3, [r3, #0]
 8013b14:	9203      	str	r2, [sp, #12]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	bfb8      	it	lt
 8013b1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8013b1e:	3402      	adds	r4, #2
 8013b20:	9305      	str	r3, [sp, #20]
 8013b22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8013bf8 <_vfiprintf_r+0x230>
 8013b26:	7821      	ldrb	r1, [r4, #0]
 8013b28:	2203      	movs	r2, #3
 8013b2a:	4650      	mov	r0, sl
 8013b2c:	f7ec fb68 	bl	8000200 <memchr>
 8013b30:	b138      	cbz	r0, 8013b42 <_vfiprintf_r+0x17a>
 8013b32:	9b04      	ldr	r3, [sp, #16]
 8013b34:	eba0 000a 	sub.w	r0, r0, sl
 8013b38:	2240      	movs	r2, #64	; 0x40
 8013b3a:	4082      	lsls	r2, r0
 8013b3c:	4313      	orrs	r3, r2
 8013b3e:	3401      	adds	r4, #1
 8013b40:	9304      	str	r3, [sp, #16]
 8013b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8013b46:	4829      	ldr	r0, [pc, #164]	; (8013bec <_vfiprintf_r+0x224>)
 8013b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8013b4c:	2206      	movs	r2, #6
 8013b4e:	f7ec fb57 	bl	8000200 <memchr>
 8013b52:	2800      	cmp	r0, #0
 8013b54:	d03f      	beq.n	8013bd6 <_vfiprintf_r+0x20e>
 8013b56:	4b26      	ldr	r3, [pc, #152]	; (8013bf0 <_vfiprintf_r+0x228>)
 8013b58:	bb1b      	cbnz	r3, 8013ba2 <_vfiprintf_r+0x1da>
 8013b5a:	9b03      	ldr	r3, [sp, #12]
 8013b5c:	3307      	adds	r3, #7
 8013b5e:	f023 0307 	bic.w	r3, r3, #7
 8013b62:	3308      	adds	r3, #8
 8013b64:	9303      	str	r3, [sp, #12]
 8013b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8013b68:	443b      	add	r3, r7
 8013b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8013b6c:	e768      	b.n	8013a40 <_vfiprintf_r+0x78>
 8013b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8013b72:	460c      	mov	r4, r1
 8013b74:	2001      	movs	r0, #1
 8013b76:	e7a6      	b.n	8013ac6 <_vfiprintf_r+0xfe>
 8013b78:	2300      	movs	r3, #0
 8013b7a:	3401      	adds	r4, #1
 8013b7c:	9305      	str	r3, [sp, #20]
 8013b7e:	4619      	mov	r1, r3
 8013b80:	f04f 0c0a 	mov.w	ip, #10
 8013b84:	4620      	mov	r0, r4
 8013b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8013b8a:	3a30      	subs	r2, #48	; 0x30
 8013b8c:	2a09      	cmp	r2, #9
 8013b8e:	d903      	bls.n	8013b98 <_vfiprintf_r+0x1d0>
 8013b90:	2b00      	cmp	r3, #0
 8013b92:	d0c6      	beq.n	8013b22 <_vfiprintf_r+0x15a>
 8013b94:	9105      	str	r1, [sp, #20]
 8013b96:	e7c4      	b.n	8013b22 <_vfiprintf_r+0x15a>
 8013b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8013b9c:	4604      	mov	r4, r0
 8013b9e:	2301      	movs	r3, #1
 8013ba0:	e7f0      	b.n	8013b84 <_vfiprintf_r+0x1bc>
 8013ba2:	ab03      	add	r3, sp, #12
 8013ba4:	9300      	str	r3, [sp, #0]
 8013ba6:	462a      	mov	r2, r5
 8013ba8:	4b12      	ldr	r3, [pc, #72]	; (8013bf4 <_vfiprintf_r+0x22c>)
 8013baa:	a904      	add	r1, sp, #16
 8013bac:	4630      	mov	r0, r6
 8013bae:	f3af 8000 	nop.w
 8013bb2:	4607      	mov	r7, r0
 8013bb4:	1c78      	adds	r0, r7, #1
 8013bb6:	d1d6      	bne.n	8013b66 <_vfiprintf_r+0x19e>
 8013bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8013bba:	07d9      	lsls	r1, r3, #31
 8013bbc:	d405      	bmi.n	8013bca <_vfiprintf_r+0x202>
 8013bbe:	89ab      	ldrh	r3, [r5, #12]
 8013bc0:	059a      	lsls	r2, r3, #22
 8013bc2:	d402      	bmi.n	8013bca <_vfiprintf_r+0x202>
 8013bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8013bc6:	f7ff fce8 	bl	801359a <__retarget_lock_release_recursive>
 8013bca:	89ab      	ldrh	r3, [r5, #12]
 8013bcc:	065b      	lsls	r3, r3, #25
 8013bce:	f53f af1d 	bmi.w	8013a0c <_vfiprintf_r+0x44>
 8013bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8013bd4:	e71c      	b.n	8013a10 <_vfiprintf_r+0x48>
 8013bd6:	ab03      	add	r3, sp, #12
 8013bd8:	9300      	str	r3, [sp, #0]
 8013bda:	462a      	mov	r2, r5
 8013bdc:	4b05      	ldr	r3, [pc, #20]	; (8013bf4 <_vfiprintf_r+0x22c>)
 8013bde:	a904      	add	r1, sp, #16
 8013be0:	4630      	mov	r0, r6
 8013be2:	f000 f879 	bl	8013cd8 <_printf_i>
 8013be6:	e7e4      	b.n	8013bb2 <_vfiprintf_r+0x1ea>
 8013be8:	08014f90 	.word	0x08014f90
 8013bec:	08014f9a 	.word	0x08014f9a
 8013bf0:	00000000 	.word	0x00000000
 8013bf4:	080139a3 	.word	0x080139a3
 8013bf8:	08014f96 	.word	0x08014f96

08013bfc <_printf_common>:
 8013bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8013c00:	4616      	mov	r6, r2
 8013c02:	4699      	mov	r9, r3
 8013c04:	688a      	ldr	r2, [r1, #8]
 8013c06:	690b      	ldr	r3, [r1, #16]
 8013c08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8013c0c:	4293      	cmp	r3, r2
 8013c0e:	bfb8      	it	lt
 8013c10:	4613      	movlt	r3, r2
 8013c12:	6033      	str	r3, [r6, #0]
 8013c14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8013c18:	4607      	mov	r7, r0
 8013c1a:	460c      	mov	r4, r1
 8013c1c:	b10a      	cbz	r2, 8013c22 <_printf_common+0x26>
 8013c1e:	3301      	adds	r3, #1
 8013c20:	6033      	str	r3, [r6, #0]
 8013c22:	6823      	ldr	r3, [r4, #0]
 8013c24:	0699      	lsls	r1, r3, #26
 8013c26:	bf42      	ittt	mi
 8013c28:	6833      	ldrmi	r3, [r6, #0]
 8013c2a:	3302      	addmi	r3, #2
 8013c2c:	6033      	strmi	r3, [r6, #0]
 8013c2e:	6825      	ldr	r5, [r4, #0]
 8013c30:	f015 0506 	ands.w	r5, r5, #6
 8013c34:	d106      	bne.n	8013c44 <_printf_common+0x48>
 8013c36:	f104 0a19 	add.w	sl, r4, #25
 8013c3a:	68e3      	ldr	r3, [r4, #12]
 8013c3c:	6832      	ldr	r2, [r6, #0]
 8013c3e:	1a9b      	subs	r3, r3, r2
 8013c40:	42ab      	cmp	r3, r5
 8013c42:	dc26      	bgt.n	8013c92 <_printf_common+0x96>
 8013c44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8013c48:	1e13      	subs	r3, r2, #0
 8013c4a:	6822      	ldr	r2, [r4, #0]
 8013c4c:	bf18      	it	ne
 8013c4e:	2301      	movne	r3, #1
 8013c50:	0692      	lsls	r2, r2, #26
 8013c52:	d42b      	bmi.n	8013cac <_printf_common+0xb0>
 8013c54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8013c58:	4649      	mov	r1, r9
 8013c5a:	4638      	mov	r0, r7
 8013c5c:	47c0      	blx	r8
 8013c5e:	3001      	adds	r0, #1
 8013c60:	d01e      	beq.n	8013ca0 <_printf_common+0xa4>
 8013c62:	6823      	ldr	r3, [r4, #0]
 8013c64:	6922      	ldr	r2, [r4, #16]
 8013c66:	f003 0306 	and.w	r3, r3, #6
 8013c6a:	2b04      	cmp	r3, #4
 8013c6c:	bf02      	ittt	eq
 8013c6e:	68e5      	ldreq	r5, [r4, #12]
 8013c70:	6833      	ldreq	r3, [r6, #0]
 8013c72:	1aed      	subeq	r5, r5, r3
 8013c74:	68a3      	ldr	r3, [r4, #8]
 8013c76:	bf0c      	ite	eq
 8013c78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8013c7c:	2500      	movne	r5, #0
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	bfc4      	itt	gt
 8013c82:	1a9b      	subgt	r3, r3, r2
 8013c84:	18ed      	addgt	r5, r5, r3
 8013c86:	2600      	movs	r6, #0
 8013c88:	341a      	adds	r4, #26
 8013c8a:	42b5      	cmp	r5, r6
 8013c8c:	d11a      	bne.n	8013cc4 <_printf_common+0xc8>
 8013c8e:	2000      	movs	r0, #0
 8013c90:	e008      	b.n	8013ca4 <_printf_common+0xa8>
 8013c92:	2301      	movs	r3, #1
 8013c94:	4652      	mov	r2, sl
 8013c96:	4649      	mov	r1, r9
 8013c98:	4638      	mov	r0, r7
 8013c9a:	47c0      	blx	r8
 8013c9c:	3001      	adds	r0, #1
 8013c9e:	d103      	bne.n	8013ca8 <_printf_common+0xac>
 8013ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013ca4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013ca8:	3501      	adds	r5, #1
 8013caa:	e7c6      	b.n	8013c3a <_printf_common+0x3e>
 8013cac:	18e1      	adds	r1, r4, r3
 8013cae:	1c5a      	adds	r2, r3, #1
 8013cb0:	2030      	movs	r0, #48	; 0x30
 8013cb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8013cb6:	4422      	add	r2, r4
 8013cb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8013cbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8013cc0:	3302      	adds	r3, #2
 8013cc2:	e7c7      	b.n	8013c54 <_printf_common+0x58>
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	4622      	mov	r2, r4
 8013cc8:	4649      	mov	r1, r9
 8013cca:	4638      	mov	r0, r7
 8013ccc:	47c0      	blx	r8
 8013cce:	3001      	adds	r0, #1
 8013cd0:	d0e6      	beq.n	8013ca0 <_printf_common+0xa4>
 8013cd2:	3601      	adds	r6, #1
 8013cd4:	e7d9      	b.n	8013c8a <_printf_common+0x8e>
	...

08013cd8 <_printf_i>:
 8013cd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8013cdc:	7e0f      	ldrb	r7, [r1, #24]
 8013cde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8013ce0:	2f78      	cmp	r7, #120	; 0x78
 8013ce2:	4691      	mov	r9, r2
 8013ce4:	4680      	mov	r8, r0
 8013ce6:	460c      	mov	r4, r1
 8013ce8:	469a      	mov	sl, r3
 8013cea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8013cee:	d807      	bhi.n	8013d00 <_printf_i+0x28>
 8013cf0:	2f62      	cmp	r7, #98	; 0x62
 8013cf2:	d80a      	bhi.n	8013d0a <_printf_i+0x32>
 8013cf4:	2f00      	cmp	r7, #0
 8013cf6:	f000 80d4 	beq.w	8013ea2 <_printf_i+0x1ca>
 8013cfa:	2f58      	cmp	r7, #88	; 0x58
 8013cfc:	f000 80c0 	beq.w	8013e80 <_printf_i+0x1a8>
 8013d00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8013d08:	e03a      	b.n	8013d80 <_printf_i+0xa8>
 8013d0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8013d0e:	2b15      	cmp	r3, #21
 8013d10:	d8f6      	bhi.n	8013d00 <_printf_i+0x28>
 8013d12:	a101      	add	r1, pc, #4	; (adr r1, 8013d18 <_printf_i+0x40>)
 8013d14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8013d18:	08013d71 	.word	0x08013d71
 8013d1c:	08013d85 	.word	0x08013d85
 8013d20:	08013d01 	.word	0x08013d01
 8013d24:	08013d01 	.word	0x08013d01
 8013d28:	08013d01 	.word	0x08013d01
 8013d2c:	08013d01 	.word	0x08013d01
 8013d30:	08013d85 	.word	0x08013d85
 8013d34:	08013d01 	.word	0x08013d01
 8013d38:	08013d01 	.word	0x08013d01
 8013d3c:	08013d01 	.word	0x08013d01
 8013d40:	08013d01 	.word	0x08013d01
 8013d44:	08013e89 	.word	0x08013e89
 8013d48:	08013db1 	.word	0x08013db1
 8013d4c:	08013e43 	.word	0x08013e43
 8013d50:	08013d01 	.word	0x08013d01
 8013d54:	08013d01 	.word	0x08013d01
 8013d58:	08013eab 	.word	0x08013eab
 8013d5c:	08013d01 	.word	0x08013d01
 8013d60:	08013db1 	.word	0x08013db1
 8013d64:	08013d01 	.word	0x08013d01
 8013d68:	08013d01 	.word	0x08013d01
 8013d6c:	08013e4b 	.word	0x08013e4b
 8013d70:	682b      	ldr	r3, [r5, #0]
 8013d72:	1d1a      	adds	r2, r3, #4
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	602a      	str	r2, [r5, #0]
 8013d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8013d7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8013d80:	2301      	movs	r3, #1
 8013d82:	e09f      	b.n	8013ec4 <_printf_i+0x1ec>
 8013d84:	6820      	ldr	r0, [r4, #0]
 8013d86:	682b      	ldr	r3, [r5, #0]
 8013d88:	0607      	lsls	r7, r0, #24
 8013d8a:	f103 0104 	add.w	r1, r3, #4
 8013d8e:	6029      	str	r1, [r5, #0]
 8013d90:	d501      	bpl.n	8013d96 <_printf_i+0xbe>
 8013d92:	681e      	ldr	r6, [r3, #0]
 8013d94:	e003      	b.n	8013d9e <_printf_i+0xc6>
 8013d96:	0646      	lsls	r6, r0, #25
 8013d98:	d5fb      	bpl.n	8013d92 <_printf_i+0xba>
 8013d9a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8013d9e:	2e00      	cmp	r6, #0
 8013da0:	da03      	bge.n	8013daa <_printf_i+0xd2>
 8013da2:	232d      	movs	r3, #45	; 0x2d
 8013da4:	4276      	negs	r6, r6
 8013da6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013daa:	485a      	ldr	r0, [pc, #360]	; (8013f14 <_printf_i+0x23c>)
 8013dac:	230a      	movs	r3, #10
 8013dae:	e012      	b.n	8013dd6 <_printf_i+0xfe>
 8013db0:	682b      	ldr	r3, [r5, #0]
 8013db2:	6820      	ldr	r0, [r4, #0]
 8013db4:	1d19      	adds	r1, r3, #4
 8013db6:	6029      	str	r1, [r5, #0]
 8013db8:	0605      	lsls	r5, r0, #24
 8013dba:	d501      	bpl.n	8013dc0 <_printf_i+0xe8>
 8013dbc:	681e      	ldr	r6, [r3, #0]
 8013dbe:	e002      	b.n	8013dc6 <_printf_i+0xee>
 8013dc0:	0641      	lsls	r1, r0, #25
 8013dc2:	d5fb      	bpl.n	8013dbc <_printf_i+0xe4>
 8013dc4:	881e      	ldrh	r6, [r3, #0]
 8013dc6:	4853      	ldr	r0, [pc, #332]	; (8013f14 <_printf_i+0x23c>)
 8013dc8:	2f6f      	cmp	r7, #111	; 0x6f
 8013dca:	bf0c      	ite	eq
 8013dcc:	2308      	moveq	r3, #8
 8013dce:	230a      	movne	r3, #10
 8013dd0:	2100      	movs	r1, #0
 8013dd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8013dd6:	6865      	ldr	r5, [r4, #4]
 8013dd8:	60a5      	str	r5, [r4, #8]
 8013dda:	2d00      	cmp	r5, #0
 8013ddc:	bfa2      	ittt	ge
 8013dde:	6821      	ldrge	r1, [r4, #0]
 8013de0:	f021 0104 	bicge.w	r1, r1, #4
 8013de4:	6021      	strge	r1, [r4, #0]
 8013de6:	b90e      	cbnz	r6, 8013dec <_printf_i+0x114>
 8013de8:	2d00      	cmp	r5, #0
 8013dea:	d04b      	beq.n	8013e84 <_printf_i+0x1ac>
 8013dec:	4615      	mov	r5, r2
 8013dee:	fbb6 f1f3 	udiv	r1, r6, r3
 8013df2:	fb03 6711 	mls	r7, r3, r1, r6
 8013df6:	5dc7      	ldrb	r7, [r0, r7]
 8013df8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8013dfc:	4637      	mov	r7, r6
 8013dfe:	42bb      	cmp	r3, r7
 8013e00:	460e      	mov	r6, r1
 8013e02:	d9f4      	bls.n	8013dee <_printf_i+0x116>
 8013e04:	2b08      	cmp	r3, #8
 8013e06:	d10b      	bne.n	8013e20 <_printf_i+0x148>
 8013e08:	6823      	ldr	r3, [r4, #0]
 8013e0a:	07de      	lsls	r6, r3, #31
 8013e0c:	d508      	bpl.n	8013e20 <_printf_i+0x148>
 8013e0e:	6923      	ldr	r3, [r4, #16]
 8013e10:	6861      	ldr	r1, [r4, #4]
 8013e12:	4299      	cmp	r1, r3
 8013e14:	bfde      	ittt	le
 8013e16:	2330      	movle	r3, #48	; 0x30
 8013e18:	f805 3c01 	strble.w	r3, [r5, #-1]
 8013e1c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8013e20:	1b52      	subs	r2, r2, r5
 8013e22:	6122      	str	r2, [r4, #16]
 8013e24:	f8cd a000 	str.w	sl, [sp]
 8013e28:	464b      	mov	r3, r9
 8013e2a:	aa03      	add	r2, sp, #12
 8013e2c:	4621      	mov	r1, r4
 8013e2e:	4640      	mov	r0, r8
 8013e30:	f7ff fee4 	bl	8013bfc <_printf_common>
 8013e34:	3001      	adds	r0, #1
 8013e36:	d14a      	bne.n	8013ece <_printf_i+0x1f6>
 8013e38:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8013e3c:	b004      	add	sp, #16
 8013e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013e42:	6823      	ldr	r3, [r4, #0]
 8013e44:	f043 0320 	orr.w	r3, r3, #32
 8013e48:	6023      	str	r3, [r4, #0]
 8013e4a:	4833      	ldr	r0, [pc, #204]	; (8013f18 <_printf_i+0x240>)
 8013e4c:	2778      	movs	r7, #120	; 0x78
 8013e4e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8013e52:	6823      	ldr	r3, [r4, #0]
 8013e54:	6829      	ldr	r1, [r5, #0]
 8013e56:	061f      	lsls	r7, r3, #24
 8013e58:	f851 6b04 	ldr.w	r6, [r1], #4
 8013e5c:	d402      	bmi.n	8013e64 <_printf_i+0x18c>
 8013e5e:	065f      	lsls	r7, r3, #25
 8013e60:	bf48      	it	mi
 8013e62:	b2b6      	uxthmi	r6, r6
 8013e64:	07df      	lsls	r7, r3, #31
 8013e66:	bf48      	it	mi
 8013e68:	f043 0320 	orrmi.w	r3, r3, #32
 8013e6c:	6029      	str	r1, [r5, #0]
 8013e6e:	bf48      	it	mi
 8013e70:	6023      	strmi	r3, [r4, #0]
 8013e72:	b91e      	cbnz	r6, 8013e7c <_printf_i+0x1a4>
 8013e74:	6823      	ldr	r3, [r4, #0]
 8013e76:	f023 0320 	bic.w	r3, r3, #32
 8013e7a:	6023      	str	r3, [r4, #0]
 8013e7c:	2310      	movs	r3, #16
 8013e7e:	e7a7      	b.n	8013dd0 <_printf_i+0xf8>
 8013e80:	4824      	ldr	r0, [pc, #144]	; (8013f14 <_printf_i+0x23c>)
 8013e82:	e7e4      	b.n	8013e4e <_printf_i+0x176>
 8013e84:	4615      	mov	r5, r2
 8013e86:	e7bd      	b.n	8013e04 <_printf_i+0x12c>
 8013e88:	682b      	ldr	r3, [r5, #0]
 8013e8a:	6826      	ldr	r6, [r4, #0]
 8013e8c:	6961      	ldr	r1, [r4, #20]
 8013e8e:	1d18      	adds	r0, r3, #4
 8013e90:	6028      	str	r0, [r5, #0]
 8013e92:	0635      	lsls	r5, r6, #24
 8013e94:	681b      	ldr	r3, [r3, #0]
 8013e96:	d501      	bpl.n	8013e9c <_printf_i+0x1c4>
 8013e98:	6019      	str	r1, [r3, #0]
 8013e9a:	e002      	b.n	8013ea2 <_printf_i+0x1ca>
 8013e9c:	0670      	lsls	r0, r6, #25
 8013e9e:	d5fb      	bpl.n	8013e98 <_printf_i+0x1c0>
 8013ea0:	8019      	strh	r1, [r3, #0]
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	6123      	str	r3, [r4, #16]
 8013ea6:	4615      	mov	r5, r2
 8013ea8:	e7bc      	b.n	8013e24 <_printf_i+0x14c>
 8013eaa:	682b      	ldr	r3, [r5, #0]
 8013eac:	1d1a      	adds	r2, r3, #4
 8013eae:	602a      	str	r2, [r5, #0]
 8013eb0:	681d      	ldr	r5, [r3, #0]
 8013eb2:	6862      	ldr	r2, [r4, #4]
 8013eb4:	2100      	movs	r1, #0
 8013eb6:	4628      	mov	r0, r5
 8013eb8:	f7ec f9a2 	bl	8000200 <memchr>
 8013ebc:	b108      	cbz	r0, 8013ec2 <_printf_i+0x1ea>
 8013ebe:	1b40      	subs	r0, r0, r5
 8013ec0:	6060      	str	r0, [r4, #4]
 8013ec2:	6863      	ldr	r3, [r4, #4]
 8013ec4:	6123      	str	r3, [r4, #16]
 8013ec6:	2300      	movs	r3, #0
 8013ec8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8013ecc:	e7aa      	b.n	8013e24 <_printf_i+0x14c>
 8013ece:	6923      	ldr	r3, [r4, #16]
 8013ed0:	462a      	mov	r2, r5
 8013ed2:	4649      	mov	r1, r9
 8013ed4:	4640      	mov	r0, r8
 8013ed6:	47d0      	blx	sl
 8013ed8:	3001      	adds	r0, #1
 8013eda:	d0ad      	beq.n	8013e38 <_printf_i+0x160>
 8013edc:	6823      	ldr	r3, [r4, #0]
 8013ede:	079b      	lsls	r3, r3, #30
 8013ee0:	d413      	bmi.n	8013f0a <_printf_i+0x232>
 8013ee2:	68e0      	ldr	r0, [r4, #12]
 8013ee4:	9b03      	ldr	r3, [sp, #12]
 8013ee6:	4298      	cmp	r0, r3
 8013ee8:	bfb8      	it	lt
 8013eea:	4618      	movlt	r0, r3
 8013eec:	e7a6      	b.n	8013e3c <_printf_i+0x164>
 8013eee:	2301      	movs	r3, #1
 8013ef0:	4632      	mov	r2, r6
 8013ef2:	4649      	mov	r1, r9
 8013ef4:	4640      	mov	r0, r8
 8013ef6:	47d0      	blx	sl
 8013ef8:	3001      	adds	r0, #1
 8013efa:	d09d      	beq.n	8013e38 <_printf_i+0x160>
 8013efc:	3501      	adds	r5, #1
 8013efe:	68e3      	ldr	r3, [r4, #12]
 8013f00:	9903      	ldr	r1, [sp, #12]
 8013f02:	1a5b      	subs	r3, r3, r1
 8013f04:	42ab      	cmp	r3, r5
 8013f06:	dcf2      	bgt.n	8013eee <_printf_i+0x216>
 8013f08:	e7eb      	b.n	8013ee2 <_printf_i+0x20a>
 8013f0a:	2500      	movs	r5, #0
 8013f0c:	f104 0619 	add.w	r6, r4, #25
 8013f10:	e7f5      	b.n	8013efe <_printf_i+0x226>
 8013f12:	bf00      	nop
 8013f14:	08014fa1 	.word	0x08014fa1
 8013f18:	08014fb2 	.word	0x08014fb2

08013f1c <__sflush_r>:
 8013f1c:	898a      	ldrh	r2, [r1, #12]
 8013f1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f22:	4605      	mov	r5, r0
 8013f24:	0710      	lsls	r0, r2, #28
 8013f26:	460c      	mov	r4, r1
 8013f28:	d458      	bmi.n	8013fdc <__sflush_r+0xc0>
 8013f2a:	684b      	ldr	r3, [r1, #4]
 8013f2c:	2b00      	cmp	r3, #0
 8013f2e:	dc05      	bgt.n	8013f3c <__sflush_r+0x20>
 8013f30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	dc02      	bgt.n	8013f3c <__sflush_r+0x20>
 8013f36:	2000      	movs	r0, #0
 8013f38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013f3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f3e:	2e00      	cmp	r6, #0
 8013f40:	d0f9      	beq.n	8013f36 <__sflush_r+0x1a>
 8013f42:	2300      	movs	r3, #0
 8013f44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013f48:	682f      	ldr	r7, [r5, #0]
 8013f4a:	6a21      	ldr	r1, [r4, #32]
 8013f4c:	602b      	str	r3, [r5, #0]
 8013f4e:	d032      	beq.n	8013fb6 <__sflush_r+0x9a>
 8013f50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013f52:	89a3      	ldrh	r3, [r4, #12]
 8013f54:	075a      	lsls	r2, r3, #29
 8013f56:	d505      	bpl.n	8013f64 <__sflush_r+0x48>
 8013f58:	6863      	ldr	r3, [r4, #4]
 8013f5a:	1ac0      	subs	r0, r0, r3
 8013f5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013f5e:	b10b      	cbz	r3, 8013f64 <__sflush_r+0x48>
 8013f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013f62:	1ac0      	subs	r0, r0, r3
 8013f64:	2300      	movs	r3, #0
 8013f66:	4602      	mov	r2, r0
 8013f68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013f6a:	6a21      	ldr	r1, [r4, #32]
 8013f6c:	4628      	mov	r0, r5
 8013f6e:	47b0      	blx	r6
 8013f70:	1c43      	adds	r3, r0, #1
 8013f72:	89a3      	ldrh	r3, [r4, #12]
 8013f74:	d106      	bne.n	8013f84 <__sflush_r+0x68>
 8013f76:	6829      	ldr	r1, [r5, #0]
 8013f78:	291d      	cmp	r1, #29
 8013f7a:	d82b      	bhi.n	8013fd4 <__sflush_r+0xb8>
 8013f7c:	4a29      	ldr	r2, [pc, #164]	; (8014024 <__sflush_r+0x108>)
 8013f7e:	410a      	asrs	r2, r1
 8013f80:	07d6      	lsls	r6, r2, #31
 8013f82:	d427      	bmi.n	8013fd4 <__sflush_r+0xb8>
 8013f84:	2200      	movs	r2, #0
 8013f86:	6062      	str	r2, [r4, #4]
 8013f88:	04d9      	lsls	r1, r3, #19
 8013f8a:	6922      	ldr	r2, [r4, #16]
 8013f8c:	6022      	str	r2, [r4, #0]
 8013f8e:	d504      	bpl.n	8013f9a <__sflush_r+0x7e>
 8013f90:	1c42      	adds	r2, r0, #1
 8013f92:	d101      	bne.n	8013f98 <__sflush_r+0x7c>
 8013f94:	682b      	ldr	r3, [r5, #0]
 8013f96:	b903      	cbnz	r3, 8013f9a <__sflush_r+0x7e>
 8013f98:	6560      	str	r0, [r4, #84]	; 0x54
 8013f9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013f9c:	602f      	str	r7, [r5, #0]
 8013f9e:	2900      	cmp	r1, #0
 8013fa0:	d0c9      	beq.n	8013f36 <__sflush_r+0x1a>
 8013fa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013fa6:	4299      	cmp	r1, r3
 8013fa8:	d002      	beq.n	8013fb0 <__sflush_r+0x94>
 8013faa:	4628      	mov	r0, r5
 8013fac:	f7ff fb36 	bl	801361c <_free_r>
 8013fb0:	2000      	movs	r0, #0
 8013fb2:	6360      	str	r0, [r4, #52]	; 0x34
 8013fb4:	e7c0      	b.n	8013f38 <__sflush_r+0x1c>
 8013fb6:	2301      	movs	r3, #1
 8013fb8:	4628      	mov	r0, r5
 8013fba:	47b0      	blx	r6
 8013fbc:	1c41      	adds	r1, r0, #1
 8013fbe:	d1c8      	bne.n	8013f52 <__sflush_r+0x36>
 8013fc0:	682b      	ldr	r3, [r5, #0]
 8013fc2:	2b00      	cmp	r3, #0
 8013fc4:	d0c5      	beq.n	8013f52 <__sflush_r+0x36>
 8013fc6:	2b1d      	cmp	r3, #29
 8013fc8:	d001      	beq.n	8013fce <__sflush_r+0xb2>
 8013fca:	2b16      	cmp	r3, #22
 8013fcc:	d101      	bne.n	8013fd2 <__sflush_r+0xb6>
 8013fce:	602f      	str	r7, [r5, #0]
 8013fd0:	e7b1      	b.n	8013f36 <__sflush_r+0x1a>
 8013fd2:	89a3      	ldrh	r3, [r4, #12]
 8013fd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013fd8:	81a3      	strh	r3, [r4, #12]
 8013fda:	e7ad      	b.n	8013f38 <__sflush_r+0x1c>
 8013fdc:	690f      	ldr	r7, [r1, #16]
 8013fde:	2f00      	cmp	r7, #0
 8013fe0:	d0a9      	beq.n	8013f36 <__sflush_r+0x1a>
 8013fe2:	0793      	lsls	r3, r2, #30
 8013fe4:	680e      	ldr	r6, [r1, #0]
 8013fe6:	bf08      	it	eq
 8013fe8:	694b      	ldreq	r3, [r1, #20]
 8013fea:	600f      	str	r7, [r1, #0]
 8013fec:	bf18      	it	ne
 8013fee:	2300      	movne	r3, #0
 8013ff0:	eba6 0807 	sub.w	r8, r6, r7
 8013ff4:	608b      	str	r3, [r1, #8]
 8013ff6:	f1b8 0f00 	cmp.w	r8, #0
 8013ffa:	dd9c      	ble.n	8013f36 <__sflush_r+0x1a>
 8013ffc:	6a21      	ldr	r1, [r4, #32]
 8013ffe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8014000:	4643      	mov	r3, r8
 8014002:	463a      	mov	r2, r7
 8014004:	4628      	mov	r0, r5
 8014006:	47b0      	blx	r6
 8014008:	2800      	cmp	r0, #0
 801400a:	dc06      	bgt.n	801401a <__sflush_r+0xfe>
 801400c:	89a3      	ldrh	r3, [r4, #12]
 801400e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014012:	81a3      	strh	r3, [r4, #12]
 8014014:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014018:	e78e      	b.n	8013f38 <__sflush_r+0x1c>
 801401a:	4407      	add	r7, r0
 801401c:	eba8 0800 	sub.w	r8, r8, r0
 8014020:	e7e9      	b.n	8013ff6 <__sflush_r+0xda>
 8014022:	bf00      	nop
 8014024:	dfbffffe 	.word	0xdfbffffe

08014028 <_fflush_r>:
 8014028:	b538      	push	{r3, r4, r5, lr}
 801402a:	690b      	ldr	r3, [r1, #16]
 801402c:	4605      	mov	r5, r0
 801402e:	460c      	mov	r4, r1
 8014030:	b913      	cbnz	r3, 8014038 <_fflush_r+0x10>
 8014032:	2500      	movs	r5, #0
 8014034:	4628      	mov	r0, r5
 8014036:	bd38      	pop	{r3, r4, r5, pc}
 8014038:	b118      	cbz	r0, 8014042 <_fflush_r+0x1a>
 801403a:	6a03      	ldr	r3, [r0, #32]
 801403c:	b90b      	cbnz	r3, 8014042 <_fflush_r+0x1a>
 801403e:	f7ff f8f5 	bl	801322c <__sinit>
 8014042:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014046:	2b00      	cmp	r3, #0
 8014048:	d0f3      	beq.n	8014032 <_fflush_r+0xa>
 801404a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801404c:	07d0      	lsls	r0, r2, #31
 801404e:	d404      	bmi.n	801405a <_fflush_r+0x32>
 8014050:	0599      	lsls	r1, r3, #22
 8014052:	d402      	bmi.n	801405a <_fflush_r+0x32>
 8014054:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014056:	f7ff fa9f 	bl	8013598 <__retarget_lock_acquire_recursive>
 801405a:	4628      	mov	r0, r5
 801405c:	4621      	mov	r1, r4
 801405e:	f7ff ff5d 	bl	8013f1c <__sflush_r>
 8014062:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014064:	07da      	lsls	r2, r3, #31
 8014066:	4605      	mov	r5, r0
 8014068:	d4e4      	bmi.n	8014034 <_fflush_r+0xc>
 801406a:	89a3      	ldrh	r3, [r4, #12]
 801406c:	059b      	lsls	r3, r3, #22
 801406e:	d4e1      	bmi.n	8014034 <_fflush_r+0xc>
 8014070:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014072:	f7ff fa92 	bl	801359a <__retarget_lock_release_recursive>
 8014076:	e7dd      	b.n	8014034 <_fflush_r+0xc>

08014078 <fiprintf>:
 8014078:	b40e      	push	{r1, r2, r3}
 801407a:	b503      	push	{r0, r1, lr}
 801407c:	4601      	mov	r1, r0
 801407e:	ab03      	add	r3, sp, #12
 8014080:	4805      	ldr	r0, [pc, #20]	; (8014098 <fiprintf+0x20>)
 8014082:	f853 2b04 	ldr.w	r2, [r3], #4
 8014086:	6800      	ldr	r0, [r0, #0]
 8014088:	9301      	str	r3, [sp, #4]
 801408a:	f7ff fc9d 	bl	80139c8 <_vfiprintf_r>
 801408e:	b002      	add	sp, #8
 8014090:	f85d eb04 	ldr.w	lr, [sp], #4
 8014094:	b003      	add	sp, #12
 8014096:	4770      	bx	lr
 8014098:	2000010c 	.word	0x2000010c

0801409c <__swbuf_r>:
 801409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801409e:	460e      	mov	r6, r1
 80140a0:	4614      	mov	r4, r2
 80140a2:	4605      	mov	r5, r0
 80140a4:	b118      	cbz	r0, 80140ae <__swbuf_r+0x12>
 80140a6:	6a03      	ldr	r3, [r0, #32]
 80140a8:	b90b      	cbnz	r3, 80140ae <__swbuf_r+0x12>
 80140aa:	f7ff f8bf 	bl	801322c <__sinit>
 80140ae:	69a3      	ldr	r3, [r4, #24]
 80140b0:	60a3      	str	r3, [r4, #8]
 80140b2:	89a3      	ldrh	r3, [r4, #12]
 80140b4:	071a      	lsls	r2, r3, #28
 80140b6:	d525      	bpl.n	8014104 <__swbuf_r+0x68>
 80140b8:	6923      	ldr	r3, [r4, #16]
 80140ba:	b31b      	cbz	r3, 8014104 <__swbuf_r+0x68>
 80140bc:	6823      	ldr	r3, [r4, #0]
 80140be:	6922      	ldr	r2, [r4, #16]
 80140c0:	1a98      	subs	r0, r3, r2
 80140c2:	6963      	ldr	r3, [r4, #20]
 80140c4:	b2f6      	uxtb	r6, r6
 80140c6:	4283      	cmp	r3, r0
 80140c8:	4637      	mov	r7, r6
 80140ca:	dc04      	bgt.n	80140d6 <__swbuf_r+0x3a>
 80140cc:	4621      	mov	r1, r4
 80140ce:	4628      	mov	r0, r5
 80140d0:	f7ff ffaa 	bl	8014028 <_fflush_r>
 80140d4:	b9e0      	cbnz	r0, 8014110 <__swbuf_r+0x74>
 80140d6:	68a3      	ldr	r3, [r4, #8]
 80140d8:	3b01      	subs	r3, #1
 80140da:	60a3      	str	r3, [r4, #8]
 80140dc:	6823      	ldr	r3, [r4, #0]
 80140de:	1c5a      	adds	r2, r3, #1
 80140e0:	6022      	str	r2, [r4, #0]
 80140e2:	701e      	strb	r6, [r3, #0]
 80140e4:	6962      	ldr	r2, [r4, #20]
 80140e6:	1c43      	adds	r3, r0, #1
 80140e8:	429a      	cmp	r2, r3
 80140ea:	d004      	beq.n	80140f6 <__swbuf_r+0x5a>
 80140ec:	89a3      	ldrh	r3, [r4, #12]
 80140ee:	07db      	lsls	r3, r3, #31
 80140f0:	d506      	bpl.n	8014100 <__swbuf_r+0x64>
 80140f2:	2e0a      	cmp	r6, #10
 80140f4:	d104      	bne.n	8014100 <__swbuf_r+0x64>
 80140f6:	4621      	mov	r1, r4
 80140f8:	4628      	mov	r0, r5
 80140fa:	f7ff ff95 	bl	8014028 <_fflush_r>
 80140fe:	b938      	cbnz	r0, 8014110 <__swbuf_r+0x74>
 8014100:	4638      	mov	r0, r7
 8014102:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014104:	4621      	mov	r1, r4
 8014106:	4628      	mov	r0, r5
 8014108:	f000 f806 	bl	8014118 <__swsetup_r>
 801410c:	2800      	cmp	r0, #0
 801410e:	d0d5      	beq.n	80140bc <__swbuf_r+0x20>
 8014110:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8014114:	e7f4      	b.n	8014100 <__swbuf_r+0x64>
	...

08014118 <__swsetup_r>:
 8014118:	b538      	push	{r3, r4, r5, lr}
 801411a:	4b2a      	ldr	r3, [pc, #168]	; (80141c4 <__swsetup_r+0xac>)
 801411c:	4605      	mov	r5, r0
 801411e:	6818      	ldr	r0, [r3, #0]
 8014120:	460c      	mov	r4, r1
 8014122:	b118      	cbz	r0, 801412c <__swsetup_r+0x14>
 8014124:	6a03      	ldr	r3, [r0, #32]
 8014126:	b90b      	cbnz	r3, 801412c <__swsetup_r+0x14>
 8014128:	f7ff f880 	bl	801322c <__sinit>
 801412c:	89a3      	ldrh	r3, [r4, #12]
 801412e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014132:	0718      	lsls	r0, r3, #28
 8014134:	d422      	bmi.n	801417c <__swsetup_r+0x64>
 8014136:	06d9      	lsls	r1, r3, #27
 8014138:	d407      	bmi.n	801414a <__swsetup_r+0x32>
 801413a:	2309      	movs	r3, #9
 801413c:	602b      	str	r3, [r5, #0]
 801413e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8014142:	81a3      	strh	r3, [r4, #12]
 8014144:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8014148:	e034      	b.n	80141b4 <__swsetup_r+0x9c>
 801414a:	0758      	lsls	r0, r3, #29
 801414c:	d512      	bpl.n	8014174 <__swsetup_r+0x5c>
 801414e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014150:	b141      	cbz	r1, 8014164 <__swsetup_r+0x4c>
 8014152:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014156:	4299      	cmp	r1, r3
 8014158:	d002      	beq.n	8014160 <__swsetup_r+0x48>
 801415a:	4628      	mov	r0, r5
 801415c:	f7ff fa5e 	bl	801361c <_free_r>
 8014160:	2300      	movs	r3, #0
 8014162:	6363      	str	r3, [r4, #52]	; 0x34
 8014164:	89a3      	ldrh	r3, [r4, #12]
 8014166:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801416a:	81a3      	strh	r3, [r4, #12]
 801416c:	2300      	movs	r3, #0
 801416e:	6063      	str	r3, [r4, #4]
 8014170:	6923      	ldr	r3, [r4, #16]
 8014172:	6023      	str	r3, [r4, #0]
 8014174:	89a3      	ldrh	r3, [r4, #12]
 8014176:	f043 0308 	orr.w	r3, r3, #8
 801417a:	81a3      	strh	r3, [r4, #12]
 801417c:	6923      	ldr	r3, [r4, #16]
 801417e:	b94b      	cbnz	r3, 8014194 <__swsetup_r+0x7c>
 8014180:	89a3      	ldrh	r3, [r4, #12]
 8014182:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8014186:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801418a:	d003      	beq.n	8014194 <__swsetup_r+0x7c>
 801418c:	4621      	mov	r1, r4
 801418e:	4628      	mov	r0, r5
 8014190:	f000 f861 	bl	8014256 <__smakebuf_r>
 8014194:	89a0      	ldrh	r0, [r4, #12]
 8014196:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801419a:	f010 0301 	ands.w	r3, r0, #1
 801419e:	d00a      	beq.n	80141b6 <__swsetup_r+0x9e>
 80141a0:	2300      	movs	r3, #0
 80141a2:	60a3      	str	r3, [r4, #8]
 80141a4:	6963      	ldr	r3, [r4, #20]
 80141a6:	425b      	negs	r3, r3
 80141a8:	61a3      	str	r3, [r4, #24]
 80141aa:	6923      	ldr	r3, [r4, #16]
 80141ac:	b943      	cbnz	r3, 80141c0 <__swsetup_r+0xa8>
 80141ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80141b2:	d1c4      	bne.n	801413e <__swsetup_r+0x26>
 80141b4:	bd38      	pop	{r3, r4, r5, pc}
 80141b6:	0781      	lsls	r1, r0, #30
 80141b8:	bf58      	it	pl
 80141ba:	6963      	ldrpl	r3, [r4, #20]
 80141bc:	60a3      	str	r3, [r4, #8]
 80141be:	e7f4      	b.n	80141aa <__swsetup_r+0x92>
 80141c0:	2000      	movs	r0, #0
 80141c2:	e7f7      	b.n	80141b4 <__swsetup_r+0x9c>
 80141c4:	2000010c 	.word	0x2000010c

080141c8 <memmove>:
 80141c8:	4288      	cmp	r0, r1
 80141ca:	b510      	push	{r4, lr}
 80141cc:	eb01 0402 	add.w	r4, r1, r2
 80141d0:	d902      	bls.n	80141d8 <memmove+0x10>
 80141d2:	4284      	cmp	r4, r0
 80141d4:	4623      	mov	r3, r4
 80141d6:	d807      	bhi.n	80141e8 <memmove+0x20>
 80141d8:	1e43      	subs	r3, r0, #1
 80141da:	42a1      	cmp	r1, r4
 80141dc:	d008      	beq.n	80141f0 <memmove+0x28>
 80141de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80141e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80141e6:	e7f8      	b.n	80141da <memmove+0x12>
 80141e8:	4402      	add	r2, r0
 80141ea:	4601      	mov	r1, r0
 80141ec:	428a      	cmp	r2, r1
 80141ee:	d100      	bne.n	80141f2 <memmove+0x2a>
 80141f0:	bd10      	pop	{r4, pc}
 80141f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80141f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80141fa:	e7f7      	b.n	80141ec <memmove+0x24>

080141fc <abort>:
 80141fc:	b508      	push	{r3, lr}
 80141fe:	2006      	movs	r0, #6
 8014200:	f000 f88e 	bl	8014320 <raise>
 8014204:	2001      	movs	r0, #1
 8014206:	f7ec fea9 	bl	8000f5c <_exit>

0801420a <__swhatbuf_r>:
 801420a:	b570      	push	{r4, r5, r6, lr}
 801420c:	460c      	mov	r4, r1
 801420e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014212:	2900      	cmp	r1, #0
 8014214:	b096      	sub	sp, #88	; 0x58
 8014216:	4615      	mov	r5, r2
 8014218:	461e      	mov	r6, r3
 801421a:	da0d      	bge.n	8014238 <__swhatbuf_r+0x2e>
 801421c:	89a3      	ldrh	r3, [r4, #12]
 801421e:	f013 0f80 	tst.w	r3, #128	; 0x80
 8014222:	f04f 0100 	mov.w	r1, #0
 8014226:	bf0c      	ite	eq
 8014228:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801422c:	2340      	movne	r3, #64	; 0x40
 801422e:	2000      	movs	r0, #0
 8014230:	6031      	str	r1, [r6, #0]
 8014232:	602b      	str	r3, [r5, #0]
 8014234:	b016      	add	sp, #88	; 0x58
 8014236:	bd70      	pop	{r4, r5, r6, pc}
 8014238:	466a      	mov	r2, sp
 801423a:	f000 f879 	bl	8014330 <_fstat_r>
 801423e:	2800      	cmp	r0, #0
 8014240:	dbec      	blt.n	801421c <__swhatbuf_r+0x12>
 8014242:	9901      	ldr	r1, [sp, #4]
 8014244:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8014248:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801424c:	4259      	negs	r1, r3
 801424e:	4159      	adcs	r1, r3
 8014250:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8014254:	e7eb      	b.n	801422e <__swhatbuf_r+0x24>

08014256 <__smakebuf_r>:
 8014256:	898b      	ldrh	r3, [r1, #12]
 8014258:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801425a:	079d      	lsls	r5, r3, #30
 801425c:	4606      	mov	r6, r0
 801425e:	460c      	mov	r4, r1
 8014260:	d507      	bpl.n	8014272 <__smakebuf_r+0x1c>
 8014262:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014266:	6023      	str	r3, [r4, #0]
 8014268:	6123      	str	r3, [r4, #16]
 801426a:	2301      	movs	r3, #1
 801426c:	6163      	str	r3, [r4, #20]
 801426e:	b002      	add	sp, #8
 8014270:	bd70      	pop	{r4, r5, r6, pc}
 8014272:	ab01      	add	r3, sp, #4
 8014274:	466a      	mov	r2, sp
 8014276:	f7ff ffc8 	bl	801420a <__swhatbuf_r>
 801427a:	9900      	ldr	r1, [sp, #0]
 801427c:	4605      	mov	r5, r0
 801427e:	4630      	mov	r0, r6
 8014280:	f7fe fdae 	bl	8012de0 <_malloc_r>
 8014284:	b948      	cbnz	r0, 801429a <__smakebuf_r+0x44>
 8014286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801428a:	059a      	lsls	r2, r3, #22
 801428c:	d4ef      	bmi.n	801426e <__smakebuf_r+0x18>
 801428e:	f023 0303 	bic.w	r3, r3, #3
 8014292:	f043 0302 	orr.w	r3, r3, #2
 8014296:	81a3      	strh	r3, [r4, #12]
 8014298:	e7e3      	b.n	8014262 <__smakebuf_r+0xc>
 801429a:	89a3      	ldrh	r3, [r4, #12]
 801429c:	6020      	str	r0, [r4, #0]
 801429e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80142a2:	81a3      	strh	r3, [r4, #12]
 80142a4:	9b00      	ldr	r3, [sp, #0]
 80142a6:	6163      	str	r3, [r4, #20]
 80142a8:	9b01      	ldr	r3, [sp, #4]
 80142aa:	6120      	str	r0, [r4, #16]
 80142ac:	b15b      	cbz	r3, 80142c6 <__smakebuf_r+0x70>
 80142ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80142b2:	4630      	mov	r0, r6
 80142b4:	f000 f84e 	bl	8014354 <_isatty_r>
 80142b8:	b128      	cbz	r0, 80142c6 <__smakebuf_r+0x70>
 80142ba:	89a3      	ldrh	r3, [r4, #12]
 80142bc:	f023 0303 	bic.w	r3, r3, #3
 80142c0:	f043 0301 	orr.w	r3, r3, #1
 80142c4:	81a3      	strh	r3, [r4, #12]
 80142c6:	89a3      	ldrh	r3, [r4, #12]
 80142c8:	431d      	orrs	r5, r3
 80142ca:	81a5      	strh	r5, [r4, #12]
 80142cc:	e7cf      	b.n	801426e <__smakebuf_r+0x18>

080142ce <_raise_r>:
 80142ce:	291f      	cmp	r1, #31
 80142d0:	b538      	push	{r3, r4, r5, lr}
 80142d2:	4604      	mov	r4, r0
 80142d4:	460d      	mov	r5, r1
 80142d6:	d904      	bls.n	80142e2 <_raise_r+0x14>
 80142d8:	2316      	movs	r3, #22
 80142da:	6003      	str	r3, [r0, #0]
 80142dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80142e0:	bd38      	pop	{r3, r4, r5, pc}
 80142e2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80142e4:	b112      	cbz	r2, 80142ec <_raise_r+0x1e>
 80142e6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80142ea:	b94b      	cbnz	r3, 8014300 <_raise_r+0x32>
 80142ec:	4620      	mov	r0, r4
 80142ee:	f000 f853 	bl	8014398 <_getpid_r>
 80142f2:	462a      	mov	r2, r5
 80142f4:	4601      	mov	r1, r0
 80142f6:	4620      	mov	r0, r4
 80142f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80142fc:	f000 b83a 	b.w	8014374 <_kill_r>
 8014300:	2b01      	cmp	r3, #1
 8014302:	d00a      	beq.n	801431a <_raise_r+0x4c>
 8014304:	1c59      	adds	r1, r3, #1
 8014306:	d103      	bne.n	8014310 <_raise_r+0x42>
 8014308:	2316      	movs	r3, #22
 801430a:	6003      	str	r3, [r0, #0]
 801430c:	2001      	movs	r0, #1
 801430e:	e7e7      	b.n	80142e0 <_raise_r+0x12>
 8014310:	2400      	movs	r4, #0
 8014312:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8014316:	4628      	mov	r0, r5
 8014318:	4798      	blx	r3
 801431a:	2000      	movs	r0, #0
 801431c:	e7e0      	b.n	80142e0 <_raise_r+0x12>
	...

08014320 <raise>:
 8014320:	4b02      	ldr	r3, [pc, #8]	; (801432c <raise+0xc>)
 8014322:	4601      	mov	r1, r0
 8014324:	6818      	ldr	r0, [r3, #0]
 8014326:	f7ff bfd2 	b.w	80142ce <_raise_r>
 801432a:	bf00      	nop
 801432c:	2000010c 	.word	0x2000010c

08014330 <_fstat_r>:
 8014330:	b538      	push	{r3, r4, r5, lr}
 8014332:	4d07      	ldr	r5, [pc, #28]	; (8014350 <_fstat_r+0x20>)
 8014334:	2300      	movs	r3, #0
 8014336:	4604      	mov	r4, r0
 8014338:	4608      	mov	r0, r1
 801433a:	4611      	mov	r1, r2
 801433c:	602b      	str	r3, [r5, #0]
 801433e:	f7ec fe5c 	bl	8000ffa <_fstat>
 8014342:	1c43      	adds	r3, r0, #1
 8014344:	d102      	bne.n	801434c <_fstat_r+0x1c>
 8014346:	682b      	ldr	r3, [r5, #0]
 8014348:	b103      	cbz	r3, 801434c <_fstat_r+0x1c>
 801434a:	6023      	str	r3, [r4, #0]
 801434c:	bd38      	pop	{r3, r4, r5, pc}
 801434e:	bf00      	nop
 8014350:	20015bac 	.word	0x20015bac

08014354 <_isatty_r>:
 8014354:	b538      	push	{r3, r4, r5, lr}
 8014356:	4d06      	ldr	r5, [pc, #24]	; (8014370 <_isatty_r+0x1c>)
 8014358:	2300      	movs	r3, #0
 801435a:	4604      	mov	r4, r0
 801435c:	4608      	mov	r0, r1
 801435e:	602b      	str	r3, [r5, #0]
 8014360:	f7ec fe5b 	bl	800101a <_isatty>
 8014364:	1c43      	adds	r3, r0, #1
 8014366:	d102      	bne.n	801436e <_isatty_r+0x1a>
 8014368:	682b      	ldr	r3, [r5, #0]
 801436a:	b103      	cbz	r3, 801436e <_isatty_r+0x1a>
 801436c:	6023      	str	r3, [r4, #0]
 801436e:	bd38      	pop	{r3, r4, r5, pc}
 8014370:	20015bac 	.word	0x20015bac

08014374 <_kill_r>:
 8014374:	b538      	push	{r3, r4, r5, lr}
 8014376:	4d07      	ldr	r5, [pc, #28]	; (8014394 <_kill_r+0x20>)
 8014378:	2300      	movs	r3, #0
 801437a:	4604      	mov	r4, r0
 801437c:	4608      	mov	r0, r1
 801437e:	4611      	mov	r1, r2
 8014380:	602b      	str	r3, [r5, #0]
 8014382:	f7ec fddb 	bl	8000f3c <_kill>
 8014386:	1c43      	adds	r3, r0, #1
 8014388:	d102      	bne.n	8014390 <_kill_r+0x1c>
 801438a:	682b      	ldr	r3, [r5, #0]
 801438c:	b103      	cbz	r3, 8014390 <_kill_r+0x1c>
 801438e:	6023      	str	r3, [r4, #0]
 8014390:	bd38      	pop	{r3, r4, r5, pc}
 8014392:	bf00      	nop
 8014394:	20015bac 	.word	0x20015bac

08014398 <_getpid_r>:
 8014398:	f7ec bdc8 	b.w	8000f2c <_getpid>

0801439c <_init>:
 801439c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801439e:	bf00      	nop
 80143a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143a2:	bc08      	pop	{r3}
 80143a4:	469e      	mov	lr, r3
 80143a6:	4770      	bx	lr

080143a8 <_fini>:
 80143a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80143aa:	bf00      	nop
 80143ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80143ae:	bc08      	pop	{r3}
 80143b0:	469e      	mov	lr, r3
 80143b2:	4770      	bx	lr
